{
  "type": "object",
  "properties": { "pipeline": { "readOnly": true, "$ref": "#/definitions/PipelineInfoConfig" } },
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AbortFailureActionConfig": {
      "allOf": [
        { "$ref": "#/definitions/FailureStrategyActionConfig" },
        { "type": "object", "required": ["type"], "properties": { "type": { "type": "string", "enum": ["Abort"] } } }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYaml": {
      "allOf": [
        { "$ref": "#/definitions/PatchInstruction" },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "identifier": { "type": "string" },
            "spec": { "$ref": "#/definitions/AddRuleYamlSpec" },
            "type": { "type": "string", "enum": ["AddRule"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "clauses": { "type": "array", "items": { "$ref": "#/definitions/Clause" } },
        "distribution": { "$ref": "#/definitions/DistributionYamlSpec" },
        "priority": { "type": "integer", "format": "int32" },
        "serve": { "$ref": "#/definitions/Serve" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        { "$ref": "#/definitions/PatchInstruction" },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "identifier": { "type": "string" },
            "spec": { "$ref": "#/definitions/AddSegmentToVariationTargetMapYamlSpec" },
            "type": { "type": "string", "enum": ["AddSegmentToVariationTargetMap"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["segments", "variation"],
      "properties": {
        "segments": { "type": "array", "items": { "type": "string" } },
        "variation": { "type": "string" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        { "$ref": "#/definitions/PatchInstruction" },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "identifier": { "type": "string" },
            "spec": { "$ref": "#/definitions/AddTargetsToVariationTargetMapYamlSpec" },
            "type": { "type": "string", "enum": ["AddTargetsToVariationTargetMap"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["targets", "variation"],
      "properties": {
        "targets": { "type": "array", "items": { "type": "string" } },
        "variation": { "type": "string" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApprovalStageConfig": {
      "allOf": [
        { "$ref": "#/definitions/StageInfoConfig" },
        {
          "type": "object",
          "required": ["execution"],
          "properties": { "execution": { "$ref": "#/definitions/ExecutionElementConfig" } }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": { "defaultValue": { "type": "string" }, "name": { "type": "string", "minLength": 1 } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Approvers": {
      "type": "object",
      "required": ["disallowPipelineExecutor", "minimumCount", "userGroups"],
      "properties": {
        "disallowPipelineExecutor": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
        "minimumCount": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
        "userGroups": {
          "oneOf": [
            { "type": "array", "items": { "type": "string" } },
            { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierInfoConfig": {
      "type": "object",
      "required": ["identifier", "name"],
      "properties": { "identifier": { "type": "string" }, "name": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BarrierStepInfo": {
      "allOf": [
        { "$ref": "#/definitions/StepSpecType" },
        { "type": "object", "required": ["barrierRef"], "properties": { "barrierRef": { "type": "string" } } }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "BranchBuildSpec": {
      "allOf": [
        { "$ref": "#/definitions/BuildSpec" },
        { "type": "object", "required": ["branch"], "properties": { "branch": { "type": "string" } } }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Build": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": { "type": { "type": "string", "enum": ["branch", "tag", "PR"] } },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "PR" } } },
          "then": { "properties": { "spec": { "$ref": "#/definitions/PRBuildSpec" } } }
        },
        {
          "if": { "properties": { "type": { "const": "branch" } } },
          "then": { "properties": { "spec": { "$ref": "#/definitions/BranchBuildSpec" } } }
        },
        {
          "if": { "properties": { "type": { "const": "tag" } } },
          "then": { "properties": { "spec": { "$ref": "#/definitions/TagBuildSpec" } } }
        }
      ]
    },
    "BuildSpec": { "type": "object", "$schema": "http://json-schema.org/draft-07/schema#" },
    "CIProperties": {
      "type": "object",
      "properties": { "codebase": { "$ref": "#/definitions/CodeBase" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Clause": {
      "type": "object",
      "required": ["attribute", "id", "negate", "op", "values"],
      "properties": {
        "attribute": { "type": "string" },
        "id": { "type": "string" },
        "negate": { "type": "boolean" },
        "op": { "type": "string" },
        "values": { "type": "array", "items": { "type": "string" } }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": ["op", "values"],
      "properties": {
        "attribute": { "type": "string" },
        "op": { "type": "string" },
        "values": { "type": "array", "items": { "type": "string" } }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CodeBase": {
      "type": "object",
      "required": ["build", "connectorRef"],
      "properties": {
        "build": { "oneOf": [{ "$ref": "#/definitions/Build" }, { "type": "string" }] },
        "connectorRef": { "type": "string" },
        "depth": { "type": "integer", "format": "int32" },
        "prCloneStrategy": { "type": "string", "enum": ["MergeCommit", "SourceBranch"] },
        "repoName": { "type": "string" },
        "resources": { "$ref": "#/definitions/ContainerResource" },
        "sslVerify": { "type": "boolean" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Condition": {
      "type": "object",
      "required": ["key", "operator", "value"],
      "properties": {
        "key": { "type": "string" },
        "operator": { "type": "string", "enum": ["equals", "not equals", "in", "not in"] },
        "value": { "type": "string" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ContainerResource": {
      "type": "object",
      "required": ["limits"],
      "properties": { "limits": { "$ref": "#/definitions/Limits" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": { "type": { "type": "string", "enum": ["Jexl", "KeyValues"] } },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "Jexl" } } },
          "then": { "properties": { "spec": { "$ref": "#/definitions/JexlCriteriaSpec" } } }
        },
        {
          "if": { "properties": { "type": { "const": "KeyValues" } } },
          "then": { "properties": { "spec": { "$ref": "#/definitions/KeyValuesCriteriaSpec" } } }
        }
      ]
    },
    "Distribution": {
      "type": "object",
      "required": ["bucketBy", "variations"],
      "properties": {
        "bucketBy": { "type": "string" },
        "variations": { "type": "array", "items": { "$ref": "#/definitions/WeightedVariation" } }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": ["bucketBy"],
      "properties": {
        "bucketBy": { "type": "string" },
        "clauses": { "type": "array", "items": { "$ref": "#/definitions/ClauseYamlSpec" } },
        "variations": { "type": "array", "items": { "$ref": "#/definitions/VariationYamlSpec" } }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": ["steps"],
      "properties": {
        "rollbackSteps": { "type": "array", "items": { "$ref": "#/definitions/ExecutionWrapperConfig" } },
        "steps": {
          "type": "array",
          "items": { "$ref": "#/definitions/ExecutionWrapperConfig" },
          "maxItems": 2147483647,
          "minItems": 1
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "connectorRef": { "type": "string" },
        "host": { "type": "string" },
        "workingDirectory": { "type": "string" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "parallel": { "$ref": "#/definitions/ParallelStepElementConfig" },
        "step": { "$ref": "#/definitions/StepElementConfig" },
        "stepGroup": { "$ref": "#/definitions/StepGroupElementConfig" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": ["type"],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "ManualIntervention"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": ["onFailure"],
      "properties": { "onFailure": { "$ref": "#/definitions/OnFailureConfig" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FeatureFlagStageConfig": {
      "allOf": [{ "$ref": "#/definitions/StageInfoConfig" }, { "type": "object", "properties": {} }],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        { "$ref": "#/definitions/StepSpecType" },
        {
          "type": "object",
          "required": ["environment", "feature", "instructions"],
          "properties": {
            "environment": { "type": "string" },
            "feature": { "type": "string" },
            "instructions": {
              "oneOf": [
                { "type": "array", "items": { "$ref": "#/definitions/PatchInstruction" } },
                { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
              ]
            }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "FlowControlConfig": {
      "type": "object",
      "properties": { "barriers": { "type": "array", "items": { "$ref": "#/definitions/BarrierInfoConfig" } } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        { "$ref": "#/definitions/StepSpecType" },
        {
          "type": "object",
          "required": ["approvalMessage", "approvers", "includePipelineExecutionHistory"],
          "properties": {
            "approvalMessage": { "type": "string" },
            "approverInputs": { "type": "array", "items": { "$ref": "#/definitions/ApproverInputInfo" } },
            "approvers": { "$ref": "#/definitions/Approvers" },
            "includePipelineExecutionHistory": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HoldingScope": {
      "type": "object",
      "required": ["nodeSetupId", "scope"],
      "properties": { "nodeSetupId": { "type": "string" }, "scope": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": { "key": { "type": "string" }, "value": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "HttpStepInfo": {
      "allOf": [
        { "$ref": "#/definitions/StepSpecType" },
        {
          "type": "object",
          "required": ["method", "url"],
          "properties": {
            "assertion": { "type": "string" },
            "delegateSelectors": {
              "oneOf": [
                { "type": "array", "items": { "type": "string" } },
                { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
              ]
            },
            "headers": { "type": "array", "items": { "$ref": "#/definitions/HttpHeaderConfig" } },
            "method": { "type": "string" },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  { "$ref": "#/definitions/NumberNGVariable" },
                  { "$ref": "#/definitions/SecretNGVariable" },
                  { "$ref": "#/definitions/StringNGVariable" }
                ]
              }
            },
            "requestBody": { "type": "string" },
            "url": { "type": "string" }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        { "$ref": "#/definitions/FailureStrategyActionConfig" },
        { "type": "object", "required": ["type"], "properties": { "type": { "type": "string", "enum": ["Ignore"] } } }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "parameters": { "type": "string" },
        "validatorType": { "type": "string", "enum": ["ALLOWED_VALUES", "REGEX"] }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JexlCriteriaSpec": {
      "allOf": [
        { "$ref": "#/definitions/CriteriaSpec" },
        { "type": "object", "required": ["expression"], "properties": { "expression": { "type": "string" } } }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        { "$ref": "#/definitions/StepSpecType" },
        {
          "type": "object",
          "required": ["approvalCriteria", "connectorRef", "issueKey"],
          "properties": {
            "approvalCriteria": { "$ref": "#/definitions/CriteriaSpecWrapper" },
            "connectorRef": { "type": "string" },
            "delegateSelectors": {
              "oneOf": [
                { "type": "array", "items": { "type": "string" } },
                { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
              ]
            },
            "issueKey": { "type": "string" },
            "rejectionCriteria": { "$ref": "#/definitions/CriteriaSpecWrapper" }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraCreateStepInfo": {
      "allOf": [
        { "$ref": "#/definitions/StepSpecType" },
        {
          "type": "object",
          "required": ["connectorRef", "issueType", "projectKey"],
          "properties": {
            "connectorRef": { "type": "string" },
            "delegateSelectors": {
              "oneOf": [
                { "type": "array", "items": { "type": "string" } },
                { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
              ]
            },
            "fields": { "type": "array", "items": { "$ref": "#/definitions/JiraField" } },
            "issueType": { "type": "string" },
            "projectKey": { "type": "string" }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraField": {
      "type": "object",
      "required": ["value"],
      "properties": { "name": { "type": "string", "minLength": 1 }, "value": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        { "$ref": "#/definitions/StepSpecType" },
        {
          "type": "object",
          "required": ["connectorRef", "issueKey"],
          "properties": {
            "connectorRef": { "type": "string" },
            "delegateSelectors": {
              "oneOf": [
                { "type": "array", "items": { "type": "string" } },
                { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
              ]
            },
            "fields": { "type": "array", "items": { "$ref": "#/definitions/JiraField" } },
            "issueKey": { "type": "string" },
            "transitionTo": { "$ref": "#/definitions/TransitionTo" }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "JsonNode": {
      "type": "object",
      "properties": {
        "array": { "type": "boolean" },
        "bigDecimal": { "type": "boolean" },
        "bigInteger": { "type": "boolean" },
        "binary": { "type": "boolean" },
        "boolean": { "type": "boolean" },
        "containerNode": { "type": "boolean" },
        "double": { "type": "boolean" },
        "float": { "type": "boolean" },
        "floatingPointNumber": { "type": "boolean" },
        "int": { "type": "boolean" },
        "integralNumber": { "type": "boolean" },
        "long": { "type": "boolean" },
        "missingNode": { "type": "boolean" },
        "nodeType": {
          "type": "string",
          "enum": ["ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING"]
        },
        "null": { "type": "boolean" },
        "number": { "type": "boolean" },
        "object": { "type": "boolean" },
        "pojo": { "type": "boolean" },
        "short": { "type": "boolean" },
        "textual": { "type": "boolean" },
        "valueNode": { "type": "boolean" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        { "$ref": "#/definitions/CriteriaSpec" },
        {
          "type": "object",
          "required": ["conditions"],
          "properties": {
            "conditions": { "type": "array", "items": { "$ref": "#/definitions/Condition" } },
            "matchAnyCondition": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Limits": {
      "type": "object",
      "properties": {
        "cpu": { "oneOf": [{ "type": "string" }, { "type": "number" }] },
        "memory": { "type": "string", "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)$" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": ["onTimeout", "timeout"],
      "properties": { "onTimeout": { "$ref": "#/definitions/OnTimeoutConfig" }, "timeout": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        { "$ref": "#/definitions/FailureStrategyActionConfig" },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "spec": { "readOnly": true, "$ref": "#/definitions/ManualFailureSpecConfig" },
            "type": { "type": "string", "enum": ["ManualIntervention"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        { "$ref": "#/definitions/FailureStrategyActionConfig" },
        {
          "type": "object",
          "required": ["type"],
          "properties": { "type": { "type": "string", "enum": ["MarkAsSuccess"] } }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGProperties": {
      "type": "object",
      "properties": { "ci": { "$ref": "#/definitions/CIProperties" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": { "type": "string" },
        "metadata": { "type": "string" },
        "name": { "type": "string" },
        "required": { "type": "boolean" },
        "type": { "type": "string", "enum": ["String", "Number", "Secret"] }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NotificationChannelWrapper": {
      "type": "object",
      "properties": { "spec": { "$ref": "#/definitions/PmsNotificationChannel" }, "type": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NotificationRules": {
      "type": "object",
      "properties": {
        "enabled": { "type": "boolean" },
        "name": { "type": "string" },
        "notificationMethod": { "$ref": "#/definitions/ParameterFieldNotificationChannelWrapper" },
        "pipelineEvents": { "type": "array", "items": { "$ref": "#/definitions/PipelineEvent" } }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "NumberNGVariable": {
      "allOf": [
        { "$ref": "#/definitions/NGVariable" },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "default": { "type": "number", "format": "double" },
            "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
            "type": { "type": "string", "enum": ["Number"] },
            "value": { "oneOf": [{ "type": "number", "format": "double" }, { "type": "string" }] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnFailureConfig": {
      "type": "object",
      "required": ["action", "errors"],
      "properties": {
        "action": {
          "oneOf": [
            { "$ref": "#/definitions/AbortFailureActionConfig" },
            { "$ref": "#/definitions/IgnoreFailureActionConfig" },
            { "$ref": "#/definitions/ManualInterventionFailureActionConfig" },
            { "$ref": "#/definitions/MarkAsSuccessFailureActionConfig" },
            { "$ref": "#/definitions/RetryFailureActionConfig" },
            { "$ref": "#/definitions/StageRollbackFailureActionConfig" },
            { "$ref": "#/definitions/StepGroupFailureActionConfig" }
          ]
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning"
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "oneOf": [
            { "$ref": "#/definitions/AbortFailureActionConfig" },
            { "$ref": "#/definitions/IgnoreFailureActionConfig" },
            { "$ref": "#/definitions/ManualInterventionFailureActionConfig" },
            { "$ref": "#/definitions/MarkAsSuccessFailureActionConfig" },
            { "$ref": "#/definitions/RetryFailureActionConfig" },
            { "$ref": "#/definitions/StageRollbackFailureActionConfig" },
            { "$ref": "#/definitions/StepGroupFailureActionConfig" }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "oneOf": [
            { "$ref": "#/definitions/AbortFailureActionConfig" },
            { "$ref": "#/definitions/IgnoreFailureActionConfig" },
            { "$ref": "#/definitions/ManualInterventionFailureActionConfig" },
            { "$ref": "#/definitions/MarkAsSuccessFailureActionConfig" },
            { "$ref": "#/definitions/RetryFailureActionConfig" },
            { "$ref": "#/definitions/StageRollbackFailureActionConfig" },
            { "$ref": "#/definitions/StepGroupFailureActionConfig" }
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PRBuildSpec": {
      "allOf": [
        { "$ref": "#/definitions/BuildSpec" },
        { "type": "object", "required": ["number"], "properties": { "number": { "type": "string" } } }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParallelStageElementConfig": {
      "type": "array",
      "items": { "$ref": "#/definitions/StageElementWrapperConfig" },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParallelStepElementConfig": {
      "type": "array",
      "items": { "$ref": "#/definitions/ExecutionWrapperConfig" },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "expression": { "type": "boolean" },
        "expressionValue": { "type": "string" },
        "inputSetValidator": { "$ref": "#/definitions/InputSetValidator" },
        "jsonResponseField": { "type": "boolean" },
        "responseField": { "type": "string" },
        "typeString": { "type": "boolean" },
        "value": { "type": "object" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ParameterFieldNotificationChannelWrapper": {
      "type": "object",
      "properties": {
        "expression": { "type": "boolean" },
        "expressionValue": { "type": "string" },
        "inputSetValidator": { "$ref": "#/definitions/InputSetValidator" },
        "jsonResponseField": { "type": "boolean" },
        "responseField": { "type": "string" },
        "typeString": { "type": "boolean" },
        "value": { "$ref": "#/definitions/NotificationChannelWrapper" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "SetDefaultVariations",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineConfig": {
      "type": "object",
      "properties": { "pipeline": { "readOnly": true, "$ref": "#/definitions/PipelineInfoConfig" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineEvent": {
      "type": "object",
      "properties": {
        "forStages": { "type": "array", "items": { "type": "string" } },
        "type": {
          "type": "string",
          "enum": [
            "AllEvents",
            "PipelineStart",
            "PipelineSuccess",
            "PipelineFailed",
            "PipelineEnd",
            "PipelinePaused",
            "StageSuccess",
            "StageFailed",
            "StageStart",
            "StepFailed"
          ]
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PipelineInfoConfig": {
      "type": "object",
      "required": ["identifier", "name", "orgIdentifier", "projectIdentifier"],
      "properties": {
        "description": { "type": "string" },
        "flowControl": { "$ref": "#/definitions/FlowControlConfig" },
        "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
        "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
        "notificationRules": { "type": "array", "items": { "$ref": "#/definitions/NotificationRules" } },
        "orgIdentifier": { "type": "string", "const": "default" },
        "projectIdentifier": { "type": "string", "const": "CI_Sanity" },
        "properties": { "$ref": "#/definitions/NGProperties" },
        "stages": { "type": "array", "items": { "$ref": "#/definitions/StageElementWrapperConfig" } },
        "tags": { "type": "object", "additionalProperties": { "type": "string" } },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*))$"
        },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/NumberNGVariable" },
              { "$ref": "#/definitions/SecretNGVariable" },
              { "$ref": "#/definitions/StringNGVariable" }
            ]
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PmsEmailChannel": {
      "allOf": [
        { "$ref": "#/definitions/PmsNotificationChannel" },
        {
          "type": "object",
          "properties": {
            "recipients": { "type": "array", "items": { "type": "string" } },
            "userGroups": { "type": "array", "items": { "type": "string" } }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PmsMSTeamChannel": {
      "allOf": [
        { "$ref": "#/definitions/PmsNotificationChannel" },
        {
          "type": "object",
          "properties": {
            "msTeamKeys": { "type": "array", "items": { "type": "string" } },
            "userGroups": { "type": "array", "items": { "type": "string" } }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PmsNotificationChannel": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PmsPagerDutyChannel": {
      "allOf": [
        { "$ref": "#/definitions/PmsNotificationChannel" },
        {
          "type": "object",
          "properties": {
            "integrationKey": { "type": "string" },
            "userGroups": { "type": "array", "items": { "type": "string" } }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PmsSlackChannel": {
      "allOf": [
        { "$ref": "#/definitions/PmsNotificationChannel" },
        {
          "type": "object",
          "properties": {
            "userGroups": { "type": "array", "items": { "type": "string" } },
            "webhookUrl": { "type": "string" }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        { "$ref": "#/definitions/PatchInstruction" },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "identifier": { "type": "string" },
            "spec": { "$ref": "#/definitions/RemoveSegmentToVariationTargetMapYamlSpec" },
            "type": { "type": "string", "enum": ["RemoveSegmentToVariationTargetMap"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["segments", "variation"],
      "properties": {
        "segments": { "type": "array", "items": { "type": "string" } },
        "variation": { "type": "string" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        { "$ref": "#/definitions/PatchInstruction" },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "identifier": { "type": "string" },
            "spec": { "$ref": "#/definitions/RemoveTargetsToVariationTargetMapYamlSpec" },
            "type": { "type": "string", "enum": ["RemoveTargetsToVariationTargetMap"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["targets", "variation"],
      "properties": {
        "targets": { "type": "array", "items": { "type": "string" } },
        "variation": { "type": "string" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ResourceConstraintStepInfo": {
      "allOf": [
        { "$ref": "#/definitions/StepSpecType" },
        {
          "type": "object",
          "required": ["acquireMode", "holdingScope", "name", "permits", "resourceUnit"],
          "properties": {
            "acquireMode": { "type": "string", "enum": ["ENSURE", "ACCUMULATE"] },
            "holdingScope": { "$ref": "#/definitions/HoldingScope" },
            "name": { "type": "string" },
            "permits": { "type": "integer", "format": "int32" },
            "resourceUnit": { "type": "string" }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureActionConfig": {
      "allOf": [
        { "$ref": "#/definitions/FailureStrategyActionConfig" },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "spec": { "readOnly": true, "$ref": "#/definitions/RetryFailureSpecConfig" },
            "type": { "type": "string", "enum": ["Retry"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": ["onRetryFailure", "retryCount", "retryIntervals"],
      "properties": {
        "onRetryFailure": { "$ref": "#/definitions/OnRetryFailureConfig" },
        "retryCount": { "type": "integer", "format": "int32" },
        "retryIntervals": { "type": "array", "items": { "type": "string" }, "maxItems": 2147483647, "minItems": 1 }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SecretNGVariable": {
      "allOf": [
        { "$ref": "#/definitions/NGVariable" },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "default": { "type": "string" },
            "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
            "type": { "type": "string", "enum": ["Secret"] },
            "value": { "type": "string" }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "Serve": {
      "type": "object",
      "properties": { "distribution": { "$ref": "#/definitions/Distribution" }, "variation": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYaml": {
      "allOf": [
        { "$ref": "#/definitions/PatchInstruction" },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "identifier": { "type": "string" },
            "spec": { "$ref": "#/definitions/SetDefaultVariationsYamlSpec" },
            "type": { "type": "string", "enum": ["SetDefaultVariations"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetDefaultVariationsYamlSpec": {
      "type": "object",
      "required": ["off", "on"],
      "properties": { "off": { "type": "string" }, "on": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        { "$ref": "#/definitions/PatchInstruction" },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "identifier": { "type": "string" },
            "spec": { "$ref": "#/definitions/SetFeatureFlagStateYamlSpec" },
            "type": { "type": "string", "enum": ["SetFeatureFlagState"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": ["state"],
      "properties": { "state": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYaml": {
      "allOf": [
        { "$ref": "#/definitions/PatchInstruction" },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "identifier": { "type": "string" },
            "spec": { "$ref": "#/definitions/SetOffVariationYamlSpec" },
            "type": { "type": "string", "enum": ["SetOffVariation"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": ["variation"],
      "properties": { "variation": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYaml": {
      "allOf": [
        { "$ref": "#/definitions/PatchInstruction" },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "identifier": { "type": "string" },
            "spec": { "$ref": "#/definitions/SetOnVariationYamlSpec" },
            "type": { "type": "string", "enum": ["SetOnVariation"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": ["variation"],
      "properties": { "variation": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": { "type": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptInlineSource": {
      "allOf": [
        { "$ref": "#/definitions/ShellScriptBaseSource" },
        { "type": "object", "properties": { "script": { "type": "string" } } }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": { "type": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "Inline" } } },
          "then": { "properties": { "spec": { "$ref": "#/definitions/ShellScriptInlineSource" } } }
        }
      ]
    },
    "ShellScriptStepInfo": {
      "allOf": [
        { "$ref": "#/definitions/StepSpecType" },
        {
          "type": "object",
          "required": ["onDelegate", "shell", "source"],
          "properties": {
            "delegateSelectors": {
              "oneOf": [
                { "type": "array", "items": { "type": "string" } },
                { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
              ]
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  { "$ref": "#/definitions/NumberNGVariable" },
                  { "$ref": "#/definitions/SecretNGVariable" },
                  { "$ref": "#/definitions/StringNGVariable" }
                ]
              }
            },
            "executionTarget": { "$ref": "#/definitions/ExecutionTarget" },
            "metadata": { "type": "string" },
            "onDelegate": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
            "outputVariables": {
              "type": "array",
              "items": {
                "oneOf": [
                  { "$ref": "#/definitions/NumberNGVariable" },
                  { "$ref": "#/definitions/SecretNGVariable" },
                  { "$ref": "#/definitions/StringNGVariable" }
                ]
              }
            },
            "shell": { "type": "string", "enum": ["Bash", "PowerShell"] },
            "source": { "$ref": "#/definitions/ShellScriptSourceWrapper" }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageElementConfig": {
      "type": "object",
      "required": ["identifier", "name", "type"],
      "properties": {
        "description": { "type": "string" },
        "failureStrategies": { "type": "array", "items": { "$ref": "#/definitions/FailureStrategyConfig" } },
        "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
        "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
        "tags": { "type": "object", "additionalProperties": { "type": "string" } },
        "type": { "type": "string", "enum": ["CI", "Deployment", "FeatureFlag", "Approval"] },
        "variables": {
          "type": "array",
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/NumberNGVariable" },
              { "$ref": "#/definitions/SecretNGVariable" },
              { "$ref": "#/definitions/StringNGVariable" }
            ]
          }
        },
        "when": { "$ref": "#/definitions/StageWhenCondition" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "CI" } } },
          "then": { "properties": { "spec": { "$ref": "#/definitions/ci/IntegrationStageConfig" } } }
        },
        {
          "if": { "properties": { "type": { "const": "Deployment" } } },
          "then": { "properties": { "spec": { "$ref": "#/definitions/cd/DeploymentStageConfig" } } }
        },
        {
          "if": { "properties": { "type": { "const": "Approval" } } },
          "then": { "properties": { "spec": { "$ref": "#/definitions/approval/ApprovalStageConfig" } } }
        },
        {
          "if": { "properties": { "type": { "const": "FeatureFlag" } } },
          "then": { "properties": { "spec": { "$ref": "#/definitions/cf/FeatureFlagStageConfig" } } }
        }
      ]
    },
    "StageElementWrapperConfig": {
      "type": "object",
      "properties": {
        "parallel": { "$ref": "#/definitions/ParallelStageElementConfig" },
        "stage": {
          "$ref": "#/definitions/StageElementConfig",
          "description": "A stage is a subset of a Pipeline that contains the logic to perform one major segment of the Pipeline process. Stages are based on the different milestones of your Pipeline, such as building, approving, and delivering. Learn more https://ngdocs.harness.io/article/2chyf1acil-add-a-stage"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageInfoConfig": {
      "type": "object",
      "discriminator": "type",
      "properties": { "execution": { "$ref": "#/definitions/ExecutionElementConfig" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        { "$ref": "#/definitions/FailureStrategyActionConfig" },
        {
          "type": "object",
          "required": ["type"],
          "properties": { "type": { "type": "string", "enum": ["StageRollback"] } }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StageWhenCondition": {
      "type": "object",
      "required": ["pipelineStatus"],
      "properties": {
        "condition": { "type": "string" },
        "pipelineStatus": { "type": "string", "enum": ["Success", "Failure", "All"] }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepElementConfig": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "oneOf": [
        {
          "type": "object",
          "required": ["identifier", "name", "type"],
          "properties": {
            "description": { "type": "string" },
            "failureStrategies": { "type": "array", "items": { "$ref": "#/definitions/FailureStrategyConfig" } },
            "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
            "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
            "spec": { "$ref": "#/definitions/StepSpecType" },
            "timeout": {
              "type": "string",
              "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*))$"
            },
            "type": { "type": "string" },
            "when": { "$ref": "#/definitions/StepWhenCondition" }
          },
          "additionalProperties": false,
          "allOf": [
            {
              "if": { "properties": { "type": { "const": "Barrier" } } },
              "then": { "properties": { "spec": { "$ref": "#/definitions/BarrierStepInfo" } } }
            },
            {
              "if": { "properties": { "type": { "const": "FlagConfiguration" } } },
              "then": { "properties": { "spec": { "$ref": "#/definitions/FlagConfigurationStepInfo" } } }
            },
            {
              "if": { "properties": { "type": { "const": "HarnessApproval" } } },
              "then": { "properties": { "spec": { "$ref": "#/definitions/HarnessApprovalStepInfo" } } }
            },
            {
              "if": { "properties": { "type": { "const": "Http" } } },
              "then": { "properties": { "spec": { "$ref": "#/definitions/HttpStepInfo" } } }
            },
            {
              "if": { "properties": { "type": { "const": "JiraApproval" } } },
              "then": { "properties": { "spec": { "$ref": "#/definitions/JiraApprovalStepInfo" } } }
            },
            {
              "if": { "properties": { "type": { "const": "JiraCreate" } } },
              "then": { "properties": { "spec": { "$ref": "#/definitions/JiraCreateStepInfo" } } }
            },
            {
              "if": { "properties": { "type": { "const": "JiraUpdate" } } },
              "then": { "properties": { "spec": { "$ref": "#/definitions/JiraUpdateStepInfo" } } }
            },
            {
              "if": { "properties": { "type": { "const": "ShellScript" } } },
              "then": { "properties": { "spec": { "$ref": "#/definitions/ShellScriptStepInfo" } } }
            }
          ]
        },
        {
          "type": "object",
          "required": ["identifier", "name"],
          "properties": {
            "description": { "type": "string" },
            "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
            "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
            "template": { "$ref": "#/definitions/TemplateLinkConfig" }
          },
          "additionalProperties": false
        }
      ]
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": ["identifier", "steps"],
      "properties": {
        "failureStrategies": { "type": "array", "items": { "$ref": "#/definitions/FailureStrategyConfig" } },
        "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
        "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
        "steps": {
          "type": "array",
          "items": { "$ref": "#/definitions/ExecutionWrapperConfig" },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "when": { "$ref": "#/definitions/StepWhenCondition" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        { "$ref": "#/definitions/FailureStrategyActionConfig" },
        {
          "type": "object",
          "required": ["type"],
          "properties": { "type": { "type": "string", "enum": ["StepGroupRollback"] } }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type",
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": ["stageStatus"],
      "properties": {
        "condition": { "type": "string" },
        "stageStatus": { "type": "string", "enum": ["Success", "Failure", "All"] }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "StringNGVariable": {
      "allOf": [
        { "$ref": "#/definitions/NGVariable" },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "default": { "type": "string" },
            "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
            "type": { "type": "string", "enum": ["String"] },
            "value": { "type": "string" }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TagBuildSpec": {
      "allOf": [
        { "$ref": "#/definitions/BuildSpec" },
        { "type": "object", "required": ["tag"], "properties": { "tag": { "type": "string" } } }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": ["templateRef"],
      "properties": {
        "templateInputs": { "$ref": "#/definitions/JsonNode" },
        "templateRef": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
        "versionLabel": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "TransitionTo": {
      "type": "object",
      "required": ["status"],
      "properties": { "status": { "type": "string" }, "transitionName": { "type": "string" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYaml": {
      "allOf": [
        { "$ref": "#/definitions/PatchInstruction" },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "identifier": { "type": "string" },
            "spec": { "$ref": "#/definitions/UpdateRuleYamlSpec" },
            "type": { "type": "string", "enum": ["UpdateRule"] }
          }
        }
      ],
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": ["bucketBy", "ruleID"],
      "properties": {
        "bucketBy": { "type": "string" },
        "ruleID": { "type": "string" },
        "serve": { "$ref": "#/definitions/Serve" },
        "variations": { "type": "array", "items": { "$ref": "#/definitions/VariationYamlSpec" } }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": ["variation", "weight"],
      "properties": { "variation": { "type": "string" }, "weight": { "type": "integer", "format": "int32" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "WeightedVariation": {
      "type": "object",
      "required": ["variation", "weight"],
      "properties": { "variation": { "type": "string" }, "weight": { "type": "integer", "format": "int32" } },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "PMSStepInfo": { "type": "object", "$schema": "http://json-schema.org/draft-07/schema#" },
    "cd": {
      "AbortFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["Abort"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddRuleYaml": {
        "allOf": [
          { "$ref": "#/definitions/cd/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cd/AddRuleYamlSpec" },
              "type": { "type": "string", "enum": ["AddRule"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddRuleYamlSpec": {
        "type": "object",
        "properties": {
          "clauses": { "type": "array", "items": { "$ref": "#/definitions/cd/Clause" } },
          "distribution": { "$ref": "#/definitions/cd/DistributionYamlSpec" },
          "priority": { "type": "integer", "format": "int32" },
          "serve": { "$ref": "#/definitions/cd/Serve" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddSegmentToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/cd/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cd/AddSegmentToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["AddSegmentToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddSegmentToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["segments", "variation"],
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddTargetsToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/cd/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cd/AddTargetsToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["AddTargetsToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddTargetsToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["targets", "variation"],
        "properties": {
          "targets": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ApproverInputInfo": {
        "type": "object",
        "properties": { "defaultValue": { "type": "string" }, "name": { "type": "string", "minLength": 1 } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Approvers": {
        "type": "object",
        "required": ["disallowPipelineExecutor", "minimumCount", "userGroups"],
        "properties": {
          "disallowPipelineExecutor": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
          "minimumCount": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
          "userGroups": {
            "oneOf": [
              { "type": "array", "items": { "type": "string" } },
              { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ArtifactConfig": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ArtifactListConfig": {
        "type": "object",
        "properties": {
          "metadata": { "type": "string" },
          "primary": { "$ref": "#/definitions/cd/PrimaryArtifact" },
          "sidecars": { "type": "array", "items": { "$ref": "#/definitions/cd/SidecarArtifactWrapper" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ArtifactOverrideSetWrapper": {
        "type": "object",
        "properties": { "overrideSet": { "$ref": "#/definitions/cd/ArtifactOverrideSets" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ArtifactOverrideSets": {
        "type": "object",
        "properties": {
          "artifacts": { "$ref": "#/definitions/cd/ArtifactListConfig" },
          "identifier": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "BarrierStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          { "type": "object", "required": ["barrierRef"], "properties": { "barrierRef": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "BitbucketStore": {
        "allOf": [
          { "$ref": "#/definitions/cd/StoreConfig" },
          {
            "type": "object",
            "required": ["connectorRef", "gitFetchType"],
            "properties": {
              "branch": { "type": "string" },
              "commitId": { "type": "string" },
              "connectorRef": { "type": "string" },
              "folderPath": { "type": "string" },
              "gitFetchType": { "type": "string", "enum": ["Branch", "Commit"] },
              "metadata": { "type": "string" },
              "paths": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "repoName": { "type": "string" }
            }
          },
          { "oneOf": [{ "required": ["folderPath"] }, { "required": ["paths"] }] },
          { "oneOf": [{ "required": ["commitId"] }, { "required": ["branch"] }] }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Clause": {
        "type": "object",
        "required": ["attribute", "id", "negate", "op", "values"],
        "properties": {
          "attribute": { "type": "string" },
          "id": { "type": "string" },
          "negate": { "type": "boolean" },
          "op": { "type": "string" },
          "values": { "type": "array", "items": { "type": "string" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ClauseYamlSpec": {
        "type": "object",
        "required": ["op", "values"],
        "properties": {
          "attribute": { "type": "string" },
          "op": { "type": "string" },
          "values": { "type": "array", "items": { "type": "string" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Condition": {
        "type": "object",
        "required": ["key", "operator", "value"],
        "properties": {
          "key": { "type": "string" },
          "operator": { "type": "string", "enum": ["equals", "not equals", "in", "not in"] },
          "value": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CountInstanceSelection": {
        "allOf": [
          { "$ref": "#/definitions/cd/InstanceSelectionBase" },
          {
            "type": "object",
            "properties": {
              "count": {
                "oneOf": [
                  { "$ref": "#/definitions/cd/ParameterFieldString" },
                  { "type": "string" },
                  { "type": "integer" }
                ]
              }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CriteriaSpec": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CriteriaSpecWrapper": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": { "type": { "type": "string", "enum": ["Jexl", "KeyValues"] } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Jexl" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/JexlCriteriaSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "KeyValues" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/KeyValuesCriteriaSpec" } } }
          }
        ]
      },
      "DeleteManifestPathSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/DeleteResourcesBaseSpec" },
          {
            "type": "object",
            "properties": {
              "allManifestPaths": { "type": "boolean" },
              "manifestPaths": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "DeleteReleaseNameSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/DeleteResourcesBaseSpec" },
          {
            "type": "object",
            "properties": { "deleteNamespace": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "DeleteResourceNameSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/DeleteResourcesBaseSpec" },
          {
            "type": "object",
            "properties": {
              "resourceNames": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "DeleteResourcesBaseSpec": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "DeleteResourcesWrapper": {
        "type": "object",
        "properties": { "type": { "type": "string", "enum": ["ResourceName", "ReleaseName", "ManifestPath"] } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "ManifestPath" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/DeleteManifestPathSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "ReleaseName" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/DeleteReleaseNameSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "ResourceName" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/DeleteResourceNameSpec" } } }
          }
        ]
      },
      "DeploymentStageConfig": {
        "type": "object",
        "required": ["execution", "infrastructure", "serviceConfig"],
        "properties": {
          "execution": { "$ref": "#/definitions/cd/ExecutionElementConfig" },
          "infrastructure": { "$ref": "#/definitions/cd/PipelineInfrastructure" },
          "serviceConfig": { "$ref": "#/definitions/cd/ServiceConfig" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Distribution": {
        "type": "object",
        "required": ["bucketBy", "variations"],
        "properties": {
          "bucketBy": { "type": "string" },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/cd/WeightedVariation" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "DistributionYamlSpec": {
        "type": "object",
        "required": ["bucketBy"],
        "properties": {
          "bucketBy": { "type": "string" },
          "clauses": { "type": "array", "items": { "$ref": "#/definitions/cd/ClauseYamlSpec" } },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/cd/VariationYamlSpec" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "DockerHubArtifactConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/ArtifactConfig" },
          {
            "type": "object",
            "required": ["connectorRef", "imagePath"],
            "properties": {
              "connectorRef": { "type": "string" },
              "imagePath": { "type": "string" },
              "metadata": { "type": "string" },
              "tag": { "type": "string" },
              "tagRegex": { "type": "string" }
            }
          },
          { "oneOf": [{ "required": ["tagRegex"] }, { "required": ["tag"] }] }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "EcrArtifactConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/ArtifactConfig" },
          {
            "type": "object",
            "required": ["connectorRef", "imagePath", "region"],
            "properties": {
              "connectorRef": { "type": "string" },
              "imagePath": { "type": "string" },
              "metadata": { "type": "string" },
              "region": { "type": "string" },
              "tag": { "type": "string" },
              "tagRegex": { "type": "string" }
            }
          },
          { "oneOf": [{ "required": ["tagRegex"] }, { "required": ["tag"] }] }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "EnvironmentYaml": {
        "type": "object",
        "required": ["identifier", "name", "type"],
        "properties": {
          "description": { "type": "string" },
          "identifier": { "type": "string" },
          "name": { "type": "string" },
          "tags": { "type": "object", "additionalProperties": { "type": "string" } },
          "type": { "type": "string", "enum": ["PreProduction", "Production"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionElementConfig": {
        "type": "object",
        "required": ["steps"],
        "properties": {
          "rollbackSteps": { "type": "array", "items": { "$ref": "#/definitions/cd/ExecutionWrapperConfig" } },
          "steps": {
            "type": "array",
            "items": { "$ref": "#/definitions/cd/ExecutionWrapperConfig" },
            "maxItems": 2147483647,
            "minItems": 1
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionTarget": {
        "type": "object",
        "properties": {
          "connectorRef": { "type": "string" },
          "host": { "type": "string" },
          "workingDirectory": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionWrapperConfig": {
        "type": "object",
        "properties": {
          "parallel": { "$ref": "#/definitions/cd/ParallelStepElementConfig" },
          "step": { "$ref": "#/definitions/cd/StepElementConfig" },
          "stepGroup": { "$ref": "#/definitions/cd/StepGroupElementConfig" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FailureStrategyActionConfig": {
        "type": "object",
        "required": ["type"],
        "discriminator": "type",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Ignore",
              "Retry",
              "MarkAsSuccess",
              "Abort",
              "StageRollback",
              "StepGroupRollback",
              "ManualIntervention"
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FailureStrategyConfig": {
        "type": "object",
        "required": ["onFailure"],
        "properties": { "onFailure": { "$ref": "#/definitions/cd/OnFailureConfig" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FlagConfigurationStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["environment", "feature", "instructions"],
            "properties": {
              "environment": { "type": "string" },
              "feature": { "type": "string" },
              "instructions": {
                "oneOf": [
                  { "type": "array", "items": { "$ref": "#/definitions/cd/PatchInstruction" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "GcrArtifactConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/ArtifactConfig" },
          {
            "type": "object",
            "required": ["connectorRef", "imagePath", "registryHostname"],
            "properties": {
              "connectorRef": { "type": "string" },
              "imagePath": { "type": "string" },
              "metadata": { "type": "string" },
              "registryHostname": { "type": "string" },
              "tag": { "type": "string" },
              "tagRegex": { "type": "string" }
            }
          },
          { "oneOf": [{ "required": ["tagRegex"] }, { "required": ["tag"] }] }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "GcsStoreConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/StoreConfig" },
          {
            "type": "object",
            "properties": {
              "bucketName": { "type": "string" },
              "connectorRef": { "type": "string" },
              "folderPath": { "type": "string" },
              "metadata": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "GitLabStore": {
        "allOf": [
          { "$ref": "#/definitions/cd/StoreConfig" },
          {
            "type": "object",
            "required": ["connectorRef", "gitFetchType"],
            "properties": {
              "branch": { "type": "string" },
              "commitId": { "type": "string" },
              "connectorRef": { "type": "string" },
              "folderPath": { "type": "string" },
              "gitFetchType": { "type": "string", "enum": ["Branch", "Commit"] },
              "metadata": { "type": "string" },
              "paths": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "repoName": { "type": "string" }
            }
          },
          { "oneOf": [{ "required": ["folderPath"] }, { "required": ["paths"] }] },
          { "oneOf": [{ "required": ["commitId"] }, { "required": ["branch"] }] }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "GitStore": {
        "allOf": [
          { "$ref": "#/definitions/cd/StoreConfig" },
          {
            "type": "object",
            "required": ["connectorRef", "gitFetchType"],
            "properties": {
              "branch": { "type": "string" },
              "commitId": { "type": "string" },
              "connectorRef": { "type": "string" },
              "folderPath": { "type": "string" },
              "gitFetchType": { "type": "string", "enum": ["Branch", "Commit"] },
              "metadata": { "type": "string" },
              "paths": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "repoName": { "type": "string" }
            }
          },
          { "oneOf": [{ "required": ["folderPath"] }, { "required": ["paths"] }] },
          { "oneOf": [{ "required": ["commitId"] }, { "required": ["branch"] }] }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "GithubStore": {
        "allOf": [
          { "$ref": "#/definitions/cd/StoreConfig" },
          {
            "type": "object",
            "required": ["connectorRef", "gitFetchType"],
            "properties": {
              "branch": { "type": "string" },
              "commitId": { "type": "string" },
              "connectorRef": { "type": "string" },
              "folderPath": { "type": "string" },
              "gitFetchType": { "type": "string", "enum": ["Branch", "Commit"] },
              "metadata": { "type": "string" },
              "paths": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "repoName": { "type": "string" }
            }
          },
          { "oneOf": [{ "required": ["folderPath"] }, { "required": ["paths"] }] },
          { "oneOf": [{ "required": ["commitId"] }, { "required": ["branch"] }] }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HarnessApprovalStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["approvalMessage", "approvers", "includePipelineExecutionHistory"],
            "properties": {
              "approvalMessage": { "type": "string" },
              "approverInputs": { "type": "array", "items": { "$ref": "#/definitions/cd/ApproverInputInfo" } },
              "approvers": { "$ref": "#/definitions/cd/Approvers" },
              "includePipelineExecutionHistory": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HelmChartManifest": {
        "allOf": [
          { "$ref": "#/definitions/cd/ManifestAttributes" },
          {
            "type": "object",
            "properties": {
              "chartName": { "type": "string" },
              "chartVersion": { "type": "string" },
              "commandFlags": { "type": "array", "items": { "$ref": "#/definitions/cd/HelmManifestCommandFlag" } },
              "helmVersion": { "type": "string", "enum": ["V2", "V3"] },
              "metadata": { "type": "string" },
              "skipResourceVersioning": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "store": { "$ref": "#/definitions/cd/StoreConfigWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HelmManifestCommandFlag": {
        "type": "object",
        "required": ["commandType"],
        "properties": {
          "commandType": { "type": "string", "enum": ["Fetch", "Version", "Template", "Pull"] },
          "flag": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HoldingScope": {
        "type": "object",
        "required": ["nodeSetupId", "scope"],
        "properties": { "nodeSetupId": { "type": "string" }, "scope": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HttpHeaderConfig": {
        "type": "object",
        "properties": { "key": { "type": "string" }, "value": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HttpStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["method", "url"],
            "properties": {
              "assertion": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "headers": { "type": "array", "items": { "$ref": "#/definitions/cd/HttpHeaderConfig" } },
              "method": { "type": "string" },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/cd/NumberNGVariable" },
                    { "$ref": "#/definitions/cd/SecretNGVariable" },
                    { "$ref": "#/definitions/cd/StringNGVariable" }
                  ]
                }
              },
              "requestBody": { "type": "string" },
              "url": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HttpStoreConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/StoreConfig" },
          {
            "type": "object",
            "properties": { "connectorRef": { "type": "string" }, "metadata": { "type": "string" } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "IgnoreFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["Ignore"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "InfraOverrides": {
        "type": "object",
        "properties": {
          "environment": { "$ref": "#/definitions/cd/EnvironmentYaml" },
          "infrastructureDefinition": { "$ref": "#/definitions/cd/InfrastructureDef" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "InfraUseFromStage": {
        "type": "object",
        "required": ["stage"],
        "properties": { "overrides": { "$ref": "#/definitions/cd/InfraOverrides" }, "stage": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Infrastructure": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "InfrastructureDef": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": {
          "provisioner": { "$ref": "#/definitions/cd/ExecutionElementConfig" },
          "type": { "type": "string", "enum": ["KubernetesDirect", "KubernetesGcp"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "KubernetesDirect" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8SDirectInfrastructure" } } }
          },
          {
            "if": { "properties": { "type": { "const": "KubernetesGcp" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sGcpInfrastructure" } } }
          }
        ]
      },
      "InlineTerraformBackendConfigSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/TerraformBackendConfigSpec" },
          { "type": "object", "properties": { "content": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "InlineTerraformVarFileSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/TerraformVarFileSpec" },
          { "type": "object", "properties": { "content": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "InputSetValidator": {
        "type": "object",
        "properties": {
          "parameters": { "type": "string" },
          "validatorType": { "type": "string", "enum": ["ALLOWED_VALUES", "REGEX"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "InstanceSelectionBase": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "InstanceSelectionWrapper": {
        "type": "object",
        "properties": { "type": { "type": "string", "enum": ["Count", "Percentage"] } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Count" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/CountInstanceSelection" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Percentage" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/PercentageInstanceSelection" } } }
          }
        ]
      },
      "JexlCriteriaSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/CriteriaSpec" },
          { "type": "object", "required": ["expression"], "properties": { "expression": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraApprovalStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["approvalCriteria", "connectorRef", "issueKey"],
            "properties": {
              "approvalCriteria": { "$ref": "#/definitions/cd/CriteriaSpecWrapper" },
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "issueKey": { "type": "string" },
              "rejectionCriteria": { "$ref": "#/definitions/cd/CriteriaSpecWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraCreateStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "issueType", "projectKey"],
            "properties": {
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "fields": { "type": "array", "items": { "$ref": "#/definitions/cd/JiraField" } },
              "issueType": { "type": "string" },
              "projectKey": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraField": {
        "type": "object",
        "required": ["value"],
        "properties": { "name": { "type": "string", "minLength": 1 }, "value": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraUpdateStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "issueKey"],
            "properties": {
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "fields": { "type": "array", "items": { "$ref": "#/definitions/cd/JiraField" } },
              "issueKey": { "type": "string" },
              "transitionTo": { "$ref": "#/definitions/cd/TransitionTo" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "array": { "type": "boolean" },
          "bigDecimal": { "type": "boolean" },
          "bigInteger": { "type": "boolean" },
          "binary": { "type": "boolean" },
          "boolean": { "type": "boolean" },
          "containerNode": { "type": "boolean" },
          "double": { "type": "boolean" },
          "float": { "type": "boolean" },
          "floatingPointNumber": { "type": "boolean" },
          "int": { "type": "boolean" },
          "integralNumber": { "type": "boolean" },
          "long": { "type": "boolean" },
          "missingNode": { "type": "boolean" },
          "nodeType": {
            "type": "string",
            "enum": ["ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING"]
          },
          "null": { "type": "boolean" },
          "number": { "type": "boolean" },
          "object": { "type": "boolean" },
          "pojo": { "type": "boolean" },
          "short": { "type": "boolean" },
          "textual": { "type": "boolean" },
          "valueNode": { "type": "boolean" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8SDirectInfrastructure": {
        "allOf": [
          { "$ref": "#/definitions/cd/Infrastructure" },
          {
            "type": "object",
            "required": ["connectorRef", "namespace", "releaseName"],
            "properties": {
              "connectorRef": { "type": "string", "minLength": 1 },
              "namespace": { "type": "string", "minLength": 1 },
              "releaseName": { "type": "string", "minLength": 1 }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sApplyStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "filePaths": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "skipDryRun": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "skipSteadyStateCheck": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sBGSwapServicesStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "skipDryRun": { "type": "boolean" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sBlueGreenStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "skipDryRun": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sCanaryDeleteStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "properties": {
              "delegateSelectors": { "type": "array", "items": { "type": "string" } },
              "skipDryRun": { "type": "boolean" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sCanaryStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["instanceSelection"],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "instanceSelection": { "$ref": "#/definitions/cd/InstanceSelectionWrapper" },
              "skipDryRun": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sDeleteStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["deleteResources"],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "deleteResources": { "$ref": "#/definitions/cd/DeleteResourcesWrapper" },
              "skipDryRun": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sGcpInfrastructure": {
        "allOf": [
          { "$ref": "#/definitions/cd/Infrastructure" },
          {
            "type": "object",
            "required": ["cluster", "connectorRef", "namespace", "releaseName"],
            "properties": {
              "cluster": { "type": "string", "minLength": 1 },
              "connectorRef": { "type": "string", "minLength": 1 },
              "metadata": { "type": "string" },
              "namespace": { "type": "string", "minLength": 1 },
              "releaseName": { "type": "string", "minLength": 1 }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sManifest": {
        "allOf": [
          { "$ref": "#/definitions/cd/ManifestAttributes" },
          {
            "type": "object",
            "properties": {
              "metadata": { "type": "string" },
              "skipResourceVersioning": {
                "oneOf": [
                  { "$ref": "#/definitions/cd/ParameterFieldBoolean" },
                  { "type": "string" },
                  { "type": "boolean" }
                ]
              },
              "store": { "$ref": "#/definitions/cd/StoreConfigWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sRollingRollbackStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "skipDryRun": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sRollingStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "skipDryRun": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sScaleStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["instanceSelection", "workload"],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "instanceSelection": { "$ref": "#/definitions/cd/InstanceSelectionWrapper" },
              "skipDryRun": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "skipSteadyStateCheck": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "workload": { "type": "string", "minLength": 1 }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "KeyValuesCriteriaSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/CriteriaSpec" },
          {
            "type": "object",
            "required": ["conditions"],
            "properties": {
              "conditions": { "type": "array", "items": { "$ref": "#/definitions/cd/Condition" } },
              "matchAnyCondition": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "KubernetesServiceSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/ServiceSpec" },
          { "type": "object", "properties": { "metadata": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "KustomizeManifest": {
        "allOf": [
          { "$ref": "#/definitions/cd/ManifestAttributes" },
          {
            "type": "object",
            "properties": {
              "metadata": { "type": "string" },
              "pluginPath": { "type": "string" },
              "skipResourceVersioning": {
                "oneOf": [
                  { "$ref": "#/definitions/cd/ParameterFieldBoolean" },
                  { "type": "string" },
                  { "type": "boolean" }
                ]
              },
              "store": { "$ref": "#/definitions/cd/StoreConfigWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "KustomizePatchesManifest": {
        "allOf": [
          { "$ref": "#/definitions/cd/ManifestAttributes" },
          {
            "type": "object",
            "properties": {
              "metadata": { "type": "string" },
              "store": { "$ref": "#/definitions/cd/StoreConfigWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManifestAttributes": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManifestConfig": {
        "type": "object",
        "required": ["identifier", "spec", "type"],
        "properties": {
          "identifier": { "type": "string" },
          "type": {
            "type": "string",
            "enum": [
              "HelmChart",
              "K8sManifest",
              "Kustomize",
              "KustomizePatches",
              "OpenshiftParam",
              "OpenshiftTemplate",
              "Values"
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "HelmChart" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/HelmChartManifest" } } }
          },
          {
            "if": { "properties": { "type": { "const": "K8sManifest" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sManifest" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Kustomize" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/KustomizeManifest" } } }
          },
          {
            "if": { "properties": { "type": { "const": "KustomizePatches" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/KustomizePatchesManifest" } } }
          },
          {
            "if": { "properties": { "type": { "const": "OpenshiftParam" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/OpenshiftParamManifest" } } }
          },
          {
            "if": { "properties": { "type": { "const": "OpenshiftTemplate" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/OpenshiftManifest" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Values" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/ValuesManifest" } } }
          }
        ]
      },
      "ManifestConfigWrapper": {
        "type": "object",
        "properties": { "manifest": { "$ref": "#/definitions/cd/ManifestConfig" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManifestOverrideSetWrapper": {
        "type": "object",
        "properties": { "overrideSet": { "$ref": "#/definitions/cd/ManifestOverrideSets" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManifestOverrideSets": {
        "type": "object",
        "properties": {
          "identifier": { "type": "string" },
          "manifests": { "type": "array", "items": { "$ref": "#/definitions/cd/ManifestConfigWrapper" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManualFailureSpecConfig": {
        "type": "object",
        "required": ["onTimeout", "timeout"],
        "properties": {
          "onTimeout": { "$ref": "#/definitions/cd/OnTimeoutConfig" },
          "timeout": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManualInterventionFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["spec", "type"],
            "properties": {
              "spec": { "readOnly": true, "$ref": "#/definitions/cd/ManualFailureSpecConfig" },
              "type": { "type": "string", "enum": ["ManualIntervention"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "MarkAsSuccessFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["MarkAsSuccess"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NGVariable": {
        "type": "object",
        "discriminator": "type",
        "properties": {
          "description": { "type": "string" },
          "metadata": { "type": "string" },
          "name": { "type": "string" },
          "required": { "type": "boolean" },
          "type": { "type": "string", "enum": ["String", "Number", "Secret"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NGVariableOverrideSetWrapper": {
        "type": "object",
        "properties": { "overrideSet": { "$ref": "#/definitions/cd/NGVariableOverrideSets" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NGVariableOverrideSets": {
        "type": "object",
        "properties": {
          "identifier": { "type": "string" },
          "variables": {
            "type": "array",
            "items": {
              "oneOf": [
                { "$ref": "#/definitions/cd/NumberNGVariable" },
                { "$ref": "#/definitions/cd/SecretNGVariable" },
                { "$ref": "#/definitions/cd/StringNGVariable" }
              ]
            }
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NativeHelmServiceSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/ServiceSpec" },
          { "type": "object", "properties": { "metadata": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NumberNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/cd/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "number", "format": "double" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["Number"] },
              "value": { "oneOf": [{ "type": "number", "format": "double" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnFailureConfig": {
        "type": "object",
        "required": ["action", "errors"],
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/cd/AbortFailureActionConfig" },
              { "$ref": "#/definitions/cd/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/cd/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/cd/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/cd/RetryFailureActionConfig" },
              { "$ref": "#/definitions/cd/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/cd/StepGroupFailureActionConfig" }
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Unknown",
                "AllErrors",
                "Authentication",
                "Connectivity",
                "Timeout",
                "Authorization",
                "Verification",
                "DelegateProvisioning"
              ]
            }
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnRetryFailureConfig": {
        "type": "object",
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/cd/AbortFailureActionConfig" },
              { "$ref": "#/definitions/cd/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/cd/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/cd/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/cd/RetryFailureActionConfig" },
              { "$ref": "#/definitions/cd/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/cd/StepGroupFailureActionConfig" }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnTimeoutConfig": {
        "type": "object",
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/cd/AbortFailureActionConfig" },
              { "$ref": "#/definitions/cd/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/cd/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/cd/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/cd/RetryFailureActionConfig" },
              { "$ref": "#/definitions/cd/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/cd/StepGroupFailureActionConfig" }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OpenshiftManifest": {
        "allOf": [
          { "$ref": "#/definitions/cd/ManifestAttributes" },
          {
            "type": "object",
            "properties": {
              "metadata": { "type": "string" },
              "skipResourceVersioning": {
                "oneOf": [
                  { "$ref": "#/definitions/cd/ParameterFieldBoolean" },
                  { "type": "string" },
                  { "type": "boolean" }
                ]
              },
              "store": { "$ref": "#/definitions/cd/StoreConfigWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OpenshiftParamManifest": {
        "allOf": [
          { "$ref": "#/definitions/cd/ManifestAttributes" },
          {
            "type": "object",
            "properties": {
              "metadata": { "type": "string" },
              "store": { "$ref": "#/definitions/cd/StoreConfigWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ParallelStepElementConfig": {
        "type": "array",
        "items": { "$ref": "#/definitions/cd/ExecutionWrapperConfig" },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ParameterField": {
        "type": "object",
        "properties": {
          "expression": { "type": "boolean" },
          "expressionValue": { "type": "string" },
          "inputSetValidator": { "$ref": "#/definitions/cd/InputSetValidator" },
          "jsonResponseField": { "type": "boolean" },
          "responseField": { "type": "string" },
          "typeString": { "type": "boolean" },
          "value": { "type": "object" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ParameterFieldBoolean": {
        "type": "object",
        "properties": {
          "expression": { "type": "boolean" },
          "expressionValue": { "type": "string" },
          "inputSetValidator": { "$ref": "#/definitions/cd/InputSetValidator" },
          "jsonResponseField": { "type": "boolean" },
          "responseField": { "type": "string" },
          "typeString": { "type": "boolean" },
          "value": { "type": "boolean" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ParameterFieldString": {
        "type": "object",
        "properties": {
          "expression": { "type": "boolean" },
          "expressionValue": { "type": "string" },
          "inputSetValidator": { "$ref": "#/definitions/cd/InputSetValidator" },
          "jsonResponseField": { "type": "boolean" },
          "responseField": { "type": "string" },
          "typeString": { "type": "boolean" },
          "value": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PatchInstruction": {
        "type": "object",
        "discriminator": "type",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SetFeatureFlagState",
              "SetOnVariation",
              "SetOffVariation",
              "SetDefaultVariations",
              "AddRule",
              "UpdateRule",
              "AddTargetsToVariationTargetMap",
              "RemoveTargetsToVariationTargetMap",
              "AddSegmentToVariationTargetMap",
              "RemoveSegmentsToVariationTargetMap"
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PercentageInstanceSelection": {
        "allOf": [
          { "$ref": "#/definitions/cd/InstanceSelectionBase" },
          {
            "type": "object",
            "properties": {
              "percentage": {
                "oneOf": [
                  { "$ref": "#/definitions/cd/ParameterFieldString" },
                  { "type": "string" },
                  { "type": "number" }
                ]
              }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PipelineInfrastructure": {
        "type": "object",
        "properties": {
          "allowSimultaneousDeployments": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
          "environment": { "$ref": "#/definitions/cd/EnvironmentYaml" },
          "environmentRef": { "type": "string" },
          "infrastructureDefinition": { "$ref": "#/definitions/cd/InfrastructureDef" },
          "infrastructureKey": { "type": "string" },
          "useFromStage": { "$ref": "#/definitions/cd/InfraUseFromStage" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          { "oneOf": [{ "required": ["useFromStage"] }, { "required": ["infrastructureDefinition"] }] },
          { "oneOf": [{ "required": ["environment"] }, { "required": ["environmentRef"] }] }
        ]
      },
      "PrimaryArtifact": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": { "type": { "type": "string", "enum": ["DockerRegistry", "Gcr", "Ecr"] } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "DockerRegistry" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/DockerHubArtifactConfig" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Ecr" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/EcrArtifactConfig" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Gcr" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/GcrArtifactConfig" } } }
          }
        ]
      },
      "RemoteTerraformVarFileSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/TerraformVarFileSpec" },
          {
            "type": "object",
            "required": ["store"],
            "properties": { "store": { "$ref": "#/definitions/cd/StoreConfigWrapper" } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveSegmentToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/cd/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cd/RemoveSegmentToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["RemoveSegmentToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveSegmentToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["segments", "variation"],
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveTargetsToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/cd/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cd/RemoveTargetsToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["RemoveTargetsToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveTargetsToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["targets", "variation"],
        "properties": {
          "targets": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ResourceConstraintStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["acquireMode", "holdingScope", "name", "permits", "resourceUnit"],
            "properties": {
              "acquireMode": { "type": "string", "enum": ["ENSURE", "ACCUMULATE"] },
              "holdingScope": { "$ref": "#/definitions/cd/HoldingScope" },
              "name": { "type": "string" },
              "permits": { "type": "integer", "format": "int32" },
              "resourceUnit": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RetryFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["spec", "type"],
            "properties": {
              "spec": { "readOnly": true, "$ref": "#/definitions/cd/RetryFailureSpecConfig" },
              "type": { "type": "string", "enum": ["Retry"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RetryFailureSpecConfig": {
        "type": "object",
        "required": ["onRetryFailure", "retryCount", "retryIntervals"],
        "properties": {
          "onRetryFailure": { "$ref": "#/definitions/cd/OnRetryFailureConfig" },
          "retryCount": { "type": "integer", "format": "int32" },
          "retryIntervals": { "type": "array", "items": { "type": "string" }, "maxItems": 2147483647, "minItems": 1 }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "S3StoreConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/StoreConfig" },
          {
            "type": "object",
            "properties": {
              "bucketName": { "type": "string" },
              "connectorRef": { "type": "string" },
              "folderPath": { "type": "string" },
              "metadata": { "type": "string" },
              "region": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SecretNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/cd/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "string" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["Secret"] },
              "value": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Serve": {
        "type": "object",
        "properties": {
          "distribution": { "$ref": "#/definitions/cd/Distribution" },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ServiceConfig": {
        "type": "object",
        "properties": {
          "service": { "$ref": "#/definitions/cd/ServiceYaml" },
          "serviceDefinition": { "$ref": "#/definitions/cd/ServiceDefinition" },
          "serviceRef": { "type": "string" },
          "stageOverrides": { "$ref": "#/definitions/cd/StageOverridesConfig" },
          "useFromStage": { "$ref": "#/definitions/cd/ServiceUseFromStage" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          { "oneOf": [{ "required": ["useFromStage"] }, { "required": ["serviceDefinition"] }] },
          { "oneOf": [{ "required": ["useFromStage"] }, { "required": ["service"] }, { "required": ["serviceRef"] }] }
        ]
      },
      "ServiceDefinition": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": { "type": { "type": "string", "enum": ["Kubernetes"] } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Kubernetes" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/KubernetesServiceSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "NativeHelm" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/NativeHelmServiceSpec" } } }
          }
        ]
      },
      "ServiceOverrides": {
        "type": "object",
        "properties": { "description": { "type": "string" }, "name": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ServiceSpec": {
        "type": "object",
        "discriminator": "type",
        "properties": {
          "artifactOverrideSets": {
            "type": "array",
            "items": { "$ref": "#/definitions/cd/ArtifactOverrideSetWrapper" }
          },
          "artifacts": { "$ref": "#/definitions/cd/ArtifactListConfig" },
          "manifestOverrideSets": {
            "type": "array",
            "items": { "$ref": "#/definitions/cd/ManifestOverrideSetWrapper" }
          },
          "manifests": { "type": "array", "items": { "$ref": "#/definitions/cd/ManifestConfigWrapper" } },
          "variableOverrideSets": {
            "type": "array",
            "items": { "$ref": "#/definitions/cd/NGVariableOverrideSetWrapper" }
          },
          "variables": { "type": "array", "items": { "$ref": "#/definitions/cd/NGVariable" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ServiceUseFromStage": {
        "type": "object",
        "required": ["stage"],
        "properties": {
          "metadata": { "type": "string" },
          "overrides": { "$ref": "#/definitions/cd/ServiceOverrides" },
          "stage": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ServiceYaml": {
        "type": "object",
        "required": ["identifier", "name"],
        "properties": {
          "description": { "type": "string" },
          "identifier": { "type": "string" },
          "name": { "type": "string" },
          "tags": { "type": "object", "additionalProperties": { "type": "string" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetDefaultVariationsYaml": {
        "allOf": [
          { "$ref": "#/definitions/cd/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cd/SetDefaultVariationsYamlSpec" },
              "type": { "type": "string", "enum": ["SetDefaultVariations"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetDefaultVariationsYamlSpec": {
        "type": "object",
        "required": ["off", "on"],
        "properties": { "off": { "type": "string" }, "on": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetFeatureFlagStateYaml": {
        "allOf": [
          { "$ref": "#/definitions/cd/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cd/SetFeatureFlagStateYamlSpec" },
              "type": { "type": "string", "enum": ["SetFeatureFlagState"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetFeatureFlagStateYamlSpec": {
        "type": "object",
        "required": ["state"],
        "properties": { "state": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOffVariationYaml": {
        "allOf": [
          { "$ref": "#/definitions/cd/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cd/SetOffVariationYamlSpec" },
              "type": { "type": "string", "enum": ["SetOffVariation"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOffVariationYamlSpec": {
        "type": "object",
        "required": ["variation"],
        "properties": { "variation": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOnVariationYaml": {
        "allOf": [
          { "$ref": "#/definitions/cd/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cd/SetOnVariationYamlSpec" },
              "type": { "type": "string", "enum": ["SetOnVariation"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOnVariationYamlSpec": {
        "type": "object",
        "required": ["variation"],
        "properties": { "variation": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptBaseSource": {
        "type": "object",
        "discriminator": "type",
        "properties": { "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptInlineSource": {
        "allOf": [
          { "$ref": "#/definitions/cd/ShellScriptBaseSource" },
          { "type": "object", "properties": { "script": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptSourceWrapper": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": { "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Inline" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/ShellScriptInlineSource" } } }
          }
        ]
      },
      "ShellScriptStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["onDelegate", "shell", "source"],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/cd/NumberNGVariable" },
                    { "$ref": "#/definitions/cd/SecretNGVariable" },
                    { "$ref": "#/definitions/cd/StringNGVariable" }
                  ]
                }
              },
              "executionTarget": { "$ref": "#/definitions/cd/ExecutionTarget" },
              "metadata": { "type": "string" },
              "onDelegate": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/cd/NumberNGVariable" },
                    { "$ref": "#/definitions/cd/SecretNGVariable" },
                    { "$ref": "#/definitions/cd/StringNGVariable" }
                  ]
                }
              },
              "shell": { "type": "string", "enum": ["Bash", "PowerShell"] },
              "source": { "$ref": "#/definitions/cd/ShellScriptSourceWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SidecarArtifact": {
        "type": "object",
        "required": ["identifier", "spec", "type"],
        "properties": {
          "identifier": { "type": "string" },
          "type": { "type": "string", "enum": ["DockerRegistry", "Gcr", "Ecr"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "DockerRegistry" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/DockerHubArtifactConfig" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Ecr" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/EcrArtifactConfig" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Gcr" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/GcrArtifactConfig" } } }
          }
        ]
      },
      "SidecarArtifactWrapper": {
        "type": "object",
        "properties": { "sidecar": { "$ref": "#/definitions/cd/SidecarArtifact" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StageOverridesConfig": {
        "type": "object",
        "properties": {
          "artifacts": { "$ref": "#/definitions/cd/ArtifactListConfig" },
          "manifests": { "type": "array", "items": { "$ref": "#/definitions/cd/ManifestConfigWrapper" } },
          "useArtifactOverrideSets": { "type": "array", "items": { "type": "string" } },
          "useManifestOverrideSets": { "type": "array", "items": { "type": "string" } },
          "useVariableOverrideSets": { "type": "array", "items": { "type": "string" } },
          "variables": {
            "type": "array",
            "items": {
              "oneOf": [
                { "$ref": "#/definitions/cd/NumberNGVariable" },
                { "$ref": "#/definitions/cd/SecretNGVariable" },
                { "$ref": "#/definitions/cd/StringNGVariable" }
              ]
            }
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StageRollbackFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["StageRollback"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepElementConfig": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "oneOf": [
          {
            "type": "object",
            "required": ["identifier", "name", "type"],
            "properties": {
              "description": { "type": "string" },
              "failureStrategies": { "type": "array", "items": { "$ref": "#/definitions/cd/FailureStrategyConfig" } },
              "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
              "spec": { "$ref": "#/definitions/cd/StepSpecType" },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "K8sBGSwapServices",
                  "FlagConfiguration",
                  "JiraUpdate",
                  "K8sCanaryDelete",
                  "TerraformRollback",
                  "Barrier",
                  "Http",
                  "TerraformApply",
                  "HarnessApproval",
                  "K8sBlueGreenDeploy",
                  "TerraformDestroy",
                  "K8sApply",
                  "K8sRollingDeploy",
                  "JiraCreate",
                  "K8sCanaryDeploy",
                  "TerraformPlan",
                  "K8sScale",
                  "K8sDelete",
                  "JiraApproval",
                  "K8sRollingRollback",
                  "Verify",
                  "ShellScript"
                ]
              },
              "when": { "$ref": "#/definitions/cd/StepWhenCondition" }
            },
            "additionalProperties": false,
            "allOf": [
              {
                "if": { "properties": { "type": { "const": "Http" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/HttpStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "Barrier" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/BarrierStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraUpdate" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/JiraUpdateStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "K8sCanaryDelete" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sCanaryDeleteStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "K8sScale" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sScaleStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "K8sRollingRollback" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sRollingRollbackStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraApproval" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/JiraApprovalStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "K8sApply" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sApplyStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "TerraformDestroy" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/TerraformDestroyStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "K8sCanaryDeploy" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sCanaryStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "FlagConfiguration" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/FlagConfigurationStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "TerraformPlan" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/TerraformPlanStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "TerraformApply" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/TerraformApplyStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "TerraformRollback" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/TerraformRollbackStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "K8sRollingDeploy" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sRollingStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "ShellScript" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/ShellScriptStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "K8sBGSwapServices" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sBGSwapServicesStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "HarnessApproval" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/HarnessApprovalStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "K8sBlueGreenDeploy" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sBlueGreenStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "K8sDelete" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/K8sDeleteStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraCreate" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/JiraCreateStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "Verify" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cd/CVNGStepInfo" } } }
              }
            ]
          },
          {
            "type": "object",
            "required": ["identifier", "name"],
            "properties": {
              "description": { "type": "string" },
              "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
              "template": { "$ref": "#/definitions/cd/TemplateLinkConfig" }
            },
            "additionalProperties": false
          }
        ]
      },
      "StepGroupElementConfig": {
        "type": "object",
        "required": ["identifier", "steps"],
        "properties": {
          "failureStrategies": { "type": "array", "items": { "$ref": "#/definitions/cd/FailureStrategyConfig" } },
          "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
          "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
          "steps": {
            "type": "array",
            "items": { "$ref": "#/definitions/cd/ExecutionWrapperConfig" },
            "maxItems": 2147483647,
            "minItems": 1
          },
          "when": { "$ref": "#/definitions/cd/StepWhenCondition" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepGroupFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cd/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["StepGroupRollback"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepSpecType": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepWhenCondition": {
        "type": "object",
        "required": ["stageStatus"],
        "properties": {
          "condition": { "type": "string" },
          "stageStatus": { "type": "string", "enum": ["Success", "Failure", "All"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StoreConfig": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StoreConfigWrapper": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": {
          "metadata": { "type": "string" },
          "type": { "type": "string", "enum": ["Git", "Github", "Bitbucket", "GitLab", "Http", "S3", "Gcs"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Bitbucket" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/BitbucketStore" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Gcs" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/GcsStoreConfig" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Git" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/GitStore" } } }
          },
          {
            "if": { "properties": { "type": { "const": "GitLab" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/GitLabStore" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Github" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/GithubStore" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Http" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/HttpStoreConfig" } } }
          },
          {
            "if": { "properties": { "type": { "const": "S3" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/S3StoreConfig" } } }
          }
        ]
      },
      "StringNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/cd/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "string" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["String"] },
              "value": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TemplateLinkConfig": {
        "type": "object",
        "required": ["templateRef"],
        "properties": {
          "templateInputs": { "$ref": "#/definitions/cd/JsonNode" },
          "templateRef": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
          "versionLabel": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformApplyStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["configuration", "provisionerIdentifier"],
            "properties": {
              "configuration": { "$ref": "#/definitions/cd/TerraformStepConfiguration" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "metadata": { "type": "string" },
              "provisionerIdentifier": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformBackendConfig": {
        "type": "object",
        "properties": { "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Inline" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/InlineTerraformBackendConfigSpec" } } }
          }
        ]
      },
      "TerraformBackendConfigSpec": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformConfigFilesWrapper": {
        "type": "object",
        "required": ["store"],
        "properties": { "store": { "$ref": "#/definitions/cd/StoreConfigWrapper" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformDestroyStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["configuration", "provisionerIdentifier"],
            "properties": {
              "configuration": { "$ref": "#/definitions/cd/TerraformStepConfiguration" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "metadata": { "type": "string" },
              "provisionerIdentifier": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformExecutionData": {
        "type": "object",
        "required": ["configFiles"],
        "properties": {
          "backendConfig": { "$ref": "#/definitions/cd/TerraformBackendConfig" },
          "configFiles": { "$ref": "#/definitions/cd/TerraformConfigFilesWrapper" },
          "environmentVariables": {
            "type": "array",
            "items": {
              "oneOf": [
                { "$ref": "#/definitions/cd/NumberNGVariable" },
                { "$ref": "#/definitions/cd/SecretNGVariable" },
                { "$ref": "#/definitions/cd/StringNGVariable" }
              ]
            }
          },
          "targets": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] },
          "varFiles": { "type": "array", "items": { "$ref": "#/definitions/cd/TerraformVarFileWrapper" } },
          "workspace": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformPlanExecutionData": {
        "type": "object",
        "required": ["command", "configFiles", "secretManagerRef"],
        "properties": {
          "backendConfig": { "$ref": "#/definitions/cd/TerraformBackendConfig" },
          "command": { "type": "string", "enum": ["Apply", "Destroy"] },
          "configFiles": { "$ref": "#/definitions/cd/TerraformConfigFilesWrapper" },
          "environmentVariables": {
            "type": "array",
            "items": {
              "oneOf": [
                { "$ref": "#/definitions/cd/NumberNGVariable" },
                { "$ref": "#/definitions/cd/SecretNGVariable" },
                { "$ref": "#/definitions/cd/StringNGVariable" }
              ]
            }
          },
          "secretManagerRef": { "type": "string" },
          "targets": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] },
          "varFiles": { "type": "array", "items": { "$ref": "#/definitions/cd/TerraformVarFileWrapper" } },
          "workspace": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformPlanStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["configuration", "provisionerIdentifier"],
            "properties": {
              "configuration": { "$ref": "#/definitions/cd/TerraformPlanExecutionData" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "provisionerIdentifier": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformRollbackStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          {
            "type": "object",
            "required": ["provisionerIdentifier"],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "provisionerIdentifier": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformStepConfiguration": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "spec": { "$ref": "#/definitions/cd/TerraformExecutionData" },
          "type": { "type": "string", "enum": ["Inline", "InheritFromPlan", "InheritFromApply"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformVarFile": {
        "type": "object",
        "required": ["identifier", "spec", "type"],
        "properties": { "identifier": { "type": "string" }, "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Inline" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/InlineTerraformVarFileSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Remote" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/RemoteTerraformVarFileSpec" } } }
          }
        ]
      },
      "TerraformVarFileSpec": {
        "type": "object",
        "discriminator": "type",
        "properties": { "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TerraformVarFileWrapper": {
        "type": "object",
        "required": ["varFile"],
        "properties": { "varFile": { "$ref": "#/definitions/cd/TerraformVarFile" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TransitionTo": {
        "type": "object",
        "required": ["status"],
        "properties": { "status": { "type": "string" }, "transitionName": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UpdateRuleYaml": {
        "allOf": [
          { "$ref": "#/definitions/cd/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cd/UpdateRuleYamlSpec" },
              "type": { "type": "string", "enum": ["UpdateRule"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UpdateRuleYamlSpec": {
        "type": "object",
        "required": ["bucketBy", "ruleID"],
        "properties": {
          "bucketBy": { "type": "string" },
          "ruleID": { "type": "string" },
          "serve": { "$ref": "#/definitions/cd/Serve" },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/cd/VariationYamlSpec" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ValuesManifest": {
        "allOf": [
          { "$ref": "#/definitions/cd/ManifestAttributes" },
          {
            "type": "object",
            "properties": {
              "metadata": { "type": "string" },
              "store": { "$ref": "#/definitions/cd/StoreConfigWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "VariationYamlSpec": {
        "type": "object",
        "required": ["variation", "weight"],
        "properties": { "variation": { "type": "string" }, "weight": { "type": "integer", "format": "int32" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "WeightedVariation": {
        "type": "object",
        "required": ["variation", "weight"],
        "properties": { "variation": { "type": "string" }, "weight": { "type": "integer", "format": "int32" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CDStepInfo": { "type": "object", "$schema": "http://json-schema.org/draft-07/schema#" },
      "BlueGreenVerificationJobSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/VerificationJobSpec" },
          {
            "type": "object",
            "required": ["sensitivity"],
            "properties": {
              "sensitivity": { "type": "string", "description": "Possible values: [Low, Medium, High]" },
              "trafficSplitPercentage": { "type": "string", "description": "Example: 50, You can put max upto 50." }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CVNGStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cd/StepSpecType" },
          { "type": "object", "required": ["type"], "properties": { "type": { "type": "string" } } },
          {
            "if": { "properties": { "type": { "const": "Bluegreen" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/BlueGreenVerificationJobSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Canary" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/CanaryVerificationJobSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "LoadTest" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/TestVerificationJobSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "Rolling" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cd/ImprovisedCanaryVerificationJobSpec" } } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CanaryVerificationJobSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/VerificationJobSpec" },
          {
            "type": "object",
            "required": ["sensitivity"],
            "properties": {
              "sensitivity": { "type": "string", "description": "Possible values: [Low, Medium, High]" },
              "trafficSplitPercentage": { "type": "string", "description": "Example: 50, You can put max upto 50." }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ImprovisedCanaryVerificationJobSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/VerificationJobSpec" },
          {
            "type": "object",
            "required": ["sensitivity"],
            "properties": {
              "sensitivity": { "type": "string", "description": "Possible values: [Low, Medium, High]" },
              "trafficSplitPercentage": { "type": "string", "description": "Example: 50, You can put max upto 50." }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TestVerificationJobSpec": {
        "allOf": [
          { "$ref": "#/definitions/cd/VerificationJobSpec" },
          {
            "type": "object",
            "required": ["sensitivity"],
            "properties": {
              "sensitivity": { "type": "string", "description": "Possible values: [Low, Medium, High]" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "VerificationJobSpec": {
        "type": "object",
        "required": ["deploymentTag", "duration"],
        "discriminator": "type",
        "properties": {
          "deploymentTag": {
            "type": "string",
            "description": "You can put expression <+serviceConfig.artifacts.primary.tag> to resolve primary tag"
          },
          "duration": { "type": "string", "description": "Format example: 5m, 30m, please put multiple of 5" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PMSStepInfo": { "type": "object", "$schema": "http://json-schema.org/draft-07/schema#" }
    },
    "ci": {
      "AbortFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/ci/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["Abort"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddRuleYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/ci/AddRuleYamlSpec" },
              "type": { "type": "string", "enum": ["AddRule"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddRuleYamlSpec": {
        "type": "object",
        "properties": {
          "clauses": { "type": "array", "items": { "$ref": "#/definitions/ci/Clause" } },
          "distribution": { "$ref": "#/definitions/ci/DistributionYamlSpec" },
          "priority": { "type": "integer", "format": "int32" },
          "serve": { "$ref": "#/definitions/ci/Serve" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddSegmentToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/ci/AddSegmentToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["AddSegmentToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddSegmentToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["segments", "variation"],
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddTargetsToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/ci/AddTargetsToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["AddTargetsToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddTargetsToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["targets", "variation"],
        "properties": {
          "targets": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ApproverInputInfo": {
        "type": "object",
        "properties": { "defaultValue": { "type": "string" }, "name": { "type": "string", "minLength": 1 } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Approvers": {
        "type": "object",
        "required": ["disallowPipelineExecutor", "minimumCount", "userGroups"],
        "properties": {
          "disallowPipelineExecutor": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
          "minimumCount": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
          "userGroups": {
            "oneOf": [
              { "type": "array", "items": { "type": "string" } },
              { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AwsVmBuildJobInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/BuildJobEnvInfo" },
          { "type": "object", "properties": { "workDir": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AwsVmInfraYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/Infrastructure" },
          {
            "type": "object",
            "required": ["spec", "type"],
            "properties": {
              "spec": { "$ref": "#/definitions/ci/AwsVmInfraYamlSpec" },
              "type": { "type": "string", "enum": ["KubernetesDirect", "UseFromStage", "AwsVm"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AwsVmInfraYamlSpec": {
        "type": "object",
        "required": ["poolId"],
        "properties": { "poolId": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "BarrierStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          { "type": "object", "required": ["barrierRef"], "properties": { "barrierRef": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "BranchBuildSpec": {
        "allOf": [
          { "$ref": "#/definitions/ci/BuildSpec" },
          { "type": "object", "required": ["branch"], "properties": { "branch": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Build": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": {
          "spec": { "$ref": "#/definitions/ci/BuildSpec" },
          "type": { "type": "string", "enum": ["branch", "tag", "PR"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "BuildJobEnvInfo": {
        "type": "object",
        "discriminator": "type",
        "properties": { "type": { "type": "string", "enum": ["K8", "AWS_VM"] } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "BuildSpec": { "type": "object", "$schema": "http://json-schema.org/draft-07/schema#" },
      "CIServiceInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/DependencySpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "image"],
            "properties": {
              "args": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] },
              "connectorRef": { "type": "string" },
              "entrypoint": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] },
              "envVariables": {
                "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
              },
              "image": { "type": "string" },
              "imagePullPolicy": { "type": "string", "enum": ["Always", "Never", "IfNotPresent"] },
              "privileged": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Clause": {
        "type": "object",
        "required": ["attribute", "id", "negate", "op", "values"],
        "properties": {
          "attribute": { "type": "string" },
          "id": { "type": "string" },
          "negate": { "type": "boolean" },
          "op": { "type": "string" },
          "values": { "type": "array", "items": { "type": "string" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ClauseYamlSpec": {
        "type": "object",
        "required": ["op", "values"],
        "properties": {
          "attribute": { "type": "string" },
          "op": { "type": "string" },
          "values": { "type": "array", "items": { "type": "string" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CleanupStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["infrastructure", "podName"],
            "properties": {
              "infrastructure": { "$ref": "#/definitions/ci/Infrastructure" },
              "podName": { "type": "string" },
              "runAsUser": { "$ref": "#/definitions/ci/ParameterFieldInteger" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CodeBase": {
        "type": "object",
        "required": ["build", "connectorRef"],
        "properties": {
          "build": { "$ref": "#/definitions/ci/Build" },
          "connectorRef": { "type": "string" },
          "depth": { "type": "integer", "format": "int32" },
          "prCloneStrategy": { "type": "string", "enum": ["MergeCommit", "SourceBranch"] },
          "repoName": { "type": "string" },
          "resources": { "$ref": "#/definitions/ci/ContainerResource" },
          "sslVerify": { "type": "boolean" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Condition": {
        "type": "object",
        "required": ["key", "operator", "value"],
        "properties": {
          "key": { "type": "string" },
          "operator": { "type": "string", "enum": ["equals", "not equals", "in", "not in"] },
          "value": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ConnectorConversionInfo": {
        "type": "object",
        "properties": {
          "connectorRef": { "type": "string" },
          "envToSecretsMap": { "type": "object", "additionalProperties": { "type": "string" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ContainerDefinitionInfo": {
        "type": "object",
        "properties": {
          "args": { "type": "array", "items": { "type": "string" } },
          "commands": { "type": "array", "items": { "type": "string" } },
          "containerImageDetails": { "$ref": "#/definitions/ci/ContainerImageDetails" },
          "containerResourceParams": { "$ref": "#/definitions/ci/ContainerResourceParams" },
          "containerType": {
            "type": "string",
            "enum": ["STEP_EXECUTOR", "ADD_ON", "RUN", "PLUGIN", "SERVICE", "LITE_ENGINE", "TEST_INTELLIGENCE"]
          },
          "envVars": { "type": "object", "additionalProperties": { "type": "string" } },
          "envVarsWithSecretRef": { "type": "object", "additionalProperties": { "type": "string" } },
          "harnessManagedImage": { "type": "boolean" },
          "imagePullPolicy": { "type": "string" },
          "mainLiteEngine": { "type": "boolean" },
          "name": { "type": "string" },
          "ports": { "type": "array", "items": { "type": "integer", "format": "int32" } },
          "privileged": { "type": "boolean" },
          "runAsUser": { "type": "integer", "format": "int32" },
          "secretVariables": { "type": "array", "items": { "$ref": "#/definitions/ci/SecretNGVariable" } },
          "stepIdentifier": { "type": "string" },
          "stepName": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ContainerImageDetails": {
        "type": "object",
        "properties": {
          "connectorIdentifier": { "type": "string" },
          "imageDetails": { "$ref": "#/definitions/ci/ImageDetails" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ContainerResource": {
        "type": "object",
        "required": ["limits"],
        "properties": { "limits": { "$ref": "#/definitions/ci/Limits" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ContainerResourceParams": {
        "type": "object",
        "properties": {
          "resourceLimitMemoryMiB": { "type": "integer", "format": "int32" },
          "resourceLimitMilliCpu": { "type": "integer", "format": "int32" },
          "resourceRequestMemoryMiB": { "type": "integer", "format": "int32" },
          "resourceRequestMilliCpu": { "type": "integer", "format": "int32" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CriteriaSpec": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CriteriaSpecWrapper": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": { "type": { "type": "string", "enum": ["Jexl", "KeyValues"] } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Jexl" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/ci/JexlCriteriaSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "KeyValues" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/ci/KeyValuesCriteriaSpec" } } }
          }
        ]
      },
      "DependencyElement": {
        "type": "object",
        "required": ["identifier", "type"],
        "properties": {
          "description": { "type": "string" },
          "identifier": { "type": "string" },
          "name": { "type": "string" },
          "type": { "type": "string", "enum": ["Service"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Service" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/ci/CIServiceInfo" } } }
          }
        ]
      },
      "DependencySpecType": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Distribution": {
        "type": "object",
        "required": ["bucketBy", "variations"],
        "properties": {
          "bucketBy": { "type": "string" },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/ci/WeightedVariation" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "DistributionYamlSpec": {
        "type": "object",
        "required": ["bucketBy"],
        "properties": {
          "bucketBy": { "type": "string" },
          "clauses": { "type": "array", "items": { "$ref": "#/definitions/ci/ClauseYamlSpec" } },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/ci/VariationYamlSpec" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "DockerStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "repo", "tags"],
            "properties": {
              "buildArgs": {
                "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
              },
              "connectorRef": { "type": "string" },
              "context": { "type": "string" },
              "dockerfile": { "type": "string" },
              "labels": {
                "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
              },
              "optimize": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "remoteCacheRepo": { "type": "string" },
              "repo": { "type": "string" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "tags": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] },
              "target": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ECRStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["account", "connectorRef", "imageName", "region", "tags"],
            "properties": {
              "account": { "type": "string" },
              "buildArgs": {
                "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
              },
              "connectorRef": { "type": "string" },
              "context": { "type": "string" },
              "dockerfile": { "type": "string" },
              "imageName": { "type": "string" },
              "labels": {
                "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
              },
              "optimize": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "region": { "type": "string" },
              "remoteCacheImage": { "type": "string" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "tags": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] },
              "target": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionElementConfig": {
        "type": "object",
        "required": ["steps"],
        "properties": {
          "steps": {
            "type": "array",
            "items": { "$ref": "#/definitions/ci/ExecutionWrapperConfig" },
            "maxItems": 2147483647,
            "minItems": 1
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionTarget": {
        "type": "object",
        "properties": {
          "connectorRef": { "type": "string" },
          "host": { "type": "string" },
          "workingDirectory": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionWrapperConfig": {
        "type": "object",
        "properties": {
          "parallel": { "$ref": "#/definitions/ci/ParallelStepElementConfig" },
          "step": { "$ref": "#/definitions/ci/StepElementConfig" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FailureStrategyActionConfig": {
        "type": "object",
        "required": ["type"],
        "discriminator": "type",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Ignore",
              "Retry",
              "MarkAsSuccess",
              "Abort",
              "StageRollback",
              "StepGroupRollback",
              "ManualIntervention"
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FailureStrategyConfig": {
        "type": "object",
        "required": ["onFailure"],
        "properties": { "onFailure": { "$ref": "#/definitions/ci/OnFailureConfig" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FlagConfigurationStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["environment", "feature", "instructions"],
            "properties": {
              "environment": { "type": "string" },
              "feature": { "type": "string" },
              "instructions": {
                "oneOf": [
                  { "type": "array", "items": { "$ref": "#/definitions/ci/PatchInstruction" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "GCRStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "host", "imageName", "projectID", "tags"],
            "properties": {
              "buildArgs": {
                "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
              },
              "connectorRef": { "type": "string" },
              "context": { "type": "string" },
              "dockerfile": { "type": "string" },
              "host": { "type": "string" },
              "imageName": { "type": "string" },
              "labels": {
                "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
              },
              "optimize": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "projectID": { "type": "string" },
              "remoteCacheImage": { "type": "string" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "tags": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] },
              "target": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HarnessApprovalStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["approvalMessage", "approvers", "includePipelineExecutionHistory"],
            "properties": {
              "approvalMessage": { "type": "string" },
              "approverInputs": { "type": "array", "items": { "$ref": "#/definitions/ci/ApproverInputInfo" } },
              "approvers": { "$ref": "#/definitions/ci/Approvers" },
              "includePipelineExecutionHistory": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HoldingScope": {
        "type": "object",
        "required": ["nodeSetupId", "scope"],
        "properties": { "nodeSetupId": { "type": "string" }, "scope": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HttpHeaderConfig": {
        "type": "object",
        "properties": { "key": { "type": "string" }, "value": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HttpStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["method", "url"],
            "properties": {
              "assertion": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "headers": { "type": "array", "items": { "$ref": "#/definitions/ci/HttpHeaderConfig" } },
              "method": { "type": "string" },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/ci/NumberNGVariable" },
                    { "$ref": "#/definitions/ci/SecretNGVariable" },
                    { "$ref": "#/definitions/ci/StringNGVariable" }
                  ]
                }
              },
              "requestBody": { "type": "string" },
              "url": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "IgnoreFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/ci/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["Ignore"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ImageDetails": {
        "type": "object",
        "properties": {
          "domainName": { "type": "string" },
          "name": { "type": "string" },
          "password": { "type": "string" },
          "registryUrl": { "type": "string" },
          "sourceName": { "type": "string" },
          "tag": { "type": "string" },
          "username": { "type": "string" },
          "usernameRef": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Infrastructure": {
        "type": "object",
        "discriminator": "type",
        "properties": { "type": { "type": "string", "enum": ["KubernetesDirect", "UseFromStage", "AwsVm"] } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "InitializeStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["accountId", "buildJobEnvInfo", "executionElementConfig", "infrastructure", "skipGitClone"],
            "properties": {
              "accountId": { "type": "string" },
              "buildJobEnvInfo": { "$ref": "#/definitions/ci/BuildJobEnvInfo" },
              "ciCodebase": { "$ref": "#/definitions/ci/CodeBase" },
              "executionElementConfig": { "$ref": "#/definitions/ci/ExecutionElementConfig" },
              "infrastructure": { "$ref": "#/definitions/ci/Infrastructure" },
              "skipGitClone": { "type": "boolean" },
              "timeout": { "type": "integer", "format": "int32" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "InputSetValidator": {
        "type": "object",
        "properties": {
          "parameters": { "type": "string" },
          "validatorType": { "type": "string", "enum": ["ALLOWED_VALUES", "REGEX"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "IntegrationStageConfig": {
        "type": "object",
        "required": ["infrastructure"],
        "properties": {
          "cloneCodebase": { "type": "boolean" },
          "execution": { "$ref": "#/definitions/ci/ExecutionElementConfig" },
          "infrastructure": {
            "oneOf": [
              { "$ref": "#/definitions/ci/AwsVmInfraYaml" },
              { "$ref": "#/definitions/ci/K8sDirectInfraYaml" },
              { "$ref": "#/definitions/ci/UseFromStageInfraYaml" }
            ]
          },
          "serviceDependencies": { "type": "array", "items": { "$ref": "#/definitions/ci/DependencyElement" } },
          "sharedPaths": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JUnitTestReport": {
        "allOf": [
          { "$ref": "#/definitions/ci/UnitTestReportSpec" },
          {
            "type": "object",
            "properties": {
              "paths": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JexlCriteriaSpec": {
        "allOf": [
          { "$ref": "#/definitions/ci/CriteriaSpec" },
          { "type": "object", "required": ["expression"], "properties": { "expression": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraApprovalStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["approvalCriteria", "connectorRef", "issueKey"],
            "properties": {
              "approvalCriteria": { "$ref": "#/definitions/ci/CriteriaSpecWrapper" },
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "issueKey": { "type": "string" },
              "rejectionCriteria": { "$ref": "#/definitions/ci/CriteriaSpecWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraCreateStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "issueType", "projectKey"],
            "properties": {
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "fields": { "type": "array", "items": { "$ref": "#/definitions/ci/JiraField" } },
              "issueType": { "type": "string" },
              "projectKey": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraField": {
        "type": "object",
        "required": ["value"],
        "properties": { "name": { "type": "string", "minLength": 1 }, "value": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraUpdateStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "issueKey"],
            "properties": {
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "fields": { "type": "array", "items": { "$ref": "#/definitions/ci/JiraField" } },
              "issueKey": { "type": "string" },
              "transitionTo": { "$ref": "#/definitions/ci/TransitionTo" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "array": { "type": "boolean" },
          "bigDecimal": { "type": "boolean" },
          "bigInteger": { "type": "boolean" },
          "binary": { "type": "boolean" },
          "boolean": { "type": "boolean" },
          "containerNode": { "type": "boolean" },
          "double": { "type": "boolean" },
          "float": { "type": "boolean" },
          "floatingPointNumber": { "type": "boolean" },
          "int": { "type": "boolean" },
          "integralNumber": { "type": "boolean" },
          "long": { "type": "boolean" },
          "missingNode": { "type": "boolean" },
          "nodeType": {
            "type": "string",
            "enum": ["ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING"]
          },
          "null": { "type": "boolean" },
          "number": { "type": "boolean" },
          "object": { "type": "boolean" },
          "pojo": { "type": "boolean" },
          "short": { "type": "boolean" },
          "textual": { "type": "boolean" },
          "valueNode": { "type": "boolean" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8BuildJobEnvInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/BuildJobEnvInfo" },
          {
            "type": "object",
            "properties": {
              "podsSetupInfo": { "$ref": "#/definitions/ci/PodsSetupInfo" },
              "stepConnectorRefs": {
                "type": "object",
                "additionalProperties": { "$ref": "#/definitions/ci/ConnectorConversionInfo" }
              },
              "workDir": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sDirectInfraYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/Infrastructure" },
          {
            "type": "object",
            "required": ["spec", "type"],
            "properties": {
              "spec": { "$ref": "#/definitions/ci/K8sDirectInfraYamlSpec" },
              "type": { "type": "string", "enum": ["KubernetesDirect", "UseFromStage", "AwsVm"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "K8sDirectInfraYamlSpec": {
        "type": "object",
        "required": ["connectorRef", "namespace"],
        "properties": {
          "annotations": {
            "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
          },
          "connectorRef": { "type": "string" },
          "initTimeout": { "type": "string" },
          "labels": {
            "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
          },
          "namespace": { "type": "string" },
          "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
          "serviceAccountName": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "KeyValuesCriteriaSpec": {
        "allOf": [
          { "$ref": "#/definitions/ci/CriteriaSpec" },
          {
            "type": "object",
            "required": ["conditions"],
            "properties": {
              "conditions": { "type": "array", "items": { "$ref": "#/definitions/ci/Condition" } },
              "matchAnyCondition": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Limits": {
        "type": "object",
        "properties": {
          "cpu": { "oneOf": [{ "type": "string" }, { "type": "number" }] },
          "memory": { "type": "string", "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)$" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManualFailureSpecConfig": {
        "type": "object",
        "required": ["onTimeout", "timeout"],
        "properties": {
          "onTimeout": { "$ref": "#/definitions/ci/OnTimeoutConfig" },
          "timeout": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManualInterventionFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/ci/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["spec", "type"],
            "properties": {
              "spec": { "readOnly": true, "$ref": "#/definitions/ci/ManualFailureSpecConfig" },
              "type": { "type": "string", "enum": ["ManualIntervention"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "MarkAsSuccessFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/ci/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["MarkAsSuccess"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NGVariable": {
        "type": "object",
        "discriminator": "type",
        "properties": {
          "description": { "type": "string" },
          "metadata": { "type": "string" },
          "name": { "type": "string" },
          "required": { "type": "boolean" },
          "type": { "type": "string", "enum": ["String", "Number", "Secret"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NumberNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/ci/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "number", "format": "double" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["Number"] },
              "value": { "oneOf": [{ "type": "number", "format": "double" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnFailureConfig": {
        "type": "object",
        "required": ["action", "errors"],
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/ci/AbortFailureActionConfig" },
              { "$ref": "#/definitions/ci/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/ci/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/ci/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/ci/RetryFailureActionConfig" },
              { "$ref": "#/definitions/ci/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/ci/StepGroupFailureActionConfig" }
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Unknown",
                "AllErrors",
                "Authentication",
                "Connectivity",
                "Timeout",
                "Authorization",
                "Verification",
                "DelegateProvisioning"
              ]
            }
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnRetryFailureConfig": {
        "type": "object",
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/ci/AbortFailureActionConfig" },
              { "$ref": "#/definitions/ci/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/ci/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/ci/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/ci/RetryFailureActionConfig" },
              { "$ref": "#/definitions/ci/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/ci/StepGroupFailureActionConfig" }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnTimeoutConfig": {
        "type": "object",
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/ci/AbortFailureActionConfig" },
              { "$ref": "#/definitions/ci/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/ci/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/ci/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/ci/RetryFailureActionConfig" },
              { "$ref": "#/definitions/ci/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/ci/StepGroupFailureActionConfig" }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OutputNGVariable": {
        "type": "object",
        "properties": {
          "description": { "type": "string" },
          "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PRBuildSpec": {
        "allOf": [
          { "$ref": "#/definitions/ci/BuildSpec" },
          { "type": "object", "required": ["number"], "properties": { "number": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PVCParams": {
        "type": "object",
        "properties": {
          "claimName": { "type": "string" },
          "present": { "type": "boolean" },
          "sizeMib": { "type": "integer", "format": "int32" },
          "storageClass": { "type": "string" },
          "volumeName": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ParallelStepElementConfig": {
        "type": "array",
        "items": { "$ref": "#/definitions/ci/ExecutionWrapperConfig" },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ParameterField": {
        "type": "object",
        "properties": {
          "expression": { "type": "boolean" },
          "expressionValue": { "type": "string" },
          "inputSetValidator": { "$ref": "#/definitions/ci/InputSetValidator" },
          "jsonResponseField": { "type": "boolean" },
          "responseField": { "type": "string" },
          "typeString": { "type": "boolean" },
          "value": { "type": "object" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ParameterFieldInteger": {
        "type": "object",
        "properties": {
          "expression": { "type": "boolean" },
          "expressionValue": { "type": "string" },
          "inputSetValidator": { "$ref": "#/definitions/ci/InputSetValidator" },
          "jsonResponseField": { "type": "boolean" },
          "responseField": { "type": "string" },
          "typeString": { "type": "boolean" },
          "value": { "type": "integer", "format": "int32" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ParameterFieldMapStringJsonNode": {
        "type": "object",
        "properties": {
          "expression": { "type": "boolean" },
          "expressionValue": { "type": "string" },
          "inputSetValidator": { "$ref": "#/definitions/ci/InputSetValidator" },
          "jsonResponseField": { "type": "boolean" },
          "responseField": { "type": "string" },
          "typeString": { "type": "boolean" },
          "value": { "type": "object", "additionalProperties": { "$ref": "#/definitions/ci/JsonNode" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PatchInstruction": {
        "type": "object",
        "discriminator": "type",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SetFeatureFlagState",
              "SetOnVariation",
              "SetOffVariation",
              "SetDefaultVariations",
              "AddRule",
              "UpdateRule",
              "AddTargetsToVariationTargetMap",
              "RemoveTargetsToVariationTargetMap",
              "AddSegmentToVariationTargetMap",
              "RemoveSegmentsToVariationTargetMap"
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PluginStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "image"],
            "properties": {
              "connectorRef": { "type": "string" },
              "image": { "type": "string" },
              "imagePullPolicy": { "type": "string", "enum": ["Always", "Never", "IfNotPresent"] },
              "privileged": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "reports": { "$ref": "#/definitions/ci/UnitTestReport" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "settings": {
                "oneOf": [{ "$ref": "#/definitions/ci/ParameterFieldMapStringJsonNode" }, { "type": "string" }]
              }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PodSetupInfo": {
        "type": "object",
        "required": ["stageCpuRequest", "stageMemoryRequest", "volumeToMountPath"],
        "properties": {
          "name": { "type": "string" },
          "podSetupParams": { "$ref": "#/definitions/ci/PodSetupParams" },
          "pvcParamsList": { "type": "array", "items": { "$ref": "#/definitions/ci/PVCParams" } },
          "serviceGrpcPortList": { "type": "array", "items": { "type": "integer", "format": "int32" } },
          "serviceIdList": { "type": "array", "items": { "type": "string" } },
          "stageCpuRequest": { "type": "integer", "format": "int32" },
          "stageMemoryRequest": { "type": "integer", "format": "int32" },
          "volumeToMountPath": { "type": "object", "additionalProperties": { "type": "string" } },
          "workDirPath": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PodSetupParams": {
        "type": "object",
        "properties": {
          "containerDefinitionInfos": {
            "type": "array",
            "items": { "$ref": "#/definitions/ci/ContainerDefinitionInfo" }
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PodsSetupInfo": {
        "type": "object",
        "properties": {
          "podSetupInfoList": { "type": "array", "items": { "$ref": "#/definitions/ci/PodSetupInfo" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveSegmentToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/ci/RemoveSegmentToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["RemoveSegmentToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveSegmentToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["segments", "variation"],
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveTargetsToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/ci/RemoveTargetsToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["RemoveTargetsToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveTargetsToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["targets", "variation"],
        "properties": {
          "targets": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ResourceConstraintStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["acquireMode", "holdingScope", "name", "permits", "resourceUnit"],
            "properties": {
              "acquireMode": { "type": "string", "enum": ["ENSURE", "ACCUMULATE"] },
              "holdingScope": { "$ref": "#/definitions/ci/HoldingScope" },
              "name": { "type": "string" },
              "permits": { "type": "integer", "format": "int32" },
              "resourceUnit": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RestoreCacheGCSStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["bucket", "connectorRef", "key"],
            "properties": {
              "archiveFormat": { "type": "string", "enum": ["Tar", "Gzip"] },
              "bucket": { "type": "string" },
              "connectorRef": { "type": "string" },
              "failIfKeyNotFound": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "key": { "type": "string" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RestoreCacheS3StepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["bucket", "connectorRef", "key"],
            "properties": {
              "archiveFormat": { "type": "string", "enum": ["Tar", "Gzip"] },
              "bucket": { "type": "string" },
              "connectorRef": { "type": "string" },
              "endpoint": { "type": "string" },
              "failIfKeyNotFound": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "key": { "type": "string" },
              "pathStyle": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "region": { "type": "string" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RetryFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/ci/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["spec", "type"],
            "properties": {
              "spec": { "readOnly": true, "$ref": "#/definitions/ci/RetryFailureSpecConfig" },
              "type": { "type": "string", "enum": ["Retry"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RetryFailureSpecConfig": {
        "type": "object",
        "required": ["onRetryFailure", "retryCount", "retryIntervals"],
        "properties": {
          "onRetryFailure": { "$ref": "#/definitions/ci/OnRetryFailureConfig" },
          "retryCount": { "type": "integer", "format": "int32" },
          "retryIntervals": { "type": "array", "items": { "type": "string" }, "maxItems": 2147483647, "minItems": 1 }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RunStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["command", "connectorRef", "image"],
            "properties": {
              "command": { "type": "string" },
              "connectorRef": { "type": "string" },
              "envVariables": {
                "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
              },
              "image": { "type": "string" },
              "imagePullPolicy": { "type": "string", "enum": ["Always", "Never", "IfNotPresent"] },
              "outputVariables": { "type": "array", "items": { "$ref": "#/definitions/ci/OutputNGVariable" } },
              "privileged": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "reports": { "$ref": "#/definitions/ci/UnitTestReport" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "shell": { "type": "string", "enum": ["Sh", "Bash"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RunTestsStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["args", "buildTool", "connectorRef", "image", "language"],
            "properties": {
              "args": { "type": "string" },
              "buildTool": { "type": "string", "enum": ["Maven", "Bazel", "Gradle"] },
              "connectorRef": { "type": "string" },
              "envVariables": {
                "oneOf": [{ "type": "object", "additionalProperties": { "type": "string" } }, { "type": "string" }]
              },
              "image": { "type": "string" },
              "imagePullPolicy": { "type": "string", "enum": ["Always", "Never", "IfNotPresent"] },
              "language": { "type": "string", "enum": ["Java"] },
              "outputVariables": { "type": "array", "items": { "$ref": "#/definitions/ci/OutputNGVariable" } },
              "packages": { "type": "string" },
              "postCommand": { "type": "string" },
              "preCommand": { "type": "string" },
              "privileged": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "reports": { "$ref": "#/definitions/ci/UnitTestReport" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "runOnlySelectedTests": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "testAnnotations": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SaveCacheGCSStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["bucket", "connectorRef", "key", "sourcePaths"],
            "properties": {
              "archiveFormat": { "type": "string", "enum": ["Tar", "Gzip"] },
              "bucket": { "type": "string" },
              "connectorRef": { "type": "string" },
              "key": { "type": "string" },
              "override": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "sourcePaths": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SaveCacheS3StepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["bucket", "connectorRef", "key", "sourcePaths"],
            "properties": {
              "archiveFormat": { "type": "string", "enum": ["Tar", "Gzip"] },
              "bucket": { "type": "string" },
              "connectorRef": { "type": "string" },
              "endpoint": { "type": "string" },
              "key": { "type": "string" },
              "override": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "pathStyle": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "region": { "type": "string" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "sourcePaths": { "oneOf": [{ "type": "array", "items": { "type": "string" } }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SecretNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/ci/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "string" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["Secret"] },
              "value": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Serve": {
        "type": "object",
        "properties": {
          "distribution": { "$ref": "#/definitions/ci/Distribution" },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetDefaultVariationsYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/ci/SetDefaultVariationsYamlSpec" },
              "type": { "type": "string", "enum": ["SetDefaultVariations"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetDefaultVariationsYamlSpec": {
        "type": "object",
        "required": ["off", "on"],
        "properties": { "off": { "type": "string" }, "on": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetFeatureFlagStateYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/ci/SetFeatureFlagStateYamlSpec" },
              "type": { "type": "string", "enum": ["SetFeatureFlagState"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetFeatureFlagStateYamlSpec": {
        "type": "object",
        "required": ["state"],
        "properties": { "state": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOffVariationYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/ci/SetOffVariationYamlSpec" },
              "type": { "type": "string", "enum": ["SetOffVariation"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOffVariationYamlSpec": {
        "type": "object",
        "required": ["variation"],
        "properties": { "variation": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOnVariationYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/ci/SetOnVariationYamlSpec" },
              "type": { "type": "string", "enum": ["SetOnVariation"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOnVariationYamlSpec": {
        "type": "object",
        "required": ["variation"],
        "properties": { "variation": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptBaseSource": {
        "type": "object",
        "discriminator": "type",
        "properties": { "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptInlineSource": {
        "allOf": [
          { "$ref": "#/definitions/ci/ShellScriptBaseSource" },
          { "type": "object", "properties": { "script": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptSourceWrapper": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": { "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Inline" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/ci/ShellScriptInlineSource" } } }
          }
        ]
      },
      "ShellScriptStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["onDelegate", "shell", "source"],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/ci/NumberNGVariable" },
                    { "$ref": "#/definitions/ci/SecretNGVariable" },
                    { "$ref": "#/definitions/ci/StringNGVariable" }
                  ]
                }
              },
              "executionTarget": { "$ref": "#/definitions/ci/ExecutionTarget" },
              "metadata": { "type": "string" },
              "onDelegate": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/ci/NumberNGVariable" },
                    { "$ref": "#/definitions/ci/SecretNGVariable" },
                    { "$ref": "#/definitions/ci/StringNGVariable" }
                  ]
                }
              },
              "shell": { "type": "string", "enum": ["Bash", "PowerShell"] },
              "source": { "$ref": "#/definitions/ci/ShellScriptSourceWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StageRollbackFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/ci/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["StageRollback"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepElementConfig": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "oneOf": [
          {
            "type": "object",
            "required": ["identifier", "name", "type"],
            "properties": {
              "description": { "type": "string" },
              "failureStrategies": { "type": "array", "items": { "$ref": "#/definitions/ci/FailureStrategyConfig" } },
              "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
              "spec": { "$ref": "#/definitions/ci/StepSpecType" },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ArtifactoryUpload",
                  "Barrier",
                  "BuildAndPushDockerRegistry",
                  "BuildAndPushECR",
                  "BuildAndPushGCR",
                  "FlagConfiguration",
                  "GCSUpload",
                  "HarnessApproval",
                  "Http",
                  "JiraApproval",
                  "JiraCreate",
                  "JiraUpdate",
                  "Plugin",
                  "RestoreCacheGCS",
                  "RestoreCacheS3",
                  "Run",
                  "RunTests",
                  "S3Upload",
                  "SaveCacheGCS",
                  "SaveCacheS3",
                  "ShellScript"
                ]
              },
              "when": { "$ref": "#/definitions/ci/StepWhenCondition" }
            },
            "additionalProperties": false,
            "allOf": [
              {
                "if": { "properties": { "type": { "const": "ArtifactoryUpload" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/UploadToArtifactoryStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "Barrier" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/BarrierStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "BuildAndPushDockerRegistry" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/DockerStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "BuildAndPushECR" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/ECRStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "BuildAndPushGCR" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/GCRStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "FlagConfiguration" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/FlagConfigurationStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "GCSUpload" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/UploadToGCSStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "HarnessApproval" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/HarnessApprovalStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "Http" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/HttpStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraApproval" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/JiraApprovalStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraCreate" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/JiraCreateStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraUpdate" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/JiraUpdateStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "Plugin" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/PluginStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "RestoreCacheGCS" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/RestoreCacheGCSStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "RestoreCacheS3" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/RestoreCacheS3StepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "Run" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/RunStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "RunTests" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/RunTestsStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "S3Upload" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/UploadToS3StepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "SaveCacheGCS" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/SaveCacheGCSStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "SaveCacheS3" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/SaveCacheS3StepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "ShellScript" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/ci/ShellScriptStepInfo" } } }
              }
            ]
          },
          {
            "type": "object",
            "required": ["identifier", "name"],
            "properties": {
              "description": { "type": "string" },
              "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
              "template": { "$ref": "#/definitions/ci/TemplateLinkConfig" }
            },
            "additionalProperties": false
          }
        ]
      },
      "StepGroupElementConfig": {
        "type": "object",
        "required": ["identifier", "steps"],
        "properties": {
          "failureStrategies": { "type": "array", "items": { "$ref": "#/definitions/ci/FailureStrategyConfig" } },
          "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
          "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
          "steps": {
            "type": "array",
            "items": { "$ref": "#/definitions/ci/ExecutionWrapperConfig" },
            "maxItems": 2147483647,
            "minItems": 1
          },
          "when": { "$ref": "#/definitions/ci/StepWhenCondition" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepGroupFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/ci/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["StepGroupRollback"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepSpecType": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepWhenCondition": {
        "type": "object",
        "required": ["stageStatus"],
        "properties": {
          "condition": { "type": "string" },
          "stageStatus": { "type": "string", "enum": ["Success", "Failure", "All"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StringNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/ci/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "string" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["String"] },
              "value": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TagBuildSpec": {
        "allOf": [
          { "$ref": "#/definitions/ci/BuildSpec" },
          { "type": "object", "required": ["tag"], "properties": { "tag": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TemplateLinkConfig": {
        "type": "object",
        "required": ["templateRef"],
        "properties": {
          "templateInputs": { "$ref": "#/definitions/ci/JsonNode" },
          "templateRef": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
          "versionLabel": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TransitionTo": {
        "type": "object",
        "required": ["status"],
        "properties": { "status": { "type": "string" }, "transitionName": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UnitTestReport": {
        "type": "object",
        "properties": { "type": { "type": "string", "enum": ["JUnit"] } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "JUnit" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/ci/JUnitTestReport" } } }
          }
        ]
      },
      "UnitTestReportSpec": { "type": "object", "$schema": "http://json-schema.org/draft-07/schema#" },
      "UpdateRuleYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/ci/UpdateRuleYamlSpec" },
              "type": { "type": "string", "enum": ["UpdateRule"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UpdateRuleYamlSpec": {
        "type": "object",
        "required": ["bucketBy", "ruleID"],
        "properties": {
          "bucketBy": { "type": "string" },
          "ruleID": { "type": "string" },
          "serve": { "$ref": "#/definitions/ci/Serve" },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/ci/VariationYamlSpec" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UploadToArtifactoryStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "sourcePath", "target"],
            "properties": {
              "connectorRef": { "type": "string" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "sourcePath": { "type": "string" },
              "target": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UploadToGCSStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["bucket", "connectorRef", "sourcePath"],
            "properties": {
              "bucket": { "type": "string" },
              "connectorRef": { "type": "string" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "sourcePath": { "type": "string" },
              "target": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UploadToS3StepInfo": {
        "allOf": [
          { "$ref": "#/definitions/ci/StepSpecType" },
          {
            "type": "object",
            "required": ["bucket", "connectorRef", "sourcePath"],
            "properties": {
              "bucket": { "type": "string" },
              "connectorRef": { "type": "string" },
              "endpoint": { "type": "string" },
              "region": { "type": "string" },
              "resources": { "$ref": "#/definitions/ci/ContainerResource" },
              "runAsUser": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
              "sourcePath": { "type": "string" },
              "target": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UseFromStageInfraYaml": {
        "allOf": [
          { "$ref": "#/definitions/ci/Infrastructure" },
          { "type": "object", "required": ["useFromStage"], "properties": { "useFromStage": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "VariationYamlSpec": {
        "type": "object",
        "required": ["variation", "weight"],
        "properties": { "variation": { "type": "string" }, "weight": { "type": "integer", "format": "int32" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "WeightedVariation": {
        "type": "object",
        "required": ["variation", "weight"],
        "properties": { "variation": { "type": "string" }, "weight": { "type": "integer", "format": "int32" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CIStepInfo": { "type": "object", "$schema": "http://json-schema.org/draft-07/schema#" },
      "PMSStepInfo": { "type": "object", "$schema": "http://json-schema.org/draft-07/schema#" }
    },
    "approval": {
      "AbortFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/approval/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["Abort"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddRuleYaml": {
        "allOf": [
          { "$ref": "#/definitions/approval/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/approval/AddRuleYamlSpec" },
              "type": { "type": "string", "enum": ["AddRule"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddRuleYamlSpec": {
        "type": "object",
        "properties": {
          "clauses": { "type": "array", "items": { "$ref": "#/definitions/approval/Clause" } },
          "distribution": { "$ref": "#/definitions/approval/DistributionYamlSpec" },
          "priority": { "type": "integer", "format": "int32" },
          "serve": { "$ref": "#/definitions/approval/Serve" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddSegmentToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/approval/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/approval/AddSegmentToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["AddSegmentToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddSegmentToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["segments", "variation"],
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddTargetsToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/approval/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/approval/AddTargetsToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["AddTargetsToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddTargetsToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["targets", "variation"],
        "properties": {
          "targets": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ApprovalStageConfig": {
        "type": "object",
        "required": ["execution"],
        "properties": { "execution": { "$ref": "#/definitions/approval/ExecutionElementConfig" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ApproverInputInfo": {
        "type": "object",
        "properties": { "defaultValue": { "type": "string" }, "name": { "type": "string", "minLength": 1 } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Approvers": {
        "type": "object",
        "required": ["disallowPipelineExecutor", "minimumCount", "userGroups"],
        "properties": {
          "disallowPipelineExecutor": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
          "minimumCount": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
          "userGroups": {
            "oneOf": [
              { "type": "array", "items": { "type": "string" } },
              { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "BarrierStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/approval/StepSpecType" },
          { "type": "object", "required": ["barrierRef"], "properties": { "barrierRef": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Clause": {
        "type": "object",
        "required": ["attribute", "id", "negate", "op", "values"],
        "properties": {
          "attribute": { "type": "string" },
          "id": { "type": "string" },
          "negate": { "type": "boolean" },
          "op": { "type": "string" },
          "values": { "type": "array", "items": { "type": "string" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ClauseYamlSpec": {
        "type": "object",
        "required": ["op", "values"],
        "properties": {
          "attribute": { "type": "string" },
          "op": { "type": "string" },
          "values": { "type": "array", "items": { "type": "string" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Condition": {
        "type": "object",
        "required": ["key", "operator", "value"],
        "properties": {
          "key": { "type": "string" },
          "operator": { "type": "string", "enum": ["equals", "not equals", "in", "not in"] },
          "value": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CriteriaSpec": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CriteriaSpecWrapper": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": { "type": { "type": "string", "enum": ["Jexl", "KeyValues"] } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Jexl" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/approval/JexlCriteriaSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "KeyValues" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/approval/KeyValuesCriteriaSpec" } } }
          }
        ]
      },
      "Distribution": {
        "type": "object",
        "required": ["bucketBy", "variations"],
        "properties": {
          "bucketBy": { "type": "string" },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/approval/WeightedVariation" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "DistributionYamlSpec": {
        "type": "object",
        "required": ["bucketBy"],
        "properties": {
          "bucketBy": { "type": "string" },
          "clauses": { "type": "array", "items": { "$ref": "#/definitions/approval/ClauseYamlSpec" } },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/approval/VariationYamlSpec" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionElementConfig": {
        "type": "object",
        "required": ["steps"],
        "properties": {
          "steps": {
            "type": "array",
            "items": { "$ref": "#/definitions/approval/ExecutionWrapperConfig" },
            "maxItems": 2147483647,
            "minItems": 1
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionTarget": {
        "type": "object",
        "properties": {
          "connectorRef": { "type": "string" },
          "host": { "type": "string" },
          "workingDirectory": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionWrapperConfig": {
        "type": "object",
        "properties": {
          "parallel": { "$ref": "#/definitions/approval/ParallelStepElementConfig" },
          "step": { "$ref": "#/definitions/approval/StepElementConfig" },
          "stepGroup": { "$ref": "#/definitions/approval/StepGroupElementConfig" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FailureStrategyActionConfig": {
        "type": "object",
        "required": ["type"],
        "discriminator": "type",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Ignore",
              "Retry",
              "MarkAsSuccess",
              "Abort",
              "StageRollback",
              "StepGroupRollback",
              "ManualIntervention"
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FailureStrategyConfig": {
        "type": "object",
        "required": ["onFailure"],
        "properties": { "onFailure": { "$ref": "#/definitions/approval/OnFailureConfig" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FlagConfigurationStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/approval/StepSpecType" },
          {
            "type": "object",
            "required": ["environment", "feature", "instructions"],
            "properties": {
              "environment": { "type": "string" },
              "feature": { "type": "string" },
              "instructions": {
                "oneOf": [
                  { "type": "array", "items": { "$ref": "#/definitions/approval/PatchInstruction" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HarnessApprovalStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/approval/StepSpecType" },
          {
            "type": "object",
            "required": ["approvalMessage", "approvers", "includePipelineExecutionHistory"],
            "properties": {
              "approvalMessage": { "type": "string" },
              "approverInputs": { "type": "array", "items": { "$ref": "#/definitions/approval/ApproverInputInfo" } },
              "approvers": { "$ref": "#/definitions/approval/Approvers" },
              "includePipelineExecutionHistory": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HoldingScope": {
        "type": "object",
        "required": ["nodeSetupId", "scope"],
        "properties": { "nodeSetupId": { "type": "string" }, "scope": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HttpHeaderConfig": {
        "type": "object",
        "properties": { "key": { "type": "string" }, "value": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HttpStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/approval/StepSpecType" },
          {
            "type": "object",
            "required": ["method", "url"],
            "properties": {
              "assertion": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "headers": { "type": "array", "items": { "$ref": "#/definitions/approval/HttpHeaderConfig" } },
              "method": { "type": "string" },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/approval/NumberNGVariable" },
                    { "$ref": "#/definitions/approval/SecretNGVariable" },
                    { "$ref": "#/definitions/approval/StringNGVariable" }
                  ]
                }
              },
              "requestBody": { "type": "string" },
              "url": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "IgnoreFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/approval/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["Ignore"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JexlCriteriaSpec": {
        "allOf": [
          { "$ref": "#/definitions/approval/CriteriaSpec" },
          { "type": "object", "required": ["expression"], "properties": { "expression": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraApprovalStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/approval/StepSpecType" },
          {
            "type": "object",
            "required": ["approvalCriteria", "connectorRef", "issueKey"],
            "properties": {
              "approvalCriteria": { "$ref": "#/definitions/approval/CriteriaSpecWrapper" },
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "issueKey": { "type": "string" },
              "rejectionCriteria": { "$ref": "#/definitions/approval/CriteriaSpecWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraCreateStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/approval/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "issueType", "projectKey"],
            "properties": {
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "fields": { "type": "array", "items": { "$ref": "#/definitions/approval/JiraField" } },
              "issueType": { "type": "string" },
              "projectKey": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraField": {
        "type": "object",
        "required": ["value"],
        "properties": { "name": { "type": "string", "minLength": 1 }, "value": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraUpdateStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/approval/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "issueKey"],
            "properties": {
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "fields": { "type": "array", "items": { "$ref": "#/definitions/approval/JiraField" } },
              "issueKey": { "type": "string" },
              "transitionTo": { "$ref": "#/definitions/approval/TransitionTo" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "array": { "type": "boolean" },
          "bigDecimal": { "type": "boolean" },
          "bigInteger": { "type": "boolean" },
          "binary": { "type": "boolean" },
          "boolean": { "type": "boolean" },
          "containerNode": { "type": "boolean" },
          "double": { "type": "boolean" },
          "float": { "type": "boolean" },
          "floatingPointNumber": { "type": "boolean" },
          "int": { "type": "boolean" },
          "integralNumber": { "type": "boolean" },
          "long": { "type": "boolean" },
          "missingNode": { "type": "boolean" },
          "nodeType": {
            "type": "string",
            "enum": ["ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING"]
          },
          "null": { "type": "boolean" },
          "number": { "type": "boolean" },
          "object": { "type": "boolean" },
          "pojo": { "type": "boolean" },
          "short": { "type": "boolean" },
          "textual": { "type": "boolean" },
          "valueNode": { "type": "boolean" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "KeyValuesCriteriaSpec": {
        "allOf": [
          { "$ref": "#/definitions/approval/CriteriaSpec" },
          {
            "type": "object",
            "required": ["conditions"],
            "properties": {
              "conditions": { "type": "array", "items": { "$ref": "#/definitions/approval/Condition" } },
              "matchAnyCondition": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManualFailureSpecConfig": {
        "type": "object",
        "required": ["onTimeout", "timeout"],
        "properties": {
          "onTimeout": { "$ref": "#/definitions/approval/OnTimeoutConfig" },
          "timeout": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManualInterventionFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/approval/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["spec", "type"],
            "properties": {
              "spec": { "readOnly": true, "$ref": "#/definitions/approval/ManualFailureSpecConfig" },
              "type": { "type": "string", "enum": ["ManualIntervention"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "MarkAsSuccessFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/approval/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["MarkAsSuccess"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NGVariable": {
        "type": "object",
        "discriminator": "type",
        "properties": {
          "description": { "type": "string" },
          "metadata": { "type": "string" },
          "name": { "type": "string" },
          "required": { "type": "boolean" },
          "type": { "type": "string", "enum": ["String", "Number", "Secret"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NumberNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/approval/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "number", "format": "double" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["Number"] },
              "value": { "oneOf": [{ "type": "number", "format": "double" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnFailureConfig": {
        "type": "object",
        "required": ["action", "errors"],
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/approval/AbortFailureActionConfig" },
              { "$ref": "#/definitions/approval/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/approval/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/approval/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/approval/RetryFailureActionConfig" },
              { "$ref": "#/definitions/approval/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/approval/StepGroupFailureActionConfig" }
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Unknown",
                "AllErrors",
                "Authentication",
                "Connectivity",
                "Timeout",
                "Authorization",
                "Verification",
                "DelegateProvisioning"
              ]
            }
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnRetryFailureConfig": {
        "type": "object",
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/approval/AbortFailureActionConfig" },
              { "$ref": "#/definitions/approval/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/approval/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/approval/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/approval/RetryFailureActionConfig" },
              { "$ref": "#/definitions/approval/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/approval/StepGroupFailureActionConfig" }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnTimeoutConfig": {
        "type": "object",
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/approval/AbortFailureActionConfig" },
              { "$ref": "#/definitions/approval/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/approval/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/approval/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/approval/RetryFailureActionConfig" },
              { "$ref": "#/definitions/approval/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/approval/StepGroupFailureActionConfig" }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ParallelStepElementConfig": {
        "type": "array",
        "items": { "$ref": "#/definitions/approval/ExecutionWrapperConfig" },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PatchInstruction": {
        "type": "object",
        "discriminator": "type",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SetFeatureFlagState",
              "SetOnVariation",
              "SetOffVariation",
              "SetDefaultVariations",
              "AddRule",
              "UpdateRule",
              "AddTargetsToVariationTargetMap",
              "RemoveTargetsToVariationTargetMap",
              "AddSegmentToVariationTargetMap",
              "RemoveSegmentsToVariationTargetMap"
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveSegmentToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/approval/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/approval/RemoveSegmentToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["RemoveSegmentToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveSegmentToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["segments", "variation"],
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveTargetsToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/approval/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/approval/RemoveTargetsToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["RemoveTargetsToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveTargetsToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["targets", "variation"],
        "properties": {
          "targets": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ResourceConstraintStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/approval/StepSpecType" },
          {
            "type": "object",
            "required": ["acquireMode", "holdingScope", "name", "permits", "resourceUnit"],
            "properties": {
              "acquireMode": { "type": "string", "enum": ["ENSURE", "ACCUMULATE"] },
              "holdingScope": { "$ref": "#/definitions/approval/HoldingScope" },
              "name": { "type": "string" },
              "permits": { "type": "integer", "format": "int32" },
              "resourceUnit": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RetryFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/approval/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["spec", "type"],
            "properties": {
              "spec": { "readOnly": true, "$ref": "#/definitions/approval/RetryFailureSpecConfig" },
              "type": { "type": "string", "enum": ["Retry"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RetryFailureSpecConfig": {
        "type": "object",
        "required": ["onRetryFailure", "retryCount", "retryIntervals"],
        "properties": {
          "onRetryFailure": { "$ref": "#/definitions/approval/OnRetryFailureConfig" },
          "retryCount": { "type": "integer", "format": "int32" },
          "retryIntervals": { "type": "array", "items": { "type": "string" }, "maxItems": 2147483647, "minItems": 1 }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SecretNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/approval/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "string" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["Secret"] },
              "value": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Serve": {
        "type": "object",
        "properties": {
          "distribution": { "$ref": "#/definitions/approval/Distribution" },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetDefaultVariationsYaml": {
        "allOf": [
          { "$ref": "#/definitions/approval/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/approval/SetDefaultVariationsYamlSpec" },
              "type": { "type": "string", "enum": ["SetDefaultVariations"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetDefaultVariationsYamlSpec": {
        "type": "object",
        "required": ["off", "on"],
        "properties": { "off": { "type": "string" }, "on": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetFeatureFlagStateYaml": {
        "allOf": [
          { "$ref": "#/definitions/approval/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/approval/SetFeatureFlagStateYamlSpec" },
              "type": { "type": "string", "enum": ["SetFeatureFlagState"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetFeatureFlagStateYamlSpec": {
        "type": "object",
        "required": ["state"],
        "properties": { "state": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOffVariationYaml": {
        "allOf": [
          { "$ref": "#/definitions/approval/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/approval/SetOffVariationYamlSpec" },
              "type": { "type": "string", "enum": ["SetOffVariation"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOffVariationYamlSpec": {
        "type": "object",
        "required": ["variation"],
        "properties": { "variation": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOnVariationYaml": {
        "allOf": [
          { "$ref": "#/definitions/approval/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/approval/SetOnVariationYamlSpec" },
              "type": { "type": "string", "enum": ["SetOnVariation"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOnVariationYamlSpec": {
        "type": "object",
        "required": ["variation"],
        "properties": { "variation": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptBaseSource": {
        "type": "object",
        "discriminator": "type",
        "properties": { "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptInlineSource": {
        "allOf": [
          { "$ref": "#/definitions/approval/ShellScriptBaseSource" },
          { "type": "object", "properties": { "script": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptSourceWrapper": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": { "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Inline" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/approval/ShellScriptInlineSource" } } }
          }
        ]
      },
      "ShellScriptStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/approval/StepSpecType" },
          {
            "type": "object",
            "required": ["onDelegate", "shell", "source"],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/approval/NumberNGVariable" },
                    { "$ref": "#/definitions/approval/SecretNGVariable" },
                    { "$ref": "#/definitions/approval/StringNGVariable" }
                  ]
                }
              },
              "executionTarget": { "$ref": "#/definitions/approval/ExecutionTarget" },
              "metadata": { "type": "string" },
              "onDelegate": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/approval/NumberNGVariable" },
                    { "$ref": "#/definitions/approval/SecretNGVariable" },
                    { "$ref": "#/definitions/approval/StringNGVariable" }
                  ]
                }
              },
              "shell": { "type": "string", "enum": ["Bash", "PowerShell"] },
              "source": { "$ref": "#/definitions/approval/ShellScriptSourceWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StageRollbackFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/approval/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["StageRollback"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepElementConfig": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "oneOf": [
          {
            "type": "object",
            "required": ["identifier", "name", "type"],
            "properties": {
              "description": { "type": "string" },
              "failureStrategies": {
                "type": "array",
                "items": { "$ref": "#/definitions/approval/FailureStrategyConfig" }
              },
              "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
              "spec": { "$ref": "#/definitions/approval/StepSpecType" },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Barrier",
                  "FlagConfiguration",
                  "HarnessApproval",
                  "Http",
                  "JiraApproval",
                  "JiraCreate",
                  "JiraUpdate",
                  "ShellScript"
                ]
              },
              "when": { "$ref": "#/definitions/approval/StepWhenCondition" }
            },
            "additionalProperties": false,
            "allOf": [
              {
                "if": { "properties": { "type": { "const": "Barrier" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/approval/BarrierStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "FlagConfiguration" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/approval/FlagConfigurationStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "HarnessApproval" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/approval/HarnessApprovalStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "Http" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/approval/HttpStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraApproval" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/approval/JiraApprovalStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraCreate" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/approval/JiraCreateStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraUpdate" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/approval/JiraUpdateStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "ShellScript" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/approval/ShellScriptStepInfo" } } }
              }
            ]
          },
          {
            "type": "object",
            "required": ["identifier", "name"],
            "properties": {
              "description": { "type": "string" },
              "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
              "template": { "$ref": "#/definitions/approval/TemplateLinkConfig" }
            },
            "additionalProperties": false
          }
        ]
      },
      "StepGroupElementConfig": {
        "type": "object",
        "required": ["identifier", "steps"],
        "properties": {
          "failureStrategies": {
            "type": "array",
            "items": { "$ref": "#/definitions/approval/FailureStrategyConfig" }
          },
          "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
          "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
          "steps": {
            "type": "array",
            "items": { "$ref": "#/definitions/approval/ExecutionWrapperConfig" },
            "maxItems": 2147483647,
            "minItems": 1
          },
          "when": { "$ref": "#/definitions/approval/StepWhenCondition" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepGroupFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/approval/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["StepGroupRollback"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepSpecType": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepWhenCondition": {
        "type": "object",
        "required": ["stageStatus"],
        "properties": {
          "condition": { "type": "string" },
          "stageStatus": { "type": "string", "enum": ["Success", "Failure", "All"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StringNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/approval/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "string" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["String"] },
              "value": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TemplateLinkConfig": {
        "type": "object",
        "required": ["templateRef"],
        "properties": {
          "templateInputs": { "$ref": "#/definitions/approval/JsonNode" },
          "templateRef": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
          "versionLabel": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TransitionTo": {
        "type": "object",
        "required": ["status"],
        "properties": { "status": { "type": "string" }, "transitionName": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UpdateRuleYaml": {
        "allOf": [
          { "$ref": "#/definitions/approval/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/approval/UpdateRuleYamlSpec" },
              "type": { "type": "string", "enum": ["UpdateRule"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UpdateRuleYamlSpec": {
        "type": "object",
        "required": ["bucketBy", "ruleID"],
        "properties": {
          "bucketBy": { "type": "string" },
          "ruleID": { "type": "string" },
          "serve": { "$ref": "#/definitions/approval/Serve" },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/approval/VariationYamlSpec" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "VariationYamlSpec": {
        "type": "object",
        "required": ["variation", "weight"],
        "properties": { "variation": { "type": "string" }, "weight": { "type": "integer", "format": "int32" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "WeightedVariation": {
        "type": "object",
        "required": ["variation", "weight"],
        "properties": { "variation": { "type": "string" }, "weight": { "type": "integer", "format": "int32" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PMSStepInfo": { "type": "object", "$schema": "http://json-schema.org/draft-07/schema#" }
    },
    "cf": {
      "AbortFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cf/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["Abort"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddRuleYaml": {
        "allOf": [
          { "$ref": "#/definitions/cf/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cf/AddRuleYamlSpec" },
              "type": { "type": "string", "enum": ["AddRule"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddRuleYamlSpec": {
        "type": "object",
        "properties": {
          "clauses": { "type": "array", "items": { "$ref": "#/definitions/cf/Clause" } },
          "distribution": { "$ref": "#/definitions/cf/DistributionYamlSpec" },
          "priority": { "type": "integer", "format": "int32" },
          "serve": { "$ref": "#/definitions/cf/Serve" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddSegmentToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/cf/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cf/AddSegmentToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["AddSegmentToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddSegmentToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["segments", "variation"],
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddTargetsToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/cf/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cf/AddTargetsToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["AddTargetsToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "AddTargetsToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["targets", "variation"],
        "properties": {
          "targets": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ApprovalStageConfig": {
        "type": "object",
        "required": ["execution"],
        "properties": { "execution": { "$ref": "#/definitions/cf/ExecutionElementConfig" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ApproverInputInfo": {
        "type": "object",
        "properties": { "defaultValue": { "type": "string" }, "name": { "type": "string", "minLength": 1 } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Approvers": {
        "type": "object",
        "required": ["disallowPipelineExecutor", "minimumCount", "userGroups"],
        "properties": {
          "disallowPipelineExecutor": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
          "minimumCount": { "oneOf": [{ "type": "integer", "format": "int32" }, { "type": "string" }] },
          "userGroups": {
            "oneOf": [
              { "type": "array", "items": { "type": "string" } },
              { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "BarrierStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cf/StepSpecType" },
          { "type": "object", "required": ["barrierRef"], "properties": { "barrierRef": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Clause": {
        "type": "object",
        "required": ["attribute", "id", "negate", "op", "values"],
        "properties": {
          "attribute": { "type": "string" },
          "id": { "type": "string" },
          "negate": { "type": "boolean" },
          "op": { "type": "string" },
          "values": { "type": "array", "items": { "type": "string" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ClauseYamlSpec": {
        "type": "object",
        "required": ["op", "values"],
        "properties": {
          "attribute": { "type": "string" },
          "op": { "type": "string" },
          "values": { "type": "array", "items": { "type": "string" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Condition": {
        "type": "object",
        "required": ["key", "operator", "value"],
        "properties": {
          "key": { "type": "string" },
          "operator": { "type": "string", "enum": ["equals", "not equals", "in", "not in"] },
          "value": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CriteriaSpec": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "CriteriaSpecWrapper": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": { "type": { "type": "string", "enum": ["Jexl", "KeyValues"] } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Jexl" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cf/JexlCriteriaSpec" } } }
          },
          {
            "if": { "properties": { "type": { "const": "KeyValues" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cf/KeyValuesCriteriaSpec" } } }
          }
        ]
      },
      "Distribution": {
        "type": "object",
        "required": ["bucketBy", "variations"],
        "properties": {
          "bucketBy": { "type": "string" },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/cf/WeightedVariation" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "DistributionYamlSpec": {
        "type": "object",
        "required": ["bucketBy"],
        "properties": {
          "bucketBy": { "type": "string" },
          "clauses": { "type": "array", "items": { "$ref": "#/definitions/cf/ClauseYamlSpec" } },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/cf/VariationYamlSpec" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionElementConfig": {
        "type": "object",
        "required": ["steps"],
        "properties": {
          "steps": {
            "type": "array",
            "items": { "$ref": "#/definitions/cf/ExecutionWrapperConfig" },
            "maxItems": 2147483647,
            "minItems": 1
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionTarget": {
        "type": "object",
        "properties": {
          "connectorRef": { "type": "string" },
          "host": { "type": "string" },
          "workingDirectory": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ExecutionWrapperConfig": {
        "type": "object",
        "properties": {
          "parallel": { "$ref": "#/definitions/cf/ParallelStepElementConfig" },
          "step": { "$ref": "#/definitions/cf/StepElementConfig" },
          "stepGroup": { "$ref": "#/definitions/cf/StepGroupElementConfig" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FailureStrategyActionConfig": {
        "type": "object",
        "required": ["type"],
        "discriminator": "type",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Ignore",
              "Retry",
              "MarkAsSuccess",
              "Abort",
              "StageRollback",
              "StepGroupRollback",
              "ManualIntervention"
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FailureStrategyConfig": {
        "type": "object",
        "required": ["onFailure"],
        "properties": { "onFailure": { "$ref": "#/definitions/cf/OnFailureConfig" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FlagConfigurationStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cf/StepSpecType" },
          {
            "type": "object",
            "required": ["environment", "feature", "instructions"],
            "properties": {
              "environment": { "type": "string" },
              "feature": { "type": "string" },
              "instructions": {
                "oneOf": [
                  { "type": "array", "items": { "$ref": "#/definitions/cf/PatchInstruction" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HarnessApprovalStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cf/StepSpecType" },
          {
            "type": "object",
            "required": ["approvalMessage", "approvers", "includePipelineExecutionHistory"],
            "properties": {
              "approvalMessage": { "type": "string" },
              "approverInputs": { "type": "array", "items": { "$ref": "#/definitions/cf/ApproverInputInfo" } },
              "approvers": { "$ref": "#/definitions/cf/Approvers" },
              "includePipelineExecutionHistory": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HoldingScope": {
        "type": "object",
        "required": ["nodeSetupId", "scope"],
        "properties": { "nodeSetupId": { "type": "string" }, "scope": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HttpHeaderConfig": {
        "type": "object",
        "properties": { "key": { "type": "string" }, "value": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "HttpStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cf/StepSpecType" },
          {
            "type": "object",
            "required": ["method", "url"],
            "properties": {
              "assertion": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "headers": { "type": "array", "items": { "$ref": "#/definitions/cf/HttpHeaderConfig" } },
              "method": { "type": "string" },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/cf/NumberNGVariable" },
                    { "$ref": "#/definitions/cf/SecretNGVariable" },
                    { "$ref": "#/definitions/cf/StringNGVariable" }
                  ]
                }
              },
              "requestBody": { "type": "string" },
              "url": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "IgnoreFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cf/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["Ignore"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JexlCriteriaSpec": {
        "allOf": [
          { "$ref": "#/definitions/cf/CriteriaSpec" },
          { "type": "object", "required": ["expression"], "properties": { "expression": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraApprovalStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cf/StepSpecType" },
          {
            "type": "object",
            "required": ["approvalCriteria", "connectorRef", "issueKey"],
            "properties": {
              "approvalCriteria": { "$ref": "#/definitions/cf/CriteriaSpecWrapper" },
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "issueKey": { "type": "string" },
              "rejectionCriteria": { "$ref": "#/definitions/cf/CriteriaSpecWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraCreateStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cf/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "issueType", "projectKey"],
            "properties": {
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "fields": { "type": "array", "items": { "$ref": "#/definitions/cf/JiraField" } },
              "issueType": { "type": "string" },
              "projectKey": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraField": {
        "type": "object",
        "required": ["value"],
        "properties": { "name": { "type": "string", "minLength": 1 }, "value": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JiraUpdateStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cf/StepSpecType" },
          {
            "type": "object",
            "required": ["connectorRef", "issueKey"],
            "properties": {
              "connectorRef": { "type": "string" },
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "fields": { "type": "array", "items": { "$ref": "#/definitions/cf/JiraField" } },
              "issueKey": { "type": "string" },
              "transitionTo": { "$ref": "#/definitions/cf/TransitionTo" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "array": { "type": "boolean" },
          "bigDecimal": { "type": "boolean" },
          "bigInteger": { "type": "boolean" },
          "binary": { "type": "boolean" },
          "boolean": { "type": "boolean" },
          "containerNode": { "type": "boolean" },
          "double": { "type": "boolean" },
          "float": { "type": "boolean" },
          "floatingPointNumber": { "type": "boolean" },
          "int": { "type": "boolean" },
          "integralNumber": { "type": "boolean" },
          "long": { "type": "boolean" },
          "missingNode": { "type": "boolean" },
          "nodeType": {
            "type": "string",
            "enum": ["ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING"]
          },
          "null": { "type": "boolean" },
          "number": { "type": "boolean" },
          "object": { "type": "boolean" },
          "pojo": { "type": "boolean" },
          "short": { "type": "boolean" },
          "textual": { "type": "boolean" },
          "valueNode": { "type": "boolean" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "KeyValuesCriteriaSpec": {
        "allOf": [
          { "$ref": "#/definitions/cf/CriteriaSpec" },
          {
            "type": "object",
            "required": ["conditions"],
            "properties": {
              "conditions": { "type": "array", "items": { "$ref": "#/definitions/cf/Condition" } },
              "matchAnyCondition": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManualFailureSpecConfig": {
        "type": "object",
        "required": ["onTimeout", "timeout"],
        "properties": {
          "onTimeout": { "$ref": "#/definitions/cf/OnTimeoutConfig" },
          "timeout": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ManualInterventionFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cf/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["spec", "type"],
            "properties": {
              "spec": { "readOnly": true, "$ref": "#/definitions/cf/ManualFailureSpecConfig" },
              "type": { "type": "string", "enum": ["ManualIntervention"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "MarkAsSuccessFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cf/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["MarkAsSuccess"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NGVariable": {
        "type": "object",
        "discriminator": "type",
        "properties": {
          "description": { "type": "string" },
          "metadata": { "type": "string" },
          "name": { "type": "string" },
          "required": { "type": "boolean" },
          "type": { "type": "string", "enum": ["String", "Number", "Secret"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "NumberNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/cf/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "number", "format": "double" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["Number"] },
              "value": { "oneOf": [{ "type": "number", "format": "double" }, { "type": "string" }] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnFailureConfig": {
        "type": "object",
        "required": ["action", "errors"],
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/cf/AbortFailureActionConfig" },
              { "$ref": "#/definitions/cf/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/cf/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/cf/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/cf/RetryFailureActionConfig" },
              { "$ref": "#/definitions/cf/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/cf/StepGroupFailureActionConfig" }
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Unknown",
                "AllErrors",
                "Authentication",
                "Connectivity",
                "Timeout",
                "Authorization",
                "Verification",
                "DelegateProvisioning"
              ]
            }
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnRetryFailureConfig": {
        "type": "object",
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/cf/AbortFailureActionConfig" },
              { "$ref": "#/definitions/cf/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/cf/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/cf/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/cf/RetryFailureActionConfig" },
              { "$ref": "#/definitions/cf/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/cf/StepGroupFailureActionConfig" }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "OnTimeoutConfig": {
        "type": "object",
        "properties": {
          "action": {
            "oneOf": [
              { "$ref": "#/definitions/cf/AbortFailureActionConfig" },
              { "$ref": "#/definitions/cf/IgnoreFailureActionConfig" },
              { "$ref": "#/definitions/cf/ManualInterventionFailureActionConfig" },
              { "$ref": "#/definitions/cf/MarkAsSuccessFailureActionConfig" },
              { "$ref": "#/definitions/cf/RetryFailureActionConfig" },
              { "$ref": "#/definitions/cf/StageRollbackFailureActionConfig" },
              { "$ref": "#/definitions/cf/StepGroupFailureActionConfig" }
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ParallelStepElementConfig": {
        "type": "array",
        "items": { "$ref": "#/definitions/cf/ExecutionWrapperConfig" },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PatchInstruction": {
        "type": "object",
        "discriminator": "type",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SetFeatureFlagState",
              "SetOnVariation",
              "SetOffVariation",
              "SetDefaultVariations",
              "AddRule",
              "UpdateRule",
              "AddTargetsToVariationTargetMap",
              "RemoveTargetsToVariationTargetMap",
              "AddSegmentToVariationTargetMap",
              "RemoveSegmentsToVariationTargetMap"
            ]
          }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveSegmentToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/cf/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cf/RemoveSegmentToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["RemoveSegmentToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveSegmentToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["segments", "variation"],
        "properties": {
          "segments": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveTargetsToVariationTargetMapYaml": {
        "allOf": [
          { "$ref": "#/definitions/cf/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cf/RemoveTargetsToVariationTargetMapYamlSpec" },
              "type": { "type": "string", "enum": ["RemoveTargetsToVariationTargetMap"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RemoveTargetsToVariationTargetMapYamlSpec": {
        "type": "object",
        "required": ["targets", "variation"],
        "properties": {
          "targets": { "type": "array", "items": { "type": "string" } },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ResourceConstraintStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cf/StepSpecType" },
          {
            "type": "object",
            "required": ["acquireMode", "holdingScope", "name", "permits", "resourceUnit"],
            "properties": {
              "acquireMode": { "type": "string", "enum": ["ENSURE", "ACCUMULATE"] },
              "holdingScope": { "$ref": "#/definitions/cf/HoldingScope" },
              "name": { "type": "string" },
              "permits": { "type": "integer", "format": "int32" },
              "resourceUnit": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RetryFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cf/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["spec", "type"],
            "properties": {
              "spec": { "readOnly": true, "$ref": "#/definitions/cf/RetryFailureSpecConfig" },
              "type": { "type": "string", "enum": ["Retry"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "RetryFailureSpecConfig": {
        "type": "object",
        "required": ["onRetryFailure", "retryCount", "retryIntervals"],
        "properties": {
          "onRetryFailure": { "$ref": "#/definitions/cf/OnRetryFailureConfig" },
          "retryCount": { "type": "integer", "format": "int32" },
          "retryIntervals": { "type": "array", "items": { "type": "string" }, "maxItems": 2147483647, "minItems": 1 }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SecretNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/cf/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "string" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["Secret"] },
              "value": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Serve": {
        "type": "object",
        "properties": {
          "distribution": { "$ref": "#/definitions/cf/Distribution" },
          "variation": { "type": "string" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetDefaultVariationsYaml": {
        "allOf": [
          { "$ref": "#/definitions/cf/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cf/SetDefaultVariationsYamlSpec" },
              "type": { "type": "string", "enum": ["SetDefaultVariations"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetDefaultVariationsYamlSpec": {
        "type": "object",
        "required": ["off", "on"],
        "properties": { "off": { "type": "string" }, "on": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetFeatureFlagStateYaml": {
        "allOf": [
          { "$ref": "#/definitions/cf/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cf/SetFeatureFlagStateYamlSpec" },
              "type": { "type": "string", "enum": ["SetFeatureFlagState"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetFeatureFlagStateYamlSpec": {
        "type": "object",
        "required": ["state"],
        "properties": { "state": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOffVariationYaml": {
        "allOf": [
          { "$ref": "#/definitions/cf/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cf/SetOffVariationYamlSpec" },
              "type": { "type": "string", "enum": ["SetOffVariation"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOffVariationYamlSpec": {
        "type": "object",
        "required": ["variation"],
        "properties": { "variation": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOnVariationYaml": {
        "allOf": [
          { "$ref": "#/definitions/cf/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cf/SetOnVariationYamlSpec" },
              "type": { "type": "string", "enum": ["SetOnVariation"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "SetOnVariationYamlSpec": {
        "type": "object",
        "required": ["variation"],
        "properties": { "variation": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptBaseSource": {
        "type": "object",
        "discriminator": "type",
        "properties": { "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptInlineSource": {
        "allOf": [
          { "$ref": "#/definitions/cf/ShellScriptBaseSource" },
          { "type": "object", "properties": { "script": { "type": "string" } } }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ShellScriptSourceWrapper": {
        "type": "object",
        "required": ["spec", "type"],
        "properties": { "type": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#",
        "allOf": [
          {
            "if": { "properties": { "type": { "const": "Inline" } } },
            "then": { "properties": { "spec": { "$ref": "#/definitions/cf/ShellScriptInlineSource" } } }
          }
        ]
      },
      "ShellScriptStepInfo": {
        "allOf": [
          { "$ref": "#/definitions/cf/StepSpecType" },
          {
            "type": "object",
            "required": ["onDelegate", "shell", "source"],
            "properties": {
              "delegateSelectors": {
                "oneOf": [
                  { "type": "array", "items": { "type": "string" } },
                  { "type": "string", "pattern": "^<\\+input>(\\.(allowedValues|regex)\\(.+?\\))*$", "minLength": 1 }
                ]
              },
              "environmentVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/cf/NumberNGVariable" },
                    { "$ref": "#/definitions/cf/SecretNGVariable" },
                    { "$ref": "#/definitions/cf/StringNGVariable" }
                  ]
                }
              },
              "executionTarget": { "$ref": "#/definitions/cf/ExecutionTarget" },
              "metadata": { "type": "string" },
              "onDelegate": { "oneOf": [{ "type": "boolean" }, { "type": "string" }] },
              "outputVariables": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/definitions/cf/NumberNGVariable" },
                    { "$ref": "#/definitions/cf/SecretNGVariable" },
                    { "$ref": "#/definitions/cf/StringNGVariable" }
                  ]
                }
              },
              "shell": { "type": "string", "enum": ["Bash", "PowerShell"] },
              "source": { "$ref": "#/definitions/cf/ShellScriptSourceWrapper" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StageRollbackFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cf/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["StageRollback"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepElementConfig": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "oneOf": [
          {
            "type": "object",
            "required": ["identifier", "name", "type"],
            "properties": {
              "description": { "type": "string" },
              "failureStrategies": { "type": "array", "items": { "$ref": "#/definitions/cf/FailureStrategyConfig" } },
              "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
              "spec": { "$ref": "#/definitions/cf/StepSpecType" },
              "timeout": {
                "type": "string",
                "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*))$"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Barrier",
                  "FlagConfiguration",
                  "HarnessApproval",
                  "Http",
                  "JiraApproval",
                  "JiraCreate",
                  "JiraUpdate",
                  "ShellScript"
                ]
              },
              "when": { "$ref": "#/definitions/cf/StepWhenCondition" }
            },
            "additionalProperties": false,
            "allOf": [
              {
                "if": { "properties": { "type": { "const": "Barrier" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cf/BarrierStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "FlagConfiguration" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cf/FlagConfigurationStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "HarnessApproval" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cf/HarnessApprovalStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "Http" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cf/HttpStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraApproval" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cf/JiraApprovalStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraCreate" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cf/JiraCreateStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "JiraUpdate" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cf/JiraUpdateStepInfo" } } }
              },
              {
                "if": { "properties": { "type": { "const": "ShellScript" } } },
                "then": { "properties": { "spec": { "$ref": "#/definitions/cf/ShellScriptStepInfo" } } }
              }
            ]
          },
          {
            "type": "object",
            "required": ["identifier", "name"],
            "properties": {
              "description": { "type": "string" },
              "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
              "template": { "$ref": "#/definitions/cf/TemplateLinkConfig" }
            },
            "additionalProperties": false
          }
        ]
      },
      "StepGroupElementConfig": {
        "type": "object",
        "required": ["identifier", "steps"],
        "properties": {
          "failureStrategies": { "type": "array", "items": { "$ref": "#/definitions/cf/FailureStrategyConfig" } },
          "identifier": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
          "name": { "type": "string", "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$" },
          "steps": {
            "type": "array",
            "items": { "$ref": "#/definitions/cf/ExecutionWrapperConfig" },
            "maxItems": 2147483647,
            "minItems": 1
          },
          "when": { "$ref": "#/definitions/cf/StepWhenCondition" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepGroupFailureActionConfig": {
        "allOf": [
          { "$ref": "#/definitions/cf/FailureStrategyActionConfig" },
          {
            "type": "object",
            "required": ["type"],
            "properties": { "type": { "type": "string", "enum": ["StepGroupRollback"] } }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepSpecType": {
        "type": "object",
        "discriminator": "type",
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StepWhenCondition": {
        "type": "object",
        "required": ["stageStatus"],
        "properties": {
          "condition": { "type": "string" },
          "stageStatus": { "type": "string", "enum": ["Success", "Failure", "All"] }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "StringNGVariable": {
        "allOf": [
          { "$ref": "#/definitions/cf/NGVariable" },
          {
            "type": "object",
            "required": ["value"],
            "properties": {
              "default": { "type": "string" },
              "name": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
              "type": { "type": "string", "enum": ["String"] },
              "value": { "type": "string" }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TemplateLinkConfig": {
        "type": "object",
        "required": ["templateRef"],
        "properties": {
          "templateInputs": { "$ref": "#/definitions/cf/JsonNode" },
          "templateRef": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" },
          "versionLabel": { "type": "string", "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$" }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "TransitionTo": {
        "type": "object",
        "required": ["status"],
        "properties": { "status": { "type": "string" }, "transitionName": { "type": "string" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UpdateRuleYaml": {
        "allOf": [
          { "$ref": "#/definitions/cf/PatchInstruction" },
          {
            "type": "object",
            "required": ["identifier", "spec", "type"],
            "properties": {
              "identifier": { "type": "string" },
              "spec": { "$ref": "#/definitions/cf/UpdateRuleYamlSpec" },
              "type": { "type": "string", "enum": ["UpdateRule"] }
            }
          }
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "UpdateRuleYamlSpec": {
        "type": "object",
        "required": ["bucketBy", "ruleID"],
        "properties": {
          "bucketBy": { "type": "string" },
          "ruleID": { "type": "string" },
          "serve": { "$ref": "#/definitions/cf/Serve" },
          "variations": { "type": "array", "items": { "$ref": "#/definitions/cf/VariationYamlSpec" } }
        },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "VariationYamlSpec": {
        "type": "object",
        "required": ["variation", "weight"],
        "properties": { "variation": { "type": "string" }, "weight": { "type": "integer", "format": "int32" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "WeightedVariation": {
        "type": "object",
        "required": ["variation", "weight"],
        "properties": { "variation": { "type": "string" }, "weight": { "type": "integer", "format": "int32" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "FeatureFlagStageConfig": {
        "type": "object",
        "required": ["execution"],
        "properties": { "execution": { "$ref": "#/definitions/cf/ExecutionElementConfig" } },
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "PMSStepInfo": { "type": "object", "$schema": "http://json-schema.org/draft-07/schema#" }
    }
  }
}
