enterDescription: Enter Description
approvalStep:
  message: 'Approval Message'
  approvers: 'Approvers'
  approverInputs: 'Inputs to be provided by approver'
  includePipelineExecutionHistory: 'Include pipeline execution history in approval details'
  addUserGroups: Add User Groups
  fetchingUserGroups: Fetching user groups
  fetchUserGroupsFailed: Failed to fetch user groups
  minimumCount: 'Number of approvers that are required at this step'
  disallowPipelineExecutor: 'Disallow the executor from approving the pipeline'
  validation:
    approvalMessage: Approval message is required.
    userGroups: 'Please provide user groups.'
    minimumCountOne: 'Minimum count cannot be less than one.'
    minimumCountRequired: 'Minimum count is required.'
  status:
    APPROVE: Approved
    REJECT: Rejected
jiraApprovalStep:
  connectToJira: Connect to JIRA
  connectorRef: JIRA Connector
  project: JIRA Project
  issueType: Issue Type
  issueKey: Key/Issue ID
  approvalCriteria: Approval Criteria
  rejectionCriteria: Rejection Criteria
  jexlExpressionLabelApproval: If the JEXL Expression evaluates to true, approve this step
  jexlExpressionLabelRejection: If the JEXL Expression evaluates to true, reject this step
  jexlExpressionPlaceholder: |
    Example: <+issue.Status> == "Done"
  fetchingFields: Fetching fields...
  match: Match
  allConditions: All conditions
  anyCondition: Any condition
  jiraField: JIRA Field
  jexlExpressionApprovalCriteria: JEXL Expression for approval criteria
  jexlExpressionRejectionCriteria: JEXL Expression for rejection criteria
  validations:
    connectorRef: JIRA Connector is required.
    project: Project is required.
    issueKey: Issue Key is required.
    issueType: Issue Type is required.
    approvalCriteriaCondition: Atleast one condition is required.
    expression: Expression value is required.
jiraCreateStep:
  fields: JIRA Fields
  summaryPlaceholder: Enter a Title or Summary
  addFields: Add JIRA Fields
  selectFieldsHeading: Select fields you would like to add.
  fieldSelectorAdd: + Fields
  selectFromFieldList: Select from Field List
  provideFieldList: Provide Field List
  selectFieldListHelp: Select your project and issue type to list available fields to choose from.
  fetchingFields: Fetching your fields
  fieldsSelectorPlaceholder: Your fields will be populated here
  issueKey: Issue Key
  validations:
    summary: Summary is required.
manifestType:
  gitConnectorLabel: 'Git'
  bitBucketLabel: 'Bitbucket'
  httpHelmRepoConnectorLabel: 'Http Helm'
  manifestIdentifier: Manifest Identifier
  manifestPlaceholder: Enter Manifest Identifier
  manifestSource: Manifest Source
  manifestDetails: Manifest Details
  manifestRepoType: '{{ $.manifestsText }} {{ $.typeLabel }}'
  specifyManifestRepoType: 'Specify {{ $.manifestsText }} {{ $.typeLabel }}'
  specifyManifestStore: 'Specify {{ $.manifestsText }} {{$.store}}'
  selectManifestStore: '{{$.select}} {{ $.manifestsText }} {{$.store}}'
  helmSkipResourceVersion: By selecting this option, Harness will no longer version ConfigMaps and Secrets for this Service.
  pluginPathHelperText: Enter the path to the dedicated directory for the plugin on the Delegate host(s). For example, '$HOME/plugin'. The default directory is named $XDG_CONFIG_HOME/kustomize/plugin and its value is $HOME/.config
  kustomizePathHelperText: Enter the path from the root of the Source Provider repo to the folder containing kustomization.yaml
  helmCommandFlags: By Default, Harness versions ConfigMaps and Secrets that are deployed into the Kubernetes Cluster.
  helmCommandFlagLabel: Helm Command Flags (optional)
  helmCommandType: Command Type
  helmVersionRequired: 'Helm Version is required'
  commandFlagRequired: 'Command Flag is required'
  folderPathRequired: Folder Path is required
  pathRequired: Path is required
  path: 'Path'
  osTemplatePath: 'Template File Path'
  osTemplatePathPlaceHolder: 'Enter Template File Path'
  osTemplatePathRequired: Template File Path is required
  pathPlaceholder: Enter file path
  bucketName: Bucket Name
  gitFetchTypeLabel: GIT Fetch Type
  commitId: Commit ID
  branchPlaceholder: Enter branch name here
  commitPlaceholder: Enter Commit ID here
  filePathPlaceholder: Enter overrides file path
  kustomizeFolderPath: Kustomize Folder Path
  http:
    chartName: 'Helm Chart Name'
    chartVersion: 'Helm Chart Version'
    chartNameRequired: 'Chart Name is required'
    chartNamePlaceHolder: 'Enter Chart Name'
    chartVersionPlaceHolder: 'Enter Chart Version'
    chartVersionRequired: 'Chart Version is required'
