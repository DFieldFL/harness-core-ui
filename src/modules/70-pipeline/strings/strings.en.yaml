enterDescription: Enter Description
approvalStep:
  message: 'Approval Message'
  approvers: 'Approver(s)'
  approverInputs: 'Inputs to be provided by approver'
  includePipelineExecutionHistory: 'Include pipeline execution history in approval details'
  addUserGroups: Add User Groups
  fetchingUserGroups: Fetching user groups
  fetchUserGroupsFailed: Failed to fetch user groups
  minimumCount: 'Number of approvers that are required at this step'
  disallowPipelineExecutor: 'Disallow the executor from approving the pipeline'
  validation:
    approvalMessage: Approval message is required.
    userGroups: 'Please provide user groups.'
    minimumCountOne: 'Minimum count cannot be less than one.'
    minimumCountRequired: 'Minimum count is required.'
  status:
    APPROVE: Approved
    REJECT: Rejected
jiraApprovalStep:
  connectToJira: Connect to Jira
  connectorRef: Jira Connector
  project: Jira Project
  issueType: Issue Type
  issueKey: Issue Key
  issueKeyPlaceholder: Enter Jira Issue key
  fetchingProjectsPlaceholder: Fetching projects...
  fetchProjectsError: Failed to fetch projects
  fetchingIssueTypePlaceholder: Fetching issue types...
  fetchIssueTypesError: Failed to fetch issue types
  approvalCriteria: Approval Criteria
  rejectionCriteria: Rejection Criteria
  jexlExpressionLabelApproval: If the JEXL Expression evaluates to true, approve this step
  jexlExpressionLabelRejection: If the JEXL Expression evaluates to true, reject this step
  jexlExpressionPlaceholder: |
    Example: <+issue.Status> == "Done"
  fetchingFields: Fetching fields...
  match: Match
  allConditions: All conditions
  anyCondition: Any condition
  jiraField: Jira Field
  jexlExpressionApprovalCriteria: JEXL Expression for approval criteria
  jexlExpressionRejectionCriteria: JEXL Expression for rejection criteria
  validations:
    connectorRef: Jira Connector is required.
    project: Project is required.
    issueKey: Issue Key is required.
    issueType: Issue Type is required.
    approvalCriteriaCondition: Atleast one condition is required.
    expression: Expression value is required.
jiraCreateStep:
  fields: Jira Fields
  summaryPlaceholder: Enter a Title or Summary
  addFields: Add Jira Fields
  selectFieldsHeading: Select fields you would like to add.
  fieldSelectorAdd: '+ Fields'
  selectFromFieldList: Select from Field List
  provideFieldList: Provide Field List
  selectFieldListHelp: Select your project and issue type to list available fields to choose from.
  fetchingFields: Fetching your fields
  fieldsSelectorPlaceholder: Your fields will be populated here
  validations:
    summary: Summary is required.
jiraUpdateStep:
  statusTransitionAccordion: Status and Transition (Optional)
  transitionLabel: Transition Name (Optional)
  fetchingStatus: Fetching status list...
  validations:
    status: Status is required.
manifestType:
  gitConnectorLabel: 'Git'
  bitBucketLabel: 'Bitbucket'
  httpHelmRepoConnectorLabel: 'Http Helm'
  manifestIdentifier: Manifest Identifier
  manifestPlaceholder: Enter Manifest Identifier
  manifestSource: Manifest Source
  manifestDetails: Manifest Details
  manifestRepoType: '{{ $.manifestsText }} {{ $.typeLabel }}'
  specifyManifestRepoType: 'Specify {{ $.manifestsText }} {{ $.typeLabel }}'
  specifyManifestStore: 'Specify {{ $.manifestsText }} {{$.store}}'
  selectManifestStore: '{{$.select}} {{ $.manifestsText }} {{$.store}}'
  helmSkipResourceVersion: By selecting this option, Harness will no longer version ConfigMaps and Secrets for this Service.
  pluginPathHelperText: Enter the path to the dedicated directory for the plugin on the Delegate host(s). For example, '$HOME/plugin'. The default directory is named $XDG_CONFIG_HOME/kustomize/plugin and its value is $HOME/.config
  kustomizePathHelperText: Enter the path from the root of the Source Provider repo to the folder containing kustomization.yaml
  helmCommandFlags: By Default, Harness versions ConfigMaps and Secrets that are deployed into the Kubernetes Cluster.
  helmCommandFlagLabel: Helm Command Flags (optional)
  helmCommandType: Command Type
  helmVersionRequired: 'Helm Version is required'
  commandFlagRequired: 'Command Flag is required'
  folderPathRequired: Folder Path is required
  chartPathRequired: Chart Path is required
  kustomizePathRequired: Kustomize Path is required
  pathRequired: Path is required
  path: 'Path'
  osTemplatePath: 'Template File Path'
  osTemplatePathPlaceHolder: 'Enter Template File Path'
  osTemplatePathRequired: Template File Path is required
  pathPlaceholder: Enter file path
  bucketName: Bucket Name
  gitFetchTypeLabel: Git Fetch Type
  commitId: Commit ID
  branchPlaceholder: Enter branch name here
  commitPlaceholder: Enter Commit ID here
  filePathPlaceholder: Enter overrides file path
  kustomizeFolderPath: Kustomize Folder Path
  http:
    chartName: 'Helm Chart Name'
    chartVersion: 'Helm Chart Version'
    chartNameRequired: 'Chart Name is required'
    chartNamePlaceHolder: 'Enter Chart Name'
    chartVersionPlaceHolder: 'Enter Chart Version'
    chartVersionRequired: 'Chart Version is required'
failureStrategies:
  selectStrategy: '{{ $.common.selectStrategy }}'
  performAction: '{{ $.common.performAction }}'
  title: Failure Strategy
  helpText: |
    Define one or more failure strategies to control the behavior of your pipeline when your step execution encounters an error.
  defaultStageText: |
    On all errors other than those specified in failure strategies defined here, perform action:
  onFailureOfType: On failure of type
  fieldLabels:
    retryCountLabel: Retry count
    retryIntervalsLabel: Retry intervals
    onTimeoutLabel: Post timeout action
    onRetryFailureLabel: Post retry failure action
  strategiesLabel:
    Retry: '{{ $.retry }}'
    Abort: '{{ $.abort }}'
    Ignore: Ignore Failure
    StageRollback: Rollback Stage
    StepGroupRollback: Rollback Step Group
    ManualIntervention: Manual Intervention
    MarkAsSuccess: Mark As Success
  errorTypeLabels:
    Authentication: Authentication Errors
    Authorization: Authorization Errors
    Connectivity: Connectivity Errors
    Timeout: Timeout Errors
    Verification: Verification Errors
    DelegateProvisioning: Delegate Provisioning Errors
    AnyOther: Any Other
  validation:
    errorsRequired: At least one failure type is required
    errorsMinimum: '{{ $.pipeline.failureStrategies.validation.errorsRequired }}'
    actionRequired: Action is required
    retryCountInteger: Retry Count must be a positive integer
    retryCountRequired: Retry Count is required
    retryCountMinimum: Retry Count must be greater or equal to 1
    retryCountMaximum: Retry Count cannot be more than {{ count }}
    retryIntervalRequired: Retry Interval is Required
    retryIntervalMinimum: At least one retry interval is Required
    timeoutRequired: Timeout is required
    onRetryFailureRequired: Retry failure action is required
    onTimeoutRequired: Timeout failure action is required
selectOrCreatePipeline:
  pipelineNameRequired: Please select a pipeline
  setupHeader: Create or Select a Pipeline
  selectAPipeline: Select an existing Pipeline
createANewPipeline: Create a new pipeline
createPipeline:
  setupHeader: Setup Pipeline
  setupSubtitle: Letâ€™s get you started on your pipeline.
  setupLater: Setup Later
  learnMore: Learn More
selectOrCreateForm:
  description: Define pipelines that enable you to improve your deployment times, manage your integrations and view your services all in one place.
execution:
  stepTitlePrefix: 'Step: '
  retryStepCount: 'Retry #{{ num }}'
  currentExecution: Current Execution
  actions:
    resumePipeline: Resume Pipeline
    rerunPipeline: Re-run Pipeline
    pausePipeline: Pause Pipeline
    abortPipeline: Abort Pipeline
    resumeStage: Resume Stage
    rerunStage: Re-run Stage
    pauseStage: Pause Stage
    abortStage: Abort Stage
    downloadLogs: Download logs
