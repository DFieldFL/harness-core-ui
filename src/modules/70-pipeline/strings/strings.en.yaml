enterDescription: Enter Description
verificationResult: 'Verification result:'
estimatedTimeRemaining: 'Estimated time remaning:'
progressPercentage: 'Progress percentage:'
discard: Discard
enableVerificationOptions: Enable verification options
closeStepConfig: Step Config
infrastructureKey: 'Infrastructure Key'
stepConfigHasChanges: Form has some unsaved changed, Do you want to apply the changes?
clickHere: Click here
barrierStep:
  barrierReference: Barrier Reference
  barrierReferenceRequired: Barrier Reference is required
  barrierReferencePlaceholder: Select Barrier Reference
approvalStep:
  message: 'Approval Message'
  approvers: 'Approver(s)'
  approversWithColon: '{{$.pipeline.approvalStep.approvers}}:'
  approverInputs: 'Inputs to be provided by approver'
  includePipelineExecutionHistory: 'Include pipeline execution history in approval details'
  addUserGroups: Add User Groups
  fetchingUserGroups: Fetching user groups
  fetchUserGroupsFailed: Failed to fetch user groups
  minimumCount: 'Number of approvers that are required at this step'
  disallowPipelineExecutor: 'Disallow the executor from approving the pipeline'
  validation:
    approvalMessage: Approval message is required.
    userGroups: 'Please provide user groups.'
    minimumCountOne: 'Minimum count cannot be less than one.'
    minimumCountRequired: 'Minimum count is required.'
  status:
    APPROVE: Approved
    REJECT: Rejected
jiraApprovalStep:
  connectToJira: Connect to Jira
  connectorRef: Jira Connector
  project: Jira Project
  issueType: Issue Type
  issueKey: Issue Key
  issueKeyPlaceholder: Enter Jira Issue key
  fetchingProjectsPlaceholder: Fetching projects...
  fetchProjectsError: Failed to fetch projects
  fetchingIssueTypePlaceholder: Fetching issue types...
  fetchIssueTypesError: Failed to fetch issue types
  approvalCriteria: Approval Criteria
  rejectionCriteria: Rejection Criteria
  rejectionCriteriaOptional: Rejection Criteria (Optional)
  jexlExpressionLabelApproval: If the JEXL Expression evaluates to true, approve this step
  jexlExpressionLabelRejection: If the JEXL Expression evaluates to true, reject this step
  jexlExpressionPlaceholder: |
    Example: <+issue.Status> == "Done"
  fetchingFields: Fetching fields...
  match: Match
  allConditions: All conditions
  anyCondition: Any condition
  jiraField: Jira Field
  jexlExpressionApprovalCriteria: JEXL Expression for approval criteria
  jexlExpressionRejectionCriteria: JEXL Expression for rejection criteria
  validations:
    connectorRef: Jira Connector is required.
    project: Project is required.
    issueKey: Issue Key is required.
    issueType: Issue Type is required.
    approvalCriteriaCondition: Atleast one condition is required.
    expression: Expression value is required.
jiraCreateStep:
  fields: Jira Fields
  summaryPlaceholder: Enter a Title or Summary
  addFields: Add Jira Fields
  selectFieldsHeading: Select fields you would like to add.
  fieldSelectorAdd: '+ Fields'
  selectFromFieldList: Select from Field List
  provideFieldList: Provide Field List
  selectFieldListHelp: Select your project and issue type to list available fields to choose from.
  fetchingFields: Fetching your fields
  fieldsSelectorPlaceholder: Your fields will be populated here
  validations:
    summary: Summary is required.
jiraUpdateStep:
  statusTransitionAccordion: Status and Transition (Optional)
  transitionLabel: Transition Name (Optional)
  fetchingStatus: Fetching status list...
  projectIssueTypeDisclaimer:
    Please ensure the values for your project and issuetype matches the values in your issue key. If the
    values don’t match, there will be an error at runtime.
  validations:
    status: Status is required.
manifestType:
  gitConnectorLabel: 'Git'
  bitBucketLabel: 'Bitbucket'
  httpHelmRepoConnectorLabel: 'HTTP Helm'
  manifestIdentifier: Manifest Identifier
  manifestPlaceholder: Enter Manifest Identifier
  manifestSource: Manifest Source
  manifestDetails: Manifest Details
  manifestRepoType: '{{ $.manifestsText }} {{ $.typeLabel }}'
  specifyManifestRepoType: 'Specify {{ $.manifestsText }} {{ $.typeLabel }}'
  specifyManifestStore: 'Specify {{ $.manifestsText }} {{$.store}}'
  selectManifestStore: '{{$.select}} {{ $.manifestsText }} {{$.store}}'
  helmSkipResourceVersion: By selecting this option, Harness will no longer version ConfigMaps and Secrets for this Service.
  pluginPathHelperText: Enter the path to the dedicated directory for the plugin on the Delegate host(s). For example, '$HOME/plugin'. The default directory is named $XDG_CONFIG_HOME/kustomize/plugin and its value is $HOME/.config
  kustomizePathHelperText: Enter the path from the root of the Source Provider repo to the folder containing kustomization.yaml
  helmCommandFlags: By Default, Harness versions ConfigMaps and Secrets that are deployed into the Kubernetes Cluster.
  helmCommandFlagLabel: Helm Command Flags (optional)
  helmCommandType: Command Type
  helmVersionRequired: 'Helm Version is required'
  commandFlagRequired: 'Command Flag is required'
  folderPathRequired: Folder Path is required
  chartPathRequired: Chart Path is required
  kustomizePathRequired: Kustomize Path is required
  reponameRequired: Repository name is required
  pathRequired: Path is required
  path: '{{$.common.path}}'
  osTemplatePath: 'Template File Path'
  osTemplatePathPlaceHolder: 'Enter Template File Path'
  osTemplatePathRequired: Template File Path is required
  pathPlaceholder: Enter file path
  bucketName: Bucket Name
  gitFetchTypeLabel: Git Fetch Type
  commitId: Commit ID
  branchPlaceholder: Enter branch name here
  commitPlaceholder: Enter Commit ID here
  filePathPlaceholder: Enter file or folder path
  kustomizeFolderPath: Kustomize Folder Path
  repoNamePlacefolder: Enter repo name here
  http:
    chartName: 'Helm Chart Name'
    chartVersion: 'Helm Chart Version'
    chartNameRequired: 'Chart Name is required'
    chartNamePlaceHolder: 'Enter Chart Name'
    chartVersionPlaceHolder: 'Enter Chart Version'
    chartVersionRequired: 'Chart Version is required'
failureStrategies:
  selectStrategy: '{{ $.common.selectStrategy }}'
  performAction: '{{ $.common.performAction }}'
  title: Failure Strategy
  helpText: |
    Define one or more failure strategies to control the behavior of your pipeline when your step execution encounters an error.
  defaultStageText: |
    On all errors other than those specified in failure strategies defined here, perform action:
  onFailureOfType: On failure of type
  fieldLabels:
    retryCountLabel: Retry count
    retryIntervalsLabel: Retry intervals
    onTimeoutLabel: Post timeout action
    onRetryFailureLabel: Post retry failure action
  strategiesLabel:
    Retry: '{{ $.retry }}'
    Abort: '{{ $.abort }}'
    Ignore: Ignore Failure
    StageRollback: Rollback Stage
    StepGroupRollback: Rollback Step Group
    ManualIntervention: Manual Intervention
    MarkAsSuccess: Mark As Success
  errorTypeLabels:
    Authentication: Authentication Errors
    Application: Application Errors
    Authorization: Authorization Errors
    Connectivity: Connectivity Errors
    Timeout: Timeout Errors
    Verification: Verification Errors
    DelegateProvisioning: Delegate Provisioning Errors
    AnyOther: Any Other
  validation:
    errorsRequired: At least one failure type is required
    errorsMinimum: '{{ $.pipeline.failureStrategies.validation.errorsRequired }}'
    actionRequired: Action is required
    retryCountInteger: Retry Count must be a positive integer
    retryCountRequired: Retry Count is required
    retryCountMinimum: Retry Count must be greater or equal to 1
    retryCountMaximum: Retry Count cannot be more than {{ count }}
    retryIntervalRequired: Retry Interval is Required
    retryIntervalMinimum: At least one retry interval is Required
    retryIntervalMaxmimum: Number of retry intervals cannot be more than the retry count
    timeoutRequired: Timeout is required
    onRetryFailureRequired: Retry failure action is required
    onTimeoutRequired: Timeout failure action is required
selectOrCreatePipeline:
  pipelineNameRequired: Please select a pipeline
  setupHeader: Create or Select a Pipeline
  selectAPipeline: Select an existing Pipeline
createANewPipeline: Create a new pipeline
createPipeline:
  setupHeader: Setup Pipeline
  setupSubtitle: Let’s get you started on your pipeline.
  setupLater: Setup Later
  learnMore: Learn More
selectOrCreateForm:
  description: Define pipelines that enable you to improve your deployment times, manage your integrations and view your services all in one place.
execution:
  stagesExecuted: Stages executed (most recent first)
  upcomingStagesPrefix: 'Upcoming stages: '
  stepTitlePrefix: 'Step: '
  stageTitlePrefix: 'Stage: '
  noInputsText: No inputs found
  retryStepCount: 'Retry #{{ num }}'
  currentExecution: Current Execution
  timePrefix: 'Execution Time: '
  actions:
    resumePipeline: Resume Pipeline
    rerunPipeline: Re-run Pipeline
    pausePipeline: Pause Pipeline
    abortPipeline: Abort Pipeline
    resumeStage: Resume Stage
    rerunStage: Re-run Stage
    pauseStage: Pause Stage
    abortStage: Abort Stage
    downloadLogs: Download logs
resourceConstraints:
  title: Resource Constraint
  infoText: 'You have {{executioncount}} executions in queue that have to complete before your execution begins. Only one execution on a K8s namespace is allowed at a time.'
  currentlyExecuting: ' ( currently executing )'
  yourPipeline: ' ( you execution )'
targets:
  title: Targets
barriers:
  syncBarriers: Synchronization Barriers
  flowControl: Flow Control
  addBarrier: + Add Barrier
  tooltips:
    barrierWaiting: 'Waiting for another barrier '
    timeout: 'to Timeout'
  validation:
    barrierNamerequired: 'Enter name of barrier'
executionStatus:
  Failed: FAILED
  Success: SUCCESS
  Aborted: ABORTED
  Error: ERROR
  Paused: PAUSED
  Pausing: PAUSING
  Waiting: WAITING
  Aborting: ABORTING
  Running: RUNNING
  Queued: QUEUED
  Skipped: SKIPPED
  Starting: STARTING
  Expired: EXPIRED
  Suspended: SUSPENDED
  NotStarted: NOT STARTED
  ApprovalRejected: REJECTED
  Unknown: UNKNOWN
logs:
  fetchError: Could not fetch logs. Please try again later.
conditionalExecution:
  title: Conditional Execution
  subTitle: Conditional Execution allows users to set conditions to determine when the {{entity}} should be executed.
  statusOption:
    success: Execute this {{entity}} if the {{parentEntity}} execution is successful thus far
    all: Always execute this {{entity}}
    failure: Execute this {{entity}} only if {{parentEntity}} execution failed in prior stages
  condition: And execute this {{entity}} only if the following JEXL Condition evaluates to True
  toolTip:
    stageTitle: Conditions for Stage Execution
    stepTitle: Conditions for Step Execution
    resolvedVariables: RESOLVED VARIABLES
  belowExpression: below expression is true
startTime: Start time
duration: Duration
and: AND
gitDetails: git details
triggers:
  aboutTriggers: Triggers are used to automate the execution of pipelines based on some event like new artifact/manifest, or run on a schedule or an external webhook.
  addNewTrigger: Add New Trigger
  triggersLabel: 'Triggers'
  triggersSubLabel: 'All Trigger Types'
  searchPlaceholder: 'Search Triggers'
  noTriggersFound: 'No Triggers Found'
  newTrigger: + New Trigger
  pipelineExecutionInput: Pipeline Execution Input
  lastExecutionDetails: Last Execution Details
  lastExecutionAt: 'Last execution at'
  showAllTriggers: 'Show all Triggers'
  onNewWebhookTitle: 'On New Webhook'
  onNewArtifactTitle: 'On New Artifact/Manifest'
  onNewScheduleTitle: 'On New Schedule'
  newArtifactLabel: 'New Artifact'
  newManifestLabel: 'New Manifest'
  onScheduleLabel: 'On Schedule'
  cronLabel: 'Cron'
  scheduledLabel: 'Scheduled'
  triggerConfigurationLabel: 'Trigger Configuration'
  pipelineInputLabel: 'Pipeline Input'
  updateTrigger: 'Update trigger'
  createTrigger: 'Create trigger'
  deleteTrigger: 'Delete Trigger'
  confirmDelete: 'Are you sure you want to delete trigger' # followed by name
  pageNotFound: 'Page not found'
  triggerLabel: 'Trigger'
  lastActivationLabel: 'LAST ACTIVATION'
  enableLabel: 'ENABLE'
  activityActivation: '{{numActivations}} Activations in'
  activityDays: 'Last {{numDays}} days'
  copyAsUrl: 'Copy as Webhook URL'
  copyAsCurl: 'Copy as cURL Command'
  cannotParseTriggersData: 'Cannot parse trigger data'
  cannotParseInputValues: 'Cannot parse pipeline input values'
  validation:
    triggerName: 'Trigger Name is required.'
    identifier: 'Identifier is required.'
    event: 'Event is required.'
    connector: 'Connector is required.'
    repoName: 'Repository Name is required for Connector with Account URL Type.'
    actions: 'Actions is required.'
    operator: 'Operator is required with Matches Value.'
    matchesValue: 'Matches Value is required with Operator.'
    payloadConditions: 'Each payload condition requires values for Attribute, Operator, and Matches Value.'
    headerConditions: 'Each header condition requires values for Attribute, Operator, and Matches Value.'
    cronExpression: 'Valid cron expression is required.'
  toast:
    successfulCreate: 'Successfully created {{name}}.'
    successfulUpdate: 'Successfully updated {{name}}.'
    toggleEnable: 'Successfully {{enabled}} {{name}}.'
    webhookUrlCopied: 'Webhook URL is copied to clipboard.'
    webhookCurlCopied: 'Webhook cURL Command is copied to clipboard.'
  triggerConfigurationPanel:
    title: 'Trigger Configuration: On New Webhook'
    triggerName: 'Trigger Name'
    listenOnNewWebhook: 'Listen on New Webhook'
    payloadType: 'Payload Type'
    event: 'Event'
    actions: Actions
    anyActions: Any Actions
    copiedToken: 'Successfully copied secure token'
    regenerateToken: 'Regenerate Token'
    regeneratedToken: 'Successfully regenerated secure token'
    secureTokenRegenerateWarning: 'When the existing secure token is regenerated or removed and the trigger is saved, the existing webhook configured in third party tools will be invalid. You will need to navigate to them and update the webhook.'
    recurrenceLabel: Recurrence
    selectTimezonePlaceholder: Select timezone
  conditionsPanel:
    subtitle: 'Specify the conditions for executing the pipeline - you can choose to trigger the pipeline only when your artifact build or tag or label matches a certain value or pattern.'
    branchConditions: 'Branch Conditions'
    sourceBranch: 'Source Branch'
    targetBranch: 'Target Branch'
    branchName: 'Branch Name'
    tagName: 'Tag Name'
    headerConditions: 'Header Conditions'
    payloadConditions: 'Payload Conditions'
    attribute: 'Attribute'
    operator: 'Operator'
    matchesValue: 'Matches Value'
    jexlCondition: 'JEXL Condition'
  pipelineInputPanel:
    noRuntimeInputs: 'No Runtime Inputs'
    automaticallyExtractedFromText: Automatically extracted from event payload
  triggerOverviewPanel:
    title: 'Trigger Overview'
  schedulePanel:
    title: 'Schedule'
    minutesLabel: 'Minutes'
    hourlyTabTitle: 'Hourly'
    dailyTabTitle: 'Daily'
    weeklyTabTitle: 'Weekly'
    monthlyTabTitle: 'Monthly'
    yearlyTabTitle: 'Yearly'
    runEvery: 'Run every'
    runDailyAt: 'Run daily at'
    runAt: 'Run at'
    runOn: 'Run on'
    runOnSpecificDay: 'Run on a specific day at monthly interval'
    runOnSpecificDayMonth: 'Run on a specific day and month'
    startingWith: 'Starting with'
    enterCustomCron: 'Enter a custom cron expression'
    minutesParentheses: 'minute(s)'
    minutesAfterTheHour: 'minute(s) after the hour'
    hoursAnd: 'hours(s) and'
    ofEvery: 'of every'
    onThe: 'on the'
    monthsParentheses: 'month(s)'
    hoursLabel: 'Hours'
    dayOfMonthLabel: 'Day of month'
    monthLabel: 'Month'
    dayOfWeekLabel: 'Day of week'
    MON: 'MON'
    TUE: 'TUE'
    WED: 'WED'
    THU: 'THU'
    FRI: 'FRI'
    SAT: 'SAT'
    SUN: 'SUN'
    expressionBreakdown: 'Expression Breakdown'
    cronExpression: 'Cron Expression'
dashboards:
  failedBuilds: Failed Builds
  activeBuilds: Active Builds
  workloads: Workloads
  failedDeployments: Failed Deployments
  activeDeployments: Active Deployments
  pendingDeployments: Pending Approval/Manual Intervention
  noRepositories: No Repositories found
  noFailedBuilds: No Failed Builds found
  noActiveBuilds: No Active Builds found
  noWorkloads: 'No Workloads found'
  noFailedDeployments: 'No Failed Deployments found'
  noActiveDeployments: 'No Active Deployments found'
  noPendingDeployments: 'No Pending Deployments found'
  buildExecutions: Build Executions
  buildHealth: Build health
  totalBuilds: Total Builds
  testCycleTimeSaved: Test Cycle Time Saved
  successfulBuilds: Successful Builds
  pipelineHealth: Pipeline health
  totalExecutions: Total Executions
  successRate: Success Rate
  meanDuration: Mean Duration
  medianDuration: Median Duration
