createNewConnector: Create New Connector
confirmDeleteTitle: Delete Connector
editConnector: Edit the connector
confirmDelete: Are you sure you want to delete the Connector
testInProgress: Test in progress
artifactRepository: ' Artifact {{ $.repository }}'
artifactRepoType: 'Artifact {{$.repositoryType}}'
specifyArtifactRepoType: 'Specify Artifact {{ $.repositoryType }}'
specifyArtifactRepo: 'Specify Artifact {{ $.repository }}'
newArtifactRepository: 'New Artifact Repository Connector'
selectConnectorLabel: Select Artifact Repository Connector
stepThreeName: '{{$.common.labelTestConnection}}'
stepFourName: 'Artifact Location'
name: Connector Name
updating: 'Updating connector {{name}}'
creating: 'Creating connector {{name}}'
successfullCreate: 'Connector {{name}} created successfully'
successfullUpdate: 'Connector {{name}} updated successfully'
connectorNotFound: Connector not found.
scopeError: 'Cannot create a connector at {{createdAtScope}} scope from {{createdFromScope}} scope.'
createFromYaml: 'Create New Connector from YAML'
successfullyCreated: 'Connector created successfully'
secretManagerDetails: 'Secret Manager Details'
gcrConnectorDetails: 'Google Container Registry Overview'
hashicorpVaultDetails: 'HashiCorp Vault Overview'
appDynamicsDetails: 'AppDynamics Connector Details'
splunkConnectorDetails: 'Splunk Connector Details'
datadogConnectorDetails: 'Datadog Connector Details'
sumoLogicConnectorDetails: 'SumoLogic Connector Details'
newRelicConnectorDetails: New Relic Connector Details
prometheusConnectorDetails: Prometheus Connector Details
prometheusLabel: Prometheus
dynatraceLabel: Dynatrace
appdLabel: AppDynamics
newRelicLabel: New Relic
splunkLabel: Splunk
dynatraceConnectorDetails: Dynatrace Connector Details
connectorDetailsHeader: '{{type}} Connector Details'
addConnectorDetails: Add {{type}} Verification Provider
unableToCreateConnector: Unable to create connector
unableToUpdateConnector: Unable to update connector
encryptedAPIKeyLabel: Encrypted API Key
encryptedAPIKeyValidation: Encrypted API Key is required.
tenantId: Tenant ID
tenantIdRequired: Tenant ID is required
reportNameRequired: '{{ $.common.reportNameRequired }}'
connectorAlreadyExist: Connector already exists for the cloud account
loginToMasterAccount: and login to your master account
roleARN: Create Cross Account Role
ifReq: if required.
selectConnector: Select Connector
apiKey: '{{$.common.apikey}}'
delegateInClusterInfo: 'Use the credentials of a specific Harness Delegate (IAM role, service account, etc)'
title:
  k8sCluster: 'Kubernetes Cluster'
  gcpConnector: 'Google Cloud Provider'
  helmConnector: 'HTTP Helm Repo'
  gitConnector: 'Git Connector'
  githubConnector: 'GitHub Connector'
  gitlabConnector: 'GitLab Connector'
  bitbucketConnector: 'Bitbucket Connector'
  hashicorpVault: 'HashiCorp Vault'
  jira: 'Jira'
  secretManager: 'Secret Manager'
  appdynamics: 'AppDynamics connector'
  splunk: 'Splunk connector'
  aws: 'AWS Cloud Provider'
  awsCodeCommit: 'AWS CodeCommit'
  nexus: 'Nexus Repository'
  artifactory: 'Artifactory Repository'
  awsKms: 'AWS Key Management Service'
  delegateSelection: 'Delegate Selection'
  ceAzureConnector: 'Azure Connector'
  datadog: 'Datadog'
  azureKeyVault: 'Azure Key Vault'
  sumologic: 'SumoLogic'
name_labels:
  Kubernetes: 'Kubernetes Connector Name'
  HttpHelmRepo: 'Helm Http Connector Name'
  Git: 'Git Connector Name'
  Github: 'GitHub Connector Name'
  Gitlab: 'GitLab Connector Name'
  Bitbucket: 'Bitbucket Connector Name'
  Docker: 'Docker Connector Name'
  GCP: 'GCP Connector Name'
  AWS: 'AWS Connector Name'
  ECR: ECR Connector Name'
  Nexus: 'Nexus Connector Name'
  Artifactory: 'Artifactory Connector Name'
  SecretManager: 'Secret Manager Name'
  AppDynamics: 'AppDynamics Connector Name'
  Splunk: 'Splunk Connector Name'
testConnectionStep:
  errorDetails: Click to view error details
  noDelegate: Unable to get delegate information
  executingOn: 'Executed on : '
  verificationSuccessful: Verification successful
  viewPermissions: View permissions required
  installNewDelegate: Install new delegate
  placeholderError: Test failed for the connector
  url:
    k8s: 'Master URL : '
    docker: 'Docker Registry URL : '
    artifactory: 'Artifactory Repository URL : '
    nexus: 'Nexus Repository URL : '
    splunk: 'Splunk URL : '
    appD: 'Controller URL : '
    vault: 'Vault URL : '
    bitbucket: 'URL : '
    gcr: 'GCR URL : '
  validationText:
    k8s: Validating the reachability of provided URL
    docker: Validating Docker Registry authentication and permissions
    artifactory: Validating Artifactory Repository authentication and permissions
    nexus: Validating Nexus Repository authentication and permissions
    gcp: Validating Google Cloud Provider authentication and permissions
    gcr: Validating Google Container Registry authentication and permissions
    aws: Validating the AWS Cloud Provider authentication and permissions
    appD: Validating AppDynamics authentication and permissions
    splunk: Validating Splunk authentication and permissions
    vault: Validating HashiCorp Vault authentication and permissions
    bitbucket: Validating Bitbucket authentication and permissions
    gitlab: Validating GitLab authentication and permissions
    github: Validating GitHub authentication and permissions
    git: Validating Git authentication and permissions
    azure: Validating Azure authentication and permissions
    datadog: Validating Datadog authentication and permissions
    azureKeyVault: Validating Azure key vault authentication and permissions
    jira: Validating Jira authentication and permissions
    sumologic: Validating Sumologic authentication and permissions
httpHelm:
  httpHelmRepoUrl: 'Helm Repo URL'
jira:
  jiraUrl: 'Jira URL'
k8:
  delegateOutClusterInfo: 'Specify master URL and credentials'
  delegateInClusterInfo: '{{ $.connectors.delegateInClusterInfo }}'
  masterUrlLabel: 'Master URL'
  serviceAccountToken: 'Service Account Token'
  serviceAccountKey: 'Service Account Key'
  skipDefaultValidation: 'Skip default namespace validation'
  OIDCIssuerUrl: OIDC Issuer URL
  OIDCUsername: 'OIDC Username'
  OIDCPassword: 'OIDC Password'
  OIDCClientId: 'OIDC Client ID'
  OIDCSecret: 'OIDC Secret'
  clientSecretOptional: 'Client Secret (optional)'
  OIDCScopes: 'OIDC Scopes (optional)'
  clientKey: 'Client Key'
  clientKeyPassphrase: 'Client Key Passphrase (optional)'
  clientCertificate: 'Client Certificate'
  clientKeyAlgorithm: 'Client Key Algorithm'
  clientKeyAlgorithmPlaceholder: Select or Enter a Client Key Algorithm
  clientKeyCACertificate: 'CA Certificate (optional)'
  placeholder:
    masterUrl: '/URL'
  authLabels:
    OIDC: 'OpenID Connect'
    clientKeyCertificate: 'Client Key Certificate'
  validation:
    clientKeyAlgo: Client Key Algorithm is required
hashiCorpVault:
  appRoleId: 'App Role ID'
  baseSecretPath: 'Base Secret Path (optional)'
  secretId: 'Secret ID'
  stepTwoName: 'HashiCorp Vault Details'
  vaultUrl: 'Vault URL'
  engineName: 'Secret Engine Name'
  engineVersion: 'Secret Engine Version'
  renewal: 'Renewal Interval (minutes)'
  readOnly: '{{$.common.readOnly}}'
  readOnlyVault: 'Read-only Vault'
  default: 'Default'
  defaultVault: 'Use as Default Secrets Manager'
nexus:
  nexusServerUrl: 'Nexus Repository URL'
artifactory:
  artifactoryServerUrl: 'Artifactory Repository URL'
GCP:
  delegateOutClusterInfo: 'Specify credentials here'
  delegateInClusterInfo: '{{ $.connectors.delegateInClusterInfo }}'
ECR:
  name: ECR
  fullName: ECR Container Registry
GCR:
  name: GCR
  fullName: Google Container Registry
  artifactServer: 'GCR Server'
  stepTwoName: 'Google Container Registry Details'
  registryHostname: 'GCR Registry URL'
GCS:
  name: GCS
  fullName: Google Cloud Storage
S3: S3
docker:
  dockerRegistryURL: 'Docker Registry URL'
  dockerProvideType: 'Provider Type'
  dockerHub: 'DockerHub'
  harbour: 'Harbour'
  quay: 'Quay'
  other: 'Other (Docker V2 compliant)'
  dockerRepository: Docker Repository
  dockerRepositoryInfo: Docker repository. For example, "plugins/s3"
helmRepo:
  helmRepoUrl: 'Helm Repository URL'
aws:
  awsAccessKey: AWS Access Key
  accessKey: '{{ $.common.accessKey }}'
  secretKey: '{{ $.common.secretKey }}'
  enableCrossAcc: Enable cross-account access
  crossAccURN: Cross account role URN
  externalId: External Id (Optional)
  assumeIAMRole: Assume IAM role on delegate
  validation:
    delegateSelector: 'Delegate Tag is required'
    secretKeyRef: 'Secret key is required'
    accessKey: 'Access key is required'
    crossAccountRoleArn: 'Role ARN is required'
awsCodeCommit:
  repoUrl: 'AWS CodeCommit Repository URL'
appD:
  connectionDetailsHeader: AppDynamics Connection Details
  apiClient: API Client
  clientId: Client Id
  clientSecret: Client Secret
  controllerURL: Controller URL
  accountName: '{{ $.common.accountName }}'
  validation:
    controllerURL: Controller URL is a required field
    clientId: Client Id is a required field
    clientSecret: Client Secret is a required field
newRelic:
  subTitle: To add New Relic connector, you will need access to New Relic Insights API. Verification analysis is limited to APM only.
  urlFieldLabel: New Relic URL
  accountIdFieldLabel: New Relic Account ID
  urlValidation: New Relic URL is required.
  accountIdValidation: New Relic Account ID is required.
  accountIdTooltip: For steps to get New Relic Account ID
  products:
    fullStackObservability: 'Full Stack Observability: APM'
prometheus:
  urlValidation: Prometheus URL is required.
datadog:
  encryptedAPPKeyLabel: Encrypted APP Key
  urlValidation: Datadog URL is required.
  encryptedAPPKeyValidation: Encrypted APP Key is required.
dynatrace:
  apiToken: API Token
  apiTokenValidation: API Token is required.
  urlValidation: Dynatrace URL is required.
sumologic:
  urlLabel: Sumo Logic API Server URL
  encryptedAccessIdLabel: Encrypted Access ID
  encryptedAccessKeyLabel: Encrypted Access Key
  urlValidation: SumoLogic URL is required.
  encryptedAccessIdValidation: SumoLogic Access ID is required.
  encryptedAccessKeyValidation: SumoLogic Access Key is required.
cdng:
  jobName: Job Name
  continousVerificationType: Continous Verification Type
  deploymentTag: Deployment Tag
  defineVerificationJob: Define Verification Job
  baseline: Baseline
  trafficsplit: Traffic Split (OPTIONAL)
  continousVerificationStep: Verify Step Details
  displayName: Display Name
  createCVJob: Please create a verification job
  loadingJobs: Loading verification jobs…
  noJobsConfigured: No verification jobs are configured.
  selectTheJobNameFirst: Please select the job name first by clicking on Define Verification Job Panel
  error: Something went wrong , please try again by clicking on CV step again
  monitoredService:
    label: Monitored Service
    fetchingMonitoredService: Fetching Monitored service ...
    fetchingMonitoredServiceError: Failed to fetch monitored service . Please try again by reopening the Verify Step
    autoCreateMonitoredService: Click to autocreate a monitored service
    monitoredServiceText: A monitored service for the
    backToVerifyStep: Back to Verify Step
  runTimeMonitoredService:
    pleaseSpecify: Please specify
    toFetchMonitoredService: to fetch the monitored service.
    fetchingMonitoredServiceError: Failed to fetch monitored service . Please try again by re-running the Pipeline
    noMonitoringSercvicePresent: No Monitored Service is present for selected service and environment. Verify step will be skipped.
    noHealthSourcePresent: No Health source is present . Verify step will be skipped.
    backToRunPipeline: Back to Run Pipeline
  healthSources:
    label: Health Sources
    noHealthSourcesDefined: No health sources have been defined. To complete the verification, you would need at least one healthsource added.
  validations:
    deploymentTagRequired: Deployment Tag is required
    jobNameRequired: Job name is required
    durationRequired: Duration is required
    sensitivityRequired: Sensitivity is required
    verificationTypeRequired: Verification type is required
    monitoringServiceRequired: Monitoring Service is required
    healthSourceRequired: At least one health source is required
  verificationSensitivityLabel:
    high: High
    medium: Medium
    low: Low
  baselineDefaultLabel:
    lastSuccess: Last Successful job run
  jobTypes:
    test: TEST
    blueGreen: BLUE_GREEN
    canary: CANARY
    health: HEALTH
connectAndSave: Connect and Save
connectorDetails: Connector Details
verifyConnection: Verify connection
createdSuccessfully: 'Connector {{name}} created successfully'
updatedSuccessfully: 'Connector {{name}} updated successfully'
splunk:
  connectorDetailsHeader: Splunk Connection Details
awsKms:
  accessKeyLabel: 'AWS - Access Key ID'
  secretKeyLabel: 'AWS - Secret Access Key'
  arnLabel: 'AWS ARN'
  roleArnLabel: 'Role ARN'
  assumedRoleDuration: 'Assumed Role Duration (seconds)'
  loggedAt: 'Logged at'
  validation:
    selectDelegate: 'Please select a Delegate'
    selectRegion: 'Please select a Region'
    selectAWSArn: 'AWS ARN is required'
    durationNumber: 'Duration must be between 900 and 43200 seconds'
    durationError: 'Duration must be a number'
    externalIdRegexError: 'External ID can have upper and lower case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-'
    externalIdLengthError: 'External ID must have between 2 and 1224 characters'
  awsSTS: 'Assume Role using STS on delegate'
delegate:
  configure: Configure what delegates are allowed to connect to this connector
  delegateSelectorAny: Connect via any available delegate
  delegateSelectorSelective: Connect only via delegates which has all of the following tags
  hearbeat: heartbeat
  matchesSelectors: Matches
  testDelegateConnectivity: Test Delegate Connectivity
  matchingDelegates: matching delegates
  waitingForConnection: Waiting for connection
  noDelegates: You have no delegates
  noMatchingDelegate: No eligible delegates found. Install a new delegate or continue to save.
  delegateselectionPlaceholder: Select or Enter Delegate Selectors
  noMatchingDelegatesActive: None of the matching delegates are in active state.
  couldNotFetch: Failed to update the delegate list, Will try again in {{pollingInterval}}
  delegateSelectors: Delegate Selectors
ceK8:
  infoText: 'If you have previously created a connector to the preferred cluster for any of the other modules, you may reference the same connector here and create a connector for Cloud cost management. If this is the first time creating a connector to this cluster, you may proceed without referencing.'
  selectConnectorLabel: 'Reference an existing connector'
azureKeyVault:
  labels:
    tenantId: '{{ $.connectors.tenantId }}'
    subscription: Subscription
    vaultName: Vault Name
    fetchVault: Fetch Vault
  validation:
    clientId: Client ID is required
    tenantId: '{{ $.connectors.tenantIdRequired }}'
    subscription: Subscription is required
    vaultName: Vault Name is required
ceAws:
  steps:
    overview: '{{ $.overview }}'
    cur: 'Cost and Usage Report'
    req: 'Choose requirements'
    roleARN: '{{ $.connectors.roleARN }}'
    test: '{{ $.common.labelTestConnection }}'
  overview:
    heading: '{{ $.overview }}'
    awsAccountId: 'Specify the AWS account ID'
    alreadyExist: '{{ $.connectors.connectorAlreadyExist }}'
    alreadyExistInfo:
      'The cloud account {{awsAccountID}} already has a connector “{{existingConnectorName}}” configured for
      Cost Visibility.'
    trySuggestion: '{{ $.common.errorHandler.tryTheseSuggestions }}'
    editConnector: '{{ $.connectors.editConnector }}'
    ifReq: '{{ $.connectors.ifReq }}'
    validation:
      numeric: 'AWS Account ID must be numeric'
      positive: 'AWS Account ID must be a positive number'
      required: 'AWS Account ID is required'
  cur:
    heading: '{{ $.connectors.ceAws.steps.cur }}'
    subheading: 'Cost and Usage Report provides detailed billing data across AWS accounts to help you analyze your spend.'
    followInstruction: 'Please follow the instructions to provide access to the Cost and Usage Report for the specified account ID'
    launchTemplate: 'Launch Template In AWS console'
    login: '{{ $.connectors.loginToMasterAccount }}'
    createNew: '+ Create new Cost and Usage report'
    reportName: 'Cost and Usage Report Name'
    bucketName: 'Cost and Usage S3 bucket Name'
    validation:
      reportRequired: '{{ $.connectors.reportNameRequired }}'
      bucketRequired: 'Bucket name is required'
  curExising:
    subHeading:
      'A billing report already exists for this AWS account. Click on “Continue” to use this Cost and Usage Report
      for the connector. If not, you can choose to create a new Cost and Usage Report.'
    accountID: 'Account ID '
  crossAccountRoleStep1:
    heading: 'Create Cross Account Role - Choose Permissions'
    subHeading:
      'Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to
      access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization'
    description:
      'Select the Cloud Cost Management features you would like to use on the AWS account. Each requires specific
      permissions to the cross account role (optional )'
    cost: 'Cost'
    visibility: '{{ $.common.ce.visibility }}'
    optimization: '{{ $.common.ce.optimization }}'
    visibilityDes: 'Cost insights, anomaly detection, Service insights,Creating budgets and perspectives and alerts, utilised/wasted resources.'
    optimizationDes: '{{ $.common.purpose.ce.optimizationCard.description }}'
  crossAccountRoleStep2:
    heading: 'Create Cross Account Role - Create role'
    subHeading: '{{ $.connectors.ceAws.crossAccountRoleStep1.subHeading }}'
    roleArn: '{{ $.connectors.awsKms.roleArnLabel }}'
    extId: 'External ID'
    dontHaveAccess: 'Don’t have access to add an AWS account?'
    validation:
      roleArnPattern: 'Role ARN does not match the pattern'
      roleArnRequired: 'Role ARN is Required'
  testConnection:
    heading: '{{ $.common.labelTestConnection }}'
    step1: 'Validating AWS Cloud Provider authentication'
    step2: 'Verifying the CUR report and S3 bucket name '
    step3: 'Validating the Cross-account role ARN '
ceAzure:
  guidPlaceholder: 'xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
  guidRegexError: 'It has to match GUID pattern. Example: "123e4567-e89b-12d3-a456-9AC7CBDCEE52"'
  steps:
    overview: '{{ $.overview }}'
    billingExports: Azure Billing Exports
    requirements: Choose Requirements
    servicePrincipal: Create Service Principal
    testConnection: '{{ $.common.labelTestConnection }}'
  overview:
    heading: '{{ $.overview }}'
    tenantId: Specify Azure Tenant ID
    subscriptionId: Specify Azure Subscription ID
    alreadyExist: '{{ $.connectors.connectorAlreadyExist }}'
    existingConnectorInfo: The cloud account {{accountId}} already has a connector “{{name}}” linked to it. The connector has permissions for {{featureText}}.
    trySuggestion: '{{ $.common.errorHandler.tryTheseSuggestions }}'
    editConnector: '{{ $.connectors.editConnector }}'
    required: '{{ $.connectors.ifReq }}'
  billing:
    heading: '{{ $.connectors.ceAzure.steps.billingExports }}'
    subHeading: Billing export is used to get insights into your cloud infrastructure and Azure services such as Storage account, Virtual machines, Containers etc.
    instruction: Please follow the instructions to provide access to the Billing export for the specified tenant ID
    login: '{{ $.connectors.loginToMasterAccount }}'
    launchAzureConsole: Launch Azure Billing Exports
    tooltipInstruction: Provided in the delivery options when the template is opened in the Azure console
    tooltipBtn: Show instructions
    storageAccountName: Storage Account Name
    storageAccountNameRegexError: It must be 3 to 24 characters long, and can contain only lowercase letters and numbers.
    subscriptionId: Storage Account Subscription ID
    containerName: Storage Container
    directoryName: Storage Directory
    reportName: '{{ $.common.reportName }}'
    extension:
      createBillingExportGuide: How to Create a Billing Export?
      step0: After logging into Azure billing export
      step1: Click on Add to create a new Export.
      step2: In Export Details, provide Name
      step3: For Export type, select "Daily export of month-to-date costs
      step4: Leave the Start date as Today
      step5: For the Storage, select Use existing or Create new.
      step6: If use existing
      step7: Select the Subscription where your storage account is present
      step8: Select the Storage account
      step9: If create new
      step10: Select the Subscription where you want to create the storage account
      step11: Select Resource group name for this storage account
      step12: Provide the Storage account name
      step13: Provide the Location
      step14: Provide the Container name
      step15: Provide the Directory name
      step16: Review your export details and click on Create.
      step17: Your new export appears in the list of exports
      links: 'Useful links:'
      video: Watch help video
      docs: Harness Documentation
      createExport: Creating a Billing Export
      soon: coming soon
  existingExports:
    instruction: 'A billing export already exists for this Azure account. Click on "Create new Billing Export" if you wish to create a new billing export.'
    createNewExportBtn: '+ Create new Billing Export'
    subscriptionId: Subscription ID
    tenantId: '{{ $.connectors.tenantId }}'
  chooseRequirements:
    heading: '{{ $.connectors.roleARN }}'
    subText: Choose Permissions
    subHeading: Harness uses Multitenant app to sync billing export data from source storage account to Harness. Create a service principal for this app in your Azure account and assign read permissions on that particular storage account.
    featureDesc: Select the Cloud Cost Management features you would like to use on the Azure account. Each requires specific permissions to the cross account role
    visibilityCardDesc: Cost insights, anomaly detection, service insights, creating budgets perspectives and alerts, utilised/wasted resources in clusters.
    optimizationCardDesc: Detection of orphaned resources, recommendations to save costs, scaling/tearing down, turning off in non-work hours, reserving instances.
  servicePrincipal:
    heading: '{{ $.connectors.ceAzure.steps.servicePrincipal }}'
    subHeading: Create service principal and assign permissions by running the following commands in bash terminal or in Azure cloud shell
  testConnection:
    heading: '{{ $.common.labelTestConnection }}'
    validatePermission: '{{ $.connectors.testConnectionStep.validationText.azure }}'
    verifyExport: Verifying Azure Billing Export setup
  validation:
    storageAccountName: Storage account name is required
    directoryName: Directory name is required
    containerName: Container name is required
    reportName: '{{ $.connectors.reportNameRequired }}'
    subscriptionId: Subscription ID is required
    tenantId: '{{ $.connectors.tenantIdRequired }}'
