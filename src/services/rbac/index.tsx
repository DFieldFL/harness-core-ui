/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, mutateUsingFetch, GetUsingFetchProps, MutateUsingFetchProps } from '../config'
export interface Permission {
  identifier?: string
  name?: string
  status?: 'EXPERIMENTAL' | 'ACTIVE' | 'DEPRECATED'
  scopes?: string[]
}

export interface PermissionResponse {
  permission: Permission
}

export interface Response {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: { [key: string]: any }
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ResponseListPermissionResponse {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PermissionResponse[]
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface Failure {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
  message?: string
  correlationId?: string
  errors?: ValidationError[]
}

export interface ValidationError {
  fieldId?: string
  error?: string
}

export interface Error {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
  message?: string
  correlationId?: string
  detailedMessage?: string
}

export interface Page {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: { [key: string]: any }[]
  pageIndex?: number
  empty?: boolean
}

export interface PageRoleAssignmentResponse {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: RoleAssignmentResponse[]
  pageIndex?: number
  empty?: boolean
}

export interface ResponsePageRoleAssignmentResponse {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageRoleAssignmentResponse
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface RoleAssignment {
  identifier?: string
  resourceGroupIdentifier?: string
  roleIdentifier?: string
  principalIdentifier?: string
  principalType: 'USER' | 'USER_GROUP' | 'API_KEY'
}

export interface RoleAssignmentResponse {
  roleAssignment: RoleAssignment
  parentIdentifier?: string
  managed?: boolean
  disabled?: boolean
  createdAt?: number
  lastModifiedAt?: number
}

export interface ResponseRoleAssignmentResponse {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: RoleAssignmentResponse
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ResponseRoleResponse {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: RoleResponse
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface Role {
  identifier?: string
  name?: string
  scopes?: string[]
  permissions?: string[]
  description?: string
  tags?: {
    [key: string]: string
  }
}

export interface RoleResponse {
  role: Role
  parentIdentifier?: string
  managed?: boolean
  createdAt?: number
  lastModifiedAt?: number
}

export interface PageRoleResponse {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: RoleResponse[]
  pageIndex?: number
  empty?: boolean
}

export interface ResponsePageRoleResponse {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageRoleResponse
  metaData?: { [key: string]: any }
  correlationId?: string
}

export type RoleRequestBody = Role

export interface GetPermissionListQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  resourceType?: string
}

export type GetPermissionListProps = Omit<
  GetProps<ResponseListPermissionResponse, Failure | Error, GetPermissionListQueryParams, void>,
  'path'
>

/**
 * Get All Permissions
 */
export const GetPermissionList = (props: GetPermissionListProps) => (
  <Get<ResponseListPermissionResponse, Failure | Error, GetPermissionListQueryParams, void>
    path="/permissions"
    base={getConfig('rbac/api')}
    {...props}
  />
)

export type UseGetPermissionListProps = Omit<
  UseGetProps<ResponseListPermissionResponse, Failure | Error, GetPermissionListQueryParams, void>,
  'path'
>

/**
 * Get All Permissions
 */
export const useGetPermissionList = (props: UseGetPermissionListProps) =>
  useGet<ResponseListPermissionResponse, Failure | Error, GetPermissionListQueryParams, void>(`/permissions`, {
    base: getConfig('rbac/api'),
    ...props
  })

/**
 * Get All Permissions
 */
export const getPermissionListPromise = (
  props: GetUsingFetchProps<ResponseListPermissionResponse, Failure | Error, GetPermissionListQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListPermissionResponse, Failure | Error, GetPermissionListQueryParams, void>(
    getConfig('rbac/api'),
    `/permissions`,
    props,
    signal
  )

export interface GetRoleAssignmentListQueryParams {
  pageIndex?: number
  pageSize?: number
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  principalIdentifier?: string
  roleIdentifier?: string
}

export type GetRoleAssignmentListProps = Omit<
  GetProps<ResponsePageRoleAssignmentResponse, Failure | Error, GetRoleAssignmentListQueryParams, void>,
  'path'
>

/**
 * Get Role Assignments
 */
export const GetRoleAssignmentList = (props: GetRoleAssignmentListProps) => (
  <Get<ResponsePageRoleAssignmentResponse, Failure | Error, GetRoleAssignmentListQueryParams, void>
    path="/roleassignments"
    base={getConfig('rbac/api')}
    {...props}
  />
)

export type UseGetRoleAssignmentListProps = Omit<
  UseGetProps<ResponsePageRoleAssignmentResponse, Failure | Error, GetRoleAssignmentListQueryParams, void>,
  'path'
>

/**
 * Get Role Assignments
 */
export const useGetRoleAssignmentList = (props: UseGetRoleAssignmentListProps) =>
  useGet<ResponsePageRoleAssignmentResponse, Failure | Error, GetRoleAssignmentListQueryParams, void>(
    `/roleassignments`,
    { base: getConfig('rbac/api'), ...props }
  )

/**
 * Get Role Assignments
 */
export const getRoleAssignmentListPromise = (
  props: GetUsingFetchProps<
    ResponsePageRoleAssignmentResponse,
    Failure | Error,
    GetRoleAssignmentListQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageRoleAssignmentResponse, Failure | Error, GetRoleAssignmentListQueryParams, void>(
    getConfig('rbac/api'),
    `/roleassignments`,
    props,
    signal
  )

export interface CreateRoleAssignmentQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type CreateRoleAssignmentProps = Omit<
  MutateProps<ResponseRoleAssignmentResponse, Failure | Error, CreateRoleAssignmentQueryParams, RoleAssignment, void>,
  'path' | 'verb'
>

/**
 * Create Role Assignment
 */
export const CreateRoleAssignment = (props: CreateRoleAssignmentProps) => (
  <Mutate<ResponseRoleAssignmentResponse, Failure | Error, CreateRoleAssignmentQueryParams, RoleAssignment, void>
    verb="POST"
    path="/roleassignments"
    base={getConfig('rbac/api')}
    {...props}
  />
)

export type UseCreateRoleAssignmentProps = Omit<
  UseMutateProps<
    ResponseRoleAssignmentResponse,
    Failure | Error,
    CreateRoleAssignmentQueryParams,
    RoleAssignment,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Role Assignment
 */
export const useCreateRoleAssignment = (props: UseCreateRoleAssignmentProps) =>
  useMutate<ResponseRoleAssignmentResponse, Failure | Error, CreateRoleAssignmentQueryParams, RoleAssignment, void>(
    'POST',
    `/roleassignments`,
    { base: getConfig('rbac/api'), ...props }
  )

/**
 * Create Role Assignment
 */
export const createRoleAssignmentPromise = (
  props: MutateUsingFetchProps<
    ResponseRoleAssignmentResponse,
    Failure | Error,
    CreateRoleAssignmentQueryParams,
    RoleAssignment,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseRoleAssignmentResponse,
    Failure | Error,
    CreateRoleAssignmentQueryParams,
    RoleAssignment,
    void
  >('POST', getConfig('rbac/api'), `/roleassignments`, props, signal)

export interface DeleteRoleAssignmentQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type DeleteRoleAssignmentProps = Omit<
  MutateProps<ResponseRoleAssignmentResponse, Failure | Error, DeleteRoleAssignmentQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete Role Assignment
 */
export const DeleteRoleAssignment = (props: DeleteRoleAssignmentProps) => (
  <Mutate<ResponseRoleAssignmentResponse, Failure | Error, DeleteRoleAssignmentQueryParams, string, void>
    verb="DELETE"
    path="/roleassignments"
    base={getConfig('rbac/api')}
    {...props}
  />
)

export type UseDeleteRoleAssignmentProps = Omit<
  UseMutateProps<ResponseRoleAssignmentResponse, Failure | Error, DeleteRoleAssignmentQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete Role Assignment
 */
export const useDeleteRoleAssignment = (props: UseDeleteRoleAssignmentProps) =>
  useMutate<ResponseRoleAssignmentResponse, Failure | Error, DeleteRoleAssignmentQueryParams, string, void>(
    'DELETE',
    `/roleassignments`,
    { base: getConfig('rbac/api'), ...props }
  )

/**
 * Delete Role Assignment
 */
export const deleteRoleAssignmentPromise = (
  props: MutateUsingFetchProps<
    ResponseRoleAssignmentResponse,
    Failure | Error,
    DeleteRoleAssignmentQueryParams,
    string,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseRoleAssignmentResponse, Failure | Error, DeleteRoleAssignmentQueryParams, string, void>(
    'DELETE',
    getConfig('rbac/api'),
    `/roleassignments`,
    props,
    signal
  )

export interface GetRoleQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface GetRolePathParams {
  identifier: string
}

export type GetRoleProps = Omit<
  GetProps<ResponseRoleResponse, Failure | Error, GetRoleQueryParams, GetRolePathParams>,
  'path'
> &
  GetRolePathParams

/**
 * Get Role
 */
export const GetRole = ({ identifier, ...props }: GetRoleProps) => (
  <Get<ResponseRoleResponse, Failure | Error, GetRoleQueryParams, GetRolePathParams>
    path="/roles/${identifier}"
    base={getConfig('rbac/api')}
    {...props}
  />
)

export type UseGetRoleProps = Omit<
  UseGetProps<ResponseRoleResponse, Failure | Error, GetRoleQueryParams, GetRolePathParams>,
  'path'
> &
  GetRolePathParams

/**
 * Get Role
 */
export const useGetRole = ({ identifier, ...props }: UseGetRoleProps) =>
  useGet<ResponseRoleResponse, Failure | Error, GetRoleQueryParams, GetRolePathParams>(
    (paramsInPath: GetRolePathParams) => `/roles/${paramsInPath.identifier}`,
    { base: getConfig('rbac/api'), pathParams: { identifier }, ...props }
  )

/**
 * Get Role
 */
export const getRolePromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<ResponseRoleResponse, Failure | Error, GetRoleQueryParams, GetRolePathParams> & {
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseRoleResponse, Failure | Error, GetRoleQueryParams, GetRolePathParams>(
    getConfig('rbac/api'),
    `/roles/${identifier}`,
    props,
    signal
  )

export interface UpdateRoleQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface UpdateRolePathParams {
  identifier: string
}

export type UpdateRoleProps = Omit<
  MutateProps<ResponseRoleResponse, Failure | Error, UpdateRoleQueryParams, RoleRequestBody, UpdateRolePathParams>,
  'path' | 'verb'
> &
  UpdateRolePathParams

/**
 * Update Role
 */
export const UpdateRole = ({ identifier, ...props }: UpdateRoleProps) => (
  <Mutate<ResponseRoleResponse, Failure | Error, UpdateRoleQueryParams, RoleRequestBody, UpdateRolePathParams>
    verb="PUT"
    path="/roles/${identifier}"
    base={getConfig('rbac/api')}
    {...props}
  />
)

export type UseUpdateRoleProps = Omit<
  UseMutateProps<ResponseRoleResponse, Failure | Error, UpdateRoleQueryParams, RoleRequestBody, UpdateRolePathParams>,
  'path' | 'verb'
> &
  UpdateRolePathParams

/**
 * Update Role
 */
export const useUpdateRole = ({ identifier, ...props }: UseUpdateRoleProps) =>
  useMutate<ResponseRoleResponse, Failure | Error, UpdateRoleQueryParams, RoleRequestBody, UpdateRolePathParams>(
    'PUT',
    (paramsInPath: UpdateRolePathParams) => `/roles/${paramsInPath.identifier}`,
    { base: getConfig('rbac/api'), pathParams: { identifier }, ...props }
  )

/**
 * Update Role
 */
export const updateRolePromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    ResponseRoleResponse,
    Failure | Error,
    UpdateRoleQueryParams,
    RoleRequestBody,
    UpdateRolePathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseRoleResponse, Failure | Error, UpdateRoleQueryParams, RoleRequestBody, UpdateRolePathParams>(
    'PUT',
    getConfig('rbac/api'),
    `/roles/${identifier}`,
    props,
    signal
  )

export interface DeleteRoleQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type DeleteRoleProps = Omit<
  MutateProps<ResponseRoleResponse, Failure | Error, DeleteRoleQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete Role
 */
export const DeleteRole = (props: DeleteRoleProps) => (
  <Mutate<ResponseRoleResponse, Failure | Error, DeleteRoleQueryParams, string, void>
    verb="DELETE"
    path="/roles"
    base={getConfig('rbac/api')}
    {...props}
  />
)

export type UseDeleteRoleProps = Omit<
  UseMutateProps<ResponseRoleResponse, Failure | Error, DeleteRoleQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete Role
 */
export const useDeleteRole = (props: UseDeleteRoleProps) =>
  useMutate<ResponseRoleResponse, Failure | Error, DeleteRoleQueryParams, string, void>('DELETE', `/roles`, {
    base: getConfig('rbac/api'),
    ...props
  })

/**
 * Delete Role
 */
export const deleteRolePromise = (
  props: MutateUsingFetchProps<ResponseRoleResponse, Failure | Error, DeleteRoleQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseRoleResponse, Failure | Error, DeleteRoleQueryParams, string, void>(
    'DELETE',
    getConfig('rbac/api'),
    `/roles`,
    props,
    signal
  )

export interface GetRoleListQueryParams {
  pageIndex?: number
  pageSize?: number
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  includeManaged?: boolean
}

export type GetRoleListProps = Omit<
  GetProps<ResponsePageRoleResponse, Failure | Error, GetRoleListQueryParams, void>,
  'path'
>

/**
 * Get Roles
 */
export const GetRoleList = (props: GetRoleListProps) => (
  <Get<ResponsePageRoleResponse, Failure | Error, GetRoleListQueryParams, void>
    path="/roles"
    base={getConfig('rbac/api')}
    {...props}
  />
)

export type UseGetRoleListProps = Omit<
  UseGetProps<ResponsePageRoleResponse, Failure | Error, GetRoleListQueryParams, void>,
  'path'
>

/**
 * Get Roles
 */
export const useGetRoleList = (props: UseGetRoleListProps) =>
  useGet<ResponsePageRoleResponse, Failure | Error, GetRoleListQueryParams, void>(`/roles`, {
    base: getConfig('rbac/api'),
    ...props
  })

/**
 * Get Roles
 */
export const getRoleListPromise = (
  props: GetUsingFetchProps<ResponsePageRoleResponse, Failure | Error, GetRoleListQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageRoleResponse, Failure | Error, GetRoleListQueryParams, void>(
    getConfig('rbac/api'),
    `/roles`,
    props,
    signal
  )

export interface CreateRoleQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type CreateRoleProps = Omit<
  MutateProps<ResponseRoleResponse, Failure | Error, CreateRoleQueryParams, RoleRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create Role
 */
export const CreateRole = (props: CreateRoleProps) => (
  <Mutate<ResponseRoleResponse, Failure | Error, CreateRoleQueryParams, RoleRequestBody, void>
    verb="POST"
    path="/roles"
    base={getConfig('rbac/api')}
    {...props}
  />
)

export type UseCreateRoleProps = Omit<
  UseMutateProps<ResponseRoleResponse, Failure | Error, CreateRoleQueryParams, RoleRequestBody, void>,
  'path' | 'verb'
>

/**
 * Create Role
 */
export const useCreateRole = (props: UseCreateRoleProps) =>
  useMutate<ResponseRoleResponse, Failure | Error, CreateRoleQueryParams, RoleRequestBody, void>('POST', `/roles`, {
    base: getConfig('rbac/api'),
    ...props
  })

/**
 * Create Role
 */
export const createRolePromise = (
  props: MutateUsingFetchProps<ResponseRoleResponse, Failure | Error, CreateRoleQueryParams, RoleRequestBody, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseRoleResponse, Failure | Error, CreateRoleQueryParams, RoleRequestBody, void>(
    'POST',
    getConfig('rbac/api'),
    `/roles`,
    props,
    signal
  )
