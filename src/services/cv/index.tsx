/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, mutateUsingFetch, GetUsingFetchProps, MutateUsingFetchProps } from '../config'
export interface ActivityDTO {
  accountIdentifier?: string
  projectIdentifier?: string
  orgIdentifier?: string
  serviceIdentifier?: string
  environmentIdentifier?: string
  name: string
  verificationJobRuntimeDetails?: VerificationJobRuntimeDetails[]
  activityStartTime: number
  activityEndTime?: number
  tags?: string[]
  type?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES'
}

export interface VerificationJobRuntimeDetails {
  verificationJobIdentifier?: string
  runtimeValues?: {
    [key: string]: string
  }
}

export interface AdditionalInfo {
  type?: 'TEST' | 'CANARY' | 'BLUE_GREEN' | 'HEALTH'
}

export interface DeploymentVerificationJobInstanceSummary {
  progressPercentage?: number
  startTime?: number
  durationMs?: number
  riskScore?: number
  environmentName?: string
  jobName?: string
  verificationJobInstanceId?: string
  activityId?: string
  activityStartTime?: number
  status?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
  additionalInfo?: AdditionalInfo
}

export interface ResponseMessage {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
  level?: 'INFO' | 'ERROR'
  message?: string
  exception?: Throwable
}

export interface RestResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: { [key: string]: any }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseDeploymentVerificationJobInstanceSummary {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentVerificationJobInstanceSummary
  responseMessages?: ResponseMessage[]
}

export interface StackTraceElement {
  methodName?: string
  fileName?: string
  lineNumber?: number
  className?: string
  nativeMethod?: boolean
}

export interface Throwable {
  cause?: Throwable
  stackTrace?: StackTraceElement[]
  message?: string
  localizedMessage?: string
  suppressed?: Throwable[]
}

export interface ActivityVerificationSummary {
  total?: number
  passed?: number
  failed?: number
  errors?: number
  progress?: number
  notStarted?: number
  remainingTimeMs?: number
  progressPercentage?: number
  startTime?: number
  durationMs?: number
  riskScore?: number
  aggregatedStatus?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
}

export interface DeploymentActivityVerificationResultDTO {
  tag?: string
  serviceName?: string
  serviceIdentifier?: string
  preProductionDeploymentSummary?: ActivityVerificationSummary
  productionDeploymentSummary?: ActivityVerificationSummary
  postDeploymentSummary?: ActivityVerificationSummary
}

export interface RestResponseListDeploymentActivityVerificationResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivityVerificationResultDTO[]
  responseMessages?: ResponseMessage[]
}

export interface DeploymentActivityResultDTO {
  deploymentTag?: string
  serviceName?: string
  serviceIdentifier?: string
  environments?: string[]
  deploymentResultSummary?: DeploymentResultSummary
}

export interface DeploymentResultSummary {
  preProductionDeploymentVerificationJobInstanceSummaries?: DeploymentVerificationJobInstanceSummary[]
  productionDeploymentVerificationJobInstanceSummaries?: DeploymentVerificationJobInstanceSummary[]
  postDeploymentVerificationJobInstanceSummaries?: DeploymentVerificationJobInstanceSummary[]
}

export interface RestResponseDeploymentActivityResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivityResultDTO
  responseMessages?: ResponseMessage[]
}

export interface DeploymentActivityPopoverResultDTO {
  tag?: string
  serviceName?: string
  preProductionDeploymentSummary?: DeploymentPopoverSummary
  productionDeploymentSummary?: DeploymentPopoverSummary
  postDeploymentSummary?: DeploymentPopoverSummary
}

export interface DeploymentPopoverSummary {
  total?: number
  verificationResults?: VerificationResult[]
}

export interface RestResponseDeploymentActivityPopoverResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivityPopoverResultDTO
  responseMessages?: ResponseMessage[]
}

export interface VerificationResult {
  jobName?: string
  status?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
  riskScore?: number
  remainingTimeMs?: number
  progressPercentage?: number
  startTime?: number
}

export interface ActivityVerificationResultDTO {
  activityType?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES'
  activityId?: string
  activityName?: string
  activityStartTime?: number
  environmentIdentifier?: string
  environmentName?: string
  serviceIdentifier?: string
  endTime?: number
  remainingTimeMs?: number
  overallRisk?: number
  preActivityRisks?: CategoryRisk[]
  postActivityRisks?: CategoryRisk[]
  progressPercentage?: number
  status?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
}

export interface CategoryRisk {
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  risk?: number
}

export interface RestResponseListActivityVerificationResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivityVerificationResultDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseActivityVerificationResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivityVerificationResultDTO
  responseMessages?: ResponseMessage[]
}

export interface Response {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: { [key: string]: any }
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ResponseListString {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: string[]
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface RestResponseString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string
  responseMessages?: ResponseMessage[]
}

export interface ActivityDashboardDTO {
  activityType?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES'
  activityId?: string
  activityName?: string
  activityStartTime?: number
  environmentIdentifier?: string
  environmentName?: string
  serviceIdentifier?: string
  verificationStatus?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
  activityVerificationSummary?: ActivityVerificationSummary
}

export interface RestResponseListActivityDashboardDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivityDashboardDTO[]
  responseMessages?: ResponseMessage[]
}

export interface ActivityStatusDTO {
  durationMs?: number
  progressPercentage?: number
  activityId?: string
  status?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
}

export interface RestResponseActivityStatusDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivityStatusDTO
  responseMessages?: ResponseMessage[]
}

export interface ActivitySourceDTO {
  uuid?: string
  createdAt?: number
  lastUpdatedAt?: number
  identifier: string
  name: string
  type?: 'KUBERNETES' | 'HARNESS_CD10'
}

export interface RestResponseActivitySourceDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivitySourceDTO
  responseMessages?: ResponseMessage[]
}

export interface Page {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: { [key: string]: any }[]
  pageIndex?: number
  empty?: boolean
}

export interface PageActivitySourceDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: ActivitySourceDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageActivitySourceDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageActivitySourceDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseBoolean {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: boolean
  responseMessages?: ResponseMessage[]
}

export interface KubernetesActivityDTO {
  accountIdentifier?: string
  projectIdentifier?: string
  orgIdentifier?: string
  serviceIdentifier?: string
  environmentIdentifier?: string
  name: string
  verificationJobRuntimeDetails?: VerificationJobRuntimeDetails[]
  activityStartTime: number
  activityEndTime?: number
  tags?: string[]
  message?: string
  activitySourceConfigId?: string
  eventDetails?: string
  eventType?: 'Normal' | 'Warning' | 'Error'
  kubernetesActivityType?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES'
  type?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES'
}

export interface PageString {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: string[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageString
  responseMessages?: ResponseMessage[]
}

export interface AlertCondition {
  services?: string[]
  environments?: string[]
  enabledVerifications?: boolean
  verificationsNotify?: VerificationsNotify
  enabledRisk?: boolean
  notify?: RiskNotify
  allServices?: boolean
  allEnvironments?: boolean
}

export interface AlertRuleDTO {
  uuid?: string
  enabled?: boolean
  name?: string
  alertCondition?: AlertCondition
  notificationMethod?: NotificationMethod
  identifier?: string
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface NotificationMethod {
  notificationSettingType?: 'Slack' | 'PagerDuty' | 'MicrosoftTeams' | 'Email'
  slackWebhook?: string
  slackChannelName?: string
  pagerDutyKey?: string
  emails?: string[]
}

export interface RestResponseAlertRuleDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: AlertRuleDTO
  responseMessages?: ResponseMessage[]
}

export interface RiskNotify {
  threshold?: number
}

export interface VerificationsNotify {
  activityTypes?: (
    | 'PRE_DEPLOYMENT'
    | 'DURING_DEPLOYMENT'
    | 'POST_DEPLOYMENT'
    | 'INFRASTRUCTURE_CHANGE'
    | 'CONFIG_CHANGE'
  )[]
  verificationStatuses?: ('VERIFICATION_PASSED' | 'VERIFICATION_FAILED')[]
  allActivityTpe?: boolean
  allVerificationStatuses?: boolean
}

export interface RestResponseListActivityType {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ('PRE_DEPLOYMENT' | 'DURING_DEPLOYMENT' | 'POST_DEPLOYMENT' | 'INFRASTRUCTURE_CHANGE' | 'CONFIG_CHANGE')[]
  responseMessages?: ResponseMessage[]
}

export interface PageAlertRuleDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: AlertRuleDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageAlertRuleDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageAlertRuleDTO
  responseMessages?: ResponseMessage[]
}

export interface LearningEngineTask {
  uuid?: string
  verificationTaskId?: string
  createdAt?: number
  lastUpdatedAt?: number
  accountId?: string
  analysisType?:
    | 'SERVICE_GUARD_TIME_SERIES'
    | 'LOG_CLUSTER'
    | 'SERVICE_GUARD_LOG_ANALYSIS'
    | 'CANARY_LOG_ANALYSIS'
    | 'TEST_LOG_ANALYSIS'
    | 'TIME_SERIES_CANARY'
    | 'SERVICE_GUARD_FEEDBACK_ANALYSIS'
    | 'TIME_SERIES_LOAD_TEST'
  taskPriority?: number
  analysisSaveUrl?: string
  failureUrl?: string
  analysisStartTime?: number
  analysisEndTime?: number
  analysisEndEpochMinute?: number
  taskStatus?: 'QUEUED' | 'RUNNING' | 'FAILED' | 'SUCCESS' | 'TIMEOUT'
  validUntil?: string
  type?:
    | 'SERVICE_GUARD_TIME_SERIES'
    | 'LOG_CLUSTER'
    | 'SERVICE_GUARD_LOG_ANALYSIS'
    | 'CANARY_LOG_ANALYSIS'
    | 'TEST_LOG_ANALYSIS'
    | 'TIME_SERIES_CANARY'
    | 'SERVICE_GUARD_FEEDBACK_ANALYSIS'
    | 'TIME_SERIES_LOAD_TEST'
}

export interface RestResponseLearningEngineTask {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LearningEngineTask
  responseMessages?: ResponseMessage[]
}

export interface LogClusterDTO {
  verificationTaskId?: string
  epochMinute?: number
  host?: string
  log?: string
  clusterLabel?: string
  clusterCount?: number
}

export interface RestResponseListLogClusterDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogClusterDTO[]
  responseMessages?: ResponseMessage[]
}

export interface Frequency {
  count?: number
  timestamp?: number
  riskScore?: number
}

export interface LogAnalysisCluster {
  uuid?: string
  createdAt?: number
  lastUpdatedAt?: number
  verificationTaskId?: string
  analysisStartTime?: number
  analysisEndTime?: number
  accountId?: string
  analysisMinute?: number
  label?: number
  frequencyTrend?: Frequency[]
  text?: string
  firstSeenTime?: number
  validUntil?: string
  evicted?: boolean
}

export interface RestResponseListLogAnalysisCluster {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisCluster[]
  responseMessages?: ResponseMessage[]
}

export interface Cluster {
  text?: string
  label?: number
}

export interface ClusterCoordinates {
  x?: number
  y?: number
  label?: number
  host?: string
}

export interface ClusterSummary {
  label?: number
  clusterType?: 'KNOWN_EVENT' | 'UNKNOWN_EVENT' | 'UNEXPECTED_FREQUENCY'
  risk?: number
  score?: number
  count?: number
  testFrequencyData?: number[]
}

export interface ControlClusterSummary {
  label?: number
  controlFrequencyData?: number[]
}

export interface DeploymentLogAnalysisDTO {
  clusters?: Cluster[]
  clusterCoordinates?: ClusterCoordinates[]
  resultSummary?: ResultSummary
  hostSummaries?: HostSummary[]
}

export interface HostSummary {
  host?: string
  resultSummary?: ResultSummary
}

export interface RestResponseDeploymentLogAnalysisDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentLogAnalysisDTO
  responseMessages?: ResponseMessage[]
}

export interface ResultSummary {
  risk?: number
  score?: number
  controlClusterSummaries?: ControlClusterSummary[]
  testClusterSummaries?: ClusterSummary[]
}

export interface AnalysisResult {
  label?: number
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
  count?: number
}

export interface LogAnalysisDTO {
  verificationTaskId?: string
  analysisStartTime?: number
  analysisEndTime?: number
  accountId?: string
  analysisSummaryMessage?: string
  score?: number
  analysisMinute?: number
  logClusters?: LogAnalysisCluster[]
  logAnalysisResults?: AnalysisResult[]
}

export interface RestResponseVoid {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: Void
  responseMessages?: ResponseMessage[]
}

export interface Void {
  [key: string]: any
}

export interface RestResponseListTimeSeriesMetricDefinition {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesMetricDefinition[]
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesMetricDefinition {
  metricName?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  metricGroupName?: string
  actionType?: 'IGNORE' | 'FAIL'
  comparisonType?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
  action?: 'FAIL_IMMEDIATELY' | 'FAIL_AFTER_OCCURRENCES' | 'FAIL_AFTER_CONSECUTIVE_OCCURRENCES'
  occurrenceCount?: number
  thresholdType?: 'ACT_WHEN_LOWER' | 'ACT_WHEN_HIGHER'
  value?: number
}

export interface MetricSum {
  metricName?: string
  risk?: number
  data?: number
}

export interface RestResponseMapStringMapStringListMetricSum {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: MetricSum[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMapStringMapStringListDouble {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: number[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTimeSeriesRecordDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesRecordDTO[]
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesRecordDTO {
  verificationTaskId?: string
  host?: string
  metricName?: string
  groupName?: string
  epochMinute?: number
  metricValue?: number
}

export interface RestResponseMapStringMapStringListTimeSeriesAnomalies {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: TimeSeriesAnomalies[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesAnomalies {
  transactionName?: string
  metricName?: string
  testData?: number[]
  anomalousTimestamps?: number[]
}

export interface ServiceGuardTimeSeriesAnalysisDTO {
  verificationTaskId?: string
  analysisStartTime?: number
  analysisEndTime?: number
  overallMetricScores?: {
    [key: string]: number
  }
  txnMetricAnalysisData?: {
    [key: string]: {
      [key: string]: ServiceGuardTxnMetricAnalysisDataDTO
    }
  }
}

export interface ServiceGuardTxnMetricAnalysisDataDTO {
  longTermPattern?: boolean
  lastSeenTime?: number
  risk?: number
  score?: number
  shortTermHistory?: number[]
  anomalousPatterns?: TimeSeriesAnomalies[]
  cumulativeSums?: MetricSum
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  keyTransaction?: boolean
}

export interface DeploymentTimeSeriesAnalysisDTO {
  risk?: number
  score?: number
  hostSummaries?: HostInfo[]
  transactionMetricSummaries?: TransactionMetricHostData[]
}

export interface HostData {
  hostName?: string
  risk?: number
  score?: number
  controlData?: number[]
  testData?: number[]
}

export interface HostInfo {
  hostName?: string
  primary?: boolean
  canary?: boolean
  risk?: number
  score?: number
}

export interface TransactionMetricHostData {
  transactionName?: string
  metricName?: string
  risk?: number
  score?: number
  hostData?: HostData[]
}

export interface AppDynamicsApplication {
  name?: string
  id?: number
}

export interface PageAppDynamicsApplication {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: AppDynamicsApplication[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageAppDynamicsApplication {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageAppDynamicsApplication
  responseMessages?: ResponseMessage[]
}

export interface AppDynamicsTier {
  id?: number
  name?: string
}

export interface PageAppDynamicsTier {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: AppDynamicsTier[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageAppDynamicsTier {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageAppDynamicsTier
  responseMessages?: ResponseMessage[]
}

export interface AppdynamicsMetricValueValidationResponse {
  metricName?: string
  apiResponseStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  value?: number
  errorMessage?: string
}

export interface AppdynamicsValidationResponse {
  metricPackName?: string
  overallStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  values?: AppdynamicsMetricValueValidationResponse[]
}

export interface RestResponseSetAppdynamicsValidationResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: AppdynamicsValidationResponse[]
  responseMessages?: ResponseMessage[]
}

export interface MetricDefinition {
  name?: string
  type: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  included?: boolean
  thresholds?: TimeSeriesThreshold[]
}

export interface MetricPack {
  uuid?: string
  createdAt?: number
  lastUpdatedAt?: number
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  dataSourceType: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
  identifier?: string
  category: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  metrics?: MetricDefinition[]
}

export interface TimeSeriesThreshold {
  uuid?: string
  createdAt?: number
  lastUpdatedAt?: number
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  dataSourceType: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
  metricPackIdentifier: string
  metricName: string
  metricType: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  metricGroupName?: string
  action: 'IGNORE' | 'FAIL'
  criteria: TimeSeriesThresholdCriteria
}

export interface TimeSeriesThresholdCriteria {
  type?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
  action?: 'FAIL_IMMEDIATELY' | 'FAIL_AFTER_OCCURRENCES' | 'FAIL_AFTER_CONSECUTIVE_OCCURRENCES'
  occurrenceCount?: number
  criteria?: string
}

export interface RestResponseListString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string[]
  responseMessages?: ResponseMessage[]
}

export interface CVConfig {
  uuid?: string
  dataCollectionTaskIteration?: number
  createdAt?: number
  lastUpdatedAt?: number
  verificationType: 'TIME_SERIES' | 'LOG'
  accountId: string
  connectorIdentifier: string
  serviceIdentifier: string
  envIdentifier: string
  projectIdentifier: string
  orgIdentifier: string
  category: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  perpetualTaskId?: string
  productName?: string
  identifier: string
  monitoringSourceName: string
  analysisOrchestrationIteration?: number
  type?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
  firstTimeDataCollectionTimeRange?: TimeRange
}

export interface RestResponseCVConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CVConfig
  responseMessages?: ResponseMessage[]
}

export interface TimeRange {
  startTime?: number
  endTime?: number
}

export interface RestResponseListCVConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CVConfig[]
  responseMessages?: ResponseMessage[]
}

export interface DatasourceTypeDTO {
  dataSourceType?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
  verificationType?: 'TIME_SERIES' | 'LOG'
}

export interface RestResponseSetDatasourceTypeDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DatasourceTypeDTO[]
  responseMessages?: ResponseMessage[]
}

export interface CVNGLogDTO {
  accountId?: string
  traceableId?: string
  createdAt?: number
  startTime?: number
  endTime?: number
  traceableType?: 'ONBOARDING' | 'VERIFICATION_TASK'
  type?: 'API_CALL_LOG' | 'EXECUTION_LOG'
}

export interface RestResponseListDataSourceType {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ('APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER')[]
  responseMessages?: ResponseMessage[]
}

export interface CVSetupStatus {
  stepsWhichAreCompleted?: ('ACTIVITY_SOURCE' | 'MONITORING_SOURCE' | 'VERIFICATION_JOBS')[]
  totalNumberOfServices?: number
  totalNumberOfEnvironments?: number
  numberOfServicesUsedInMonitoringSources?: number
  numberOfServicesUsedInActivitySources?: number
  servicesUndergoingHealthVerification?: number
}

export interface RestResponseCVSetupStatus {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CVSetupStatus
  responseMessages?: ResponseMessage[]
}

export interface DSConfig {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  productName?: string
  connectorIdentifier?: string
  identifier?: string
  monitoringSourceName?: string
  type?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
}

export interface RestResponseDSConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DSConfig
  responseMessages?: ResponseMessage[]
}

export interface MonitoringSource {
  monitoringSourceIdentifier?: string
  monitoringSourceName?: string
  type?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
  numberOfServices?: number
  importedAt?: number
}

export interface PageMonitoringSource {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: MonitoringSource[]
  pageIndex?: number
  empty?: boolean
}

export interface ResponsePageMonitoringSource {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageMonitoringSource
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface MonitoringSourceImportStatus {
  [key: string]: any
}

export interface ResponseMonitoringSourceImportStatus {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: MonitoringSourceImportStatus
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface RestResponseListDSConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DSConfig[]
  responseMessages?: ResponseMessage[]
}

export interface EnvToServicesDTO {
  environment?: EnvironmentResponseDTO
  services?: ServiceResponseDTO[]
}

export interface EnvironmentResponseDTO {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  identifier?: string
  name?: string
  description?: string
  type?: 'PreProduction' | 'Production'
  deleted?: boolean
  tags?: {
    [key: string]: string
  }
  version?: number
}

export interface RestResponseListEnvToServicesDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: EnvToServicesDTO[]
  responseMessages?: ResponseMessage[]
}

export interface ServiceResponseDTO {
  accountId?: string
  identifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  name?: string
  description?: string
  deleted?: boolean
  tags?: {
    [key: string]: string
  }
  version?: number
}

export interface TimeSeriesDataCollectionRecord {
  accountId?: string
  cvConfigId?: string
  verificationTaskId?: string
  host?: string
  timeStamp?: number
  metricValues?: TimeSeriesDataRecordMetricValue[]
}

export interface TimeSeriesDataRecordGroupValue {
  groupName?: string
  value?: number
  percent?: number
}

export interface TimeSeriesDataRecordMetricValue {
  metricName?: string
  timeSeriesValues?: TimeSeriesDataRecordGroupValue[]
}

export interface DataCollectionInfo {
  dataCollectionDsl?: string
  collectHostData?: boolean
  verificationType?: 'TIME_SERIES' | 'LOG'
}

export interface DataCollectionTaskDTO {
  uuid?: string
  accountId?: string
  verificationTaskId?: string
  dataCollectionInfo?: DataCollectionInfo
  startTime?: number
  endTime?: number
}

export interface RestResponseOptionalDataCollectionTaskDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DataCollectionTaskDTO
  responseMessages?: ResponseMessage[]
}

export interface DataCollectionTaskResult {
  dataCollectionTaskId?: string
  status?: 'FAILED' | 'QUEUED' | 'RUNNING' | 'WAITING' | 'EXPIRED' | 'SUCCESS'
  exception?: string
  stacktrace?: string
}

export interface HostRecordDTO {
  accountId?: string
  verificationTaskId?: string
  hosts?: string[]
  startTime?: number
  endTime?: number
}

export interface LogRecordDTO {
  accountId?: string
  verificationTaskId?: string
  host?: string
  timestamp?: number
  log?: string
}

export interface MetricDefinitionDTO {
  name?: string
  type?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  path?: string
  validationPath?: string
  thresholds?: TimeSeriesThresholdDTO[]
  included?: boolean
}

export interface MetricPackDTO {
  uuid?: string
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  dataSourceType?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
  identifier?: string
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  metrics?: MetricDefinitionDTO[]
  thresholds?: TimeSeriesThresholdDTO[]
}

export interface RestResponseListMetricPackDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: MetricPackDTO[]
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesThresholdDTO {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  dataSourceType?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
  metricPackIdentifier?: string
  metricName?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  metricGroupName?: string
  action?: 'IGNORE' | 'FAIL'
  criteria?: TimeSeriesThresholdCriteria
}

export interface RestResponseListTimeSeriesThreshold {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesThreshold[]
  responseMessages?: ResponseMessage[]
}

export interface OnboardingResponseDTO {
  accountId?: string
  result?: { [key: string]: any }
  projectIdentifier?: string
  orgIdentifier?: string
  connectorIdentifier?: string
  tracingId?: string
}

export interface RestResponseOnboardingResponseDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: OnboardingResponseDTO
  responseMessages?: ResponseMessage[]
}

export type AppDynamicsConnectorDTO = ConnectorConfigDTO & {
  username: string
  accountname: string
  controllerUrl: string
  accountId: string
  passwordRef: string
}

export interface ArtifactoryAuthCredentials {
  [key: string]: any
}

export interface ArtifactoryAuthentication {
  type: 'UsernamePassword'
  spec: ArtifactoryAuthCredentials
}

export type ArtifactoryConnector = ConnectorConfigDTO & {
  artifactoryServerUrl: string
  auth?: ArtifactoryAuthentication
}

export type ArtifactoryUsernamePasswordAuth = ArtifactoryAuthCredentials & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type AwsConnector = ConnectorConfigDTO & {
  credential: AwsCredential
}

export interface AwsCredential {
  crossAccountAccess?: CrossAccountAccess
  type: 'InheritFromDelegate' | 'ManualConfig'
  spec: AwsCredentialSpec
}

export interface AwsCredentialSpec {
  [key: string]: any
}

export interface AwsCurAttributes {
  reportName: string
  s3BucketName: string
}

export type AwsInheritFromDelegateSpec = AwsCredentialSpec & {
  delegateSelector: string
}

export type AwsManualConfigSpec = AwsCredentialSpec & {
  accessKey?: string
  accessKeyRef?: string
  secretKeyRef: string
}

export interface BitbucketApiAccess {
  type: 'UsernameToken'
  spec: BitbucketApiAccessSpecDTO
}

export interface BitbucketApiAccessSpecDTO {
  [key: string]: any
}

export interface BitbucketAuthentication {
  type: 'Http' | 'Ssh'
  spec: BitbucketCredentialsDTO
}

export type BitbucketConnector = ConnectorConfigDTO & {
  url: string
  authentication: BitbucketAuthentication
  apiAccess?: BitbucketApiAccess
  type: 'Account' | 'Repo'
}

export interface BitbucketCredentialsDTO {
  [key: string]: any
}

export type BitbucketHttpCredentials = BitbucketCredentialsDTO & {
  type: 'UsernamePassword'
  spec: BitbucketHttpCredentialsSpecDTO
}

export interface BitbucketHttpCredentialsSpecDTO {
  [key: string]: any
}

export type BitbucketSshCredentials = BitbucketCredentialsDTO & {
  spec: GitlabSshCredentialsSpec
}

export type BitbucketUsernamePassword = BitbucketHttpCredentialsSpecDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type BitbucketUsernameTokenApiAccess = BitbucketApiAccessSpecDTO & {
  username?: string
  usernameRef?: string
  tokenRef: string
}

export type CEAwsConnector = ConnectorConfigDTO & {
  crossAccountAccess: CrossAccountAccess
  curAttributes?: AwsCurAttributes
  featuresEnabled?: ('CUR' | 'EVENTS' | 'OPTIMIZATION')[]
}

export interface ConnectorConfigDTO {
  [key: string]: any
}

export interface ConnectorInfoDTO {
  name: string
  identifier: string
  description?: string
  orgIdentifier?: string
  projectIdentifier?: string
  tags?: {
    [key: string]: string
  }
  type:
    | 'K8sCluster'
    | 'Git'
    | 'Splunk'
    | 'AppDynamics'
    | 'Vault'
    | 'DockerRegistry'
    | 'Local'
    | 'GcpKms'
    | 'Gcp'
    | 'Aws'
    | 'CEAws'
    | 'Artifactory'
    | 'Jira'
    | 'Nexus'
    | 'Github'
    | 'Gitlab'
    | 'Bitbucket'
  spec: ConnectorConfigDTO
}

export interface CrossAccountAccess {
  crossAccountRoleArn: string
  externalId?: string
}

export interface CustomCommitAttributes {
  authorName?: string
  authorEmail?: string
  commitMessage?: string
}

export interface DataCollectionRequest {
  connectorInfoDTO?: ConnectorInfoDTO
  tracingId?: string
  type?:
    | 'SPLUNK_SAVED_SEARCHES'
    | 'STACKDRIVER_DASHBOARD_LIST'
    | 'STACKDRIVER_DASHBOARD_GET'
    | 'STACKDRIVER_SAMPLE_DATA'
    | 'APPDYNAMICS_FETCH_APPS'
    | 'APPDYNAMICS_FETCH_TIERS'
  baseUrl?: string
  connectorConfigDTO?: ConnectorConfigDTO
  dsl?: string
}

export interface DockerAuthCredentialsDTO {
  [key: string]: any
}

export interface DockerAuthenticationDTO {
  type: 'UsernamePassword' | 'Anonymous'
  spec?: DockerAuthCredentialsDTO
}

export type DockerConnectorDTO = ConnectorConfigDTO & {
  dockerRegistryUrl: string
  providerType: 'DockerHub' | 'Harbor' | 'Quay' | 'Other'
  auth?: DockerAuthenticationDTO
}

export type DockerUserNamePasswordDTO = DockerAuthCredentialsDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type GcpConnector = ConnectorConfigDTO & {
  credential?: GcpConnectorCredential
  gcrUrl?: string
}

export interface GcpConnectorCredential {
  type: 'InheritFromDelegate' | 'ManualConfig'
  spec: GcpCredentialSpec
}

export interface GcpCredentialSpec {
  [key: string]: any
}

export type GcpDelegateDetails = GcpCredentialSpec & {
  delegateSelector?: string
}

export type GcpKmsConnectorDTO = ConnectorConfigDTO & {
  projectId?: string
  region?: string
  keyRing?: string
  keyName?: string
  credentials?: string[]
  default?: boolean
}

export type GcpManualDetails = GcpCredentialSpec & {
  secretKeyRef: string
}

export interface GitAuthenticationDTO {
  [key: string]: any
}

export type GitConfigDTO = ConnectorConfigDTO & {
  url: string
  branchName?: string
  type: 'Http' | 'Ssh'
  connectionType: 'Account' | 'Repo'
  spec: GitAuthenticationDTO
  gitSync?: GitSyncConfig
}

export type GitHTTPAuthenticationDTO = GitAuthenticationDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type GitSSHAuthenticationDTO = GitAuthenticationDTO & {
  sshKeyReference: string
}

export interface GitSyncConfig {
  enabled?: boolean
  customCommitAttributes?: CustomCommitAttributes
  syncEnabled?: boolean
}

export interface GithubApiAccess {
  type: 'GithubApp' | 'Token'
  spec?: GithubApiAccessSpecDTO
}

export interface GithubApiAccessSpecDTO {
  [key: string]: any
}

export type GithubAppSpec = GithubApiAccessSpecDTO & {
  installationId: string
  applicationId: string
  privateKeyRef: string
}

export interface GithubAuthentication {
  type: 'Http' | 'Ssh'
  spec: GithubCredentialsDTO
}

export type GithubConnector = ConnectorConfigDTO & {
  url: string
  authentication: GithubAuthentication
  apiAccess?: GithubApiAccess
  type: 'Account' | 'Repo'
}

export interface GithubCredentialsDTO {
  [key: string]: any
}

export type GithubHttpCredentials = GithubCredentialsDTO & {
  type: 'UsernamePassword' | 'UsernameToken'
  spec: GithubHttpCredentialsSpecDTO
}

export interface GithubHttpCredentialsSpecDTO {
  [key: string]: any
}

export type GithubSshCredentials = GithubCredentialsDTO & {
  spec: GithubSshCredentialsSpec
}

export interface GithubSshCredentialsSpec {
  sshKeyRef: string
}

export type GithubTokenSpec = GithubApiAccessSpecDTO & {
  tokenRef: string
}

export type GithubUsernamePassword = GithubHttpCredentialsSpecDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type GithubUsernameToken = GithubHttpCredentialsSpecDTO & {
  username?: string
  usernameRef?: string
  tokenRef: string
}

export interface GitlabApiAccess {
  type: 'Token'
  spec?: GitlabApiAccessSpecDTO
}

export interface GitlabApiAccessSpecDTO {
  [key: string]: any
}

export interface GitlabAuthentication {
  type: 'Http' | 'Ssh'
  spec: GitlabCredentialsDTO
}

export type GitlabConnector = ConnectorConfigDTO & {
  url: string
  authentication: GitlabAuthentication
  apiAccess?: GitlabApiAccess
  type: 'Account' | 'Repo'
}

export interface GitlabCredentialsDTO {
  [key: string]: any
}

export type GitlabHttpCredentials = GitlabCredentialsDTO & {
  type: 'UsernamePassword' | 'UsernameToken' | 'Kerberos'
  spec: GitlabHttpCredentialsSpecDTO
}

export interface GitlabHttpCredentialsSpecDTO {
  [key: string]: any
}

export type GitlabKerberos = GitlabHttpCredentialsSpecDTO & {
  kerberosKeyRef: string
}

export type GitlabSshCredentials = GitlabCredentialsDTO & {
  spec: GitlabSshCredentialsSpec
}

export interface GitlabSshCredentialsSpec {
  sshKeyRef: string
}

export type GitlabTokenSpec = GitlabApiAccessSpecDTO & {
  tokenRef: string
}

export type GitlabUsernamePassword = GitlabHttpCredentialsSpecDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type GitlabUsernameToken = GitlabHttpCredentialsSpecDTO & {
  username?: string
  usernameRef?: string
  tokenRef: string
}

export type JiraConnector = ConnectorConfigDTO & {
  jiraUrl: string
  username?: string
  passwordRef: string
}

export interface KubernetesAuthCredentialDTO {
  [key: string]: any
}

export interface KubernetesAuthDTO {
  type: 'UsernamePassword' | 'ClientKeyCert' | 'ServiceAccount' | 'OpenIdConnect'
  spec: KubernetesAuthCredentialDTO
}

export type KubernetesClientKeyCertDTO = KubernetesAuthCredentialDTO & {
  caCertRef?: string
  clientCertRef: string
  clientKeyRef: string
  clientKeyPassphraseRef: string
  clientKeyAlgo?: string
}

export type KubernetesClusterConfigDTO = ConnectorConfigDTO & {
  credential: KubernetesCredentialDTO
}

export type KubernetesClusterDetailsDTO = KubernetesCredentialSpecDTO & {
  masterUrl: string
  auth: KubernetesAuthDTO
}

export interface KubernetesCredentialDTO {
  type: 'InheritFromDelegate' | 'ManualConfig'
  spec: KubernetesCredentialSpecDTO
}

export interface KubernetesCredentialSpecDTO {
  [key: string]: any
}

export type KubernetesDelegateDetailsDTO = KubernetesCredentialSpecDTO & {
  delegateName: string
}

export type KubernetesOpenIdConnectDTO = KubernetesAuthCredentialDTO & {
  oidcIssuerUrl: string
  oidcUsername?: string
  oidcUsernameRef?: string
  oidcClientIdRef: string
  oidcPasswordRef: string
  oidcSecretRef?: string
  oidcScopes?: string
}

export type KubernetesServiceAccountDTO = KubernetesAuthCredentialDTO & {
  serviceAccountTokenRef: string
}

export type KubernetesUserNamePasswordDTO = KubernetesAuthCredentialDTO & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export type LocalConnectorDTO = ConnectorConfigDTO & {
  default?: boolean
}

export interface NexusAuthCredentials {
  [key: string]: any
}

export interface NexusAuthentication {
  type: 'UsernamePassword'
  spec: NexusAuthCredentials
}

export type NexusConnector = ConnectorConfigDTO & {
  nexusServerUrl: string
  version: string
  auth?: NexusAuthentication
}

export type NexusUsernamePasswordAuth = NexusAuthCredentials & {
  username?: string
  usernameRef?: string
  passwordRef: string
}

export interface OnboardingRequestDTO {
  connectorIdentifier?: string
  tracingId?: string
  accountId?: string
  projectIdentifier?: string
  orgIdentifier?: string
  dataCollectionRequest?: DataCollectionRequest
}

export type SplunkConnectorDTO = ConnectorConfigDTO & {
  splunkUrl?: string
  username?: string
  accountId: string
  passwordRef: string
}

export type VaultConnectorDTO = ConnectorConfigDTO & {
  authToken?: string
  basePath?: string
  vaultUrl?: string
  renewalIntervalMinutes?: number
  secretEngineManuallyConfigured?: boolean
  secretEngineName?: string
  appRoleId?: string
  secretId?: string
  secretEngineVersion?: number
  default?: boolean
  readOnly?: boolean
  accessType?: 'APP_ROLE' | 'TOKEN'
}

export interface Bar {
  timestamp?: number
  count?: number
}

export interface Histogram {
  query?: string
  intervalMs?: number
  bars?: Bar[]
  errorMessage?: string
  splunkQuery?: string
  count?: number
}

export interface RestResponseSplunkValidationResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SplunkValidationResponse
  responseMessages?: ResponseMessage[]
}

export interface SampleLog {
  raw?: string
  timestamp?: number
}

export interface SplunkSampleResponse {
  rawSampleLogs?: SampleLog[]
  sample?: {
    [key: string]: string
  }
  splunkQuery?: string
  errorMessage?: string
}

export interface SplunkValidationResponse {
  histogram?: Histogram
  samples?: SplunkSampleResponse
  errorMessage?: string
  queryDurationMillis?: number
}

export interface RestResponseListSplunkSavedSearch {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SplunkSavedSearch[]
  responseMessages?: ResponseMessage[]
}

export interface SplunkSavedSearch {
  title?: string
  searchQuery?: string
}

export interface PageStackdriverDashboardDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: StackdriverDashboardDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageStackdriverDashboardDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageStackdriverDashboardDTO
  responseMessages?: ResponseMessage[]
}

export interface StackdriverDashboardDTO {
  name?: string
  path?: string
}

export interface DataSet {
  timeSeriesQuery?: { [key: string]: any }
  metricName?: string
}

export interface RestResponseListStackdriverDashboardDetail {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: StackdriverDashboardDetail[]
  responseMessages?: ResponseMessage[]
}

export interface StackdriverDashboardDetail {
  widgetName?: string
  dataSetList?: DataSet[]
}

export interface ResponseStackdriverSampleDataDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: StackdriverSampleDataDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface StackdriverSampleDataDTO {
  sampleData?: TimeSeriesSampleDTO[]
  errorMessage?: string
}

export interface TimeSeriesSampleDTO {
  txnName?: string
  metricName?: string
  metricValue?: number
  timestamp?: number
}

export interface MetricData {
  timestamp?: number
  value?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW_RISK' | 'MEDIUM_RISK' | 'HIGH_RISK'
}

export interface RestResponseTimeSeriesTestDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesTestDataDTO
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesTestDataDTO {
  cvConfigId?: string
  transactionMetricValues?: {
    [key: string]: {
      [key: string]: number[]
    }
  }
  metricGroupValues?: {
    [key: string]: {
      [key: string]: MetricData[]
    }
  }
}

export interface RestResponseVersionPackage {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: VersionPackage
  responseMessages?: ResponseMessage[]
}

export interface RuntimeInfo {
  primary?: boolean
  primaryVersion?: string
  deployMode?: string
}

export interface VersionInfo {
  version?: string
  buildNo?: string
  gitCommit?: string
  gitBranch?: string
  timestamp?: string
}

export interface VersionPackage {
  versionInfo?: VersionInfo
  runtimeInfo?: RuntimeInfo
}

export interface AnalysisRisk {
  name?: string
  risk?: number
}

export interface EnvSummary {
  riskScore?: number
  envName?: string
  envIdentifier?: string
  serviceSummaries?: ServiceSummary[]
}

export interface RestResponseRiskSummaryPopoverDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: RiskSummaryPopoverDTO
  responseMessages?: ResponseMessage[]
}

export interface RiskSummaryPopoverDTO {
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  envSummaries?: EnvSummary[]
}

export interface ServiceSummary {
  serviceName?: string
  serviceIdentifier?: string
  risk?: number
  analysisRisks?: AnalysisRisk[]
}

export interface HeatMapDTO {
  startTime?: number
  endTime?: number
  riskScore?: number
}

export interface RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: HeatMapDTO[]
  }
  responseMessages?: ResponseMessage[]
}

export interface CategoryRisksDTO {
  startTimeEpoch?: number
  endTimeEpoch?: number
  categoryRisks?: CategoryRisk[]
}

export interface RestResponseCategoryRisksDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CategoryRisksDTO
  responseMessages?: ResponseMessage[]
}

export interface EnvServiceRiskDTO {
  orgIdentifier?: string
  projectIdentifier?: string
  envName?: string
  envIdentifier?: string
  risk?: number
  serviceRisks?: ServiceRisk[]
}

export interface RestResponseListEnvServiceRiskDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: EnvServiceRiskDTO[]
  responseMessages?: ResponseMessage[]
}

export interface ServiceRisk {
  serviceName?: string
  serviceIdentifier?: string
  risk?: number
}

export interface AnalyzedLogDataDTO {
  projectIdentifier?: string
  orgIdentifier?: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  logData?: LogData
}

export interface FrequencyDTO {
  timestamp?: number
  count?: number
}

export interface LogData {
  text?: string
  label?: number
  count?: number
  trend?: FrequencyDTO[]
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
}

export interface PageAnalyzedLogDataDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: AnalyzedLogDataDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageAnalyzedLogDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageAnalyzedLogDataDTO
  responseMessages?: ResponseMessage[]
}

export interface CountByTag {
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
  count?: number
}

export interface LogDataByTag {
  timestamp?: number
  countByTags?: CountByTag[]
}

export interface RestResponseSortedSetLogDataByTag {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogDataByTag[]
  responseMessages?: ResponseMessage[]
}

export interface PageTimeSeriesMetricDataDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: TimeSeriesMetricDataDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageTimeSeriesMetricDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageTimeSeriesMetricDataDTO
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesMetricDataDTO {
  projectIdentifier?: string
  orgIdentifier?: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  groupName?: string
  metricName?: string
  metricDataList?: MetricData[]
}

export interface LogAnalysisClusterChartDTO {
  label?: number
  text?: string
  hostName?: string
  risk?: number
  x?: number
  y?: number
}

export interface RestResponseListLogAnalysisClusterChartDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisClusterChartDTO[]
  responseMessages?: ResponseMessage[]
}

export interface LogAnalysisClusterDTO {
  message?: string
  label?: number
  clusterType?: 'KNOWN_EVENT' | 'UNKNOWN_EVENT' | 'UNEXPECTED_FREQUENCY'
  risk?: number
  score?: number
  count?: number
  controlFrequencyData?: number[]
  testFrequencyData?: number[]
}

export interface PageLogAnalysisClusterDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: LogAnalysisClusterDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageLogAnalysisClusterDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageLogAnalysisClusterDTO
  responseMessages?: ResponseMessage[]
}

export interface PageTransactionMetricInfo {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: TransactionMetricInfo[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponseTransactionMetricInfoSummaryPageDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TransactionMetricInfoSummaryPageDTO
  responseMessages?: ResponseMessage[]
}

export interface TransactionMetric {
  transactionName?: string
  metricName?: string
  score?: number
}

export interface TransactionMetricInfo {
  transactionMetric?: TransactionMetric
  connectorName?: string
  nodes?: HostData[]
}

export interface TransactionMetricInfoSummaryPageDTO {
  pageResponse?: PageTransactionMetricInfo
  deploymentTimeRange?: TimeRange
}

export interface RestResponseListTestVerificationBaselineExecutionDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TestVerificationBaselineExecutionDTO[]
  responseMessages?: ResponseMessage[]
}

export interface TestVerificationBaselineExecutionDTO {
  verificationJobInstanceId?: string
  createdAt?: number
}

export interface RestResponseVerificationJobDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: VerificationJobDTO
  responseMessages?: ResponseMessage[]
}

export interface VerificationJobDTO {
  identifier?: string
  jobName?: string
  serviceIdentifier?: string
  envIdentifier?: string
  projectIdentifier?: string
  orgIdentifier?: string
  activitySourceIdentifier?: string
  dataSources?: ('APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER')[]
  monitoringSources?: string[]
  verificationJobUrl?: string
  duration?: string
  type?: 'TEST' | 'CANARY' | 'BLUE_GREEN' | 'HEALTH'
  defaultJob?: boolean
}

export interface PageVerificationJobDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: VerificationJobDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageVerificationJobDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageVerificationJobDTO
  responseMessages?: ResponseMessage[]
}

export type CVConfigArrayRequestBody = CVConfig[]

export type ActivityDTORequestBody = ActivityDTO

export type AlertRuleDTORequestBody = AlertRuleDTO

export type ServiceGuardTimeSeriesAnalysisDTORequestBody = ServiceGuardTimeSeriesAnalysisDTO

export type MetricPackArrayRequestBody = MetricPack[]

export type CVConfigRequestBody = CVConfig

export interface GetAppDynamicsApplicationsQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetAppDynamicsApplicationsProps = Omit<
  GetProps<RestResponsePageAppDynamicsApplication, unknown, GetAppDynamicsApplicationsQueryParams, void>,
  'path'
>

/**
 * get all appdynamics applications
 */
export const GetAppDynamicsApplications = (props: GetAppDynamicsApplicationsProps) => (
  <Get<RestResponsePageAppDynamicsApplication, unknown, GetAppDynamicsApplicationsQueryParams, void>
    path="/appdynamics/applications"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsApplicationsProps = Omit<
  UseGetProps<RestResponsePageAppDynamicsApplication, unknown, GetAppDynamicsApplicationsQueryParams, void>,
  'path'
>

/**
 * get all appdynamics applications
 */
export const useGetAppDynamicsApplications = (props: UseGetAppDynamicsApplicationsProps) =>
  useGet<RestResponsePageAppDynamicsApplication, unknown, GetAppDynamicsApplicationsQueryParams, void>(
    `/appdynamics/applications`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all appdynamics applications
 */
export const getAppDynamicsApplicationsPromise = (
  props: GetUsingFetchProps<
    RestResponsePageAppDynamicsApplication,
    unknown,
    GetAppDynamicsApplicationsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAppDynamicsApplication, unknown, GetAppDynamicsApplicationsQueryParams, void>(
    getConfig('cv/api'),
    `/appdynamics/applications`,
    props,
    signal
  )

export interface GetAppDynamicsMetricDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appName: string
  tierName: string
  requestGuid: string
}

export type GetAppDynamicsMetricDataProps = Omit<
  MutateProps<
    RestResponseSetAppdynamicsValidationResponse,
    unknown,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const GetAppDynamicsMetricData = (props: GetAppDynamicsMetricDataProps) => (
  <Mutate<
    RestResponseSetAppdynamicsValidationResponse,
    unknown,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackArrayRequestBody,
    void
  >
    verb="POST"
    path="/appdynamics/metric-data"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsMetricDataProps = Omit<
  UseMutateProps<
    RestResponseSetAppdynamicsValidationResponse,
    unknown,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const useGetAppDynamicsMetricData = (props: UseGetAppDynamicsMetricDataProps) =>
  useMutate<
    RestResponseSetAppdynamicsValidationResponse,
    unknown,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackArrayRequestBody,
    void
  >('POST', `/appdynamics/metric-data`, { base: getConfig('cv/api'), ...props })

/**
 * get metric data for given metric packs
 */
export const getAppDynamicsMetricDataPromise = (
  props: MutateUsingFetchProps<
    RestResponseSetAppdynamicsValidationResponse,
    unknown,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackArrayRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    RestResponseSetAppdynamicsValidationResponse,
    unknown,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackArrayRequestBody,
    void
  >('POST', getConfig('cv/api'), `/appdynamics/metric-data`, props, signal)

export interface GetAppDynamicsTiersQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  appName: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetAppDynamicsTiersProps = Omit<
  GetProps<RestResponsePageAppDynamicsTier, unknown, GetAppDynamicsTiersQueryParams, void>,
  'path'
>

/**
 * get all appdynamics tiers for an application
 */
export const GetAppDynamicsTiers = (props: GetAppDynamicsTiersProps) => (
  <Get<RestResponsePageAppDynamicsTier, unknown, GetAppDynamicsTiersQueryParams, void>
    path="/appdynamics/tiers"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsTiersProps = Omit<
  UseGetProps<RestResponsePageAppDynamicsTier, unknown, GetAppDynamicsTiersQueryParams, void>,
  'path'
>

/**
 * get all appdynamics tiers for an application
 */
export const useGetAppDynamicsTiers = (props: UseGetAppDynamicsTiersProps) =>
  useGet<RestResponsePageAppDynamicsTier, unknown, GetAppDynamicsTiersQueryParams, void>(`/appdynamics/tiers`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all appdynamics tiers for an application
 */
export const getAppDynamicsTiersPromise = (
  props: GetUsingFetchProps<RestResponsePageAppDynamicsTier, unknown, GetAppDynamicsTiersQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAppDynamicsTier, unknown, GetAppDynamicsTiersQueryParams, void>(
    getConfig('cv/api'),
    `/appdynamics/tiers`,
    props,
    signal
  )

export interface GetDataSourcetypesQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
}

export type GetDataSourcetypesProps = Omit<
  GetProps<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>,
  'path'
>

/**
 * gets a list of datasource types for this filter
 */
export const GetDataSourcetypes = (props: GetDataSourcetypesProps) => (
  <Get<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>
    path="/cv-config/datasource-types"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDataSourcetypesProps = Omit<
  UseGetProps<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>,
  'path'
>

/**
 * gets a list of datasource types for this filter
 */
export const useGetDataSourcetypes = (props: UseGetDataSourcetypesProps) =>
  useGet<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>(
    `/cv-config/datasource-types`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets a list of datasource types for this filter
 */
export const getDataSourcetypesPromise = (
  props: GetUsingFetchProps<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>(
    getConfig('cv/api'),
    `/cv-config/datasource-types`,
    props,
    signal
  )

export interface GetDataSourceConfigsQueryParams {
  accountId?: string
  connectorIdentifier?: string
  productName?: string
}

export type GetDataSourceConfigsProps = Omit<
  GetProps<RestResponseListDSConfig, unknown, GetDataSourceConfigsQueryParams, void>,
  'path'
>

/**
 * gets list of data source configs
 */
export const GetDataSourceConfigs = (props: GetDataSourceConfigsProps) => (
  <Get<RestResponseListDSConfig, unknown, GetDataSourceConfigsQueryParams, void>
    path="/ds-config"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDataSourceConfigsProps = Omit<
  UseGetProps<RestResponseListDSConfig, unknown, GetDataSourceConfigsQueryParams, void>,
  'path'
>

/**
 * gets list of data source configs
 */
export const useGetDataSourceConfigs = (props: UseGetDataSourceConfigsProps) =>
  useGet<RestResponseListDSConfig, unknown, GetDataSourceConfigsQueryParams, void>(`/ds-config`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets list of data source configs
 */
export const getDataSourceConfigsPromise = (
  props: GetUsingFetchProps<RestResponseListDSConfig, unknown, GetDataSourceConfigsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListDSConfig, unknown, GetDataSourceConfigsQueryParams, void>(
    getConfig('cv/api'),
    `/ds-config`,
    props,
    signal
  )

export interface SaveDSConfigQueryParams {
  accountId?: string
}

export type SaveDSConfigProps = Omit<MutateProps<void, void, SaveDSConfigQueryParams, DSConfig, void>, 'path' | 'verb'>

/**
 * saves a data source config
 */
export const SaveDSConfig = (props: SaveDSConfigProps) => (
  <Mutate<void, void, SaveDSConfigQueryParams, DSConfig, void>
    verb="PUT"
    path="/ds-config"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveDSConfigProps = Omit<
  UseMutateProps<void, void, SaveDSConfigQueryParams, DSConfig, void>,
  'path' | 'verb'
>

/**
 * saves a data source config
 */
export const useSaveDSConfig = (props: UseSaveDSConfigProps) =>
  useMutate<void, void, SaveDSConfigQueryParams, DSConfig, void>('PUT', `/ds-config`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * saves a data source config
 */
export const saveDSConfigPromise = (
  props: MutateUsingFetchProps<void, void, SaveDSConfigQueryParams, DSConfig, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, void, SaveDSConfigQueryParams, DSConfig, void>(
    'PUT',
    getConfig('cv/api'),
    `/ds-config`,
    props,
    signal
  )

export interface DeleteDSConfigQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  monitoringSourceIdentifier?: string
}

export type DeleteDSConfigProps = Omit<MutateProps<void, void, DeleteDSConfigQueryParams, void, void>, 'path' | 'verb'>

/**
 * deletes all data source configs for a group
 */
export const DeleteDSConfig = (props: DeleteDSConfigProps) => (
  <Mutate<void, void, DeleteDSConfigQueryParams, void, void>
    verb="DELETE"
    path="/ds-config"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteDSConfigProps = Omit<
  UseMutateProps<void, void, DeleteDSConfigQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes all data source configs for a group
 */
export const useDeleteDSConfig = (props: UseDeleteDSConfigProps) =>
  useMutate<void, void, DeleteDSConfigQueryParams, void, void>('DELETE', `/ds-config`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * deletes all data source configs for a group
 */
export const deleteDSConfigPromise = (
  props: MutateUsingFetchProps<void, void, DeleteDSConfigQueryParams, void, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, void, DeleteDSConfigQueryParams, void, void>(
    'DELETE',
    getConfig('cv/api'),
    `/ds-config`,
    props,
    signal
  )

export interface GetDSConfigQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface GetDSConfigPathParams {
  identifier: string
}

export type GetDSConfigProps = Omit<
  GetProps<RestResponseDSConfig, unknown, GetDSConfigQueryParams, GetDSConfigPathParams>,
  'path'
> &
  GetDSConfigPathParams

/**
 * gets a monitoring sources
 */
export const GetDSConfig = ({ identifier, ...props }: GetDSConfigProps) => (
  <Get<RestResponseDSConfig, unknown, GetDSConfigQueryParams, GetDSConfigPathParams>
    path="/ds-config/${identifier}"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDSConfigProps = Omit<
  UseGetProps<RestResponseDSConfig, unknown, GetDSConfigQueryParams, GetDSConfigPathParams>,
  'path'
> &
  GetDSConfigPathParams

/**
 * gets a monitoring sources
 */
export const useGetDSConfig = ({ identifier, ...props }: UseGetDSConfigProps) =>
  useGet<RestResponseDSConfig, unknown, GetDSConfigQueryParams, GetDSConfigPathParams>(
    (paramsInPath: GetDSConfigPathParams) => `/ds-config/${paramsInPath.identifier}`,
    { base: getConfig('cv/api'), pathParams: { identifier }, ...props }
  )

/**
 * gets a monitoring sources
 */
export const getDSConfigPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<RestResponseDSConfig, unknown, GetDSConfigQueryParams, GetDSConfigPathParams> & {
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseDSConfig, unknown, GetDSConfigQueryParams, GetDSConfigPathParams>(
    getConfig('cv/api'),
    `/ds-config/${identifier}`,
    props,
    signal
  )

export interface GetMonitoringSourcesQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  pageIndex?: number
  pageSize?: number
  filter?: string
}

export type GetMonitoringSourcesProps = Omit<
  GetProps<ResponsePageMonitoringSource, unknown, GetMonitoringSourcesQueryParams, void>,
  'path'
>

/**
 * gets list of monitoring sources
 */
export const GetMonitoringSources = (props: GetMonitoringSourcesProps) => (
  <Get<ResponsePageMonitoringSource, unknown, GetMonitoringSourcesQueryParams, void>
    path="/ds-config/listMonitoringSources"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoringSourcesProps = Omit<
  UseGetProps<ResponsePageMonitoringSource, unknown, GetMonitoringSourcesQueryParams, void>,
  'path'
>

/**
 * gets list of monitoring sources
 */
export const useGetMonitoringSources = (props: UseGetMonitoringSourcesProps) =>
  useGet<ResponsePageMonitoringSource, unknown, GetMonitoringSourcesQueryParams, void>(
    `/ds-config/listMonitoringSources`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets list of monitoring sources
 */
export const getMonitoringSourcesPromise = (
  props: GetUsingFetchProps<ResponsePageMonitoringSource, unknown, GetMonitoringSourcesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageMonitoringSource, unknown, GetMonitoringSourcesQueryParams, void>(
    getConfig('cv/api'),
    `/ds-config/listMonitoringSources`,
    props,
    signal
  )

export interface GetServicesQueryParams {
  accountId: string
  orgIdentifier?: string
  projectIdentifier: string
}

export type GetServicesProps = Omit<
  GetProps<RestResponseListEnvToServicesDTO, unknown, GetServicesQueryParams, void>,
  'path'
>

/**
 * gets list of env to services mapping for which data sources are configured
 */
export const GetServices = (props: GetServicesProps) => (
  <Get<RestResponseListEnvToServicesDTO, unknown, GetServicesQueryParams, void>
    path="/ds-config/env-to-services"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetServicesProps = Omit<
  UseGetProps<RestResponseListEnvToServicesDTO, unknown, GetServicesQueryParams, void>,
  'path'
>

/**
 * gets list of env to services mapping for which data sources are configured
 */
export const useGetServices = (props: UseGetServicesProps) =>
  useGet<RestResponseListEnvToServicesDTO, unknown, GetServicesQueryParams, void>(`/ds-config/env-to-services`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets list of env to services mapping for which data sources are configured
 */
export const getServicesPromise = (
  props: GetUsingFetchProps<RestResponseListEnvToServicesDTO, unknown, GetServicesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListEnvToServicesDTO, unknown, GetServicesQueryParams, void>(
    getConfig('cv/api'),
    `/ds-config/env-to-services`,
    props,
    signal
  )

export interface GetMetricPacksQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  dataSourceType: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
}

export type GetMetricPacksProps = Omit<
  GetProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  'path'
>

/**
 * get all metric packs for a connector type
 */
export const GetMetricPacks = (props: GetMetricPacksProps) => (
  <Get<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>
    path="/metric-pack"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricPacksProps = Omit<
  UseGetProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  'path'
>

/**
 * get all metric packs for a connector type
 */
export const useGetMetricPacks = (props: UseGetMetricPacksProps) =>
  useGet<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>(`/metric-pack`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all metric packs for a connector type
 */
export const getMetricPacksPromise = (
  props: GetUsingFetchProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>(
    getConfig('cv/api'),
    `/metric-pack`,
    props,
    signal
  )

export interface SaveMetricPacksQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  dataSourceType: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
}

export type SaveMetricPacksProps = Omit<
  MutateProps<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPackArrayRequestBody, void>,
  'path' | 'verb'
>

/**
 * saves a metric pack for a connector type
 */
export const SaveMetricPacks = (props: SaveMetricPacksProps) => (
  <Mutate<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPackArrayRequestBody, void>
    verb="POST"
    path="/metric-pack"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveMetricPacksProps = Omit<
  UseMutateProps<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPackArrayRequestBody, void>,
  'path' | 'verb'
>

/**
 * saves a metric pack for a connector type
 */
export const useSaveMetricPacks = (props: UseSaveMetricPacksProps) =>
  useMutate<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPackArrayRequestBody, void>(
    'POST',
    `/metric-pack`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * saves a metric pack for a connector type
 */
export const saveMetricPacksPromise = (
  props: MutateUsingFetchProps<
    RestResponseBoolean,
    unknown,
    SaveMetricPacksQueryParams,
    MetricPackArrayRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPackArrayRequestBody, void>(
    'POST',
    getConfig('cv/api'),
    `/metric-pack`,
    props,
    signal
  )

export interface GetSplunkValidationQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  query: string
  requestGuid: string
}

export type GetSplunkValidationProps = Omit<
  GetProps<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>,
  'path'
>

/**
 * validates given setting for splunk data source
 */
export const GetSplunkValidation = (props: GetSplunkValidationProps) => (
  <Get<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>
    path="/splunk/validation"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSplunkValidationProps = Omit<
  UseGetProps<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>,
  'path'
>

/**
 * validates given setting for splunk data source
 */
export const useGetSplunkValidation = (props: UseGetSplunkValidationProps) =>
  useGet<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>(`/splunk/validation`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * validates given setting for splunk data source
 */
export const getSplunkValidationPromise = (
  props: GetUsingFetchProps<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>(
    getConfig('cv/api'),
    `/splunk/validation`,
    props,
    signal
  )

export interface GetSplunkSavedSearchesQueryParams {
  accountId?: string
  connectorIdentifier?: string
  orgIdentifier: string
  projectIdentifier: string
  requestGuid: string
}

export type GetSplunkSavedSearchesProps = Omit<
  GetProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  'path'
>

/**
 * gets saved searches in splunk
 */
export const GetSplunkSavedSearches = (props: GetSplunkSavedSearchesProps) => (
  <Get<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>
    path="/splunk/saved-searches"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSplunkSavedSearchesProps = Omit<
  UseGetProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  'path'
>

/**
 * gets saved searches in splunk
 */
export const useGetSplunkSavedSearches = (props: UseGetSplunkSavedSearchesProps) =>
  useGet<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>(
    `/splunk/saved-searches`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets saved searches in splunk
 */
export const getSplunkSavedSearchesPromise = (
  props: GetUsingFetchProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>(
    getConfig('cv/api'),
    `/splunk/saved-searches`,
    props,
    signal
  )

export interface GetTimeSeriesDataQueryParams {
  accountId: string
  cvConfigId: string
  startTimeEpochMillis: number
  endTimeEpochMillis: number
  metricName: string
  groupNameList: string[]
}

export type GetTimeSeriesDataProps = Omit<
  GetProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  'path'
>

/**
 * get time series data for a given data source config
 */
export const GetTimeSeriesData = (props: GetTimeSeriesDataProps) => (
  <Get<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>
    path="/timeseries/metric-group-data"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetTimeSeriesDataProps = Omit<
  UseGetProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  'path'
>

/**
 * get time series data for a given data source config
 */
export const useGetTimeSeriesData = (props: UseGetTimeSeriesDataProps) =>
  useGet<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>(
    `/timeseries/metric-group-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get time series data for a given data source config
 */
export const getTimeSeriesDataPromise = (
  props: GetUsingFetchProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries/metric-group-data`,
    props,
    signal
  )

export interface GetMetricDefinitionsQueryParams {
  accountId: string
  cvConfigId: string
}

export type GetMetricDefinitionsProps = Omit<
  GetProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  'path'
>

/**
 * get metric definition for a given data source config
 */
export const GetMetricDefinitions = (props: GetMetricDefinitionsProps) => (
  <Get<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>
    path="/timeseries/metric-template"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricDefinitionsProps = Omit<
  UseGetProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  'path'
>

/**
 * get metric definition for a given data source config
 */
export const useGetMetricDefinitions = (props: UseGetMetricDefinitionsProps) =>
  useGet<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>(
    `/timeseries/metric-template`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get metric definition for a given data source config
 */
export const getMetricDefinitionsPromise = (
  props: GetUsingFetchProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries/metric-template`,
    props,
    signal
  )

export interface GetHeatmapQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier?: string
  envIdentifier?: string
  startTimeMs: number
  endTimeMs: number
}

export type GetHeatmapProps = Omit<
  GetProps<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>,
  'path'
>

/**
 * get heatmap for a time range
 */
export const GetHeatmap = (props: GetHeatmapProps) => (
  <Get<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>
    path="/heatmap"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetHeatmapProps = Omit<
  UseGetProps<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>,
  'path'
>

/**
 * get heatmap for a time range
 */
export const useGetHeatmap = (props: UseGetHeatmapProps) =>
  useGet<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>(`/heatmap`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get heatmap for a time range
 */
export const getHeatmapPromise = (
  props: GetUsingFetchProps<
    RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO,
    unknown,
    GetHeatmapQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>(
    getConfig('cv/api'),
    `/heatmap`,
    props,
    signal
  )

export interface GetCategoryRiskMapQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier?: string
  envIdentifier?: string
}

export type GetCategoryRiskMapProps = Omit<
  GetProps<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>,
  'path'
>

/**
 * get current risk for all categories
 */
export const GetCategoryRiskMap = (props: GetCategoryRiskMapProps) => (
  <Get<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>
    path="/heatmap/category-risks"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetCategoryRiskMapProps = Omit<
  UseGetProps<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>,
  'path'
>

/**
 * get current risk for all categories
 */
export const useGetCategoryRiskMap = (props: UseGetCategoryRiskMapProps) =>
  useGet<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>(`/heatmap/category-risks`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get current risk for all categories
 */
export const getCategoryRiskMapPromise = (
  props: GetUsingFetchProps<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>(
    getConfig('cv/api'),
    `/heatmap/category-risks`,
    props,
    signal
  )

export interface GetEnvServiceRisksQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetEnvServiceRisksProps = Omit<
  GetProps<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>,
  'path'
>

/**
 * get current risks for each env/service combination
 */
export const GetEnvServiceRisks = (props: GetEnvServiceRisksProps) => (
  <Get<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>
    path="/heatmap/env-service-risks"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetEnvServiceRisksProps = Omit<
  UseGetProps<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>,
  'path'
>

/**
 * get current risks for each env/service combination
 */
export const useGetEnvServiceRisks = (props: UseGetEnvServiceRisksProps) =>
  useGet<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>(
    `/heatmap/env-service-risks`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get current risks for each env/service combination
 */
export const getEnvServiceRisksPromise = (
  props: GetUsingFetchProps<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>(
    getConfig('cv/api'),
    `/heatmap/env-service-risks`,
    props,
    signal
  )

export interface GetRiskSummaryPopoverQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  endTime: number
  serviceIdentifier?: string
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
}

export type GetRiskSummaryPopoverProps = Omit<
  GetProps<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>,
  'path'
>

/**
 * get current risk summary
 */
export const GetRiskSummaryPopover = (props: GetRiskSummaryPopoverProps) => (
  <Get<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>
    path="/heatmap/risk-summary-popover"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetRiskSummaryPopoverProps = Omit<
  UseGetProps<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>,
  'path'
>

/**
 * get current risk summary
 */
export const useGetRiskSummaryPopover = (props: UseGetRiskSummaryPopoverProps) =>
  useGet<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>(
    `/heatmap/risk-summary-popover`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get current risk summary
 */
export const getRiskSummaryPopoverPromise = (
  props: GetUsingFetchProps<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>(
    getConfig('cv/api'),
    `/heatmap/risk-summary-popover`,
    props,
    signal
  )

export interface GetVerificationJobQueryParams {
  accountId?: string
  identifier?: string
}

export type GetVerificationJobProps = Omit<
  GetProps<RestResponseVerificationJobDTO, unknown, GetVerificationJobQueryParams, void>,
  'path'
>

/**
 * gets the verification job for an identifier
 */
export const GetVerificationJob = (props: GetVerificationJobProps) => (
  <Get<RestResponseVerificationJobDTO, unknown, GetVerificationJobQueryParams, void>
    path="/verification-job"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationJobProps = Omit<
  UseGetProps<RestResponseVerificationJobDTO, unknown, GetVerificationJobQueryParams, void>,
  'path'
>

/**
 * gets the verification job for an identifier
 */
export const useGetVerificationJob = (props: UseGetVerificationJobProps) =>
  useGet<RestResponseVerificationJobDTO, unknown, GetVerificationJobQueryParams, void>(`/verification-job`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets the verification job for an identifier
 */
export const getVerificationJobPromise = (
  props: GetUsingFetchProps<RestResponseVerificationJobDTO, unknown, GetVerificationJobQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseVerificationJobDTO, unknown, GetVerificationJobQueryParams, void>(
    getConfig('cv/api'),
    `/verification-job`,
    props,
    signal
  )

export interface SaveVerificationJobQueryParams {
  accountId?: string
}

export type SaveVerificationJobProps = Omit<
  MutateProps<void, void, SaveVerificationJobQueryParams, VerificationJobDTO, void>,
  'path' | 'verb'
>

/**
 * upserts a verification job for an identifier
 */
export const SaveVerificationJob = (props: SaveVerificationJobProps) => (
  <Mutate<void, void, SaveVerificationJobQueryParams, VerificationJobDTO, void>
    verb="PUT"
    path="/verification-job"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveVerificationJobProps = Omit<
  UseMutateProps<void, void, SaveVerificationJobQueryParams, VerificationJobDTO, void>,
  'path' | 'verb'
>

/**
 * upserts a verification job for an identifier
 */
export const useSaveVerificationJob = (props: UseSaveVerificationJobProps) =>
  useMutate<void, void, SaveVerificationJobQueryParams, VerificationJobDTO, void>('PUT', `/verification-job`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * upserts a verification job for an identifier
 */
export const saveVerificationJobPromise = (
  props: MutateUsingFetchProps<void, void, SaveVerificationJobQueryParams, VerificationJobDTO, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, void, SaveVerificationJobQueryParams, VerificationJobDTO, void>(
    'PUT',
    getConfig('cv/api'),
    `/verification-job`,
    props,
    signal
  )

export interface DeleteVerificationJobQueryParams {
  accountId?: string
  identifier?: string
}

export type DeleteVerificationJobProps = Omit<
  MutateProps<void, void, DeleteVerificationJobQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes a verification job for an identifier
 */
export const DeleteVerificationJob = (props: DeleteVerificationJobProps) => (
  <Mutate<void, void, DeleteVerificationJobQueryParams, void, void>
    verb="DELETE"
    path="/verification-job"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteVerificationJobProps = Omit<
  UseMutateProps<void, void, DeleteVerificationJobQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes a verification job for an identifier
 */
export const useDeleteVerificationJob = (props: UseDeleteVerificationJobProps) =>
  useMutate<void, void, DeleteVerificationJobQueryParams, void, void>('DELETE', `/verification-job`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * deletes a verification job for an identifier
 */
export const deleteVerificationJobPromise = (
  props: MutateUsingFetchProps<void, void, DeleteVerificationJobQueryParams, void, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, void, DeleteVerificationJobQueryParams, void, void>(
    'DELETE',
    getConfig('cv/api'),
    `/verification-job`,
    props,
    signal
  )

export interface GetVerificationJobsQueryParams {
  accountId?: string
  projectIdentifier?: string
  orgIdentifier?: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetVerificationJobsProps = Omit<
  GetProps<RestResponsePageVerificationJobDTO, unknown, GetVerificationJobsQueryParams, void>,
  'path'
>

/**
 * lists all verification jobs for an identifier
 */
export const GetVerificationJobs = (props: GetVerificationJobsProps) => (
  <Get<RestResponsePageVerificationJobDTO, unknown, GetVerificationJobsQueryParams, void>
    path="/verification-job/list"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationJobsProps = Omit<
  UseGetProps<RestResponsePageVerificationJobDTO, unknown, GetVerificationJobsQueryParams, void>,
  'path'
>

/**
 * lists all verification jobs for an identifier
 */
export const useGetVerificationJobs = (props: UseGetVerificationJobsProps) =>
  useGet<RestResponsePageVerificationJobDTO, unknown, GetVerificationJobsQueryParams, void>(`/verification-job/list`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * lists all verification jobs for an identifier
 */
export const getVerificationJobsPromise = (
  props: GetUsingFetchProps<RestResponsePageVerificationJobDTO, unknown, GetVerificationJobsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageVerificationJobDTO, unknown, GetVerificationJobsQueryParams, void>(
    getConfig('cv/api'),
    `/verification-job/list`,
    props,
    signal
  )

export interface GetAnomalousMetricDashboardDataQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  analysisStartTime: number
  page?: number
  size?: number
  filter?: string
  datasourceType?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
}

export type GetAnomalousMetricDashboardDataProps = Omit<
  GetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>,
  'path'
>

/**
 * get anomalous time series data in a given time range
 */
export const GetAnomalousMetricDashboardData = (props: GetAnomalousMetricDashboardDataProps) => (
  <Get<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>
    path="/timeseries-dashboard/anomalous-metric-data"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAnomalousMetricDashboardDataProps = Omit<
  UseGetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>,
  'path'
>

/**
 * get anomalous time series data in a given time range
 */
export const useGetAnomalousMetricDashboardData = (props: UseGetAnomalousMetricDashboardDataProps) =>
  useGet<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>(
    `/timeseries-dashboard/anomalous-metric-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get anomalous time series data in a given time range
 */
export const getAnomalousMetricDashboardDataPromise = (
  props: GetUsingFetchProps<
    RestResponsePageTimeSeriesMetricDataDTO,
    unknown,
    GetAnomalousMetricDashboardDataQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries-dashboard/anomalous-metric-data`,
    props,
    signal
  )

export interface GetMetricDataQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  analysisStartTime: number
  page?: number
  size?: number
  filter?: string
  datasourceType?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER'
}

export type GetMetricDataProps = Omit<
  GetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>,
  'path'
>

/**
 * get all time series data in a given time range
 */
export const GetMetricData = (props: GetMetricDataProps) => (
  <Get<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>
    path="/timeseries-dashboard/metric-data"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricDataProps = Omit<
  UseGetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>,
  'path'
>

/**
 * get all time series data in a given time range
 */
export const useGetMetricData = (props: UseGetMetricDataProps) =>
  useGet<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>(
    `/timeseries-dashboard/metric-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all time series data in a given time range
 */
export const getMetricDataPromise = (
  props: GetUsingFetchProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries-dashboard/metric-data`,
    props,
    signal
  )

export interface GetActivityMetricsQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  startTime: number
  endTime: number
  anomalousOnly?: boolean
  page?: number
  size?: number
}

export interface GetActivityMetricsPathParams {
  activityId: string
}

export type GetActivityMetricsProps = Omit<
  GetProps<
    RestResponsePageTimeSeriesMetricDataDTO,
    unknown,
    GetActivityMetricsQueryParams,
    GetActivityMetricsPathParams
  >,
  'path'
> &
  GetActivityMetricsPathParams

/**
 * get activity metrics for given activityId
 */
export const GetActivityMetrics = ({ activityId, ...props }: GetActivityMetricsProps) => (
  <Get<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetActivityMetricsQueryParams, GetActivityMetricsPathParams>
    path="/timeseries-dashboard/${activityId}/metrics"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivityMetricsProps = Omit<
  UseGetProps<
    RestResponsePageTimeSeriesMetricDataDTO,
    unknown,
    GetActivityMetricsQueryParams,
    GetActivityMetricsPathParams
  >,
  'path'
> &
  GetActivityMetricsPathParams

/**
 * get activity metrics for given activityId
 */
export const useGetActivityMetrics = ({ activityId, ...props }: UseGetActivityMetricsProps) =>
  useGet<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetActivityMetricsQueryParams, GetActivityMetricsPathParams>(
    (paramsInPath: GetActivityMetricsPathParams) => `/timeseries-dashboard/${paramsInPath.activityId}/metrics`,
    { base: getConfig('cv/api'), pathParams: { activityId }, ...props }
  )

/**
 * get activity metrics for given activityId
 */
export const getActivityMetricsPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageTimeSeriesMetricDataDTO,
    unknown,
    GetActivityMetricsQueryParams,
    GetActivityMetricsPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponsePageTimeSeriesMetricDataDTO,
    unknown,
    GetActivityMetricsQueryParams,
    GetActivityMetricsPathParams
  >(getConfig('cv/api'), `/timeseries-dashboard/${activityId}/metrics`, props, signal)

export interface GetAllLogsQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  page?: number
  size?: number
}

export type GetAllLogsProps = Omit<
  GetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>,
  'path'
>

/**
 * get all logs for a time range
 */
export const GetAllLogs = (props: GetAllLogsProps) => (
  <Get<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>
    path="/log-dashboard/all-logs"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllLogsProps = Omit<
  UseGetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>,
  'path'
>

/**
 * get all logs for a time range
 */
export const useGetAllLogs = (props: UseGetAllLogsProps) =>
  useGet<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>(`/log-dashboard/all-logs`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all logs for a time range
 */
export const getAllLogsPromise = (
  props: GetUsingFetchProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>(
    getConfig('cv/api'),
    `/log-dashboard/all-logs`,
    props,
    signal
  )

export interface GetAnomalousLogsQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  page?: number
  size?: number
}

export type GetAnomalousLogsProps = Omit<
  GetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>,
  'path'
>

/**
 * get anomalous logs for a time range
 */
export const GetAnomalousLogs = (props: GetAnomalousLogsProps) => (
  <Get<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>
    path="/log-dashboard/anomalous-logs"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAnomalousLogsProps = Omit<
  UseGetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>,
  'path'
>

/**
 * get anomalous logs for a time range
 */
export const useGetAnomalousLogs = (props: UseGetAnomalousLogsProps) =>
  useGet<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>(
    `/log-dashboard/anomalous-logs`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get anomalous logs for a time range
 */
export const getAnomalousLogsPromise = (
  props: GetUsingFetchProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>(
    getConfig('cv/api'),
    `/log-dashboard/anomalous-logs`,
    props,
    signal
  )

export interface GetTagCountQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
}

export type GetTagCountProps = Omit<
  GetProps<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>,
  'path'
>

/**
 * get a sorted tag vs logs list
 */
export const GetTagCount = (props: GetTagCountProps) => (
  <Get<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>
    path="/log-dashboard/log-count-by-tags"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetTagCountProps = Omit<
  UseGetProps<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>,
  'path'
>

/**
 * get a sorted tag vs logs list
 */
export const useGetTagCount = (props: UseGetTagCountProps) =>
  useGet<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>(`/log-dashboard/log-count-by-tags`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get a sorted tag vs logs list
 */
export const getTagCountPromise = (
  props: GetUsingFetchProps<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>(
    getConfig('cv/api'),
    `/log-dashboard/log-count-by-tags`,
    props,
    signal
  )

export interface GetActivityLogsQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  startTime: number
  endTime: number
  anomalousOnly?: boolean
  page?: number
  size?: number
}

export interface GetActivityLogsPathParams {
  activityId: string
}

export type GetActivityLogsProps = Omit<
  GetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetActivityLogsQueryParams, GetActivityLogsPathParams>,
  'path'
> &
  GetActivityLogsPathParams

/**
 * get activity logs for given activityId
 */
export const GetActivityLogs = ({ activityId, ...props }: GetActivityLogsProps) => (
  <Get<RestResponsePageAnalyzedLogDataDTO, unknown, GetActivityLogsQueryParams, GetActivityLogsPathParams>
    path="/log-dashboard/${activityId}/logs"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivityLogsProps = Omit<
  UseGetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetActivityLogsQueryParams, GetActivityLogsPathParams>,
  'path'
> &
  GetActivityLogsPathParams

/**
 * get activity logs for given activityId
 */
export const useGetActivityLogs = ({ activityId, ...props }: UseGetActivityLogsProps) =>
  useGet<RestResponsePageAnalyzedLogDataDTO, unknown, GetActivityLogsQueryParams, GetActivityLogsPathParams>(
    (paramsInPath: GetActivityLogsPathParams) => `/log-dashboard/${paramsInPath.activityId}/logs`,
    { base: getConfig('cv/api'), pathParams: { activityId }, ...props }
  )

/**
 * get activity logs for given activityId
 */
export const getActivityLogsPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageAnalyzedLogDataDTO,
    unknown,
    GetActivityLogsQueryParams,
    GetActivityLogsPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAnalyzedLogDataDTO, unknown, GetActivityLogsQueryParams, GetActivityLogsPathParams>(
    getConfig('cv/api'),
    `/log-dashboard/${activityId}/logs`,
    props,
    signal
  )

export interface GetTagCountForActivityQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  startTime: number
  endTime: number
}

export interface GetTagCountForActivityPathParams {
  activityId: string
}

export type GetTagCountForActivityProps = Omit<
  GetProps<
    RestResponseSortedSetLogDataByTag,
    unknown,
    GetTagCountForActivityQueryParams,
    GetTagCountForActivityPathParams
  >,
  'path'
> &
  GetTagCountForActivityPathParams

/**
 * get a sorted tag vs logs list for an activity
 */
export const GetTagCountForActivity = ({ activityId, ...props }: GetTagCountForActivityProps) => (
  <Get<RestResponseSortedSetLogDataByTag, unknown, GetTagCountForActivityQueryParams, GetTagCountForActivityPathParams>
    path="/log-dashboard/${activityId}/log-count-by-tags"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetTagCountForActivityProps = Omit<
  UseGetProps<
    RestResponseSortedSetLogDataByTag,
    unknown,
    GetTagCountForActivityQueryParams,
    GetTagCountForActivityPathParams
  >,
  'path'
> &
  GetTagCountForActivityPathParams

/**
 * get a sorted tag vs logs list for an activity
 */
export const useGetTagCountForActivity = ({ activityId, ...props }: UseGetTagCountForActivityProps) =>
  useGet<
    RestResponseSortedSetLogDataByTag,
    unknown,
    GetTagCountForActivityQueryParams,
    GetTagCountForActivityPathParams
  >((paramsInPath: GetTagCountForActivityPathParams) => `/log-dashboard/${paramsInPath.activityId}/log-count-by-tags`, {
    base: getConfig('cv/api'),
    pathParams: { activityId },
    ...props
  })

/**
 * get a sorted tag vs logs list for an activity
 */
export const getTagCountForActivityPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponseSortedSetLogDataByTag,
    unknown,
    GetTagCountForActivityQueryParams,
    GetTagCountForActivityPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseSortedSetLogDataByTag,
    unknown,
    GetTagCountForActivityQueryParams,
    GetTagCountForActivityPathParams
  >(getConfig('cv/api'), `/log-dashboard/${activityId}/log-count-by-tags`, props, signal)

export interface GetDeploymentTimeSeriesQueryParams {
  accountId?: string
  anomalousMetricsOnly?: boolean
  hostName?: string
  pageNumber?: number
}

export interface GetDeploymentTimeSeriesPathParams {
  verificationJobInstanceId: string
}

export type GetDeploymentTimeSeriesProps = Omit<
  GetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >,
  'path'
> &
  GetDeploymentTimeSeriesPathParams

/**
 * get metrics for given verificationJob
 */
export const GetDeploymentTimeSeries = ({ verificationJobInstanceId, ...props }: GetDeploymentTimeSeriesProps) => (
  <Get<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >
    path="/deployment-time-series-analysis/${verificationJobInstanceId}"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentTimeSeriesProps = Omit<
  UseGetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >,
  'path'
> &
  GetDeploymentTimeSeriesPathParams

/**
 * get metrics for given verificationJob
 */
export const useGetDeploymentTimeSeries = ({ verificationJobInstanceId, ...props }: UseGetDeploymentTimeSeriesProps) =>
  useGet<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >(
    (paramsInPath: GetDeploymentTimeSeriesPathParams) =>
      `/deployment-time-series-analysis/${paramsInPath.verificationJobInstanceId}`,
    { base: getConfig('cv/api'), pathParams: { verificationJobInstanceId }, ...props }
  )

/**
 * get metrics for given verificationJob
 */
export const getDeploymentTimeSeriesPromise = (
  {
    verificationJobInstanceId,
    ...props
  }: GetUsingFetchProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  > & { verificationJobInstanceId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >(getConfig('cv/api'), `/deployment-time-series-analysis/${verificationJobInstanceId}`, props, signal)

export interface GetDeploymentLogAnalysesQueryParams {
  accountId?: string
  label?: number
  pageNumber?: number
  hostName?: string
}

export interface GetDeploymentLogAnalysesPathParams {
  verificationJobInstanceId: string
}

export type GetDeploymentLogAnalysesProps = Omit<
  GetProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >,
  'path'
> &
  GetDeploymentLogAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const GetDeploymentLogAnalyses = ({ verificationJobInstanceId, ...props }: GetDeploymentLogAnalysesProps) => (
  <Get<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >
    path="/deployment-log-analysis/${verificationJobInstanceId}"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentLogAnalysesProps = Omit<
  UseGetProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >,
  'path'
> &
  GetDeploymentLogAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const useGetDeploymentLogAnalyses = ({
  verificationJobInstanceId,
  ...props
}: UseGetDeploymentLogAnalysesProps) =>
  useGet<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >(
    (paramsInPath: GetDeploymentLogAnalysesPathParams) =>
      `/deployment-log-analysis/${paramsInPath.verificationJobInstanceId}`,
    { base: getConfig('cv/api'), pathParams: { verificationJobInstanceId }, ...props }
  )

/**
 * get logs for given verificationJob
 */
export const getDeploymentLogAnalysesPromise = (
  {
    verificationJobInstanceId,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  > & { verificationJobInstanceId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >(getConfig('cv/api'), `/deployment-log-analysis/${verificationJobInstanceId}`, props, signal)

export interface GetClusterChartAnalysesQueryParams {
  accountId?: string
  hostName?: string
}

export interface GetClusterChartAnalysesPathParams {
  verificationJobInstanceId: string
}

export type GetClusterChartAnalysesProps = Omit<
  GetProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >,
  'path'
> &
  GetClusterChartAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const GetClusterChartAnalyses = ({ verificationJobInstanceId, ...props }: GetClusterChartAnalysesProps) => (
  <Get<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >
    path="/deployment-log-analysis/${verificationJobInstanceId}/clusters"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetClusterChartAnalysesProps = Omit<
  UseGetProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >,
  'path'
> &
  GetClusterChartAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const useGetClusterChartAnalyses = ({ verificationJobInstanceId, ...props }: UseGetClusterChartAnalysesProps) =>
  useGet<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >(
    (paramsInPath: GetClusterChartAnalysesPathParams) =>
      `/deployment-log-analysis/${paramsInPath.verificationJobInstanceId}/clusters`,
    { base: getConfig('cv/api'), pathParams: { verificationJobInstanceId }, ...props }
  )

/**
 * get logs for given verificationJob
 */
export const getClusterChartAnalysesPromise = (
  {
    verificationJobInstanceId,
    ...props
  }: GetUsingFetchProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  > & { verificationJobInstanceId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >(getConfig('cv/api'), `/deployment-log-analysis/${verificationJobInstanceId}/clusters`, props, signal)

export interface GetRecentDeploymentActivityVerificationsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetRecentDeploymentActivityVerificationsProps = Omit<
  GetProps<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >,
  'path'
>

/**
 * get recent deployment activity verification
 */
export const GetRecentDeploymentActivityVerifications = (props: GetRecentDeploymentActivityVerificationsProps) => (
  <Get<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >
    path="/activity/recent-deployment-activity-verifications"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetRecentDeploymentActivityVerificationsProps = Omit<
  UseGetProps<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >,
  'path'
>

/**
 * get recent deployment activity verification
 */
export const useGetRecentDeploymentActivityVerifications = (props: UseGetRecentDeploymentActivityVerificationsProps) =>
  useGet<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >(`/activity/recent-deployment-activity-verifications`, { base: getConfig('cv/api'), ...props })

/**
 * get recent deployment activity verification
 */
export const getRecentDeploymentActivityVerificationsPromise = (
  props: GetUsingFetchProps<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >(getConfig('cv/api'), `/activity/recent-deployment-activity-verifications`, props, signal)

export interface GetVerificationInstancesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier: string
}

export interface GetVerificationInstancesPathParams {
  deploymentTag: string
}

export type GetVerificationInstancesProps = Omit<
  GetProps<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >,
  'path'
> &
  GetVerificationInstancesPathParams

/**
 * get deployment activities for given build tag
 */
export const GetVerificationInstances = ({ deploymentTag, ...props }: GetVerificationInstancesProps) => (
  <Get<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >
    path="/activity/deployment-activity-verifications/${deploymentTag}"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationInstancesProps = Omit<
  UseGetProps<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >,
  'path'
> &
  GetVerificationInstancesPathParams

/**
 * get deployment activities for given build tag
 */
export const useGetVerificationInstances = ({ deploymentTag, ...props }: UseGetVerificationInstancesProps) =>
  useGet<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >(
    (paramsInPath: GetVerificationInstancesPathParams) =>
      `/activity/deployment-activity-verifications/${paramsInPath.deploymentTag}`,
    { base: getConfig('cv/api'), pathParams: { deploymentTag }, ...props }
  )

/**
 * get deployment activities for given build tag
 */
export const getVerificationInstancesPromise = (
  {
    deploymentTag,
    ...props
  }: GetUsingFetchProps<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  > & { deploymentTag: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >(getConfig('cv/api'), `/activity/deployment-activity-verifications/${deploymentTag}`, props, signal)

export interface GetVerificationsPopoverSummaryQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier: string
}

export interface GetVerificationsPopoverSummaryPathParams {
  deploymentTag: string
}

export type GetVerificationsPopoverSummaryProps = Omit<
  GetProps<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >,
  'path'
> &
  GetVerificationsPopoverSummaryPathParams

/**
 * get deployment activities summary for given build tag
 */
export const GetVerificationsPopoverSummary = ({ deploymentTag, ...props }: GetVerificationsPopoverSummaryProps) => (
  <Get<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >
    path="/activity/deployment-activity-verifications-popover-summary/${deploymentTag}"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationsPopoverSummaryProps = Omit<
  UseGetProps<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >,
  'path'
> &
  GetVerificationsPopoverSummaryPathParams

/**
 * get deployment activities summary for given build tag
 */
export const useGetVerificationsPopoverSummary = ({
  deploymentTag,
  ...props
}: UseGetVerificationsPopoverSummaryProps) =>
  useGet<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >(
    (paramsInPath: GetVerificationsPopoverSummaryPathParams) =>
      `/activity/deployment-activity-verifications-popover-summary/${paramsInPath.deploymentTag}`,
    { base: getConfig('cv/api'), pathParams: { deploymentTag }, ...props }
  )

/**
 * get deployment activities summary for given build tag
 */
export const getVerificationsPopoverSummaryPromise = (
  {
    deploymentTag,
    ...props
  }: GetUsingFetchProps<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  > & { deploymentTag: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >(getConfig('cv/api'), `/activity/deployment-activity-verifications-popover-summary/${deploymentTag}`, props, signal)

export interface GetRecentActivityVerificationResultsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  size?: number
}

export type GetRecentActivityVerificationResultsProps = Omit<
  GetProps<
    RestResponseListActivityVerificationResultDTO,
    unknown,
    GetRecentActivityVerificationResultsQueryParams,
    void
  >,
  'path'
>

/**
 * get a list of recent activity verification results
 */
export const GetRecentActivityVerificationResults = (props: GetRecentActivityVerificationResultsProps) => (
  <Get<RestResponseListActivityVerificationResultDTO, unknown, GetRecentActivityVerificationResultsQueryParams, void>
    path="/activity/recent-activity-verifications"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetRecentActivityVerificationResultsProps = Omit<
  UseGetProps<
    RestResponseListActivityVerificationResultDTO,
    unknown,
    GetRecentActivityVerificationResultsQueryParams,
    void
  >,
  'path'
>

/**
 * get a list of recent activity verification results
 */
export const useGetRecentActivityVerificationResults = (props: UseGetRecentActivityVerificationResultsProps) =>
  useGet<RestResponseListActivityVerificationResultDTO, unknown, GetRecentActivityVerificationResultsQueryParams, void>(
    `/activity/recent-activity-verifications`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get a list of recent activity verification results
 */
export const getRecentActivityVerificationResultsPromise = (
  props: GetUsingFetchProps<
    RestResponseListActivityVerificationResultDTO,
    unknown,
    GetRecentActivityVerificationResultsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListActivityVerificationResultDTO,
    unknown,
    GetRecentActivityVerificationResultsQueryParams,
    void
  >(getConfig('cv/api'), `/activity/recent-activity-verifications`, props, signal)

export interface GetActivityVerificationResultQueryParams {
  accountId: string
}

export interface GetActivityVerificationResultPathParams {
  activityId: string
}

export type GetActivityVerificationResultProps = Omit<
  GetProps<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  >,
  'path'
> &
  GetActivityVerificationResultPathParams

/**
 * get activity verification result
 */
export const GetActivityVerificationResult = ({ activityId, ...props }: GetActivityVerificationResultProps) => (
  <Get<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  >
    path="/activity/${activityId}/activity-risks"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivityVerificationResultProps = Omit<
  UseGetProps<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  >,
  'path'
> &
  GetActivityVerificationResultPathParams

/**
 * get activity verification result
 */
export const useGetActivityVerificationResult = ({ activityId, ...props }: UseGetActivityVerificationResultProps) =>
  useGet<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  >((paramsInPath: GetActivityVerificationResultPathParams) => `/activity/${paramsInPath.activityId}/activity-risks`, {
    base: getConfig('cv/api'),
    pathParams: { activityId },
    ...props
  })

/**
 * get activity verification result
 */
export const getActivityVerificationResultPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  >(getConfig('cv/api'), `/activity/${activityId}/activity-risks`, props, signal)

export interface ListActivitiesForDashboardQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  environmentIdentifier?: string
  startTime: number
  endTime: number
}

export type ListActivitiesForDashboardProps = Omit<
  GetProps<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>,
  'path'
>

/**
 * list all activities between a given time range for an environment, project, org
 */
export const ListActivitiesForDashboard = (props: ListActivitiesForDashboardProps) => (
  <Get<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>
    path="/activity/list"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListActivitiesForDashboardProps = Omit<
  UseGetProps<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>,
  'path'
>

/**
 * list all activities between a given time range for an environment, project, org
 */
export const useListActivitiesForDashboard = (props: UseListActivitiesForDashboardProps) =>
  useGet<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>(`/activity/list`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * list all activities between a given time range for an environment, project, org
 */
export const listActivitiesForDashboardPromise = (
  props: GetUsingFetchProps<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>(
    getConfig('cv/api'),
    `/activity/list`,
    props,
    signal
  )

export interface GetCVSetupStatusQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetCVSetupStatusProps = Omit<
  GetProps<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>,
  'path'
>

/**
 * get the status of CV related resources setup
 */
export const GetCVSetupStatus = (props: GetCVSetupStatusProps) => (
  <Get<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>
    path="/setup/status"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetCVSetupStatusProps = Omit<
  UseGetProps<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>,
  'path'
>

/**
 * get the status of CV related resources setup
 */
export const useGetCVSetupStatus = (props: UseGetCVSetupStatusProps) =>
  useGet<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>(`/setup/status`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get the status of CV related resources setup
 */
export const getCVSetupStatusPromise = (
  props: GetUsingFetchProps<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>(
    getConfig('cv/api'),
    `/setup/status`,
    props,
    signal
  )

export interface GetNamespacesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetNamespacesProps = Omit<GetProps<RestResponsePageString, unknown, GetNamespacesQueryParams, void>, 'path'>

/**
 * gets a list of kubernetes namespaces
 */
export const GetNamespaces = (props: GetNamespacesProps) => (
  <Get<RestResponsePageString, unknown, GetNamespacesQueryParams, void>
    path="/kubernetes/namespaces"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetNamespacesProps = Omit<
  UseGetProps<RestResponsePageString, unknown, GetNamespacesQueryParams, void>,
  'path'
>

/**
 * gets a list of kubernetes namespaces
 */
export const useGetNamespaces = (props: UseGetNamespacesProps) =>
  useGet<RestResponsePageString, unknown, GetNamespacesQueryParams, void>(`/kubernetes/namespaces`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets a list of kubernetes namespaces
 */
export const getNamespacesPromise = (
  props: GetUsingFetchProps<RestResponsePageString, unknown, GetNamespacesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageString, unknown, GetNamespacesQueryParams, void>(
    getConfig('cv/api'),
    `/kubernetes/namespaces`,
    props,
    signal
  )

export interface GetWorkloadsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  namespace: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetWorkloadsProps = Omit<GetProps<RestResponsePageString, unknown, GetWorkloadsQueryParams, void>, 'path'>

/**
 * gets a list of kubernetes workloads
 */
export const GetWorkloads = (props: GetWorkloadsProps) => (
  <Get<RestResponsePageString, unknown, GetWorkloadsQueryParams, void>
    path="/kubernetes/workloads"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetWorkloadsProps = Omit<
  UseGetProps<RestResponsePageString, unknown, GetWorkloadsQueryParams, void>,
  'path'
>

/**
 * gets a list of kubernetes workloads
 */
export const useGetWorkloads = (props: UseGetWorkloadsProps) =>
  useGet<RestResponsePageString, unknown, GetWorkloadsQueryParams, void>(`/kubernetes/workloads`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets a list of kubernetes workloads
 */
export const getWorkloadsPromise = (
  props: GetUsingFetchProps<RestResponsePageString, unknown, GetWorkloadsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageString, unknown, GetWorkloadsQueryParams, void>(
    getConfig('cv/api'),
    `/kubernetes/workloads`,
    props,
    signal
  )

export interface GetAlertRuleQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  identifier: string
}

export type GetAlertRuleProps = Omit<GetProps<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>, 'path'>

/**
 * gets the alert rule for an identifier
 */
export const GetAlertRule = (props: GetAlertRuleProps) => (
  <Get<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>
    path="/alert"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAlertRuleProps = Omit<
  UseGetProps<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>,
  'path'
>

/**
 * gets the alert rule for an identifier
 */
export const useGetAlertRule = (props: UseGetAlertRuleProps) =>
  useGet<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>(`/alert`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets the alert rule for an identifier
 */
export const getAlertRulePromise = (
  props: GetUsingFetchProps<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>(
    getConfig('cv/api'),
    `/alert`,
    props,
    signal
  )

export interface CreateAlertQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type CreateAlertProps = Omit<
  MutateProps<RestResponseAlertRuleDTO, unknown, CreateAlertQueryParams, AlertRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * create alert
 */
export const CreateAlert = (props: CreateAlertProps) => (
  <Mutate<RestResponseAlertRuleDTO, unknown, CreateAlertQueryParams, AlertRuleDTORequestBody, void>
    verb="POST"
    path="/alert"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseCreateAlertProps = Omit<
  UseMutateProps<RestResponseAlertRuleDTO, unknown, CreateAlertQueryParams, AlertRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * create alert
 */
export const useCreateAlert = (props: UseCreateAlertProps) =>
  useMutate<RestResponseAlertRuleDTO, unknown, CreateAlertQueryParams, AlertRuleDTORequestBody, void>(
    'POST',
    `/alert`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * create alert
 */
export const createAlertPromise = (
  props: MutateUsingFetchProps<
    RestResponseAlertRuleDTO,
    unknown,
    CreateAlertQueryParams,
    AlertRuleDTORequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseAlertRuleDTO, unknown, CreateAlertQueryParams, AlertRuleDTORequestBody, void>(
    'POST',
    getConfig('cv/api'),
    `/alert`,
    props,
    signal
  )

export interface UpdateAlertQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type UpdateAlertProps = Omit<
  MutateProps<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * update alert
 */
export const UpdateAlert = (props: UpdateAlertProps) => (
  <Mutate<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>
    verb="PUT"
    path="/alert"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseUpdateAlertProps = Omit<
  UseMutateProps<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * update alert
 */
export const useUpdateAlert = (props: UseUpdateAlertProps) =>
  useMutate<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>('PUT', `/alert`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * update alert
 */
export const updateAlertPromise = (
  props: MutateUsingFetchProps<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>(
    'PUT',
    getConfig('cv/api'),
    `/alert`,
    props,
    signal
  )

export interface RetrieveAlertQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  offset: number
  pageSize: number
}

export type RetrieveAlertProps = Omit<
  GetProps<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>,
  'path'
>

/**
 * get list of alerts
 */
export const RetrieveAlert = (props: RetrieveAlertProps) => (
  <Get<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>
    path="/alert/list"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseRetrieveAlertProps = Omit<
  UseGetProps<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>,
  'path'
>

/**
 * get list of alerts
 */
export const useRetrieveAlert = (props: UseRetrieveAlertProps) =>
  useGet<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>(`/alert/list`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get list of alerts
 */
export const retrieveAlertPromise = (
  props: GetUsingFetchProps<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>(
    getConfig('cv/api'),
    `/alert/list`,
    props,
    signal
  )

export interface DeleteAlertQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type DeleteAlertProps = Omit<MutateProps<void, void, DeleteAlertQueryParams, string, void>, 'path' | 'verb'>

/**
 * deletes alert
 */
export const DeleteAlert = (props: DeleteAlertProps) => (
  <Mutate<void, void, DeleteAlertQueryParams, string, void>
    verb="DELETE"
    path="/alert"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteAlertProps = Omit<
  UseMutateProps<void, void, DeleteAlertQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * deletes alert
 */
export const useDeleteAlert = (props: UseDeleteAlertProps) =>
  useMutate<void, void, DeleteAlertQueryParams, string, void>('DELETE', `/alert`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * deletes alert
 */
export const deleteAlertPromise = (
  props: MutateUsingFetchProps<void, void, DeleteAlertQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, void, DeleteAlertQueryParams, string, void>(
    'DELETE',
    getConfig('cv/api'),
    `/alert`,
    props,
    signal
  )

export interface GetActivityTypesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetActivityTypesProps = Omit<
  GetProps<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>,
  'path'
>

/**
 * gets activity types
 */
export const GetActivityTypes = (props: GetActivityTypesProps) => (
  <Get<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>
    path="/alert/activityTypes"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivityTypesProps = Omit<
  UseGetProps<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>,
  'path'
>

/**
 * gets activity types
 */
export const useGetActivityTypes = (props: UseGetActivityTypesProps) =>
  useGet<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>(`/alert/activityTypes`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets activity types
 */
export const getActivityTypesPromise = (
  props: GetUsingFetchProps<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>(
    getConfig('cv/api'),
    `/alert/activityTypes`,
    props,
    signal
  )

export interface GetStackdriverDashboardsQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  pageSize: number
  offset: number
  filter?: string
  tracingId?: string
}

export type GetStackdriverDashboardsProps = Omit<
  GetProps<RestResponsePageStackdriverDashboardDTO, unknown, GetStackdriverDashboardsQueryParams, void>,
  'path'
>

/**
 * get all stackdriver dashboards
 */
export const GetStackdriverDashboards = (props: GetStackdriverDashboardsProps) => (
  <Get<RestResponsePageStackdriverDashboardDTO, unknown, GetStackdriverDashboardsQueryParams, void>
    path="/stackdriver/dashboards"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverDashboardsProps = Omit<
  UseGetProps<RestResponsePageStackdriverDashboardDTO, unknown, GetStackdriverDashboardsQueryParams, void>,
  'path'
>

/**
 * get all stackdriver dashboards
 */
export const useGetStackdriverDashboards = (props: UseGetStackdriverDashboardsProps) =>
  useGet<RestResponsePageStackdriverDashboardDTO, unknown, GetStackdriverDashboardsQueryParams, void>(
    `/stackdriver/dashboards`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all stackdriver dashboards
 */
export const getStackdriverDashboardsPromise = (
  props: GetUsingFetchProps<
    RestResponsePageStackdriverDashboardDTO,
    unknown,
    GetStackdriverDashboardsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageStackdriverDashboardDTO, unknown, GetStackdriverDashboardsQueryParams, void>(
    getConfig('cv/api'),
    `/stackdriver/dashboards`,
    props,
    signal
  )

export interface GetStackdriverDashboardDetailQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  path: string
  tracingId?: string
}

export type GetStackdriverDashboardDetailProps = Omit<
  GetProps<RestResponseListStackdriverDashboardDetail, unknown, GetStackdriverDashboardDetailQueryParams, void>,
  'path'
>

/**
 * get details about one dashboard
 */
export const GetStackdriverDashboardDetail = (props: GetStackdriverDashboardDetailProps) => (
  <Get<RestResponseListStackdriverDashboardDetail, unknown, GetStackdriverDashboardDetailQueryParams, void>
    path="/stackdriver/dashboard-detail"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverDashboardDetailProps = Omit<
  UseGetProps<RestResponseListStackdriverDashboardDetail, unknown, GetStackdriverDashboardDetailQueryParams, void>,
  'path'
>

/**
 * get details about one dashboard
 */
export const useGetStackdriverDashboardDetail = (props: UseGetStackdriverDashboardDetailProps) =>
  useGet<RestResponseListStackdriverDashboardDetail, unknown, GetStackdriverDashboardDetailQueryParams, void>(
    `/stackdriver/dashboard-detail`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get details about one dashboard
 */
export const getStackdriverDashboardDetailPromise = (
  props: GetUsingFetchProps<
    RestResponseListStackdriverDashboardDetail,
    unknown,
    GetStackdriverDashboardDetailQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListStackdriverDashboardDetail, unknown, GetStackdriverDashboardDetailQueryParams, void>(
    getConfig('cv/api'),
    `/stackdriver/dashboard-detail`,
    props,
    signal
  )

export interface GetStackdriverSampleDataQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  tracingId?: string
}

export interface GetStackdriverSampleDataRequestBody {
  [key: string]: any
}

export type GetStackdriverSampleDataProps = Omit<
  MutateProps<
    ResponseStackdriverSampleDataDTO,
    unknown,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for one metric
 */
export const GetStackdriverSampleData = (props: GetStackdriverSampleDataProps) => (
  <Mutate<
    ResponseStackdriverSampleDataDTO,
    unknown,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >
    verb="POST"
    path="/stackdriver/sample-data"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverSampleDataProps = Omit<
  UseMutateProps<
    ResponseStackdriverSampleDataDTO,
    unknown,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for one metric
 */
export const useGetStackdriverSampleData = (props: UseGetStackdriverSampleDataProps) =>
  useMutate<
    ResponseStackdriverSampleDataDTO,
    unknown,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >('POST', `/stackdriver/sample-data`, { base: getConfig('cv/api'), ...props })

/**
 * get sample data for one metric
 */
export const getStackdriverSampleDataPromise = (
  props: MutateUsingFetchProps<
    ResponseStackdriverSampleDataDTO,
    unknown,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseStackdriverSampleDataDTO,
    unknown,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >('POST', getConfig('cv/api'), `/stackdriver/sample-data`, props, signal)

export interface GetActivitySourceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  identifier: string
}

export type GetActivitySourceProps = Omit<
  GetProps<RestResponseActivitySourceDTO, unknown, GetActivitySourceQueryParams, void>,
  'path'
>

/**
 * gets a kubernetes event source by identifier
 */
export const GetActivitySource = (props: GetActivitySourceProps) => (
  <Get<RestResponseActivitySourceDTO, unknown, GetActivitySourceQueryParams, void>
    path="/activity-source"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivitySourceProps = Omit<
  UseGetProps<RestResponseActivitySourceDTO, unknown, GetActivitySourceQueryParams, void>,
  'path'
>

/**
 * gets a kubernetes event source by identifier
 */
export const useGetActivitySource = (props: UseGetActivitySourceProps) =>
  useGet<RestResponseActivitySourceDTO, unknown, GetActivitySourceQueryParams, void>(`/activity-source`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets a kubernetes event source by identifier
 */
export const getActivitySourcePromise = (
  props: GetUsingFetchProps<RestResponseActivitySourceDTO, unknown, GetActivitySourceQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseActivitySourceDTO, unknown, GetActivitySourceQueryParams, void>(
    getConfig('cv/api'),
    `/activity-source`,
    props,
    signal
  )

export interface RegisterActivitySourceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type RegisterActivitySourceProps = Omit<
  MutateProps<RestResponseString, unknown, RegisterActivitySourceQueryParams, ActivitySourceDTO, void>,
  'path' | 'verb'
>

/**
 * register a kubernetes event source
 */
export const RegisterActivitySource = (props: RegisterActivitySourceProps) => (
  <Mutate<RestResponseString, unknown, RegisterActivitySourceQueryParams, ActivitySourceDTO, void>
    verb="POST"
    path="/activity-source"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseRegisterActivitySourceProps = Omit<
  UseMutateProps<RestResponseString, unknown, RegisterActivitySourceQueryParams, ActivitySourceDTO, void>,
  'path' | 'verb'
>

/**
 * register a kubernetes event source
 */
export const useRegisterActivitySource = (props: UseRegisterActivitySourceProps) =>
  useMutate<RestResponseString, unknown, RegisterActivitySourceQueryParams, ActivitySourceDTO, void>(
    'POST',
    `/activity-source`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * register a kubernetes event source
 */
export const registerActivitySourcePromise = (
  props: MutateUsingFetchProps<RestResponseString, unknown, RegisterActivitySourceQueryParams, ActivitySourceDTO, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseString, unknown, RegisterActivitySourceQueryParams, ActivitySourceDTO, void>(
    'POST',
    getConfig('cv/api'),
    `/activity-source`,
    props,
    signal
  )

export interface DeleteKubernetesSourceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type DeleteKubernetesSourceProps = Omit<
  MutateProps<RestResponseBoolean, unknown, DeleteKubernetesSourceQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * deletes a kubernetes event source
 */
export const DeleteKubernetesSource = (props: DeleteKubernetesSourceProps) => (
  <Mutate<RestResponseBoolean, unknown, DeleteKubernetesSourceQueryParams, string, void>
    verb="DELETE"
    path="/activity-source"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteKubernetesSourceProps = Omit<
  UseMutateProps<RestResponseBoolean, unknown, DeleteKubernetesSourceQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * deletes a kubernetes event source
 */
export const useDeleteKubernetesSource = (props: UseDeleteKubernetesSourceProps) =>
  useMutate<RestResponseBoolean, unknown, DeleteKubernetesSourceQueryParams, string, void>(
    'DELETE',
    `/activity-source`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * deletes a kubernetes event source
 */
export const deleteKubernetesSourcePromise = (
  props: MutateUsingFetchProps<RestResponseBoolean, unknown, DeleteKubernetesSourceQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseBoolean, unknown, DeleteKubernetesSourceQueryParams, string, void>(
    'DELETE',
    getConfig('cv/api'),
    `/activity-source`,
    props,
    signal
  )

export interface ListActivitySourcesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  offset: number
  pageSize: number
  filter?: string
}

export type ListActivitySourcesProps = Omit<
  GetProps<RestResponsePageActivitySourceDTO, unknown, ListActivitySourcesQueryParams, void>,
  'path'
>

/**
 * lists all kubernetes event sources
 */
export const ListActivitySources = (props: ListActivitySourcesProps) => (
  <Get<RestResponsePageActivitySourceDTO, unknown, ListActivitySourcesQueryParams, void>
    path="/activity-source/list"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListActivitySourcesProps = Omit<
  UseGetProps<RestResponsePageActivitySourceDTO, unknown, ListActivitySourcesQueryParams, void>,
  'path'
>

/**
 * lists all kubernetes event sources
 */
export const useListActivitySources = (props: UseListActivitySourcesProps) =>
  useGet<RestResponsePageActivitySourceDTO, unknown, ListActivitySourcesQueryParams, void>(`/activity-source/list`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * lists all kubernetes event sources
 */
export const listActivitySourcesPromise = (
  props: GetUsingFetchProps<RestResponsePageActivitySourceDTO, unknown, ListActivitySourcesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageActivitySourceDTO, unknown, ListActivitySourcesQueryParams, void>(
    getConfig('cv/api'),
    `/activity-source/list`,
    props,
    signal
  )

export interface GetActivityDetailsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetActivityDetailsPathParams {
  activityId: string
}

export type GetActivityDetailsProps = Omit<
  GetProps<ResponseListString, unknown, GetActivityDetailsQueryParams, GetActivityDetailsPathParams>,
  'path'
> &
  GetActivityDetailsPathParams

/**
 * list all activities between a given time range for an environment, project, org
 */
export const GetActivityDetails = ({ activityId, ...props }: GetActivityDetailsProps) => (
  <Get<ResponseListString, unknown, GetActivityDetailsQueryParams, GetActivityDetailsPathParams>
    path="/activity/${activityId}/details"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivityDetailsProps = Omit<
  UseGetProps<ResponseListString, unknown, GetActivityDetailsQueryParams, GetActivityDetailsPathParams>,
  'path'
> &
  GetActivityDetailsPathParams

/**
 * list all activities between a given time range for an environment, project, org
 */
export const useGetActivityDetails = ({ activityId, ...props }: UseGetActivityDetailsProps) =>
  useGet<ResponseListString, unknown, GetActivityDetailsQueryParams, GetActivityDetailsPathParams>(
    (paramsInPath: GetActivityDetailsPathParams) => `/activity/${paramsInPath.activityId}/details`,
    { base: getConfig('cv/api'), pathParams: { activityId }, ...props }
  )

/**
 * list all activities between a given time range for an environment, project, org
 */
export const getActivityDetailsPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<ResponseListString, unknown, GetActivityDetailsQueryParams, GetActivityDetailsPathParams> & {
    activityId: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, unknown, GetActivityDetailsQueryParams, GetActivityDetailsPathParams>(
    getConfig('cv/api'),
    `/activity/${activityId}/details`,
    props,
    signal
  )

export interface ListAllSupportedDataSourceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type ListAllSupportedDataSourceProps = Omit<
  GetProps<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>,
  'path'
>

/**
 * get the list of supported cv providers
 */
export const ListAllSupportedDataSource = (props: ListAllSupportedDataSourceProps) => (
  <Get<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>
    path="/setup/supported-providers"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListAllSupportedDataSourceProps = Omit<
  UseGetProps<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>,
  'path'
>

/**
 * get the list of supported cv providers
 */
export const useListAllSupportedDataSource = (props: UseListAllSupportedDataSourceProps) =>
  useGet<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>(
    `/setup/supported-providers`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get the list of supported cv providers
 */
export const listAllSupportedDataSourcePromise = (
  props: GetUsingFetchProps<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>(
    getConfig('cv/api'),
    `/setup/supported-providers`,
    props,
    signal
  )

export interface ListBaselineExecutionsQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  verificationJobIdentifier?: string
}

export type ListBaselineExecutionsProps = Omit<
  GetProps<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>,
  'path'
>

/**
 * list of last 5 successful baseline executions
 */
export const ListBaselineExecutions = (props: ListBaselineExecutionsProps) => (
  <Get<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>
    path="/verification-job-instance/baseline-executions"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListBaselineExecutionsProps = Omit<
  UseGetProps<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>,
  'path'
>

/**
 * list of last 5 successful baseline executions
 */
export const useListBaselineExecutions = (props: UseListBaselineExecutionsProps) =>
  useGet<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>(
    `/verification-job-instance/baseline-executions`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * list of last 5 successful baseline executions
 */
export const listBaselineExecutionsPromise = (
  props: GetUsingFetchProps<
    RestResponseListTestVerificationBaselineExecutionDTO,
    unknown,
    ListBaselineExecutionsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>(
    getConfig('cv/api'),
    `/verification-job-instance/baseline-executions`,
    props,
    signal
  )

export interface GetDefaultHealthVerificationJobQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
}

export type GetDefaultHealthVerificationJobProps = Omit<
  GetProps<RestResponseVerificationJobDTO, unknown, GetDefaultHealthVerificationJobQueryParams, void>,
  'path'
>

/**
 * gets the default health verification job for a project
 */
export const GetDefaultHealthVerificationJob = (props: GetDefaultHealthVerificationJobProps) => (
  <Get<RestResponseVerificationJobDTO, unknown, GetDefaultHealthVerificationJobQueryParams, void>
    path="/verification-job/default-health-job"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDefaultHealthVerificationJobProps = Omit<
  UseGetProps<RestResponseVerificationJobDTO, unknown, GetDefaultHealthVerificationJobQueryParams, void>,
  'path'
>

/**
 * gets the default health verification job for a project
 */
export const useGetDefaultHealthVerificationJob = (props: UseGetDefaultHealthVerificationJobProps) =>
  useGet<RestResponseVerificationJobDTO, unknown, GetDefaultHealthVerificationJobQueryParams, void>(
    `/verification-job/default-health-job`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets the default health verification job for a project
 */
export const getDefaultHealthVerificationJobPromise = (
  props: GetUsingFetchProps<RestResponseVerificationJobDTO, unknown, GetDefaultHealthVerificationJobQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseVerificationJobDTO, unknown, GetDefaultHealthVerificationJobQueryParams, void>(
    getConfig('cv/api'),
    `/verification-job/default-health-job`,
    props,
    signal
  )

export const useGetAvailableMonitoringSources = (_pros: any) => ({} as any)
