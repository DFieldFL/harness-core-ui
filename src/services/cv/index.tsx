/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, mutateUsingFetch, GetUsingFetchProps, MutateUsingFetchProps } from '../config'
export const SPEC_VERSION = '1.0'
export interface ActivityDTO {
  accountIdentifier?: string
  activityEndTime?: number
  activityStartTime: number
  environmentIdentifier?: string
  name: string
  orgIdentifier?: string
  projectIdentifier?: string
  serviceIdentifier?: string
  tags?: string[]
  type?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES'
  verificationJobRuntimeDetails?: VerificationJobRuntimeDetails[]
}

export interface ActivityDashboardDTO {
  activityId?: string
  activityName?: string
  activityStartTime?: number
  activityType?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES'
  activityVerificationSummary?: ActivityVerificationSummary
  environmentIdentifier?: string
  environmentName?: string
  serviceIdentifier?: string
  verificationStatus?:
    | 'IGNORED'
    | 'NOT_STARTED'
    | 'VERIFICATION_PASSED'
    | 'VERIFICATION_FAILED'
    | 'ERROR'
    | 'IN_PROGRESS'
}

export interface ActivitySourceDTO {
  createdAt?: number
  editable?: boolean
  identifier: string
  lastUpdatedAt?: number
  name: string
  orgIdentifier?: string
  projectIdentifier?: string
  type?: 'KUBERNETES' | 'HARNESS_CD10' | 'CDNG'
  uuid?: string
}

export interface ActivityStatusDTO {
  activityId?: string
  durationMs?: number
  progressPercentage?: number
  remainingTimeMs?: number
  status?: 'IGNORED' | 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
}

export interface ActivityVerificationResultDTO {
  activityId?: string
  activityName?: string
  activityStartTime?: number
  activityType?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES'
  endTime?: number
  environmentIdentifier?: string
  environmentName?: string
  overallRisk?: number
  postActivityRisks?: CategoryRisk[]
  preActivityRisks?: CategoryRisk[]
  progressPercentage?: number
  remainingTimeMs?: number
  serviceIdentifier?: string
  status?: 'IGNORED' | 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
}

export interface ActivityVerificationSummary {
  aggregatedStatus?: 'IGNORED' | 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
  durationMs?: number
  errors?: number
  failed?: number
  notStarted?: number
  passed?: number
  progress?: number
  progressPercentage?: number
  remainingTimeMs?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  startTime?: number
  total?: number
}

export interface AdditionalInfo {
  type?: 'TEST' | 'CANARY' | 'BLUE_GREEN' | 'HEALTH'
}

export interface AlertCondition {
  allEnvironments?: boolean
  allServices?: boolean
  enabledRisk?: boolean
  enabledVerifications?: boolean
  environments?: string[]
  notify?: RiskNotify
  services?: string[]
  verificationsNotify?: VerificationsNotify
}

export interface AlertRuleDTO {
  accountId?: string
  alertCondition?: AlertCondition
  enabled?: boolean
  identifier?: string
  name?: string
  notificationMethod?: NotificationMethod
  orgIdentifier?: string
  projectIdentifier?: string
  uuid?: string
}

export interface AnalysisResult {
  count?: number
  label?: number
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
}

export interface AnalysisRisk {
  name?: string
  risk?: number
}

export interface AnalyzedLogDataDTO {
  environmentIdentifier?: string
  logData?: LogData
  orgIdentifier?: string
  projectIdentifier?: string
  serviceIdentifier?: string
}

export interface AppDynamicsApplication {
  id?: number
  name?: string
}

export type AppDynamicsConnectorDTO = ConnectorConfigDTO & {
  accountname: string
  authType?: 'UsernamePassword' | 'ApiClientToken'
  clientId?: string
  clientSecretRef?: string
  controllerUrl: string
  delegateSelectors?: string[]
  passwordRef?: string
  username?: string
}

export type AppDynamicsHealthSourceSpec = HealthSourceSpec & {
  appdApplicationName: string
  appdTierName: string
  connectorRef: string
  feature: string
  metricPacks: MetricPackDTO[]
}

export interface AppDynamicsTier {
  id?: number
  name?: string
}

export interface AppdynamicsMetricValueValidationResponse {
  apiResponseStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  errorMessage?: string
  metricName?: string
  value?: number
}

export interface AppdynamicsValidationResponse {
  metricPackName?: string
  overallStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  values?: AppdynamicsMetricValueValidationResponse[]
}

export interface ArtifactoryAuthCredentials {
  [key: string]: any
}

export interface ArtifactoryAuthentication {
  spec?: ArtifactoryAuthCredentials
  type: 'UsernamePassword' | 'Anonymous'
}

export type ArtifactoryConnector = ConnectorConfigDTO & {
  artifactoryServerUrl: string
  auth?: ArtifactoryAuthentication
  delegateSelectors?: string[]
}

export type ArtifactoryUsernamePasswordAuth = ArtifactoryAuthCredentials & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface AwsCodeCommitAuthenticationDTO {
  spec: AwsCodeCommitCredentialsDTO
  type: 'HTTPS'
}

export type AwsCodeCommitConnectorDTO = ConnectorConfigDTO & {
  authentication: AwsCodeCommitAuthenticationDTO
  delegateSelectors?: string[]
  type: 'Repo' | 'Region'
  url: string
}

export interface AwsCodeCommitCredentialsDTO {
  [key: string]: any
}

export type AwsCodeCommitHttpsCredentialsDTO = AwsCodeCommitCredentialsDTO & {
  spec: AwsCodeCommitHttpsCredentialsSpecDTO
  type: 'AWSCredentials'
}

export interface AwsCodeCommitHttpsCredentialsSpecDTO {
  [key: string]: any
}

export type AwsCodeCommitSecretKeyAccessKeyDTO = AwsCodeCommitHttpsCredentialsSpecDTO & {
  accessKey?: string
  accessKeyRef?: string
  secretKeyRef: string
}

export type AwsConnector = ConnectorConfigDTO & {
  credential: AwsCredential
  delegateSelectors?: string[]
}

export interface AwsCredential {
  crossAccountAccess?: CrossAccountAccess
  spec?: AwsCredentialSpec
  type: 'InheritFromDelegate' | 'ManualConfig'
}

export interface AwsCredentialSpec {
  [key: string]: any
}

export interface AwsCurAttributes {
  region?: string
  reportName: string
  s3BucketName: string
  s3Prefix?: string
}

export interface AwsKmsConnectorCredential {
  spec?: AwsKmsCredentialSpec
  type: 'AssumeIAMRole' | 'AssumeSTSRole' | 'ManualConfig'
}

export type AwsKmsConnectorDTO = ConnectorConfigDTO & {
  credential?: AwsKmsConnectorCredential
  default?: boolean
  delegateSelectors?: string[]
  kmsArn: string
  region?: string
}

export interface AwsKmsCredentialSpec {
  [key: string]: any
}

export type AwsKmsCredentialSpecAssumeIAM = AwsKmsCredentialSpec & {
  delegateSelectors: string[]
}

export type AwsKmsCredentialSpecAssumeSTS = AwsKmsCredentialSpec & {
  assumeStsRoleDuration?: number
  delegateSelectors: string[]
  externalName?: string
  roleArn: string
}

export type AwsKmsCredentialSpecManualConfig = AwsKmsCredentialSpec & {
  accessKey: string
  secretKey: string
}

export type AwsManualConfigSpec = AwsCredentialSpec & {
  accessKey?: string
  accessKeyRef?: string
  secretKeyRef: string
}

export type AzureKeyVaultConnectorDTO = ConnectorConfigDTO & {
  azureEnvironmentType?: 'AZURE' | 'AZURE_US_GOVERNMENT'
  clientId: string
  default?: boolean
  delegateSelectors?: string[]
  secretKey: string
  subscription: string
  tenantId: string
  vaultName: string
}

export interface Bar {
  count?: number
  timestamp?: number
}

export interface BillingExportSpec {
  containerName: string
  directoryName: string
  reportName: string
  storageAccountName: string
  subscriptionId: string
}

export interface BitbucketApiAccess {
  spec: BitbucketApiAccessSpecDTO
  type: 'UsernameToken'
}

export interface BitbucketApiAccessSpecDTO {
  [key: string]: any
}

export interface BitbucketAuthentication {
  spec: BitbucketCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type BitbucketConnector = ConnectorConfigDTO & {
  apiAccess?: BitbucketApiAccess
  authentication: BitbucketAuthentication
  delegateSelectors?: string[]
  type: 'Account' | 'Repo'
  url: string
  validationRepo?: string
}

export interface BitbucketCredentialsDTO {
  [key: string]: any
}

export type BitbucketHttpCredentials = BitbucketCredentialsDTO & {
  spec: BitbucketHttpCredentialsSpecDTO
  type: 'UsernamePassword'
}

export interface BitbucketHttpCredentialsSpecDTO {
  [key: string]: any
}

export type BitbucketSshCredentials = BitbucketCredentialsDTO & {
  sshKeyRef: string
}

export type BitbucketUsernamePassword = BitbucketHttpCredentialsSpecDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type BitbucketUsernameTokenApiAccess = BitbucketApiAccessSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export interface CD10RegisterActivityDTO {
  activityId?: string
  envIdentifier?: string
  serviceIdentifier?: string
}

export type CEAwsConnector = ConnectorConfigDTO & {
  awsAccountId?: string
  crossAccountAccess: CrossAccountAccess
  curAttributes?: AwsCurAttributes
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
}

export type CEAzureConnector = ConnectorConfigDTO & {
  billingExportSpec?: BillingExportSpec
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  subscriptionId: string
  tenantId: string
}

export type CEKubernetesClusterConfig = ConnectorConfigDTO & {
  connectorRef: string
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
}

export interface CVConfig {
  accountId: string
  category: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  connectorIdentifier: string
  createNextTaskIteration?: number
  createdAt?: number
  dataCollectionTaskIteration?: number
  enabled?: boolean
  envIdentifier: string
  firstTimeDataCollectionTimeRange?: TimeRange
  identifier: string
  lastUpdatedAt?: number
  monitoringSourceName: string
  orgIdentifier: string
  perpetualTaskId?: string
  productName?: string
  projectIdentifier: string
  serviceIdentifier: string
  type?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER' | 'STACKDRIVER_LOG' | 'KUBERNETES' | 'NEW_RELIC' | 'PROMETHEUS'
  uuid?: string
  verificationType: 'TIME_SERIES' | 'LOG'
}

export interface CVNGLogDTO {
  accountId?: string
  createdAt?: number
  endTime?: number
  startTime?: number
  traceableId?: string
  traceableType?: 'ONBOARDING' | 'VERIFICATION_TASK'
  type?: 'API_CALL_LOG' | 'EXECUTION_LOG'
}

export interface CVSetupStatus {
  numberOfServicesUsedInActivitySources?: number
  numberOfServicesUsedInMonitoringSources?: number
  servicesUndergoingHealthVerification?: number
  stepsWhichAreCompleted?: ('ACTIVITY_SOURCE' | 'MONITORING_SOURCE' | 'VERIFICATION_JOBS')[]
  totalNumberOfEnvironments?: number
  totalNumberOfServices?: number
}

export interface CategoryRisk {
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  risk?: number
}

export interface CategoryRisksDTO {
  categoryRisks?: CategoryRisk[]
  endTimeEpoch?: number
  hasConfigsSetup?: boolean
  startTimeEpoch?: number
}

export interface Cluster {
  label?: number
  text?: string
}

export interface ClusterCoordinates {
  host?: string
  label?: number
  x?: number
  y?: number
}

export interface ClusterSummary {
  clusterType?: 'KNOWN_EVENT' | 'UNKNOWN_EVENT' | 'UNEXPECTED_FREQUENCY'
  count?: number
  label?: number
  risk?: number
  riskLevel?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  score?: number
  testFrequencyData?: number[]
}

export interface ConnectorConfigDTO {
  [key: string]: any
}

export interface ConnectorInfoDTO {
  description?: string
  identifier: string
  name: string
  orgIdentifier?: string
  projectIdentifier?: string
  spec: ConnectorConfigDTO
  tags?: {
    [key: string]: string
  }
  type:
    | 'K8sCluster'
    | 'Git'
    | 'Splunk'
    | 'AppDynamics'
    | 'Prometheus'
    | 'Dynatrace'
    | 'Vault'
    | 'AzureKeyVault'
    | 'DockerRegistry'
    | 'Local'
    | 'AwsKms'
    | 'GcpKms'
    | 'Gcp'
    | 'Aws'
    | 'Artifactory'
    | 'Jira'
    | 'Nexus'
    | 'Github'
    | 'Gitlab'
    | 'Bitbucket'
    | 'Codecommit'
    | 'CEAws'
    | 'CEAzure'
    | 'GcpCloudCost'
    | 'CEK8sCluster'
    | 'HttpHelmRepo'
    | 'NewRelic'
    | 'Datadog'
    | 'SumoLogic'
}

export interface ControlClusterSummary {
  controlFrequencyData?: number[]
  label?: number
}

export interface CountByTag {
  count?: number
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
}

export interface CrossAccountAccess {
  crossAccountRoleArn: string
  externalId?: string
}

export interface DSConfig {
  accountId?: string
  connectorIdentifier?: string
  identifier?: string
  monitoringSourceName?: string
  orgIdentifier?: string
  productName?: string
  projectIdentifier?: string
  type?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER' | 'STACKDRIVER_LOG' | 'KUBERNETES' | 'NEW_RELIC' | 'PROMETHEUS'
}

export interface DataCollectionInfo {
  collectHostData?: boolean
  dataCollectionDsl?: string
  verificationType?: 'TIME_SERIES' | 'LOG'
}

export interface DataCollectionRequest {
  baseUrl?: string
  connectorInfoDTO?: ConnectorInfoDTO
  dsl?: string
  tracingId?: string
  type?:
    | 'SPLUNK_SAVED_SEARCHES'
    | 'STACKDRIVER_DASHBOARD_LIST'
    | 'STACKDRIVER_DASHBOARD_GET'
    | 'STACKDRIVER_SAMPLE_DATA'
    | 'STACKDRIVER_LOG_SAMPLE_DATA'
    | 'APPDYNAMICS_FETCH_APPS'
    | 'APPDYNAMICS_FETCH_TIERS'
    | 'APPDYNAMICS_GET_METRIC_DATA'
    | 'NEWRELIC_APPS_REQUEST'
    | 'NEWRELIC_VALIDATION_REQUEST'
    | 'PROMETHEUS_METRIC_LIST_GET'
    | 'PROMETHEUS_LABEL_NAMES_GET'
    | 'PROMETHEUS_LABEL_VALUES_GET'
    | 'PROMETHEUS_SAMPLE_DATA'
}

export interface DataCollectionTaskDTO {
  accountId?: string
  dataCollectionInfo?: DataCollectionInfo
  endTime?: number
  startTime?: number
  uuid?: string
  verificationTaskId?: string
}

export interface DataCollectionTaskResult {
  dataCollectionTaskId?: string
  exception?: string
  stacktrace?: string
  status?: 'FAILED' | 'QUEUED' | 'RUNNING' | 'WAITING' | 'EXPIRED' | 'SUCCESS'
}

export interface DataPoint {
  timestamp?: number
  value?: number
}

export interface DataSet {
  metricName?: string
  timeSeriesQuery?: { [key: string]: any }
}

export type DatadogConnectorDTO = ConnectorConfigDTO & {
  apiKeyRef: string
  applicationKeyRef: string
  delegateSelectors?: string[]
  url: string
}

export interface DatasourceTypeDTO {
  dataSourceType?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
  verificationType?: 'TIME_SERIES' | 'LOG'
}

export interface DeploymentActivityPopoverResultDTO {
  postDeploymentSummary?: DeploymentPopoverSummary
  preProductionDeploymentSummary?: DeploymentPopoverSummary
  productionDeploymentSummary?: DeploymentPopoverSummary
  serviceName?: string
  tag?: string
}

export interface DeploymentActivityResultDTO {
  deploymentResultSummary?: DeploymentResultSummary
  deploymentTag?: string
  environments?: string[]
  serviceIdentifier?: string
  serviceName?: string
}

export interface DeploymentActivitySummaryDTO {
  deploymentTag?: string
  deploymentVerificationJobInstanceSummary?: DeploymentVerificationJobInstanceSummary
  envIdentifier?: string
  envName?: string
  serviceIdentifier?: string
  serviceName?: string
}

export interface DeploymentActivityVerificationResultDTO {
  postDeploymentSummary?: ActivityVerificationSummary
  preProductionDeploymentSummary?: ActivityVerificationSummary
  productionDeploymentSummary?: ActivityVerificationSummary
  serviceIdentifier?: string
  serviceName?: string
  tag?: string
}

export interface DeploymentLogAnalysisDTO {
  clusterCoordinates?: ClusterCoordinates[]
  clusters?: Cluster[]
  hostSummaries?: HostSummary[]
  resultSummary?: ResultSummary
}

export interface DeploymentPopoverSummary {
  total?: number
  verificationResults?: VerificationResult[]
}

export interface DeploymentResultSummary {
  postDeploymentVerificationJobInstanceSummaries?: DeploymentVerificationJobInstanceSummary[]
  preProductionDeploymentVerificationJobInstanceSummaries?: DeploymentVerificationJobInstanceSummary[]
  productionDeploymentVerificationJobInstanceSummaries?: DeploymentVerificationJobInstanceSummary[]
}

export interface DeploymentTimeSeriesAnalysisDTO {
  hostSummaries?: HostInfo[]
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  score?: number
  transactionMetricSummaries?: TransactionMetricHostData[]
}

export interface DeploymentVerificationJobInstanceSummary {
  activityId?: string
  activityStartTime?: number
  additionalInfo?: AdditionalInfo
  durationMs?: number
  environmentName?: string
  jobName?: string
  logsAnalysisSummary?: LogsAnalysisSummary
  progressPercentage?: number
  remainingTimeMs?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  startTime?: number
  status?: 'IGNORED' | 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
  timeSeriesAnalysisSummary?: TimeSeriesAnalysisSummary
  verificationJobInstanceId?: string
}

export interface DockerAuthCredentialsDTO {
  [key: string]: any
}

export interface DockerAuthenticationDTO {
  spec?: DockerAuthCredentialsDTO
  type: 'UsernamePassword' | 'Anonymous'
}

export type DockerConnectorDTO = ConnectorConfigDTO & {
  auth?: DockerAuthenticationDTO
  delegateSelectors?: string[]
  dockerRegistryUrl: string
  providerType: 'DockerHub' | 'Harbor' | 'Quay' | 'Other'
}

export type DockerUserNamePasswordDTO = DockerAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type DynatraceConnectorDTO = ConnectorConfigDTO & {
  apiTokenRef: string
  delegateSelectors?: string[]
  url: string
}

export interface EnvServiceRiskDTO {
  envIdentifier?: string
  envName?: string
  orgIdentifier?: string
  projectIdentifier?: string
  risk?: number
  serviceRisks?: ServiceRisk[]
}

export interface EnvSummary {
  envIdentifier?: string
  envName?: string
  riskScore?: number
  serviceSummaries?: ServiceSummary[]
}

export interface EnvToServicesDTO {
  environment?: EnvironmentResponseDTO
  services?: ServiceResponseDTO[]
}

export interface EnvironmentResponseDTO {
  accountId?: string
  color?: string
  deleted?: boolean
  description?: string
  identifier?: string
  name?: string
  orgIdentifier?: string
  projectIdentifier?: string
  tags?: {
    [key: string]: string
  }
  type?: 'PreProduction' | 'Production'
  version?: number
}

export interface Error {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'JIRA_STEP_ERROR'
    | 'BUCKET_SERVER_ERROR'
  correlationId?: string
  detailedMessage?: string
  message?: string
  responseMessages?: ResponseMessage[]
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface Failure {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'JIRA_STEP_ERROR'
    | 'BUCKET_SERVER_ERROR'
  correlationId?: string
  errors?: ValidationError[]
  message?: string
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface Frequency {
  count?: number
  riskScore?: number
  timestamp?: number
}

export interface FrequencyDTO {
  count?: number
  timestamp?: number
}

export interface GcpBillingExportSpec {
  datasetId: string
}

export type GcpCloudCostConnector = ConnectorConfigDTO & {
  billingExportSpec?: GcpBillingExportSpec
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  projectId: string
}

export type GcpConnector = ConnectorConfigDTO & {
  credential?: GcpConnectorCredential
  delegateSelectors?: string[]
}

export interface GcpConnectorCredential {
  spec?: GcpCredentialSpec
  type: 'InheritFromDelegate' | 'ManualConfig'
}

export interface GcpCredentialSpec {
  [key: string]: any
}

export type GcpKmsConnectorDTO = ConnectorConfigDTO & {
  credentials: string
  default?: boolean
  delegateSelectors?: string[]
  keyName?: string
  keyRing?: string
  projectId?: string
  region?: string
}

export type GcpManualDetails = GcpCredentialSpec & {
  secretKeyRef: string
}

export interface GitAuthenticationDTO {
  [key: string]: any
}

export type GitConfigDTO = ConnectorConfigDTO & {
  branchName?: string
  connectionType: 'Account' | 'Repo'
  delegateSelectors?: string[]
  spec: GitAuthenticationDTO
  type: 'Http' | 'Ssh'
  url: string
  validationRepo?: string
}

export type GitHTTPAuthenticationDTO = GitAuthenticationDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type GitSSHAuthenticationDTO = GitAuthenticationDTO & {
  sshKeyRef: string
}

export interface GithubApiAccess {
  spec?: GithubApiAccessSpecDTO
  type: 'GithubApp' | 'Token'
}

export interface GithubApiAccessSpecDTO {
  [key: string]: any
}

export type GithubAppSpec = GithubApiAccessSpecDTO & {
  applicationId: string
  installationId: string
  privateKeyRef: string
}

export interface GithubAuthentication {
  spec: GithubCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type GithubConnector = ConnectorConfigDTO & {
  apiAccess?: GithubApiAccess
  authentication: GithubAuthentication
  delegateSelectors?: string[]
  type: 'Account' | 'Repo'
  url: string
  validationRepo?: string
}

export interface GithubCredentialsDTO {
  [key: string]: any
}

export type GithubHttpCredentials = GithubCredentialsDTO & {
  spec: GithubHttpCredentialsSpecDTO
  type: 'UsernamePassword' | 'UsernameToken'
}

export interface GithubHttpCredentialsSpecDTO {
  [key: string]: any
}

export type GithubSshCredentials = GithubCredentialsDTO & {
  sshKeyRef: string
}

export type GithubTokenSpec = GithubApiAccessSpecDTO & {
  tokenRef: string
}

export type GithubUsernamePassword = GithubHttpCredentialsSpecDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type GithubUsernameToken = GithubHttpCredentialsSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export interface GitlabApiAccess {
  spec?: GitlabApiAccessSpecDTO
  type: 'Token'
}

export interface GitlabApiAccessSpecDTO {
  [key: string]: any
}

export interface GitlabAuthentication {
  spec: GitlabCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type GitlabConnector = ConnectorConfigDTO & {
  apiAccess?: GitlabApiAccess
  authentication: GitlabAuthentication
  delegateSelectors?: string[]
  type: 'Account' | 'Repo'
  url: string
  validationRepo?: string
}

export interface GitlabCredentialsDTO {
  [key: string]: any
}

export type GitlabHttpCredentials = GitlabCredentialsDTO & {
  spec: GitlabHttpCredentialsSpecDTO
  type: 'UsernamePassword' | 'UsernameToken' | 'Kerberos'
}

export interface GitlabHttpCredentialsSpecDTO {
  [key: string]: any
}

export type GitlabKerberos = GitlabHttpCredentialsSpecDTO & {
  kerberosKeyRef: string
}

export type GitlabSshCredentials = GitlabCredentialsDTO & {
  sshKeyRef: string
}

export type GitlabTokenSpec = GitlabApiAccessSpecDTO & {
  tokenRef: string
}

export type GitlabUsernamePassword = GitlabHttpCredentialsSpecDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type GitlabUsernameToken = GitlabHttpCredentialsSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export interface HealthMonitoringFlagResponse {
  accountId?: string
  healthMonitoringEnabled?: boolean
  identifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface HealthSource {
  identifier: string
  name: string
  spec: HealthSourceSpec
  type?: 'AppDynamics' | 'NewRelic' | 'StackdriverLog'
}

export interface HealthSourceSpec {
  connectorRef?: string
}

export interface HeatMapDTO {
  endTime?: number
  riskScore?: number
  startTime?: number
}

export interface Histogram {
  bars?: Bar[]
  count?: number
  errorMessage?: string
  intervalMs?: number
  query?: string
  splunkQuery?: string
}

export interface HistoricalTrend {
  healthScores?: number[]
}

export interface HostData {
  anomalous?: boolean
  controlData?: number[]
  hostName?: string
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  score?: number
  testData?: number[]
}

export interface HostInfo {
  canary?: boolean
  hostName?: string
  primary?: boolean
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  score?: number
}

export interface HostRecordDTO {
  accountId?: string
  endTime?: number
  hosts?: string[]
  startTime?: number
  verificationTaskId?: string
}

export interface HostSummary {
  host?: string
  resultSummary?: ResultSummary
}

export interface HttpHelmAuthCredentialsDTO {
  [key: string]: any
}

export interface HttpHelmAuthenticationDTO {
  spec?: HttpHelmAuthCredentialsDTO
  type: 'UsernamePassword' | 'Anonymous'
}

export type HttpHelmConnectorDTO = ConnectorConfigDTO & {
  auth?: HttpHelmAuthenticationDTO
  delegateSelectors?: string[]
  helmRepoUrl: string
}

export type HttpHelmUsernamePasswordDTO = HttpHelmAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type JiraConnector = ConnectorConfigDTO & {
  delegateSelectors?: string[]
  jiraUrl: string
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface JsonNode {
  array?: boolean
  bigDecimal?: boolean
  bigInteger?: boolean
  binary?: boolean
  boolean?: boolean
  containerNode?: boolean
  double?: boolean
  float?: boolean
  floatingPointNumber?: boolean
  int?: boolean
  integralNumber?: boolean
  long?: boolean
  missingNode?: boolean
  nodeType?: 'ARRAY' | 'BINARY' | 'BOOLEAN' | 'MISSING' | 'NULL' | 'NUMBER' | 'OBJECT' | 'POJO' | 'STRING'
  null?: boolean
  number?: boolean
  object?: boolean
  pojo?: boolean
  short?: boolean
  textual?: boolean
  valueNode?: boolean
}

export interface KubernetesActivityDTO {
  accountIdentifier?: string
  activityEndTime?: number
  activitySourceConfigId?: string
  activityStartTime: number
  environmentIdentifier?: string
  eventJson?: string
  eventType?: 'Normal' | 'Warning' | 'Error'
  kind?: string
  message?: string
  name: string
  namespace?: string
  orgIdentifier?: string
  projectIdentifier?: string
  reason?: string
  serviceIdentifier?: string
  tags?: string[]
  type?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES'
  verificationJobRuntimeDetails?: VerificationJobRuntimeDetails[]
  workloadName?: string
}

export interface KubernetesActivityDetail {
  eventJson?: string
  eventType?: 'Normal' | 'Warning' | 'Error'
  message?: string
  reason?: string
  timeStamp?: number
}

export interface KubernetesActivityDetailsDTO {
  connectorIdentifier?: string
  details?: KubernetesActivityDetail[]
  kind?: string
  namespace?: string
  sourceName?: string
  workload?: string
}

export interface KubernetesActivitySourceConfig {
  envIdentifier: string
  namespace: string
  namespaceRegex?: string
  serviceIdentifier: string
  workloadName: string
}

export interface KubernetesActivitySourceDTO {
  activitySourceConfigs: KubernetesActivitySourceConfig[]
  connectorIdentifier: string
  createdAt?: number
  editable?: boolean
  identifier: string
  lastUpdatedAt?: number
  name: string
  orgIdentifier?: string
  projectIdentifier?: string
  type?: 'KUBERNETES' | 'HARNESS_CD10' | 'CDNG'
  uuid?: string
}

export interface KubernetesAuthCredentialDTO {
  [key: string]: any
}

export interface KubernetesAuthDTO {
  spec: KubernetesAuthCredentialDTO
  type: 'UsernamePassword' | 'ClientKeyCert' | 'ServiceAccount' | 'OpenIdConnect'
}

export type KubernetesClientKeyCertDTO = KubernetesAuthCredentialDTO & {
  caCertRef?: string
  clientCertRef: string
  clientKeyAlgo?: string
  clientKeyPassphraseRef?: string
  clientKeyRef: string
}

export type KubernetesClusterConfigDTO = ConnectorConfigDTO & {
  credential: KubernetesCredentialDTO
  delegateSelectors?: string[]
}

export type KubernetesClusterDetailsDTO = KubernetesCredentialSpecDTO & {
  auth: KubernetesAuthDTO
  masterUrl: string
}

export interface KubernetesCredentialDTO {
  spec?: KubernetesCredentialSpecDTO
  type: 'InheritFromDelegate' | 'ManualConfig'
}

export interface KubernetesCredentialSpecDTO {
  [key: string]: any
}

export type KubernetesOpenIdConnectDTO = KubernetesAuthCredentialDTO & {
  oidcClientIdRef: string
  oidcIssuerUrl?: string
  oidcPasswordRef: string
  oidcScopes?: string
  oidcSecretRef?: string
  oidcUsername?: string
  oidcUsernameRef?: string
}

export type KubernetesServiceAccountDTO = KubernetesAuthCredentialDTO & {
  serviceAccountTokenRef: string
}

export type KubernetesUserNamePasswordDTO = KubernetesAuthCredentialDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface LearningEngineTask {
  accountId?: string
  analysisEndEpochMinute?: number
  analysisEndTime?: number
  analysisSaveUrl?: string
  analysisStartTime?: number
  analysisType?:
    | 'SERVICE_GUARD_TIME_SERIES'
    | 'LOG_CLUSTER'
    | 'SERVICE_GUARD_LOG_ANALYSIS'
    | 'CANARY_LOG_ANALYSIS'
    | 'TEST_LOG_ANALYSIS'
    | 'TIME_SERIES_CANARY'
    | 'SERVICE_GUARD_FEEDBACK_ANALYSIS'
    | 'TIME_SERIES_LOAD_TEST'
  createdAt?: number
  failureUrl?: string
  lastUpdatedAt?: number
  pickedAt?: number
  taskPriority?: number
  taskStatus?: 'QUEUED' | 'RUNNING' | 'FAILED' | 'SUCCESS' | 'TIMEOUT'
  type?:
    | 'SERVICE_GUARD_TIME_SERIES'
    | 'LOG_CLUSTER'
    | 'SERVICE_GUARD_LOG_ANALYSIS'
    | 'CANARY_LOG_ANALYSIS'
    | 'TEST_LOG_ANALYSIS'
    | 'TIME_SERIES_CANARY'
    | 'SERVICE_GUARD_FEEDBACK_ANALYSIS'
    | 'TIME_SERIES_LOAD_TEST'
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export type LocalConnectorDTO = ConnectorConfigDTO & {
  default?: boolean
}

export interface LogAnalysisCluster {
  accountId?: string
  analysisEndTime?: number
  analysisMinute?: number
  analysisStartTime?: number
  createdAt?: number
  evicted?: boolean
  firstSeenTime?: number
  frequencyTrend?: Frequency[]
  label?: number
  lastUpdatedAt?: number
  text?: string
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export interface LogAnalysisClusterChartDTO {
  hostName?: string
  label?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  text?: string
  x?: number
  y?: number
}

export interface LogAnalysisClusterDTO {
  clusterType?: 'KNOWN_EVENT' | 'UNKNOWN_EVENT' | 'UNEXPECTED_FREQUENCY'
  controlFrequencyData?: number[]
  count?: number
  label?: number
  message?: string
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  score?: number
  testFrequencyData?: number[]
}

export interface LogAnalysisDTO {
  accountId?: string
  analysisEndTime?: number
  analysisMinute?: number
  analysisStartTime?: number
  analysisSummaryMessage?: string
  logAnalysisResults?: AnalysisResult[]
  logClusters?: LogAnalysisCluster[]
  score?: number
  verificationTaskId?: string
}

export interface LogClusterDTO {
  clusterCount?: number
  clusterLabel?: string
  epochMinute?: number
  host?: string
  log?: string
  verificationTaskId?: string
}

export interface LogData {
  count?: number
  label?: number
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
  text?: string
  trend?: FrequencyDTO[]
}

export interface LogDataByTag {
  countByTags?: CountByTag[]
  timestamp?: number
}

export interface LogRecordDTO {
  accountId?: string
  host?: string
  log?: string
  timestamp?: number
  verificationTaskId?: string
}

export interface LogSampleRequestDTO {
  query?: string
}

export interface LogsAnalysisSummary {
  anomalousClusterCount?: number
  totalClusterCount?: number
}

export interface MetricData {
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  timestamp?: number
  value?: number
}

export interface MetricDefinition {
  included?: boolean
  name?: string
  responseJsonPath?: string
  thresholds?: TimeSeriesThreshold[]
  type: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  validationResponseJsonPath?: string
}

export interface MetricDefinitionDTO {
  included?: boolean
  name?: string
  path?: string
  responseJsonPath?: string
  thresholds?: TimeSeriesThresholdDTO[]
  type?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  validationPath?: string
  validationResponseJsonPath?: string
}

export interface MetricPack {
  accountId?: string
  category: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  createdAt?: number
  dataSourceType:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
  identifier?: string
  lastUpdatedAt?: number
  metrics?: MetricDefinition[]
  orgIdentifier?: string
  projectIdentifier?: string
  uuid?: string
}

export interface MetricPackDTO {
  accountId?: string
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  dataSourceType?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
  identifier?: string
  metrics?: MetricDefinitionDTO[]
  orgIdentifier?: string
  projectIdentifier?: string
  thresholds?: TimeSeriesThresholdDTO[]
  uuid?: string
}

export interface MetricPackValidationResponse {
  metricPackName?: string
  metricValidationResponses?: MetricValidationResponse[]
  overallStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
}

export interface MetricSum {
  data?: number
  metricName?: string
  risk?: number
}

export interface MetricValidationResponse {
  metricName?: string
  status?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  value?: number
}

export interface MonitoredServiceDTO {
  description?: string
  environmentRef: string
  identifier: string
  name: string
  orgIdentifier: string
  projectIdentifier: string
  serviceRef: string
  sources?: Sources
  type: 'Application'
}

export interface MonitoredServiceListItemDTO {
  currentHealthScore?: number
  environmentRef?: string
  healthMonitoringEnabled?: boolean
  historicalTrend?: HistoricalTrend
  identifier?: string
  name?: string
  serviceRef?: string
  type?: 'Application'
}

export interface MonitoredServiceResponse {
  createdAt?: number
  lastModifiedAt?: number
  monitoredService: MonitoredServiceDTO
}

export interface MonitoringSource {
  importedAt?: number
  monitoringSourceIdentifier?: string
  monitoringSourceName?: string
  numberOfServices?: number
  type?: 'APP_DYNAMICS' | 'SPLUNK' | 'STACKDRIVER' | 'STACKDRIVER_LOG' | 'KUBERNETES' | 'NEW_RELIC' | 'PROMETHEUS'
}

export interface MonitoringSourceImportStatus {
  [key: string]: any
}

export interface NewRelicApplication {
  applicationId?: number
  applicationName?: string
}

export type NewRelicConnectorDTO = ConnectorConfigDTO & {
  apiKeyRef: string
  delegateSelectors?: string[]
  newRelicAccountId: string
  url: string
}

export type NewRelicHealthSourceSpec = HealthSourceSpec & {
  applicationId: string
  applicationName: string
  connectorRef: string
  feature: string
  metricPacks: MetricPackDTO[]
}

export interface NexusAuthCredentials {
  [key: string]: any
}

export interface NexusAuthentication {
  spec?: NexusAuthCredentials
  type: 'UsernamePassword' | 'Anonymous'
}

export type NexusConnector = ConnectorConfigDTO & {
  auth?: NexusAuthentication
  delegateSelectors?: string[]
  nexusServerUrl: string
  version: string
}

export type NexusUsernamePasswordAuth = NexusAuthCredentials & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface NotificationMethod {
  emails?: string[]
  notificationSettingType?: 'Slack' | 'PagerDuty' | 'MicrosoftTeams' | 'Email'
  pagerDutyKey?: string
  slackChannelName?: string
  slackWebhook?: string
}

export interface OnboardingRequestDTO {
  accountId?: string
  connectorIdentifier?: string
  dataCollectionRequest?: DataCollectionRequest
  orgIdentifier?: string
  projectIdentifier?: string
  tracingId?: string
}

export interface OnboardingResponseDTO {
  accountId?: string
  connectorIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  result?: { [key: string]: any }
  tracingId?: string
}

export interface Page {
  content?: { [key: string]: any }[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageActivitySourceDTO {
  content?: ActivitySourceDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageAlertRuleDTO {
  content?: AlertRuleDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageAnalyzedLogDataDTO {
  content?: AnalyzedLogDataDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageAppDynamicsApplication {
  content?: AppDynamicsApplication[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageAppDynamicsTier {
  content?: AppDynamicsTier[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageCVNGLogDTO {
  content?: CVNGLogDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageLogAnalysisClusterDTO {
  content?: LogAnalysisClusterDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageMonitoredServiceListItemDTO {
  content?: MonitoredServiceListItemDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageMonitoringSource {
  content?: MonitoringSource[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageStackdriverDashboardDTO {
  content?: StackdriverDashboardDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageString {
  content?: string[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageTimeSeriesMetricDataDTO {
  content?: TimeSeriesMetricDataDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageTransactionMetricInfo {
  content?: TransactionMetricInfo[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageVerificationJobDTO {
  content?: VerificationJobDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PartialSchemaDTO {
  moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS'
  namespace?: string
  nodeName?: string
  nodeType?: string
  schema?: JsonNode
}

export type PrometheusConnectorDTO = ConnectorConfigDTO & {
  delegateSelectors?: string[]
  url: string
}

export interface PrometheusSampleData {
  data?: DataPoint[]
  metricDetails?: {
    [key: string]: string
  }
}

export interface QueryDTO {
  messageIdentifier: string
  name: string
  query: string
  serviceInstanceIdentifier: string
}

export interface Response {
  correlationId?: string
  data?: { [key: string]: any }
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseActivitySourceDTO {
  correlationId?: string
  data?: ActivitySourceDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseBoolean {
  correlationId?: string
  data?: boolean
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseKubernetesActivityDetailsDTO {
  correlationId?: string
  data?: KubernetesActivityDetailsDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListLinkedHashMap {
  correlationId?: string
  data?: {
    [key: string]: { [key: string]: any }
  }[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListNewRelicApplication {
  correlationId?: string
  data?: NewRelicApplication[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListPrometheusSampleData {
  correlationId?: string
  data?: PrometheusSampleData[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListStackdriverDashboardDetail {
  correlationId?: string
  data?: StackdriverDashboardDetail[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListString {
  correlationId?: string
  data?: string[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListVerificationJobDTO {
  correlationId?: string
  data?: VerificationJobDTO[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseMessage {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'JIRA_STEP_ERROR'
    | 'BUCKET_SERVER_ERROR'
  exception?: Throwable
  failureTypes?: (
    | 'EXPIRED'
    | 'DELEGATE_PROVISIONING'
    | 'CONNECTIVITY'
    | 'AUTHENTICATION'
    | 'VERIFICATION_FAILURE'
    | 'APPLICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'TIMEOUT_ERROR'
  )[]
  level?: 'INFO' | 'ERROR'
  message?: string
}

export interface ResponseMetricPackValidationResponse {
  correlationId?: string
  data?: MetricPackValidationResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseMonitoredServiceResponse {
  correlationId?: string
  data?: MonitoredServiceResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseMonitoringSourceImportStatus {
  correlationId?: string
  data?: MonitoringSourceImportStatus
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageActivitySourceDTO {
  correlationId?: string
  data?: PageActivitySourceDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageAppDynamicsApplication {
  correlationId?: string
  data?: PageAppDynamicsApplication
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageAppDynamicsTier {
  correlationId?: string
  data?: PageAppDynamicsTier
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageCVNGLogDTO {
  correlationId?: string
  data?: PageCVNGLogDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageMonitoredServiceListItemDTO {
  correlationId?: string
  data?: PageMonitoredServiceListItemDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageMonitoringSource {
  correlationId?: string
  data?: PageMonitoringSource
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageStackdriverDashboardDTO {
  correlationId?: string
  data?: PageStackdriverDashboardDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageString {
  correlationId?: string
  data?: PageString
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageVerificationJobDTO {
  correlationId?: string
  data?: PageVerificationJobDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePartialSchemaDTO {
  correlationId?: string
  data?: PartialSchemaDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseSetAppdynamicsValidationResponse {
  correlationId?: string
  data?: AppdynamicsValidationResponse[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseSetTimeSeriesSampleDTO {
  correlationId?: string
  data?: TimeSeriesSampleDTO[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseString {
  correlationId?: string
  data?: string
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseVerificationJobDTO {
  correlationId?: string
  data?: VerificationJobDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface RestResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: { [key: string]: any }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseActivityStatusDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivityStatusDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseActivityVerificationResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivityVerificationResultDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseAlertRuleDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: AlertRuleDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseBoolean {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: boolean
  responseMessages?: ResponseMessage[]
}

export interface RestResponseCD10RegisterActivityDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CD10RegisterActivityDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseCVConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CVConfig
  responseMessages?: ResponseMessage[]
}

export interface RestResponseCVSetupStatus {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CVSetupStatus
  responseMessages?: ResponseMessage[]
}

export interface RestResponseCategoryRisksDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CategoryRisksDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseDSConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DSConfig
  responseMessages?: ResponseMessage[]
}

export interface RestResponseDeploymentActivityPopoverResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivityPopoverResultDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseDeploymentActivityResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivityResultDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseDeploymentActivitySummaryDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivitySummaryDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseDeploymentLogAnalysisDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentLogAnalysisDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseHealthMonitoringFlagResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: HealthMonitoringFlagResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseKubernetesActivitySourceDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: KubernetesActivitySourceDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseLearningEngineTask {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LearningEngineTask
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListActivityDashboardDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivityDashboardDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListActivityType {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ('DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES')[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListActivityVerificationResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivityVerificationResultDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListCVConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CVConfig[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListDSConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DSConfig[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListDataCollectionTaskDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DataCollectionTaskDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListDataSourceType {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: (
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
  )[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListDeploymentActivityVerificationResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivityVerificationResultDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListEnvServiceRiskDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: EnvServiceRiskDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListEnvToServicesDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: EnvToServicesDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLogAnalysisCluster {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisCluster[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLogAnalysisClusterChartDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisClusterChartDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLogClusterDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogClusterDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListMetricPackDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: MetricPackDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListSplunkSavedSearch {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SplunkSavedSearch[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTestVerificationBaselineExecutionDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TestVerificationBaselineExecutionDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTimeSeriesMetricDefinition {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesMetricDefinition[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTimeSeriesRecordDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesRecordDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTimeSeriesThreshold {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesThreshold[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: HeatMapDTO[]
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMapStringMapStringListDouble {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: number[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMapStringMapStringListMetricSum {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: MetricSum[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMapStringMapStringListTimeSeriesAnomalies {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: TimeSeriesAnomalies[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMonitoredServiceResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: MonitoredServiceResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseOnboardingResponseDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: OnboardingResponseDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseOptionalDataCollectionTaskDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DataCollectionTaskDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponsePageAlertRuleDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageAlertRuleDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponsePageAnalyzedLogDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageAnalyzedLogDataDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponsePageLogAnalysisClusterDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageLogAnalysisClusterDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponsePageTimeSeriesMetricDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageTimeSeriesMetricDataDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseRiskSummaryPopoverDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: RiskSummaryPopoverDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseSetDatasourceTypeDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DatasourceTypeDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseSortedSetLogDataByTag {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogDataByTag[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseSplunkValidationResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SplunkValidationResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string
  responseMessages?: ResponseMessage[]
}

export interface RestResponseTimeSeriesTestDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesTestDataDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseTransactionMetricInfoSummaryPageDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TransactionMetricInfoSummaryPageDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseVerificationJobDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: VerificationJobDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseVoid {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: Void
  responseMessages?: ResponseMessage[]
}

export interface ResultSummary {
  controlClusterSummaries?: ControlClusterSummary[]
  risk?: number
  riskLevel?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  score?: number
  testClusterSummaries?: ClusterSummary[]
}

export interface RiskNotify {
  threshold?: number
}

export interface RiskSummaryPopoverDTO {
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  envSummaries?: EnvSummary[]
}

export interface SampleLog {
  raw?: string
  timestamp?: number
}

export interface ServiceGuardTimeSeriesAnalysisDTO {
  analysisEndTime?: number
  analysisStartTime?: number
  overallMetricScores?: {
    [key: string]: number
  }
  txnMetricAnalysisData?: {
    [key: string]: {
      [key: string]: ServiceGuardTxnMetricAnalysisDataDTO
    }
  }
  verificationTaskId?: string
}

export interface ServiceGuardTxnMetricAnalysisDataDTO {
  anomalousPatterns?: TimeSeriesAnomalies[]
  cumulativeSums?: MetricSum
  keyTransaction?: boolean
  lastSeenTime?: number
  longTermPattern?: boolean
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  score?: number
  shortTermHistory?: number[]
}

export interface ServiceResponseDTO {
  accountId?: string
  deleted?: boolean
  description?: string
  identifier?: string
  name?: string
  orgIdentifier?: string
  projectIdentifier?: string
  tags?: {
    [key: string]: string
  }
  version?: number
}

export interface ServiceRisk {
  risk?: number
  serviceIdentifier?: string
  serviceName?: string
}

export interface ServiceSummary {
  analysisRisks?: AnalysisRisk[]
  risk?: number
  serviceIdentifier?: string
  serviceName?: string
}

export interface Sources {
  healthSources?: HealthSource[]
}

export type SplunkConnectorDTO = ConnectorConfigDTO & {
  accountId: string
  delegateSelectors?: string[]
  passwordRef: string
  splunkUrl: string
  username?: string
}

export interface SplunkSampleResponse {
  errorMessage?: string
  rawSampleLogs?: SampleLog[]
  sample?: {
    [key: string]: string
  }
  splunkQuery?: string
}

export interface SplunkSavedSearch {
  searchQuery?: string
  title?: string
}

export interface SplunkValidationResponse {
  errorMessage?: string
  histogram?: Histogram
  queryDurationMillis?: number
  samples?: SplunkSampleResponse
}

export interface StackTraceElement {
  className?: string
  fileName?: string
  lineNumber?: number
  methodName?: string
  nativeMethod?: boolean
}

export interface StackdriverDashboardDTO {
  name?: string
  path?: string
}

export interface StackdriverDashboardDetail {
  dataSetList?: DataSet[]
  widgetName?: string
}

export type StackdriverLogHealthSourceSpec = HealthSourceSpec & {
  connectorRef: string
  feature: string
  queries: QueryDTO[]
}

export type SumoLogicConnectorDTO = ConnectorConfigDTO & {
  accessIdRef: string
  accessKeyRef: string
  delegateSelectors?: string[]
  url: string
}

export interface TestVerificationBaselineExecutionDTO {
  createdAt?: number
  verificationJobInstanceId?: string
}

export interface Throwable {
  cause?: Throwable
  localizedMessage?: string
  message?: string
  stackTrace?: StackTraceElement[]
  suppressed?: Throwable[]
}

export interface TimeRange {
  endTime?: number
  startTime?: number
}

export interface TimeSeriesAnalysisSummary {
  numAnomMetrics?: number
  totalNumMetrics?: number
}

export interface TimeSeriesAnomalies {
  anomalousTimestamps?: number[]
  metricName?: string
  testData?: number[]
  transactionName?: string
}

export interface TimeSeriesDataCollectionRecord {
  accountId?: string
  cvConfigId?: string
  host?: string
  metricValues?: TimeSeriesDataRecordMetricValue[]
  timeStamp?: number
  verificationTaskId?: string
}

export interface TimeSeriesDataRecordGroupValue {
  groupName?: string
  percent?: number
  value?: number
}

export interface TimeSeriesDataRecordMetricValue {
  metricName?: string
  timeSeriesValues?: TimeSeriesDataRecordGroupValue[]
}

export interface TimeSeriesMetricDataDTO {
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  environmentIdentifier?: string
  groupName?: string
  metricDataList?: MetricData[]
  metricName?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  orgIdentifier?: string
  projectIdentifier?: string
  serviceIdentifier?: string
}

export interface TimeSeriesMetricDefinition {
  action?: 'FAIL_IMMEDIATELY' | 'FAIL_AFTER_OCCURRENCES' | 'FAIL_AFTER_CONSECUTIVE_OCCURRENCES'
  actionType?: 'IGNORE' | 'FAIL'
  comparisonType?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
  metricGroupName?: string
  metricName?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  occurrenceCount?: number
  thresholdType?: 'ACT_WHEN_LOWER' | 'ACT_WHEN_HIGHER'
  value?: number
}

export interface TimeSeriesRecordDTO {
  epochMinute?: number
  groupName?: string
  host?: string
  metricName?: string
  metricValue?: number
  verificationTaskId?: string
}

export interface TimeSeriesSampleDTO {
  metricName?: string
  metricValue?: number
  timestamp?: number
  txnName?: string
}

export interface TimeSeriesTestDataDTO {
  cvConfigId?: string
  metricGroupValues?: {
    [key: string]: {
      [key: string]: MetricData[]
    }
  }
  transactionMetricValues?: {
    [key: string]: {
      [key: string]: number[]
    }
  }
}

export interface TimeSeriesThreshold {
  accountId: string
  action: 'IGNORE' | 'FAIL'
  createdAt?: number
  criteria: TimeSeriesThresholdCriteria
  dataSourceType:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
  lastUpdatedAt?: number
  metricGroupName?: string
  metricName: string
  metricPackIdentifier: string
  metricType: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  orgIdentifier: string
  projectIdentifier: string
  uuid?: string
}

export interface TimeSeriesThresholdCriteria {
  action?: 'FAIL_IMMEDIATELY' | 'FAIL_AFTER_OCCURRENCES' | 'FAIL_AFTER_CONSECUTIVE_OCCURRENCES'
  criteria?: string
  occurrenceCount?: number
  type?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
}

export interface TimeSeriesThresholdDTO {
  accountId?: string
  action?: 'IGNORE' | 'FAIL'
  criteria?: TimeSeriesThresholdCriteria
  dataSourceType?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
  metricGroupName?: string
  metricName?: string
  metricPackIdentifier?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface TransactionMetric {
  metricName?: string
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  score?: number
  transactionName?: string
}

export interface TransactionMetricHostData {
  anomalous?: boolean
  hostData?: HostData[]
  metricName?: string
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  score?: number
  transactionName?: string
}

export interface TransactionMetricInfo {
  connectorName?: string
  nodes?: HostData[]
  transactionMetric?: TransactionMetric
}

export interface TransactionMetricInfoSummaryPageDTO {
  deploymentEndTime?: number
  deploymentStartTime?: number
  deploymentTimeRange?: TimeRange
  pageResponse?: PageTransactionMetricInfo
}

export interface ValidationError {
  error?: string
  fieldId?: string
}

export type VaultConnectorDTO = ConnectorConfigDTO & {
  accessType?: 'APP_ROLE' | 'TOKEN'
  appRoleId?: string
  authToken?: string
  basePath?: string
  default?: boolean
  delegateSelectors?: string[]
  readOnly?: boolean
  renewalIntervalMinutes?: number
  secretEngineManuallyConfigured?: boolean
  secretEngineName?: string
  secretEngineVersion?: number
  secretId?: string
  vaultUrl?: string
}

export interface VerificationJobDTO {
  activitySourceIdentifier?: string
  allMonitoringSourcesEnabled?: boolean
  dataSources?: (
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
  )[]
  defaultJob?: boolean
  duration?: string
  envIdentifier?: string
  envName?: string
  identifier?: string
  jobName?: string
  monitoringSources?: string[]
  orgIdentifier?: string
  projectIdentifier?: string
  serviceIdentifier?: string
  serviceName?: string
  type?: 'TEST' | 'CANARY' | 'BLUE_GREEN' | 'HEALTH'
  verificationJobUrl?: string
}

export interface VerificationJobRuntimeDetails {
  runtimeValues?: {
    [key: string]: string
  }
  verificationJobIdentifier?: string
}

export interface VerificationResult {
  jobName?: string
  progressPercentage?: number
  remainingTimeMs?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW' | 'MEDIUM' | 'HIGH'
  startTime?: number
  status?: 'IGNORED' | 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
}

export interface VerificationsNotify {
  activityTypes?: ('DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM' | 'CONFIG' | 'OTHER' | 'KUBERNETES')[]
  allActivityTpe?: boolean
  allVerificationStatuses?: boolean
  verificationStatuses?: ('VERIFICATION_PASSED' | 'VERIFICATION_FAILED')[]
}

export interface Void {
  [key: string]: any
}

export type ActivityDTORequestBody = ActivityDTO

export type ActivitySourceDTORequestBody = ActivitySourceDTO

export type AlertRuleDTORequestBody = AlertRuleDTO

export type CVConfigRequestBody = CVConfig

export type CVConfigArrayRequestBody = CVConfig[]

export type DSConfigRequestBody = DSConfig

export type MetricPackDTOArrayRequestBody = MetricPackDTO[]

export type MonitoredServiceDTORequestBody = MonitoredServiceDTO

export type ServiceGuardTimeSeriesAnalysisDTORequestBody = ServiceGuardTimeSeriesAnalysisDTO

export type VerificationJobDTORequestBody = VerificationJobDTO

export interface GetActivitySourceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  identifier: string
}

export type GetActivitySourceProps = Omit<
  GetProps<ResponseActivitySourceDTO, Failure | Error, GetActivitySourceQueryParams, void>,
  'path'
>

/**
 * gets a kubernetes event source by identifier
 */
export const GetActivitySource = (props: GetActivitySourceProps) => (
  <Get<ResponseActivitySourceDTO, Failure | Error, GetActivitySourceQueryParams, void>
    path={`/activity-source`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivitySourceProps = Omit<
  UseGetProps<ResponseActivitySourceDTO, Failure | Error, GetActivitySourceQueryParams, void>,
  'path'
>

/**
 * gets a kubernetes event source by identifier
 */
export const useGetActivitySource = (props: UseGetActivitySourceProps) =>
  useGet<ResponseActivitySourceDTO, Failure | Error, GetActivitySourceQueryParams, void>(`/activity-source`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets a kubernetes event source by identifier
 */
export const getActivitySourcePromise = (
  props: GetUsingFetchProps<ResponseActivitySourceDTO, Failure | Error, GetActivitySourceQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseActivitySourceDTO, Failure | Error, GetActivitySourceQueryParams, void>(
    getConfig('cv/api'),
    `/activity-source`,
    props,
    signal
  )

export interface CreateActivitySourceQueryParams {
  accountId: string
}

export type CreateActivitySourceProps = Omit<
  MutateProps<ResponseString, Failure | Error, CreateActivitySourceQueryParams, ActivitySourceDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * create an activity source
 */
export const CreateActivitySource = (props: CreateActivitySourceProps) => (
  <Mutate<ResponseString, Failure | Error, CreateActivitySourceQueryParams, ActivitySourceDTORequestBody, void>
    verb="POST"
    path={`/activity-source`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseCreateActivitySourceProps = Omit<
  UseMutateProps<ResponseString, Failure | Error, CreateActivitySourceQueryParams, ActivitySourceDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * create an activity source
 */
export const useCreateActivitySource = (props: UseCreateActivitySourceProps) =>
  useMutate<ResponseString, Failure | Error, CreateActivitySourceQueryParams, ActivitySourceDTORequestBody, void>(
    'POST',
    `/activity-source`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * create an activity source
 */
export const createActivitySourcePromise = (
  props: MutateUsingFetchProps<
    ResponseString,
    Failure | Error,
    CreateActivitySourceQueryParams,
    ActivitySourceDTORequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseString,
    Failure | Error,
    CreateActivitySourceQueryParams,
    ActivitySourceDTORequestBody,
    void
  >('POST', getConfig('cv/api'), `/activity-source`, props, signal)

export interface ListActivitySourcesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  offset: number
  pageSize: number
  filter?: string
}

export type ListActivitySourcesProps = Omit<
  GetProps<ResponsePageActivitySourceDTO, Failure | Error, ListActivitySourcesQueryParams, void>,
  'path'
>

/**
 * lists all kubernetes event sources
 */
export const ListActivitySources = (props: ListActivitySourcesProps) => (
  <Get<ResponsePageActivitySourceDTO, Failure | Error, ListActivitySourcesQueryParams, void>
    path={`/activity-source/list`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListActivitySourcesProps = Omit<
  UseGetProps<ResponsePageActivitySourceDTO, Failure | Error, ListActivitySourcesQueryParams, void>,
  'path'
>

/**
 * lists all kubernetes event sources
 */
export const useListActivitySources = (props: UseListActivitySourcesProps) =>
  useGet<ResponsePageActivitySourceDTO, Failure | Error, ListActivitySourcesQueryParams, void>(
    `/activity-source/list`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * lists all kubernetes event sources
 */
export const listActivitySourcesPromise = (
  props: GetUsingFetchProps<ResponsePageActivitySourceDTO, Failure | Error, ListActivitySourcesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageActivitySourceDTO, Failure | Error, ListActivitySourcesQueryParams, void>(
    getConfig('cv/api'),
    `/activity-source/list`,
    props,
    signal
  )

export interface DeleteKubernetesSourceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type DeleteKubernetesSourceProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, DeleteKubernetesSourceQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * deletes a kubernetes event source
 */
export const DeleteKubernetesSource = (props: DeleteKubernetesSourceProps) => (
  <Mutate<ResponseBoolean, Failure | Error, DeleteKubernetesSourceQueryParams, string, void>
    verb="DELETE"
    path={`/activity-source`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteKubernetesSourceProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, DeleteKubernetesSourceQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * deletes a kubernetes event source
 */
export const useDeleteKubernetesSource = (props: UseDeleteKubernetesSourceProps) =>
  useMutate<ResponseBoolean, Failure | Error, DeleteKubernetesSourceQueryParams, string, void>(
    'DELETE',
    `/activity-source`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * deletes a kubernetes event source
 */
export const deleteKubernetesSourcePromise = (
  props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteKubernetesSourceQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseBoolean, Failure | Error, DeleteKubernetesSourceQueryParams, string, void>(
    'DELETE',
    getConfig('cv/api'),
    `/activity-source`,
    props,
    signal
  )

export interface PutActivitySourceQueryParams {
  accountId: string
}

export interface PutActivitySourcePathParams {
  identifier: string
}

export type PutActivitySourceProps = Omit<
  MutateProps<
    ResponseString,
    Failure | Error,
    PutActivitySourceQueryParams,
    ActivitySourceDTORequestBody,
    PutActivitySourcePathParams
  >,
  'path' | 'verb'
> &
  PutActivitySourcePathParams

/**
 * update an activity source by identifier
 */
export const PutActivitySource = ({ identifier, ...props }: PutActivitySourceProps) => (
  <Mutate<
    ResponseString,
    Failure | Error,
    PutActivitySourceQueryParams,
    ActivitySourceDTORequestBody,
    PutActivitySourcePathParams
  >
    verb="PUT"
    path={`/activity-source/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UsePutActivitySourceProps = Omit<
  UseMutateProps<
    ResponseString,
    Failure | Error,
    PutActivitySourceQueryParams,
    ActivitySourceDTORequestBody,
    PutActivitySourcePathParams
  >,
  'path' | 'verb'
> &
  PutActivitySourcePathParams

/**
 * update an activity source by identifier
 */
export const usePutActivitySource = ({ identifier, ...props }: UsePutActivitySourceProps) =>
  useMutate<
    ResponseString,
    Failure | Error,
    PutActivitySourceQueryParams,
    ActivitySourceDTORequestBody,
    PutActivitySourcePathParams
  >('PUT', (paramsInPath: PutActivitySourcePathParams) => `/activity-source/${paramsInPath.identifier}`, {
    base: getConfig('cv/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * update an activity source by identifier
 */
export const putActivitySourcePromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    ResponseString,
    Failure | Error,
    PutActivitySourceQueryParams,
    ActivitySourceDTORequestBody,
    PutActivitySourcePathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseString,
    Failure | Error,
    PutActivitySourceQueryParams,
    ActivitySourceDTORequestBody,
    PutActivitySourcePathParams
  >('PUT', getConfig('cv/api'), `/activity-source/${identifier}`, props, signal)

export interface GetVerificationsPopoverSummaryQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier: string
}

export interface GetVerificationsPopoverSummaryPathParams {
  deploymentTag: string
}

export type GetVerificationsPopoverSummaryProps = Omit<
  GetProps<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >,
  'path'
> &
  GetVerificationsPopoverSummaryPathParams

/**
 * get deployment activities summary for given build tag
 */
export const GetVerificationsPopoverSummary = ({ deploymentTag, ...props }: GetVerificationsPopoverSummaryProps) => (
  <Get<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >
    path={`/activity/deployment-activity-verifications-popover-summary/${deploymentTag}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationsPopoverSummaryProps = Omit<
  UseGetProps<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >,
  'path'
> &
  GetVerificationsPopoverSummaryPathParams

/**
 * get deployment activities summary for given build tag
 */
export const useGetVerificationsPopoverSummary = ({
  deploymentTag,
  ...props
}: UseGetVerificationsPopoverSummaryProps) =>
  useGet<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >(
    (paramsInPath: GetVerificationsPopoverSummaryPathParams) =>
      `/activity/deployment-activity-verifications-popover-summary/${paramsInPath.deploymentTag}`,
    { base: getConfig('cv/api'), pathParams: { deploymentTag }, ...props }
  )

/**
 * get deployment activities summary for given build tag
 */
export const getVerificationsPopoverSummaryPromise = (
  {
    deploymentTag,
    ...props
  }: GetUsingFetchProps<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  > & { deploymentTag: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >(getConfig('cv/api'), `/activity/deployment-activity-verifications-popover-summary/${deploymentTag}`, props, signal)

export interface GetVerificationInstancesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier: string
}

export interface GetVerificationInstancesPathParams {
  deploymentTag: string
}

export type GetVerificationInstancesProps = Omit<
  GetProps<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >,
  'path'
> &
  GetVerificationInstancesPathParams

/**
 * get deployment activities for given build tag
 */
export const GetVerificationInstances = ({ deploymentTag, ...props }: GetVerificationInstancesProps) => (
  <Get<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >
    path={`/activity/deployment-activity-verifications/${deploymentTag}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationInstancesProps = Omit<
  UseGetProps<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >,
  'path'
> &
  GetVerificationInstancesPathParams

/**
 * get deployment activities for given build tag
 */
export const useGetVerificationInstances = ({ deploymentTag, ...props }: UseGetVerificationInstancesProps) =>
  useGet<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >(
    (paramsInPath: GetVerificationInstancesPathParams) =>
      `/activity/deployment-activity-verifications/${paramsInPath.deploymentTag}`,
    { base: getConfig('cv/api'), pathParams: { deploymentTag }, ...props }
  )

/**
 * get deployment activities for given build tag
 */
export const getVerificationInstancesPromise = (
  {
    deploymentTag,
    ...props
  }: GetUsingFetchProps<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  > & { deploymentTag: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >(getConfig('cv/api'), `/activity/deployment-activity-verifications/${deploymentTag}`, props, signal)

export interface ListActivitiesForDashboardQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  startTime: number
  endTime: number
}

export type ListActivitiesForDashboardProps = Omit<
  GetProps<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>,
  'path'
>

/**
 * list all activities between a given time range for an environment, project, org
 */
export const ListActivitiesForDashboard = (props: ListActivitiesForDashboardProps) => (
  <Get<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>
    path={`/activity/list`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListActivitiesForDashboardProps = Omit<
  UseGetProps<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>,
  'path'
>

/**
 * list all activities between a given time range for an environment, project, org
 */
export const useListActivitiesForDashboard = (props: UseListActivitiesForDashboardProps) =>
  useGet<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>(`/activity/list`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * list all activities between a given time range for an environment, project, org
 */
export const listActivitiesForDashboardPromise = (
  props: GetUsingFetchProps<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListActivityDashboardDTO, unknown, ListActivitiesForDashboardQueryParams, void>(
    getConfig('cv/api'),
    `/activity/list`,
    props,
    signal
  )

export interface GetRecentActivityVerificationResultsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  size?: number
}

export type GetRecentActivityVerificationResultsProps = Omit<
  GetProps<
    RestResponseListActivityVerificationResultDTO,
    unknown,
    GetRecentActivityVerificationResultsQueryParams,
    void
  >,
  'path'
>

/**
 * get a list of recent activity verification results
 */
export const GetRecentActivityVerificationResults = (props: GetRecentActivityVerificationResultsProps) => (
  <Get<RestResponseListActivityVerificationResultDTO, unknown, GetRecentActivityVerificationResultsQueryParams, void>
    path={`/activity/recent-activity-verifications`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetRecentActivityVerificationResultsProps = Omit<
  UseGetProps<
    RestResponseListActivityVerificationResultDTO,
    unknown,
    GetRecentActivityVerificationResultsQueryParams,
    void
  >,
  'path'
>

/**
 * get a list of recent activity verification results
 */
export const useGetRecentActivityVerificationResults = (props: UseGetRecentActivityVerificationResultsProps) =>
  useGet<RestResponseListActivityVerificationResultDTO, unknown, GetRecentActivityVerificationResultsQueryParams, void>(
    `/activity/recent-activity-verifications`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get a list of recent activity verification results
 */
export const getRecentActivityVerificationResultsPromise = (
  props: GetUsingFetchProps<
    RestResponseListActivityVerificationResultDTO,
    unknown,
    GetRecentActivityVerificationResultsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListActivityVerificationResultDTO,
    unknown,
    GetRecentActivityVerificationResultsQueryParams,
    void
  >(getConfig('cv/api'), `/activity/recent-activity-verifications`, props, signal)

export interface GetRecentDeploymentActivityVerificationsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetRecentDeploymentActivityVerificationsProps = Omit<
  GetProps<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >,
  'path'
>

/**
 * get recent deployment activity verification
 */
export const GetRecentDeploymentActivityVerifications = (props: GetRecentDeploymentActivityVerificationsProps) => (
  <Get<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >
    path={`/activity/recent-deployment-activity-verifications`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetRecentDeploymentActivityVerificationsProps = Omit<
  UseGetProps<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >,
  'path'
>

/**
 * get recent deployment activity verification
 */
export const useGetRecentDeploymentActivityVerifications = (props: UseGetRecentDeploymentActivityVerificationsProps) =>
  useGet<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >(`/activity/recent-deployment-activity-verifications`, { base: getConfig('cv/api'), ...props })

/**
 * get recent deployment activity verification
 */
export const getRecentDeploymentActivityVerificationsPromise = (
  props: GetUsingFetchProps<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >(getConfig('cv/api'), `/activity/recent-deployment-activity-verifications`, props, signal)

export interface GetActivityVerificationResultQueryParams {
  accountId: string
}

export interface GetActivityVerificationResultPathParams {
  activityId: string
}

export type GetActivityVerificationResultProps = Omit<
  GetProps<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  >,
  'path'
> &
  GetActivityVerificationResultPathParams

/**
 * get activity verification result
 */
export const GetActivityVerificationResult = ({ activityId, ...props }: GetActivityVerificationResultProps) => (
  <Get<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  >
    path={`/activity/${activityId}/activity-risks`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivityVerificationResultProps = Omit<
  UseGetProps<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  >,
  'path'
> &
  GetActivityVerificationResultPathParams

/**
 * get activity verification result
 */
export const useGetActivityVerificationResult = ({ activityId, ...props }: UseGetActivityVerificationResultProps) =>
  useGet<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  >((paramsInPath: GetActivityVerificationResultPathParams) => `/activity/${paramsInPath.activityId}/activity-risks`, {
    base: getConfig('cv/api'),
    pathParams: { activityId },
    ...props
  })

/**
 * get activity verification result
 */
export const getActivityVerificationResultPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseActivityVerificationResultDTO,
    unknown,
    GetActivityVerificationResultQueryParams,
    GetActivityVerificationResultPathParams
  >(getConfig('cv/api'), `/activity/${activityId}/activity-risks`, props, signal)

export interface GetDatasourceTypesQueryParams {
  accountId: string
}

export interface GetDatasourceTypesPathParams {
  activityId: string
}

export type GetDatasourceTypesProps = Omit<
  GetProps<RestResponseSetDatasourceTypeDTO, unknown, GetDatasourceTypesQueryParams, GetDatasourceTypesPathParams>,
  'path'
> &
  GetDatasourceTypesPathParams

/**
 * get datasource types for an activity
 */
export const GetDatasourceTypes = ({ activityId, ...props }: GetDatasourceTypesProps) => (
  <Get<RestResponseSetDatasourceTypeDTO, unknown, GetDatasourceTypesQueryParams, GetDatasourceTypesPathParams>
    path={`/activity/${activityId}/datasource-types`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDatasourceTypesProps = Omit<
  UseGetProps<RestResponseSetDatasourceTypeDTO, unknown, GetDatasourceTypesQueryParams, GetDatasourceTypesPathParams>,
  'path'
> &
  GetDatasourceTypesPathParams

/**
 * get datasource types for an activity
 */
export const useGetDatasourceTypes = ({ activityId, ...props }: UseGetDatasourceTypesProps) =>
  useGet<RestResponseSetDatasourceTypeDTO, unknown, GetDatasourceTypesQueryParams, GetDatasourceTypesPathParams>(
    (paramsInPath: GetDatasourceTypesPathParams) => `/activity/${paramsInPath.activityId}/datasource-types`,
    { base: getConfig('cv/api'), pathParams: { activityId }, ...props }
  )

/**
 * get datasource types for an activity
 */
export const getDatasourceTypesPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponseSetDatasourceTypeDTO,
    unknown,
    GetDatasourceTypesQueryParams,
    GetDatasourceTypesPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseSetDatasourceTypeDTO, unknown, GetDatasourceTypesQueryParams, GetDatasourceTypesPathParams>(
    getConfig('cv/api'),
    `/activity/${activityId}/datasource-types`,
    props,
    signal
  )

export interface GetDeploymentActivitySummaryQueryParams {
  accountId: string
}

export interface GetDeploymentActivitySummaryPathParams {
  activityId: string
}

export type GetDeploymentActivitySummaryProps = Omit<
  GetProps<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetDeploymentActivitySummaryQueryParams,
    GetDeploymentActivitySummaryPathParams
  >,
  'path'
> &
  GetDeploymentActivitySummaryPathParams

/**
 * get summary of deployment activity
 */
export const GetDeploymentActivitySummary = ({ activityId, ...props }: GetDeploymentActivitySummaryProps) => (
  <Get<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetDeploymentActivitySummaryQueryParams,
    GetDeploymentActivitySummaryPathParams
  >
    path={`/activity/${activityId}/deployment-activity-summary`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentActivitySummaryProps = Omit<
  UseGetProps<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetDeploymentActivitySummaryQueryParams,
    GetDeploymentActivitySummaryPathParams
  >,
  'path'
> &
  GetDeploymentActivitySummaryPathParams

/**
 * get summary of deployment activity
 */
export const useGetDeploymentActivitySummary = ({ activityId, ...props }: UseGetDeploymentActivitySummaryProps) =>
  useGet<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetDeploymentActivitySummaryQueryParams,
    GetDeploymentActivitySummaryPathParams
  >(
    (paramsInPath: GetDeploymentActivitySummaryPathParams) =>
      `/activity/${paramsInPath.activityId}/deployment-activity-summary`,
    { base: getConfig('cv/api'), pathParams: { activityId }, ...props }
  )

/**
 * get summary of deployment activity
 */
export const getDeploymentActivitySummaryPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetDeploymentActivitySummaryQueryParams,
    GetDeploymentActivitySummaryPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetDeploymentActivitySummaryQueryParams,
    GetDeploymentActivitySummaryPathParams
  >(getConfig('cv/api'), `/activity/${activityId}/deployment-activity-summary`, props, signal)

export interface GetDeploymentMetricsQueryParams {
  accountId: string
  anomalousMetricsOnly?: boolean
  hostName?: string
  filter?: string
  pageNumber?: number
  pageSize?: number
}

export interface GetDeploymentMetricsPathParams {
  activityId: string
}

export type GetDeploymentMetricsProps = Omit<
  GetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentMetricsQueryParams,
    GetDeploymentMetricsPathParams
  >,
  'path'
> &
  GetDeploymentMetricsPathParams

/**
 * get metrics for given activity
 */
export const GetDeploymentMetrics = ({ activityId, ...props }: GetDeploymentMetricsProps) => (
  <Get<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentMetricsQueryParams,
    GetDeploymentMetricsPathParams
  >
    path={`/activity/${activityId}/deployment-timeseries-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentMetricsProps = Omit<
  UseGetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentMetricsQueryParams,
    GetDeploymentMetricsPathParams
  >,
  'path'
> &
  GetDeploymentMetricsPathParams

/**
 * get metrics for given activity
 */
export const useGetDeploymentMetrics = ({ activityId, ...props }: UseGetDeploymentMetricsProps) =>
  useGet<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentMetricsQueryParams,
    GetDeploymentMetricsPathParams
  >(
    (paramsInPath: GetDeploymentMetricsPathParams) => `/activity/${paramsInPath.activityId}/deployment-timeseries-data`,
    { base: getConfig('cv/api'), pathParams: { activityId }, ...props }
  )

/**
 * get metrics for given activity
 */
export const getDeploymentMetricsPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentMetricsQueryParams,
    GetDeploymentMetricsPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentMetricsQueryParams,
    GetDeploymentMetricsPathParams
  >(getConfig('cv/api'), `/activity/${activityId}/deployment-timeseries-data`, props, signal)

export interface GetAlertRuleQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  identifier: string
}

export type GetAlertRuleProps = Omit<GetProps<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>, 'path'>

/**
 * gets the alert rule for an identifier
 */
export const GetAlertRule = (props: GetAlertRuleProps) => (
  <Get<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>
    path={`/alert`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAlertRuleProps = Omit<
  UseGetProps<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>,
  'path'
>

/**
 * gets the alert rule for an identifier
 */
export const useGetAlertRule = (props: UseGetAlertRuleProps) =>
  useGet<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>(`/alert`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets the alert rule for an identifier
 */
export const getAlertRulePromise = (
  props: GetUsingFetchProps<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseAlertRuleDTO, unknown, GetAlertRuleQueryParams, void>(
    getConfig('cv/api'),
    `/alert`,
    props,
    signal
  )

export interface CreateAlertQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type CreateAlertProps = Omit<
  MutateProps<RestResponseAlertRuleDTO, unknown, CreateAlertQueryParams, AlertRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * create alert
 */
export const CreateAlert = (props: CreateAlertProps) => (
  <Mutate<RestResponseAlertRuleDTO, unknown, CreateAlertQueryParams, AlertRuleDTORequestBody, void>
    verb="POST"
    path={`/alert`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseCreateAlertProps = Omit<
  UseMutateProps<RestResponseAlertRuleDTO, unknown, CreateAlertQueryParams, AlertRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * create alert
 */
export const useCreateAlert = (props: UseCreateAlertProps) =>
  useMutate<RestResponseAlertRuleDTO, unknown, CreateAlertQueryParams, AlertRuleDTORequestBody, void>(
    'POST',
    `/alert`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * create alert
 */
export const createAlertPromise = (
  props: MutateUsingFetchProps<
    RestResponseAlertRuleDTO,
    unknown,
    CreateAlertQueryParams,
    AlertRuleDTORequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseAlertRuleDTO, unknown, CreateAlertQueryParams, AlertRuleDTORequestBody, void>(
    'POST',
    getConfig('cv/api'),
    `/alert`,
    props,
    signal
  )

export interface UpdateAlertQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type UpdateAlertProps = Omit<
  MutateProps<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * update alert
 */
export const UpdateAlert = (props: UpdateAlertProps) => (
  <Mutate<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>
    verb="PUT"
    path={`/alert`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseUpdateAlertProps = Omit<
  UseMutateProps<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * update alert
 */
export const useUpdateAlert = (props: UseUpdateAlertProps) =>
  useMutate<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>('PUT', `/alert`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * update alert
 */
export const updateAlertPromise = (
  props: MutateUsingFetchProps<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, void, UpdateAlertQueryParams, AlertRuleDTORequestBody, void>(
    'PUT',
    getConfig('cv/api'),
    `/alert`,
    props,
    signal
  )

export interface GetActivityTypesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetActivityTypesProps = Omit<
  GetProps<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>,
  'path'
>

/**
 * gets activity types
 */
export const GetActivityTypes = (props: GetActivityTypesProps) => (
  <Get<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>
    path={`/alert/activityTypes`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivityTypesProps = Omit<
  UseGetProps<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>,
  'path'
>

/**
 * gets activity types
 */
export const useGetActivityTypes = (props: UseGetActivityTypesProps) =>
  useGet<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>(`/alert/activityTypes`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets activity types
 */
export const getActivityTypesPromise = (
  props: GetUsingFetchProps<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListActivityType, unknown, GetActivityTypesQueryParams, void>(
    getConfig('cv/api'),
    `/alert/activityTypes`,
    props,
    signal
  )

export interface RetrieveAlertQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  offset: number
  pageSize: number
}

export type RetrieveAlertProps = Omit<
  GetProps<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>,
  'path'
>

/**
 * get list of alerts
 */
export const RetrieveAlert = (props: RetrieveAlertProps) => (
  <Get<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>
    path={`/alert/list`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseRetrieveAlertProps = Omit<
  UseGetProps<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>,
  'path'
>

/**
 * get list of alerts
 */
export const useRetrieveAlert = (props: UseRetrieveAlertProps) =>
  useGet<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>(`/alert/list`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get list of alerts
 */
export const retrieveAlertPromise = (
  props: GetUsingFetchProps<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAlertRuleDTO, unknown, RetrieveAlertQueryParams, void>(
    getConfig('cv/api'),
    `/alert/list`,
    props,
    signal
  )

export interface DeleteAlertQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type DeleteAlertProps = Omit<MutateProps<void, void, DeleteAlertQueryParams, string, void>, 'path' | 'verb'>

/**
 * deletes alert
 */
export const DeleteAlert = (props: DeleteAlertProps) => (
  <Mutate<void, void, DeleteAlertQueryParams, string, void>
    verb="DELETE"
    path={`/alert`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteAlertProps = Omit<
  UseMutateProps<void, void, DeleteAlertQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * deletes alert
 */
export const useDeleteAlert = (props: UseDeleteAlertProps) =>
  useMutate<void, void, DeleteAlertQueryParams, string, void>('DELETE', `/alert`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * deletes alert
 */
export const deleteAlertPromise = (
  props: MutateUsingFetchProps<void, void, DeleteAlertQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, void, DeleteAlertQueryParams, string, void>(
    'DELETE',
    getConfig('cv/api'),
    `/alert`,
    props,
    signal
  )

export interface GetAppDynamicsApplicationsQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetAppDynamicsApplicationsProps = Omit<
  GetProps<ResponsePageAppDynamicsApplication, Failure | Error, GetAppDynamicsApplicationsQueryParams, void>,
  'path'
>

/**
 * get all appdynamics applications
 */
export const GetAppDynamicsApplications = (props: GetAppDynamicsApplicationsProps) => (
  <Get<ResponsePageAppDynamicsApplication, Failure | Error, GetAppDynamicsApplicationsQueryParams, void>
    path={`/appdynamics/applications`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsApplicationsProps = Omit<
  UseGetProps<ResponsePageAppDynamicsApplication, Failure | Error, GetAppDynamicsApplicationsQueryParams, void>,
  'path'
>

/**
 * get all appdynamics applications
 */
export const useGetAppDynamicsApplications = (props: UseGetAppDynamicsApplicationsProps) =>
  useGet<ResponsePageAppDynamicsApplication, Failure | Error, GetAppDynamicsApplicationsQueryParams, void>(
    `/appdynamics/applications`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all appdynamics applications
 */
export const getAppDynamicsApplicationsPromise = (
  props: GetUsingFetchProps<
    ResponsePageAppDynamicsApplication,
    Failure | Error,
    GetAppDynamicsApplicationsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageAppDynamicsApplication, Failure | Error, GetAppDynamicsApplicationsQueryParams, void>(
    getConfig('cv/api'),
    `/appdynamics/applications`,
    props,
    signal
  )

export interface GetAppDynamicsMetricDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appName: string
  tierName: string
  requestGuid: string
}

export type GetAppDynamicsMetricDataProps = Omit<
  MutateProps<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const GetAppDynamicsMetricData = (props: GetAppDynamicsMetricDataProps) => (
  <Mutate<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >
    verb="POST"
    path={`/appdynamics/metric-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsMetricDataProps = Omit<
  UseMutateProps<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const useGetAppDynamicsMetricData = (props: UseGetAppDynamicsMetricDataProps) =>
  useMutate<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >('POST', `/appdynamics/metric-data`, { base: getConfig('cv/api'), ...props })

/**
 * get metric data for given metric packs
 */
export const getAppDynamicsMetricDataPromise = (
  props: MutateUsingFetchProps<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >('POST', getConfig('cv/api'), `/appdynamics/metric-data`, props, signal)

export interface GetAppDynamicsTiersQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  appName: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetAppDynamicsTiersProps = Omit<
  GetProps<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>,
  'path'
>

/**
 * get all appdynamics tiers for an application
 */
export const GetAppDynamicsTiers = (props: GetAppDynamicsTiersProps) => (
  <Get<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>
    path={`/appdynamics/tiers`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsTiersProps = Omit<
  UseGetProps<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>,
  'path'
>

/**
 * get all appdynamics tiers for an application
 */
export const useGetAppDynamicsTiers = (props: UseGetAppDynamicsTiersProps) =>
  useGet<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>(`/appdynamics/tiers`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all appdynamics tiers for an application
 */
export const getAppDynamicsTiersPromise = (
  props: GetUsingFetchProps<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>(
    getConfig('cv/api'),
    `/appdynamics/tiers`,
    props,
    signal
  )

export interface GetDataSourcetypesQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
}

export type GetDataSourcetypesProps = Omit<
  GetProps<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>,
  'path'
>

/**
 * gets a list of datasource types for this filter
 */
export const GetDataSourcetypes = (props: GetDataSourcetypesProps) => (
  <Get<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>
    path={`/cv-config/datasource-types`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDataSourcetypesProps = Omit<
  UseGetProps<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>,
  'path'
>

/**
 * gets a list of datasource types for this filter
 */
export const useGetDataSourcetypes = (props: UseGetDataSourcetypesProps) =>
  useGet<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>(
    `/cv-config/datasource-types`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets a list of datasource types for this filter
 */
export const getDataSourcetypesPromise = (
  props: GetUsingFetchProps<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseSetDatasourceTypeDTO, unknown, GetDataSourcetypesQueryParams, void>(
    getConfig('cv/api'),
    `/cv-config/datasource-types`,
    props,
    signal
  )

export interface GetOnboardingLogsQueryParams {
  accountId: string
  traceableId: string
  offset: number
  pageSize: number
}

export type GetOnboardingLogsProps = Omit<
  GetProps<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>,
  'path'
>

/**
 * gets onboarding api call logs
 */
export const GetOnboardingLogs = (props: GetOnboardingLogsProps) => (
  <Get<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>
    path={`/cvng-log`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetOnboardingLogsProps = Omit<
  UseGetProps<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>,
  'path'
>

/**
 * gets onboarding api call logs
 */
export const useGetOnboardingLogs = (props: UseGetOnboardingLogsProps) =>
  useGet<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>(`/cvng-log`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets onboarding api call logs
 */
export const getOnboardingLogsPromise = (
  props: GetUsingFetchProps<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>(
    getConfig('cv/api'),
    `/cvng-log`,
    props,
    signal
  )

export interface SaveCVNGLogRecordsQueryParams {
  accountId: string
}

export type SaveCVNGLogRecordsProps = Omit<
  MutateProps<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>,
  'path' | 'verb'
>

/**
 * saves cvng log data
 */
export const SaveCVNGLogRecords = (props: SaveCVNGLogRecordsProps) => (
  <Mutate<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>
    verb="POST"
    path={`/cvng-log`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveCVNGLogRecordsProps = Omit<
  UseMutateProps<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>,
  'path' | 'verb'
>

/**
 * saves cvng log data
 */
export const useSaveCVNGLogRecords = (props: UseSaveCVNGLogRecordsProps) =>
  useMutate<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>('POST', `/cvng-log`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * saves cvng log data
 */
export const saveCVNGLogRecordsPromise = (
  props: MutateUsingFetchProps<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>(
    'POST',
    getConfig('cv/api'),
    `/cvng-log`,
    props,
    signal
  )

export interface GetDeploymentLogAnalysesQueryParams {
  accountId?: string
  label?: number
  pageNumber?: number
  hostName?: string
}

export interface GetDeploymentLogAnalysesPathParams {
  verificationJobInstanceId: string
}

export type GetDeploymentLogAnalysesProps = Omit<
  GetProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >,
  'path'
> &
  GetDeploymentLogAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const GetDeploymentLogAnalyses = ({ verificationJobInstanceId, ...props }: GetDeploymentLogAnalysesProps) => (
  <Get<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >
    path={`/deployment-log-analysis/${verificationJobInstanceId}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentLogAnalysesProps = Omit<
  UseGetProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >,
  'path'
> &
  GetDeploymentLogAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const useGetDeploymentLogAnalyses = ({
  verificationJobInstanceId,
  ...props
}: UseGetDeploymentLogAnalysesProps) =>
  useGet<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >(
    (paramsInPath: GetDeploymentLogAnalysesPathParams) =>
      `/deployment-log-analysis/${paramsInPath.verificationJobInstanceId}`,
    { base: getConfig('cv/api'), pathParams: { verificationJobInstanceId }, ...props }
  )

/**
 * get logs for given verificationJob
 */
export const getDeploymentLogAnalysesPromise = (
  {
    verificationJobInstanceId,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  > & { verificationJobInstanceId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >(getConfig('cv/api'), `/deployment-log-analysis/${verificationJobInstanceId}`, props, signal)

export interface GetClusterChartAnalysesQueryParams {
  accountId?: string
  hostName?: string
}

export interface GetClusterChartAnalysesPathParams {
  verificationJobInstanceId: string
}

export type GetClusterChartAnalysesProps = Omit<
  GetProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >,
  'path'
> &
  GetClusterChartAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const GetClusterChartAnalyses = ({ verificationJobInstanceId, ...props }: GetClusterChartAnalysesProps) => (
  <Get<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >
    path={`/deployment-log-analysis/${verificationJobInstanceId}/clusters`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetClusterChartAnalysesProps = Omit<
  UseGetProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >,
  'path'
> &
  GetClusterChartAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const useGetClusterChartAnalyses = ({ verificationJobInstanceId, ...props }: UseGetClusterChartAnalysesProps) =>
  useGet<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >(
    (paramsInPath: GetClusterChartAnalysesPathParams) =>
      `/deployment-log-analysis/${paramsInPath.verificationJobInstanceId}/clusters`,
    { base: getConfig('cv/api'), pathParams: { verificationJobInstanceId }, ...props }
  )

/**
 * get logs for given verificationJob
 */
export const getClusterChartAnalysesPromise = (
  {
    verificationJobInstanceId,
    ...props
  }: GetUsingFetchProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  > & { verificationJobInstanceId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >(getConfig('cv/api'), `/deployment-log-analysis/${verificationJobInstanceId}/clusters`, props, signal)

export interface GetDeploymentTimeSeriesQueryParams {
  accountId?: string
  anomalousMetricsOnly?: boolean
  hostName?: string
  filter?: string
  pageNumber?: number
}

export interface GetDeploymentTimeSeriesPathParams {
  verificationJobInstanceId: string
}

export type GetDeploymentTimeSeriesProps = Omit<
  GetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >,
  'path'
> &
  GetDeploymentTimeSeriesPathParams

/**
 * get metrics for given verificationJob
 */
export const GetDeploymentTimeSeries = ({ verificationJobInstanceId, ...props }: GetDeploymentTimeSeriesProps) => (
  <Get<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >
    path={`/deployment-time-series-analysis/${verificationJobInstanceId}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentTimeSeriesProps = Omit<
  UseGetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >,
  'path'
> &
  GetDeploymentTimeSeriesPathParams

/**
 * get metrics for given verificationJob
 */
export const useGetDeploymentTimeSeries = ({ verificationJobInstanceId, ...props }: UseGetDeploymentTimeSeriesProps) =>
  useGet<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >(
    (paramsInPath: GetDeploymentTimeSeriesPathParams) =>
      `/deployment-time-series-analysis/${paramsInPath.verificationJobInstanceId}`,
    { base: getConfig('cv/api'), pathParams: { verificationJobInstanceId }, ...props }
  )

/**
 * get metrics for given verificationJob
 */
export const getDeploymentTimeSeriesPromise = (
  {
    verificationJobInstanceId,
    ...props
  }: GetUsingFetchProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  > & { verificationJobInstanceId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >(getConfig('cv/api'), `/deployment-time-series-analysis/${verificationJobInstanceId}`, props, signal)

export interface DeleteDSConfigQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  monitoringSourceIdentifier?: string
}

export type DeleteDSConfigProps = Omit<
  MutateProps<void, Failure | Error, DeleteDSConfigQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes all data source configs for a group
 */
export const DeleteDSConfig = (props: DeleteDSConfigProps) => (
  <Mutate<void, Failure | Error, DeleteDSConfigQueryParams, void, void>
    verb="DELETE"
    path={`/ds-config`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteDSConfigProps = Omit<
  UseMutateProps<void, Failure | Error, DeleteDSConfigQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes all data source configs for a group
 */
export const useDeleteDSConfig = (props: UseDeleteDSConfigProps) =>
  useMutate<void, Failure | Error, DeleteDSConfigQueryParams, void, void>('DELETE', `/ds-config`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * deletes all data source configs for a group
 */
export const deleteDSConfigPromise = (
  props: MutateUsingFetchProps<void, Failure | Error, DeleteDSConfigQueryParams, void, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, Failure | Error, DeleteDSConfigQueryParams, void, void>(
    'DELETE',
    getConfig('cv/api'),
    `/ds-config`,
    props,
    signal
  )

export interface GetDataSourceConfigsQueryParams {
  accountId?: string
  connectorIdentifier?: string
  productName?: string
}

export type GetDataSourceConfigsProps = Omit<
  GetProps<RestResponseListDSConfig, Failure | Error, GetDataSourceConfigsQueryParams, void>,
  'path'
>

/**
 * gets list of data source configs
 */
export const GetDataSourceConfigs = (props: GetDataSourceConfigsProps) => (
  <Get<RestResponseListDSConfig, Failure | Error, GetDataSourceConfigsQueryParams, void>
    path={`/ds-config`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDataSourceConfigsProps = Omit<
  UseGetProps<RestResponseListDSConfig, Failure | Error, GetDataSourceConfigsQueryParams, void>,
  'path'
>

/**
 * gets list of data source configs
 */
export const useGetDataSourceConfigs = (props: UseGetDataSourceConfigsProps) =>
  useGet<RestResponseListDSConfig, Failure | Error, GetDataSourceConfigsQueryParams, void>(`/ds-config`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets list of data source configs
 */
export const getDataSourceConfigsPromise = (
  props: GetUsingFetchProps<RestResponseListDSConfig, Failure | Error, GetDataSourceConfigsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListDSConfig, Failure | Error, GetDataSourceConfigsQueryParams, void>(
    getConfig('cv/api'),
    `/ds-config`,
    props,
    signal
  )

export interface CreateDataSourceQueryParams {
  accountId?: string
}

export type CreateDataSourceProps = Omit<
  MutateProps<void, Failure | Error, CreateDataSourceQueryParams, DSConfigRequestBody, void>,
  'path' | 'verb'
>

/**
 * creates a data source config
 */
export const CreateDataSource = (props: CreateDataSourceProps) => (
  <Mutate<void, Failure | Error, CreateDataSourceQueryParams, DSConfigRequestBody, void>
    verb="POST"
    path={`/ds-config`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseCreateDataSourceProps = Omit<
  UseMutateProps<void, Failure | Error, CreateDataSourceQueryParams, DSConfigRequestBody, void>,
  'path' | 'verb'
>

/**
 * creates a data source config
 */
export const useCreateDataSource = (props: UseCreateDataSourceProps) =>
  useMutate<void, Failure | Error, CreateDataSourceQueryParams, DSConfigRequestBody, void>('POST', `/ds-config`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * creates a data source config
 */
export const createDataSourcePromise = (
  props: MutateUsingFetchProps<void, Failure | Error, CreateDataSourceQueryParams, DSConfigRequestBody, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, Failure | Error, CreateDataSourceQueryParams, DSConfigRequestBody, void>(
    'POST',
    getConfig('cv/api'),
    `/ds-config`,
    props,
    signal
  )

export interface GetAvailableMonitoringSourcesQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type GetAvailableMonitoringSourcesProps = Omit<
  GetProps<RestResponseListString, Failure | Error, GetAvailableMonitoringSourcesQueryParams, void>,
  'path'
>

/**
 * gets a list of available monitoring sources
 */
export const GetAvailableMonitoringSources = (props: GetAvailableMonitoringSourcesProps) => (
  <Get<RestResponseListString, Failure | Error, GetAvailableMonitoringSourcesQueryParams, void>
    path={`/ds-config/available-monitoring-sources`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAvailableMonitoringSourcesProps = Omit<
  UseGetProps<RestResponseListString, Failure | Error, GetAvailableMonitoringSourcesQueryParams, void>,
  'path'
>

/**
 * gets a list of available monitoring sources
 */
export const useGetAvailableMonitoringSources = (props: UseGetAvailableMonitoringSourcesProps) =>
  useGet<RestResponseListString, Failure | Error, GetAvailableMonitoringSourcesQueryParams, void>(
    `/ds-config/available-monitoring-sources`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets a list of available monitoring sources
 */
export const getAvailableMonitoringSourcesPromise = (
  props: GetUsingFetchProps<RestResponseListString, Failure | Error, GetAvailableMonitoringSourcesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListString, Failure | Error, GetAvailableMonitoringSourcesQueryParams, void>(
    getConfig('cv/api'),
    `/ds-config/available-monitoring-sources`,
    props,
    signal
  )

export interface GetServicesQueryParams {
  accountId: string
  orgIdentifier?: string
  projectIdentifier: string
}

export type GetServicesProps = Omit<
  GetProps<RestResponseListEnvToServicesDTO, Failure | Error, GetServicesQueryParams, void>,
  'path'
>

/**
 * gets list of env to services mapping for which data sources are configured
 */
export const GetServices = (props: GetServicesProps) => (
  <Get<RestResponseListEnvToServicesDTO, Failure | Error, GetServicesQueryParams, void>
    path={`/ds-config/env-to-services`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetServicesProps = Omit<
  UseGetProps<RestResponseListEnvToServicesDTO, Failure | Error, GetServicesQueryParams, void>,
  'path'
>

/**
 * gets list of env to services mapping for which data sources are configured
 */
export const useGetServices = (props: UseGetServicesProps) =>
  useGet<RestResponseListEnvToServicesDTO, Failure | Error, GetServicesQueryParams, void>(
    `/ds-config/env-to-services`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets list of env to services mapping for which data sources are configured
 */
export const getServicesPromise = (
  props: GetUsingFetchProps<RestResponseListEnvToServicesDTO, Failure | Error, GetServicesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListEnvToServicesDTO, Failure | Error, GetServicesQueryParams, void>(
    getConfig('cv/api'),
    `/ds-config/env-to-services`,
    props,
    signal
  )

export interface GetMonitoringSourcesQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  pageIndex?: number
  pageSize?: number
  filter?: string
}

export type GetMonitoringSourcesProps = Omit<
  GetProps<ResponsePageMonitoringSource, Failure | Error, GetMonitoringSourcesQueryParams, void>,
  'path'
>

/**
 * gets list of monitoring sources
 */
export const GetMonitoringSources = (props: GetMonitoringSourcesProps) => (
  <Get<ResponsePageMonitoringSource, Failure | Error, GetMonitoringSourcesQueryParams, void>
    path={`/ds-config/listMonitoringSources`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoringSourcesProps = Omit<
  UseGetProps<ResponsePageMonitoringSource, Failure | Error, GetMonitoringSourcesQueryParams, void>,
  'path'
>

/**
 * gets list of monitoring sources
 */
export const useGetMonitoringSources = (props: UseGetMonitoringSourcesProps) =>
  useGet<ResponsePageMonitoringSource, Failure | Error, GetMonitoringSourcesQueryParams, void>(
    `/ds-config/listMonitoringSources`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets list of monitoring sources
 */
export const getMonitoringSourcesPromise = (
  props: GetUsingFetchProps<ResponsePageMonitoringSource, Failure | Error, GetMonitoringSourcesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageMonitoringSource, Failure | Error, GetMonitoringSourcesQueryParams, void>(
    getConfig('cv/api'),
    `/ds-config/listMonitoringSources`,
    props,
    signal
  )

export interface GetDSConfigQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface GetDSConfigPathParams {
  identifier: string
}

export type GetDSConfigProps = Omit<
  GetProps<RestResponseDSConfig, Failure | Error, GetDSConfigQueryParams, GetDSConfigPathParams>,
  'path'
> &
  GetDSConfigPathParams

/**
 * gets a monitoring sources
 */
export const GetDSConfig = ({ identifier, ...props }: GetDSConfigProps) => (
  <Get<RestResponseDSConfig, Failure | Error, GetDSConfigQueryParams, GetDSConfigPathParams>
    path={`/ds-config/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDSConfigProps = Omit<
  UseGetProps<RestResponseDSConfig, Failure | Error, GetDSConfigQueryParams, GetDSConfigPathParams>,
  'path'
> &
  GetDSConfigPathParams

/**
 * gets a monitoring sources
 */
export const useGetDSConfig = ({ identifier, ...props }: UseGetDSConfigProps) =>
  useGet<RestResponseDSConfig, Failure | Error, GetDSConfigQueryParams, GetDSConfigPathParams>(
    (paramsInPath: GetDSConfigPathParams) => `/ds-config/${paramsInPath.identifier}`,
    { base: getConfig('cv/api'), pathParams: { identifier }, ...props }
  )

/**
 * gets a monitoring sources
 */
export const getDSConfigPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<RestResponseDSConfig, Failure | Error, GetDSConfigQueryParams, GetDSConfigPathParams> & {
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseDSConfig, Failure | Error, GetDSConfigQueryParams, GetDSConfigPathParams>(
    getConfig('cv/api'),
    `/ds-config/${identifier}`,
    props,
    signal
  )

export interface UpdateDSConfigQueryParams {
  accountId?: string
}

export interface UpdateDSConfigPathParams {
  identifier: string
}

export type UpdateDSConfigProps = Omit<
  MutateProps<void, Failure | Error, UpdateDSConfigQueryParams, DSConfigRequestBody, UpdateDSConfigPathParams>,
  'path' | 'verb'
> &
  UpdateDSConfigPathParams

/**
 * creates a data source config
 */
export const UpdateDSConfig = ({ identifier, ...props }: UpdateDSConfigProps) => (
  <Mutate<void, Failure | Error, UpdateDSConfigQueryParams, DSConfigRequestBody, UpdateDSConfigPathParams>
    verb="PUT"
    path={`/ds-config/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseUpdateDSConfigProps = Omit<
  UseMutateProps<void, Failure | Error, UpdateDSConfigQueryParams, DSConfigRequestBody, UpdateDSConfigPathParams>,
  'path' | 'verb'
> &
  UpdateDSConfigPathParams

/**
 * creates a data source config
 */
export const useUpdateDSConfig = ({ identifier, ...props }: UseUpdateDSConfigProps) =>
  useMutate<void, Failure | Error, UpdateDSConfigQueryParams, DSConfigRequestBody, UpdateDSConfigPathParams>(
    'PUT',
    (paramsInPath: UpdateDSConfigPathParams) => `/ds-config/${paramsInPath.identifier}`,
    { base: getConfig('cv/api'), pathParams: { identifier }, ...props }
  )

/**
 * creates a data source config
 */
export const updateDSConfigPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    void,
    Failure | Error,
    UpdateDSConfigQueryParams,
    DSConfigRequestBody,
    UpdateDSConfigPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, Failure | Error, UpdateDSConfigQueryParams, DSConfigRequestBody, UpdateDSConfigPathParams>(
    'PUT',
    getConfig('cv/api'),
    `/ds-config/${identifier}`,
    props,
    signal
  )

export interface GetHeatmapQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier?: string
  envIdentifier?: string
  startTimeMs: number
  endTimeMs: number
}

export type GetHeatmapProps = Omit<
  GetProps<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>,
  'path'
>

/**
 * get heatmap for a time range
 */
export const GetHeatmap = (props: GetHeatmapProps) => (
  <Get<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>
    path={`/heatmap`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetHeatmapProps = Omit<
  UseGetProps<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>,
  'path'
>

/**
 * get heatmap for a time range
 */
export const useGetHeatmap = (props: UseGetHeatmapProps) =>
  useGet<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>(`/heatmap`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get heatmap for a time range
 */
export const getHeatmapPromise = (
  props: GetUsingFetchProps<
    RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO,
    unknown,
    GetHeatmapQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>(
    getConfig('cv/api'),
    `/heatmap`,
    props,
    signal
  )

export interface GetCategoryRiskMapQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier?: string
  envIdentifier?: string
}

export type GetCategoryRiskMapProps = Omit<
  GetProps<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>,
  'path'
>

/**
 * get current risk for all categories
 */
export const GetCategoryRiskMap = (props: GetCategoryRiskMapProps) => (
  <Get<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>
    path={`/heatmap/category-risks`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetCategoryRiskMapProps = Omit<
  UseGetProps<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>,
  'path'
>

/**
 * get current risk for all categories
 */
export const useGetCategoryRiskMap = (props: UseGetCategoryRiskMapProps) =>
  useGet<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>(`/heatmap/category-risks`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get current risk for all categories
 */
export const getCategoryRiskMapPromise = (
  props: GetUsingFetchProps<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>(
    getConfig('cv/api'),
    `/heatmap/category-risks`,
    props,
    signal
  )

export interface GetEnvServiceRisksQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetEnvServiceRisksProps = Omit<
  GetProps<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>,
  'path'
>

/**
 * get current risks for each env/service combination
 */
export const GetEnvServiceRisks = (props: GetEnvServiceRisksProps) => (
  <Get<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>
    path={`/heatmap/env-service-risks`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetEnvServiceRisksProps = Omit<
  UseGetProps<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>,
  'path'
>

/**
 * get current risks for each env/service combination
 */
export const useGetEnvServiceRisks = (props: UseGetEnvServiceRisksProps) =>
  useGet<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>(
    `/heatmap/env-service-risks`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get current risks for each env/service combination
 */
export const getEnvServiceRisksPromise = (
  props: GetUsingFetchProps<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>(
    getConfig('cv/api'),
    `/heatmap/env-service-risks`,
    props,
    signal
  )

export interface GetRiskSummaryPopoverQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  endTime: number
  serviceIdentifier?: string
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
}

export type GetRiskSummaryPopoverProps = Omit<
  GetProps<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>,
  'path'
>

/**
 * get current risk summary
 */
export const GetRiskSummaryPopover = (props: GetRiskSummaryPopoverProps) => (
  <Get<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>
    path={`/heatmap/risk-summary-popover`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetRiskSummaryPopoverProps = Omit<
  UseGetProps<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>,
  'path'
>

/**
 * get current risk summary
 */
export const useGetRiskSummaryPopover = (props: UseGetRiskSummaryPopoverProps) =>
  useGet<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>(
    `/heatmap/risk-summary-popover`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get current risk summary
 */
export const getRiskSummaryPopoverPromise = (
  props: GetUsingFetchProps<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseRiskSummaryPopoverDTO, unknown, GetRiskSummaryPopoverQueryParams, void>(
    getConfig('cv/api'),
    `/heatmap/risk-summary-popover`,
    props,
    signal
  )

export interface GetEventDetailsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  activityId: string
}

export type GetEventDetailsProps = Omit<
  GetProps<ResponseKubernetesActivityDetailsDTO, Failure | Error, GetEventDetailsQueryParams, void>,
  'path'
>

/**
 * gets details of kubernetes events
 */
export const GetEventDetails = (props: GetEventDetailsProps) => (
  <Get<ResponseKubernetesActivityDetailsDTO, Failure | Error, GetEventDetailsQueryParams, void>
    path={`/kubernetes/event-details`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetEventDetailsProps = Omit<
  UseGetProps<ResponseKubernetesActivityDetailsDTO, Failure | Error, GetEventDetailsQueryParams, void>,
  'path'
>

/**
 * gets details of kubernetes events
 */
export const useGetEventDetails = (props: UseGetEventDetailsProps) =>
  useGet<ResponseKubernetesActivityDetailsDTO, Failure | Error, GetEventDetailsQueryParams, void>(
    `/kubernetes/event-details`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets details of kubernetes events
 */
export const getEventDetailsPromise = (
  props: GetUsingFetchProps<ResponseKubernetesActivityDetailsDTO, Failure | Error, GetEventDetailsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseKubernetesActivityDetailsDTO, Failure | Error, GetEventDetailsQueryParams, void>(
    getConfig('cv/api'),
    `/kubernetes/event-details`,
    props,
    signal
  )

export interface GetNamespacesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetNamespacesProps = Omit<
  GetProps<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>,
  'path'
>

/**
 * gets a list of kubernetes namespaces
 */
export const GetNamespaces = (props: GetNamespacesProps) => (
  <Get<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>
    path={`/kubernetes/namespaces`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetNamespacesProps = Omit<
  UseGetProps<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>,
  'path'
>

/**
 * gets a list of kubernetes namespaces
 */
export const useGetNamespaces = (props: UseGetNamespacesProps) =>
  useGet<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>(`/kubernetes/namespaces`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets a list of kubernetes namespaces
 */
export const getNamespacesPromise = (
  props: GetUsingFetchProps<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>(
    getConfig('cv/api'),
    `/kubernetes/namespaces`,
    props,
    signal
  )

export interface GetWorkloadsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  namespace: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetWorkloadsProps = Omit<
  GetProps<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>,
  'path'
>

/**
 * gets a list of kubernetes workloads
 */
export const GetWorkloads = (props: GetWorkloadsProps) => (
  <Get<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>
    path={`/kubernetes/workloads`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetWorkloadsProps = Omit<
  UseGetProps<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>,
  'path'
>

/**
 * gets a list of kubernetes workloads
 */
export const useGetWorkloads = (props: UseGetWorkloadsProps) =>
  useGet<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>(`/kubernetes/workloads`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets a list of kubernetes workloads
 */
export const getWorkloadsPromise = (
  props: GetUsingFetchProps<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>(
    getConfig('cv/api'),
    `/kubernetes/workloads`,
    props,
    signal
  )

export interface GetAllLogsQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  page?: number
  size?: number
}

export type GetAllLogsProps = Omit<
  GetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>,
  'path'
>

/**
 * get all logs for a time range
 */
export const GetAllLogs = (props: GetAllLogsProps) => (
  <Get<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>
    path={`/log-dashboard/all-logs`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllLogsProps = Omit<
  UseGetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>,
  'path'
>

/**
 * get all logs for a time range
 */
export const useGetAllLogs = (props: UseGetAllLogsProps) =>
  useGet<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>(`/log-dashboard/all-logs`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all logs for a time range
 */
export const getAllLogsPromise = (
  props: GetUsingFetchProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>(
    getConfig('cv/api'),
    `/log-dashboard/all-logs`,
    props,
    signal
  )

export interface GetAnomalousLogsQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  page?: number
  size?: number
}

export type GetAnomalousLogsProps = Omit<
  GetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>,
  'path'
>

/**
 * get anomalous logs for a time range
 */
export const GetAnomalousLogs = (props: GetAnomalousLogsProps) => (
  <Get<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>
    path={`/log-dashboard/anomalous-logs`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAnomalousLogsProps = Omit<
  UseGetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>,
  'path'
>

/**
 * get anomalous logs for a time range
 */
export const useGetAnomalousLogs = (props: UseGetAnomalousLogsProps) =>
  useGet<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>(
    `/log-dashboard/anomalous-logs`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get anomalous logs for a time range
 */
export const getAnomalousLogsPromise = (
  props: GetUsingFetchProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>(
    getConfig('cv/api'),
    `/log-dashboard/anomalous-logs`,
    props,
    signal
  )

export interface GetTagCountQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
}

export type GetTagCountProps = Omit<
  GetProps<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>,
  'path'
>

/**
 * get a sorted tag vs logs list
 */
export const GetTagCount = (props: GetTagCountProps) => (
  <Get<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>
    path={`/log-dashboard/log-count-by-tags`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetTagCountProps = Omit<
  UseGetProps<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>,
  'path'
>

/**
 * get a sorted tag vs logs list
 */
export const useGetTagCount = (props: UseGetTagCountProps) =>
  useGet<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>(`/log-dashboard/log-count-by-tags`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get a sorted tag vs logs list
 */
export const getTagCountPromise = (
  props: GetUsingFetchProps<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>(
    getConfig('cv/api'),
    `/log-dashboard/log-count-by-tags`,
    props,
    signal
  )

export interface GetTagCountForActivityQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  startTime: number
  endTime: number
}

export interface GetTagCountForActivityPathParams {
  activityId: string
}

export type GetTagCountForActivityProps = Omit<
  GetProps<
    RestResponseSortedSetLogDataByTag,
    unknown,
    GetTagCountForActivityQueryParams,
    GetTagCountForActivityPathParams
  >,
  'path'
> &
  GetTagCountForActivityPathParams

/**
 * get a sorted tag vs logs list for an activity
 */
export const GetTagCountForActivity = ({ activityId, ...props }: GetTagCountForActivityProps) => (
  <Get<RestResponseSortedSetLogDataByTag, unknown, GetTagCountForActivityQueryParams, GetTagCountForActivityPathParams>
    path={`/log-dashboard/${activityId}/log-count-by-tags`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetTagCountForActivityProps = Omit<
  UseGetProps<
    RestResponseSortedSetLogDataByTag,
    unknown,
    GetTagCountForActivityQueryParams,
    GetTagCountForActivityPathParams
  >,
  'path'
> &
  GetTagCountForActivityPathParams

/**
 * get a sorted tag vs logs list for an activity
 */
export const useGetTagCountForActivity = ({ activityId, ...props }: UseGetTagCountForActivityProps) =>
  useGet<
    RestResponseSortedSetLogDataByTag,
    unknown,
    GetTagCountForActivityQueryParams,
    GetTagCountForActivityPathParams
  >((paramsInPath: GetTagCountForActivityPathParams) => `/log-dashboard/${paramsInPath.activityId}/log-count-by-tags`, {
    base: getConfig('cv/api'),
    pathParams: { activityId },
    ...props
  })

/**
 * get a sorted tag vs logs list for an activity
 */
export const getTagCountForActivityPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponseSortedSetLogDataByTag,
    unknown,
    GetTagCountForActivityQueryParams,
    GetTagCountForActivityPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseSortedSetLogDataByTag,
    unknown,
    GetTagCountForActivityQueryParams,
    GetTagCountForActivityPathParams
  >(getConfig('cv/api'), `/log-dashboard/${activityId}/log-count-by-tags`, props, signal)

export interface GetActivityLogsQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  startTime: number
  endTime: number
  anomalousOnly?: boolean
  page?: number
  size?: number
}

export interface GetActivityLogsPathParams {
  activityId: string
}

export type GetActivityLogsProps = Omit<
  GetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetActivityLogsQueryParams, GetActivityLogsPathParams>,
  'path'
> &
  GetActivityLogsPathParams

/**
 * get activity logs for given activityId
 */
export const GetActivityLogs = ({ activityId, ...props }: GetActivityLogsProps) => (
  <Get<RestResponsePageAnalyzedLogDataDTO, unknown, GetActivityLogsQueryParams, GetActivityLogsPathParams>
    path={`/log-dashboard/${activityId}/logs`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivityLogsProps = Omit<
  UseGetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetActivityLogsQueryParams, GetActivityLogsPathParams>,
  'path'
> &
  GetActivityLogsPathParams

/**
 * get activity logs for given activityId
 */
export const useGetActivityLogs = ({ activityId, ...props }: UseGetActivityLogsProps) =>
  useGet<RestResponsePageAnalyzedLogDataDTO, unknown, GetActivityLogsQueryParams, GetActivityLogsPathParams>(
    (paramsInPath: GetActivityLogsPathParams) => `/log-dashboard/${paramsInPath.activityId}/logs`,
    { base: getConfig('cv/api'), pathParams: { activityId }, ...props }
  )

/**
 * get activity logs for given activityId
 */
export const getActivityLogsPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageAnalyzedLogDataDTO,
    unknown,
    GetActivityLogsQueryParams,
    GetActivityLogsPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAnalyzedLogDataDTO, unknown, GetActivityLogsQueryParams, GetActivityLogsPathParams>(
    getConfig('cv/api'),
    `/log-dashboard/${activityId}/logs`,
    props,
    signal
  )

export interface GetMetricPacksQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  dataSourceType:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
}

export type GetMetricPacksProps = Omit<
  GetProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  'path'
>

/**
 * get all metric packs for a connector type
 */
export const GetMetricPacks = (props: GetMetricPacksProps) => (
  <Get<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>
    path={`/metric-pack`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricPacksProps = Omit<
  UseGetProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  'path'
>

/**
 * get all metric packs for a connector type
 */
export const useGetMetricPacks = (props: UseGetMetricPacksProps) =>
  useGet<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>(`/metric-pack`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all metric packs for a connector type
 */
export const getMetricPacksPromise = (
  props: GetUsingFetchProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>(
    getConfig('cv/api'),
    `/metric-pack`,
    props,
    signal
  )

export interface SaveMetricPacksQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  dataSourceType:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
}

export type SaveMetricPacksProps = Omit<
  MutateProps<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>,
  'path' | 'verb'
>

/**
 * saves a metric pack for a connector type
 */
export const SaveMetricPacks = (props: SaveMetricPacksProps) => (
  <Mutate<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>
    verb="POST"
    path={`/metric-pack`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveMetricPacksProps = Omit<
  UseMutateProps<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>,
  'path' | 'verb'
>

/**
 * saves a metric pack for a connector type
 */
export const useSaveMetricPacks = (props: UseSaveMetricPacksProps) =>
  useMutate<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>('POST', `/metric-pack`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * saves a metric pack for a connector type
 */
export const saveMetricPacksPromise = (
  props: MutateUsingFetchProps<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>(
    'POST',
    getConfig('cv/api'),
    `/metric-pack`,
    props,
    signal
  )

export interface ListMonitoredServiceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  environmentIdentifier?: string
  offset: number
  pageSize: number
  filter?: string
}

export type ListMonitoredServiceProps = Omit<
  GetProps<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>,
  'path'
>

/**
 * list monitored service data
 */
export const ListMonitoredService = (props: ListMonitoredServiceProps) => (
  <Get<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>
    path={`/monitored-service`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListMonitoredServiceProps = Omit<
  UseGetProps<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>,
  'path'
>

/**
 * list monitored service data
 */
export const useListMonitoredService = (props: UseListMonitoredServiceProps) =>
  useGet<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>(
    `/monitored-service`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * list monitored service data
 */
export const listMonitoredServicePromise = (
  props: GetUsingFetchProps<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>(
    getConfig('cv/api'),
    `/monitored-service`,
    props,
    signal
  )

export interface SaveMonitoredServiceQueryParams {
  accountId: string
}

export type SaveMonitoredServiceProps = Omit<
  MutateProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * saves monitored service data
 */
export const SaveMonitoredService = (props: SaveMonitoredServiceProps) => (
  <Mutate<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >
    verb="POST"
    path={`/monitored-service`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveMonitoredServiceProps = Omit<
  UseMutateProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * saves monitored service data
 */
export const useSaveMonitoredService = (props: UseSaveMonitoredServiceProps) =>
  useMutate<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >('POST', `/monitored-service`, { base: getConfig('cv/api'), ...props })

/**
 * saves monitored service data
 */
export const saveMonitoredServicePromise = (
  props: MutateUsingFetchProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >('POST', getConfig('cv/api'), `/monitored-service`, props, signal)

export interface CreateDefaultMonitoredServiceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  environmentIdentifier: string
  serviceIdentifier: string
}

export type CreateDefaultMonitoredServiceProps = Omit<
  MutateProps<RestResponseMonitoredServiceResponse, unknown, CreateDefaultMonitoredServiceQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * created default monitored service
 */
export const CreateDefaultMonitoredService = (props: CreateDefaultMonitoredServiceProps) => (
  <Mutate<RestResponseMonitoredServiceResponse, unknown, CreateDefaultMonitoredServiceQueryParams, void, void>
    verb="POST"
    path={`/monitored-service/create-default`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseCreateDefaultMonitoredServiceProps = Omit<
  UseMutateProps<RestResponseMonitoredServiceResponse, unknown, CreateDefaultMonitoredServiceQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * created default monitored service
 */
export const useCreateDefaultMonitoredService = (props: UseCreateDefaultMonitoredServiceProps) =>
  useMutate<RestResponseMonitoredServiceResponse, unknown, CreateDefaultMonitoredServiceQueryParams, void, void>(
    'POST',
    `/monitored-service/create-default`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * created default monitored service
 */
export const createDefaultMonitoredServicePromise = (
  props: MutateUsingFetchProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    CreateDefaultMonitoredServiceQueryParams,
    void,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseMonitoredServiceResponse, unknown, CreateDefaultMonitoredServiceQueryParams, void, void>(
    'POST',
    getConfig('cv/api'),
    `/monitored-service/create-default`,
    props,
    signal
  )

export interface GetMonitoredServiceListEnvironmentsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetMonitoredServiceListEnvironmentsProps = Omit<
  GetProps<ResponseListString, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>,
  'path'
>

/**
 * get monitored service list environments data
 */
export const GetMonitoredServiceListEnvironments = (props: GetMonitoredServiceListEnvironmentsProps) => (
  <Get<ResponseListString, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>
    path={`/monitored-service/environments`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceListEnvironmentsProps = Omit<
  UseGetProps<ResponseListString, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>,
  'path'
>

/**
 * get monitored service list environments data
 */
export const useGetMonitoredServiceListEnvironments = (props: UseGetMonitoredServiceListEnvironmentsProps) =>
  useGet<ResponseListString, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>(
    `/monitored-service/environments`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get monitored service list environments data
 */
export const getMonitoredServiceListEnvironmentsPromise = (
  props: GetUsingFetchProps<ResponseListString, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>(
    getConfig('cv/api'),
    `/monitored-service/environments`,
    props,
    signal
  )

export interface GetMonitoredServiceFromServiceAndEnvironmentQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier: string
  environmentIdentifier: string
}

export type GetMonitoredServiceFromServiceAndEnvironmentProps = Omit<
  GetProps<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceFromServiceAndEnvironmentQueryParams, void>,
  'path'
>

/**
 * get monitored service data from service and env ref
 */
export const GetMonitoredServiceFromServiceAndEnvironment = (
  props: GetMonitoredServiceFromServiceAndEnvironmentProps
) => (
  <Get<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceFromServiceAndEnvironmentQueryParams, void>
    path={`/monitored-service/service-environment`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceFromServiceAndEnvironmentProps = Omit<
  UseGetProps<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceFromServiceAndEnvironmentQueryParams, void>,
  'path'
>

/**
 * get monitored service data from service and env ref
 */
export const useGetMonitoredServiceFromServiceAndEnvironment = (
  props: UseGetMonitoredServiceFromServiceAndEnvironmentProps
) =>
  useGet<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceFromServiceAndEnvironmentQueryParams, void>(
    `/monitored-service/service-environment`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get monitored service data from service and env ref
 */
export const getMonitoredServiceFromServiceAndEnvironmentPromise = (
  props: GetUsingFetchProps<
    ResponseMonitoredServiceResponse,
    unknown,
    GetMonitoredServiceFromServiceAndEnvironmentQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseMonitoredServiceResponse,
    unknown,
    GetMonitoredServiceFromServiceAndEnvironmentQueryParams,
    void
  >(getConfig('cv/api'), `/monitored-service/service-environment`, props, signal)

export interface DeleteMonitoredServiceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type DeleteMonitoredServiceProps = Omit<
  MutateProps<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * delete monitored service data
 */
export const DeleteMonitoredService = (props: DeleteMonitoredServiceProps) => (
  <Mutate<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>
    verb="DELETE"
    path={`/monitored-service`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteMonitoredServiceProps = Omit<
  UseMutateProps<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * delete monitored service data
 */
export const useDeleteMonitoredService = (props: UseDeleteMonitoredServiceProps) =>
  useMutate<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>(
    'DELETE',
    `/monitored-service`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * delete monitored service data
 */
export const deleteMonitoredServicePromise = (
  props: MutateUsingFetchProps<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>(
    'DELETE',
    getConfig('cv/api'),
    `/monitored-service`,
    props,
    signal
  )

export interface GetMonitoredServiceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetMonitoredServicePathParams {
  identifier: string
}

export type GetMonitoredServiceProps = Omit<
  GetProps<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceQueryParams, GetMonitoredServicePathParams>,
  'path'
> &
  GetMonitoredServicePathParams

/**
 * get monitored service data
 */
export const GetMonitoredService = ({ identifier, ...props }: GetMonitoredServiceProps) => (
  <Get<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceQueryParams, GetMonitoredServicePathParams>
    path={`/monitored-service/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceProps = Omit<
  UseGetProps<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceQueryParams, GetMonitoredServicePathParams>,
  'path'
> &
  GetMonitoredServicePathParams

/**
 * get monitored service data
 */
export const useGetMonitoredService = ({ identifier, ...props }: UseGetMonitoredServiceProps) =>
  useGet<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceQueryParams, GetMonitoredServicePathParams>(
    (paramsInPath: GetMonitoredServicePathParams) => `/monitored-service/${paramsInPath.identifier}`,
    { base: getConfig('cv/api'), pathParams: { identifier }, ...props }
  )

/**
 * get monitored service data
 */
export const getMonitoredServicePromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    ResponseMonitoredServiceResponse,
    unknown,
    GetMonitoredServiceQueryParams,
    GetMonitoredServicePathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseMonitoredServiceResponse,
    unknown,
    GetMonitoredServiceQueryParams,
    GetMonitoredServicePathParams
  >(getConfig('cv/api'), `/monitored-service/${identifier}`, props, signal)

export interface UpdateMonitoredServiceQueryParams {
  accountId: string
}

export interface UpdateMonitoredServicePathParams {
  identifier: string
}

export type UpdateMonitoredServiceProps = Omit<
  MutateProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  >,
  'path' | 'verb'
> &
  UpdateMonitoredServicePathParams

/**
 * updates monitored service data
 */
export const UpdateMonitoredService = ({ identifier, ...props }: UpdateMonitoredServiceProps) => (
  <Mutate<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  >
    verb="PUT"
    path={`/monitored-service/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseUpdateMonitoredServiceProps = Omit<
  UseMutateProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  >,
  'path' | 'verb'
> &
  UpdateMonitoredServicePathParams

/**
 * updates monitored service data
 */
export const useUpdateMonitoredService = ({ identifier, ...props }: UseUpdateMonitoredServiceProps) =>
  useMutate<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  >('PUT', (paramsInPath: UpdateMonitoredServicePathParams) => `/monitored-service/${paramsInPath.identifier}`, {
    base: getConfig('cv/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * updates monitored service data
 */
export const updateMonitoredServicePromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  >('PUT', getConfig('cv/api'), `/monitored-service/${identifier}`, props, signal)

export interface GetNewRelicApplicationsQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  pageSize: number
  offset: number
  filter?: string
  tracingId: string
}

export type GetNewRelicApplicationsProps = Omit<
  GetProps<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>,
  'path'
>

/**
 * get all newrelic applications
 */
export const GetNewRelicApplications = (props: GetNewRelicApplicationsProps) => (
  <Get<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>
    path={`/newrelic/applications`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetNewRelicApplicationsProps = Omit<
  UseGetProps<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>,
  'path'
>

/**
 * get all newrelic applications
 */
export const useGetNewRelicApplications = (props: UseGetNewRelicApplicationsProps) =>
  useGet<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>(
    `/newrelic/applications`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all newrelic applications
 */
export const getNewRelicApplicationsPromise = (
  props: GetUsingFetchProps<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>(
    getConfig('cv/api'),
    `/newrelic/applications`,
    props,
    signal
  )

export type GetNewRelicEndPointsProps = Omit<GetProps<ResponseListString, Failure | Error, void, void>, 'path'>

/**
 * get all newrelic endpoints
 */
export const GetNewRelicEndPoints = (props: GetNewRelicEndPointsProps) => (
  <Get<ResponseListString, Failure | Error, void, void>
    path={`/newrelic/endpoints`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetNewRelicEndPointsProps = Omit<UseGetProps<ResponseListString, Failure | Error, void, void>, 'path'>

/**
 * get all newrelic endpoints
 */
export const useGetNewRelicEndPoints = (props: UseGetNewRelicEndPointsProps) =>
  useGet<ResponseListString, Failure | Error, void, void>(`/newrelic/endpoints`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all newrelic endpoints
 */
export const getNewRelicEndPointsPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, void, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, void, void>(
    getConfig('cv/api'),
    `/newrelic/endpoints`,
    props,
    signal
  )

export interface GetNewRelicMetricDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appName: string
  appId: string
  requestGuid: string
}

export type GetNewRelicMetricDataProps = Omit<
  MutateProps<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const GetNewRelicMetricData = (props: GetNewRelicMetricDataProps) => (
  <Mutate<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >
    verb="POST"
    path={`/newrelic/metric-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetNewRelicMetricDataProps = Omit<
  UseMutateProps<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const useGetNewRelicMetricData = (props: UseGetNewRelicMetricDataProps) =>
  useMutate<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >('POST', `/newrelic/metric-data`, { base: getConfig('cv/api'), ...props })

/**
 * get metric data for given metric packs
 */
export const getNewRelicMetricDataPromise = (
  props: MutateUsingFetchProps<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >('POST', getConfig('cv/api'), `/newrelic/metric-data`, props, signal)

export interface GetLabelNamesQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  tracingId: string
}

export type GetLabelNamesProps = Omit<
  GetProps<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>,
  'path'
>

/**
 * get all label names
 */
export const GetLabelNames = (props: GetLabelNamesProps) => (
  <Get<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>
    path={`/prometheus/label-names`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetLabelNamesProps = Omit<
  UseGetProps<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>,
  'path'
>

/**
 * get all label names
 */
export const useGetLabelNames = (props: UseGetLabelNamesProps) =>
  useGet<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>(`/prometheus/label-names`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all label names
 */
export const getLabelNamesPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>(
    getConfig('cv/api'),
    `/prometheus/label-names`,
    props,
    signal
  )

export interface GetLabeValuesQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  labelName: string
  tracingId: string
}

export type GetLabeValuesProps = Omit<
  GetProps<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>,
  'path'
>

/**
 * get all label values
 */
export const GetLabeValues = (props: GetLabeValuesProps) => (
  <Get<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>
    path={`/prometheus/label-values`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetLabeValuesProps = Omit<
  UseGetProps<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>,
  'path'
>

/**
 * get all label values
 */
export const useGetLabeValues = (props: UseGetLabeValuesProps) =>
  useGet<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>(`/prometheus/label-values`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all label values
 */
export const getLabeValuesPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>(
    getConfig('cv/api'),
    `/prometheus/label-values`,
    props,
    signal
  )

export interface GetMetricNamesQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  filter?: string
  tracingId: string
}

export type GetMetricNamesProps = Omit<
  GetProps<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>,
  'path'
>

/**
 * get all metric names
 */
export const GetMetricNames = (props: GetMetricNamesProps) => (
  <Get<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>
    path={`/prometheus/metric-list`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricNamesProps = Omit<
  UseGetProps<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>,
  'path'
>

/**
 * get all metric names
 */
export const useGetMetricNames = (props: UseGetMetricNamesProps) =>
  useGet<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>(`/prometheus/metric-list`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all metric names
 */
export const getMetricNamesPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>(
    getConfig('cv/api'),
    `/prometheus/metric-list`,
    props,
    signal
  )

export interface GetSampleDataQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  query: string
  tracingId: string
}

export type GetSampleDataProps = Omit<
  GetProps<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>,
  'path'
>

/**
 * get sample data
 */
export const GetSampleData = (props: GetSampleDataProps) => (
  <Get<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>
    path={`/prometheus/sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSampleDataProps = Omit<
  UseGetProps<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>,
  'path'
>

/**
 * get sample data
 */
export const useGetSampleData = (props: UseGetSampleDataProps) =>
  useGet<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>(`/prometheus/sample-data`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get sample data
 */
export const getSampleDataPromise = (
  props: GetUsingFetchProps<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>(
    getConfig('cv/api'),
    `/prometheus/sample-data`,
    props,
    signal
  )

export interface GetCVSetupStatusQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetCVSetupStatusProps = Omit<
  GetProps<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>,
  'path'
>

/**
 * get the status of CV related resources setup
 */
export const GetCVSetupStatus = (props: GetCVSetupStatusProps) => (
  <Get<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>
    path={`/setup/status`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetCVSetupStatusProps = Omit<
  UseGetProps<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>,
  'path'
>

/**
 * get the status of CV related resources setup
 */
export const useGetCVSetupStatus = (props: UseGetCVSetupStatusProps) =>
  useGet<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>(`/setup/status`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get the status of CV related resources setup
 */
export const getCVSetupStatusPromise = (
  props: GetUsingFetchProps<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseCVSetupStatus, unknown, GetCVSetupStatusQueryParams, void>(
    getConfig('cv/api'),
    `/setup/status`,
    props,
    signal
  )

export interface ListAllSupportedDataSourceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type ListAllSupportedDataSourceProps = Omit<
  GetProps<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>,
  'path'
>

/**
 * get the list of supported cv providers
 */
export const ListAllSupportedDataSource = (props: ListAllSupportedDataSourceProps) => (
  <Get<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>
    path={`/setup/supported-providers`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListAllSupportedDataSourceProps = Omit<
  UseGetProps<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>,
  'path'
>

/**
 * get the list of supported cv providers
 */
export const useListAllSupportedDataSource = (props: UseListAllSupportedDataSourceProps) =>
  useGet<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>(
    `/setup/supported-providers`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get the list of supported cv providers
 */
export const listAllSupportedDataSourcePromise = (
  props: GetUsingFetchProps<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListDataSourceType, unknown, ListAllSupportedDataSourceQueryParams, void>(
    getConfig('cv/api'),
    `/setup/supported-providers`,
    props,
    signal
  )

export interface GetSplunkSavedSearchesQueryParams {
  accountId?: string
  connectorIdentifier?: string
  orgIdentifier: string
  projectIdentifier: string
  requestGuid: string
}

export type GetSplunkSavedSearchesProps = Omit<
  GetProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  'path'
>

/**
 * gets saved searches in splunk
 */
export const GetSplunkSavedSearches = (props: GetSplunkSavedSearchesProps) => (
  <Get<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>
    path={`/splunk/saved-searches`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSplunkSavedSearchesProps = Omit<
  UseGetProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  'path'
>

/**
 * gets saved searches in splunk
 */
export const useGetSplunkSavedSearches = (props: UseGetSplunkSavedSearchesProps) =>
  useGet<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>(
    `/splunk/saved-searches`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets saved searches in splunk
 */
export const getSplunkSavedSearchesPromise = (
  props: GetUsingFetchProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>(
    getConfig('cv/api'),
    `/splunk/saved-searches`,
    props,
    signal
  )

export interface GetSplunkValidationQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  query: string
  requestGuid: string
}

export type GetSplunkValidationProps = Omit<
  GetProps<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>,
  'path'
>

/**
 * validates given setting for splunk data source
 */
export const GetSplunkValidation = (props: GetSplunkValidationProps) => (
  <Get<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>
    path={`/splunk/validation`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSplunkValidationProps = Omit<
  UseGetProps<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>,
  'path'
>

/**
 * validates given setting for splunk data source
 */
export const useGetSplunkValidation = (props: UseGetSplunkValidationProps) =>
  useGet<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>(`/splunk/validation`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * validates given setting for splunk data source
 */
export const getSplunkValidationPromise = (
  props: GetUsingFetchProps<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>(
    getConfig('cv/api'),
    `/splunk/validation`,
    props,
    signal
  )

export interface GetStackdriverLogSampleDataQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  tracingId: string
}

export type GetStackdriverLogSampleDataProps = Omit<
  MutateProps<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for a query
 */
export const GetStackdriverLogSampleData = (props: GetStackdriverLogSampleDataProps) => (
  <Mutate<ResponseListLinkedHashMap, Failure | Error, GetStackdriverLogSampleDataQueryParams, LogSampleRequestDTO, void>
    verb="POST"
    path={`/stackdriver-log/sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverLogSampleDataProps = Omit<
  UseMutateProps<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for a query
 */
export const useGetStackdriverLogSampleData = (props: UseGetStackdriverLogSampleDataProps) =>
  useMutate<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTO,
    void
  >('POST', `/stackdriver-log/sample-data`, { base: getConfig('cv/api'), ...props })

/**
 * get sample data for a query
 */
export const getStackdriverLogSampleDataPromise = (
  props: MutateUsingFetchProps<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTO,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTO,
    void
  >('POST', getConfig('cv/api'), `/stackdriver-log/sample-data`, props, signal)

export interface GetStackdriverDashboardDetailQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  path: string
  tracingId: string
}

export type GetStackdriverDashboardDetailProps = Omit<
  GetProps<ResponseListStackdriverDashboardDetail, Failure | Error, GetStackdriverDashboardDetailQueryParams, void>,
  'path'
>

/**
 * get details about one dashboard
 */
export const GetStackdriverDashboardDetail = (props: GetStackdriverDashboardDetailProps) => (
  <Get<ResponseListStackdriverDashboardDetail, Failure | Error, GetStackdriverDashboardDetailQueryParams, void>
    path={`/stackdriver/dashboard-detail`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverDashboardDetailProps = Omit<
  UseGetProps<ResponseListStackdriverDashboardDetail, Failure | Error, GetStackdriverDashboardDetailQueryParams, void>,
  'path'
>

/**
 * get details about one dashboard
 */
export const useGetStackdriverDashboardDetail = (props: UseGetStackdriverDashboardDetailProps) =>
  useGet<ResponseListStackdriverDashboardDetail, Failure | Error, GetStackdriverDashboardDetailQueryParams, void>(
    `/stackdriver/dashboard-detail`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get details about one dashboard
 */
export const getStackdriverDashboardDetailPromise = (
  props: GetUsingFetchProps<
    ResponseListStackdriverDashboardDetail,
    Failure | Error,
    GetStackdriverDashboardDetailQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseListStackdriverDashboardDetail,
    Failure | Error,
    GetStackdriverDashboardDetailQueryParams,
    void
  >(getConfig('cv/api'), `/stackdriver/dashboard-detail`, props, signal)

export interface GetStackdriverDashboardsQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  pageSize: number
  offset: number
  filter?: string
  tracingId: string
}

export type GetStackdriverDashboardsProps = Omit<
  GetProps<ResponsePageStackdriverDashboardDTO, Failure | Error, GetStackdriverDashboardsQueryParams, void>,
  'path'
>

/**
 * get all stackdriver dashboards
 */
export const GetStackdriverDashboards = (props: GetStackdriverDashboardsProps) => (
  <Get<ResponsePageStackdriverDashboardDTO, Failure | Error, GetStackdriverDashboardsQueryParams, void>
    path={`/stackdriver/dashboards`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverDashboardsProps = Omit<
  UseGetProps<ResponsePageStackdriverDashboardDTO, Failure | Error, GetStackdriverDashboardsQueryParams, void>,
  'path'
>

/**
 * get all stackdriver dashboards
 */
export const useGetStackdriverDashboards = (props: UseGetStackdriverDashboardsProps) =>
  useGet<ResponsePageStackdriverDashboardDTO, Failure | Error, GetStackdriverDashboardsQueryParams, void>(
    `/stackdriver/dashboards`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all stackdriver dashboards
 */
export const getStackdriverDashboardsPromise = (
  props: GetUsingFetchProps<
    ResponsePageStackdriverDashboardDTO,
    Failure | Error,
    GetStackdriverDashboardsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageStackdriverDashboardDTO, Failure | Error, GetStackdriverDashboardsQueryParams, void>(
    getConfig('cv/api'),
    `/stackdriver/dashboards`,
    props,
    signal
  )

export interface GetStackdriverSampleDataQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  tracingId: string
}

export interface GetStackdriverSampleDataRequestBody {
  [key: string]: any
}

export type GetStackdriverSampleDataProps = Omit<
  MutateProps<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for one metric
 */
export const GetStackdriverSampleData = (props: GetStackdriverSampleDataProps) => (
  <Mutate<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >
    verb="POST"
    path={`/stackdriver/sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverSampleDataProps = Omit<
  UseMutateProps<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for one metric
 */
export const useGetStackdriverSampleData = (props: UseGetStackdriverSampleDataProps) =>
  useMutate<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >('POST', `/stackdriver/sample-data`, { base: getConfig('cv/api'), ...props })

/**
 * get sample data for one metric
 */
export const getStackdriverSampleDataPromise = (
  props: MutateUsingFetchProps<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >('POST', getConfig('cv/api'), `/stackdriver/sample-data`, props, signal)

export type GetSumoLogicEndPointsProps = Omit<GetProps<ResponseListString, Failure | Error, void, void>, 'path'>

/**
 * get all sumologic endpoints
 */
export const GetSumoLogicEndPoints = (props: GetSumoLogicEndPointsProps) => (
  <Get<ResponseListString, Failure | Error, void, void>
    path={`/sumologic/endpoints`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSumoLogicEndPointsProps = Omit<UseGetProps<ResponseListString, Failure | Error, void, void>, 'path'>

/**
 * get all sumologic endpoints
 */
export const useGetSumoLogicEndPoints = (props: UseGetSumoLogicEndPointsProps) =>
  useGet<ResponseListString, Failure | Error, void, void>(`/sumologic/endpoints`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all sumologic endpoints
 */
export const getSumoLogicEndPointsPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, void, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, void, void>(
    getConfig('cv/api'),
    `/sumologic/endpoints`,
    props,
    signal
  )

export interface GetAnomalousMetricDashboardDataQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  analysisStartTime: number
  page?: number
  size?: number
  filter?: string
  datasourceType?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
}

export type GetAnomalousMetricDashboardDataProps = Omit<
  GetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>,
  'path'
>

/**
 * get anomalous time series data in a given time range
 */
export const GetAnomalousMetricDashboardData = (props: GetAnomalousMetricDashboardDataProps) => (
  <Get<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>
    path={`/timeseries-dashboard/anomalous-metric-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAnomalousMetricDashboardDataProps = Omit<
  UseGetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>,
  'path'
>

/**
 * get anomalous time series data in a given time range
 */
export const useGetAnomalousMetricDashboardData = (props: UseGetAnomalousMetricDashboardDataProps) =>
  useGet<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>(
    `/timeseries-dashboard/anomalous-metric-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get anomalous time series data in a given time range
 */
export const getAnomalousMetricDashboardDataPromise = (
  props: GetUsingFetchProps<
    RestResponsePageTimeSeriesMetricDataDTO,
    unknown,
    GetAnomalousMetricDashboardDataQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries-dashboard/anomalous-metric-data`,
    props,
    signal
  )

export interface GetMetricDataQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  analysisStartTime: number
  page?: number
  size?: number
  filter?: string
  datasourceType?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
}

export type GetMetricDataProps = Omit<
  GetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>,
  'path'
>

/**
 * get all time series data in a given time range
 */
export const GetMetricData = (props: GetMetricDataProps) => (
  <Get<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>
    path={`/timeseries-dashboard/metric-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricDataProps = Omit<
  UseGetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>,
  'path'
>

/**
 * get all time series data in a given time range
 */
export const useGetMetricData = (props: UseGetMetricDataProps) =>
  useGet<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>(
    `/timeseries-dashboard/metric-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all time series data in a given time range
 */
export const getMetricDataPromise = (
  props: GetUsingFetchProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries-dashboard/metric-data`,
    props,
    signal
  )

export interface GetActivityMetricsQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  startTime: number
  endTime: number
  anomalousOnly?: boolean
  page?: number
  size?: number
}

export interface GetActivityMetricsPathParams {
  activityId: string
}

export type GetActivityMetricsProps = Omit<
  GetProps<
    RestResponsePageTimeSeriesMetricDataDTO,
    unknown,
    GetActivityMetricsQueryParams,
    GetActivityMetricsPathParams
  >,
  'path'
> &
  GetActivityMetricsPathParams

/**
 * get activity metrics for given activityId
 */
export const GetActivityMetrics = ({ activityId, ...props }: GetActivityMetricsProps) => (
  <Get<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetActivityMetricsQueryParams, GetActivityMetricsPathParams>
    path={`/timeseries-dashboard/${activityId}/metrics`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetActivityMetricsProps = Omit<
  UseGetProps<
    RestResponsePageTimeSeriesMetricDataDTO,
    unknown,
    GetActivityMetricsQueryParams,
    GetActivityMetricsPathParams
  >,
  'path'
> &
  GetActivityMetricsPathParams

/**
 * get activity metrics for given activityId
 */
export const useGetActivityMetrics = ({ activityId, ...props }: UseGetActivityMetricsProps) =>
  useGet<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetActivityMetricsQueryParams, GetActivityMetricsPathParams>(
    (paramsInPath: GetActivityMetricsPathParams) => `/timeseries-dashboard/${paramsInPath.activityId}/metrics`,
    { base: getConfig('cv/api'), pathParams: { activityId }, ...props }
  )

/**
 * get activity metrics for given activityId
 */
export const getActivityMetricsPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageTimeSeriesMetricDataDTO,
    unknown,
    GetActivityMetricsQueryParams,
    GetActivityMetricsPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponsePageTimeSeriesMetricDataDTO,
    unknown,
    GetActivityMetricsQueryParams,
    GetActivityMetricsPathParams
  >(getConfig('cv/api'), `/timeseries-dashboard/${activityId}/metrics`, props, signal)

export interface GetTimeSeriesDataQueryParams {
  accountId: string
  cvConfigId: string
  startTimeEpochMillis: number
  endTimeEpochMillis: number
  metricName: string
  groupNameList: string[]
}

export type GetTimeSeriesDataProps = Omit<
  GetProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  'path'
>

/**
 * get time series data for a given data source config
 */
export const GetTimeSeriesData = (props: GetTimeSeriesDataProps) => (
  <Get<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>
    path={`/timeseries/metric-group-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetTimeSeriesDataProps = Omit<
  UseGetProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  'path'
>

/**
 * get time series data for a given data source config
 */
export const useGetTimeSeriesData = (props: UseGetTimeSeriesDataProps) =>
  useGet<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>(
    `/timeseries/metric-group-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get time series data for a given data source config
 */
export const getTimeSeriesDataPromise = (
  props: GetUsingFetchProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries/metric-group-data`,
    props,
    signal
  )

export interface GetMetricDefinitionsQueryParams {
  accountId: string
  cvConfigId: string
}

export type GetMetricDefinitionsProps = Omit<
  GetProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  'path'
>

/**
 * get metric definition for a given data source config
 */
export const GetMetricDefinitions = (props: GetMetricDefinitionsProps) => (
  <Get<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>
    path={`/timeseries/metric-template`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricDefinitionsProps = Omit<
  UseGetProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  'path'
>

/**
 * get metric definition for a given data source config
 */
export const useGetMetricDefinitions = (props: UseGetMetricDefinitionsProps) =>
  useGet<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>(
    `/timeseries/metric-template`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get metric definition for a given data source config
 */
export const getMetricDefinitionsPromise = (
  props: GetUsingFetchProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries/metric-template`,
    props,
    signal
  )

export interface DeleteVerificationJobQueryParams {
  accountId?: string
  orgIdentifier: string
  projectIdentifier: string
  identifier?: string
}

export type DeleteVerificationJobProps = Omit<
  MutateProps<void, Failure | Error, DeleteVerificationJobQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes a verification job for an identifier
 */
export const DeleteVerificationJob = (props: DeleteVerificationJobProps) => (
  <Mutate<void, Failure | Error, DeleteVerificationJobQueryParams, void, void>
    verb="DELETE"
    path={`/verification-job`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteVerificationJobProps = Omit<
  UseMutateProps<void, Failure | Error, DeleteVerificationJobQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes a verification job for an identifier
 */
export const useDeleteVerificationJob = (props: UseDeleteVerificationJobProps) =>
  useMutate<void, Failure | Error, DeleteVerificationJobQueryParams, void, void>('DELETE', `/verification-job`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * deletes a verification job for an identifier
 */
export const deleteVerificationJobPromise = (
  props: MutateUsingFetchProps<void, Failure | Error, DeleteVerificationJobQueryParams, void, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, Failure | Error, DeleteVerificationJobQueryParams, void, void>(
    'DELETE',
    getConfig('cv/api'),
    `/verification-job`,
    props,
    signal
  )

export interface GetVerificationJobQueryParams {
  accountId?: string
  orgIdentifier: string
  projectIdentifier: string
  identifier?: string
}

export type GetVerificationJobProps = Omit<
  GetProps<ResponseVerificationJobDTO, Failure | Error, GetVerificationJobQueryParams, void>,
  'path'
>

/**
 * gets the verification job for an identifier
 */
export const GetVerificationJob = (props: GetVerificationJobProps) => (
  <Get<ResponseVerificationJobDTO, Failure | Error, GetVerificationJobQueryParams, void>
    path={`/verification-job`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationJobProps = Omit<
  UseGetProps<ResponseVerificationJobDTO, Failure | Error, GetVerificationJobQueryParams, void>,
  'path'
>

/**
 * gets the verification job for an identifier
 */
export const useGetVerificationJob = (props: UseGetVerificationJobProps) =>
  useGet<ResponseVerificationJobDTO, Failure | Error, GetVerificationJobQueryParams, void>(`/verification-job`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets the verification job for an identifier
 */
export const getVerificationJobPromise = (
  props: GetUsingFetchProps<ResponseVerificationJobDTO, Failure | Error, GetVerificationJobQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseVerificationJobDTO, Failure | Error, GetVerificationJobQueryParams, void>(
    getConfig('cv/api'),
    `/verification-job`,
    props,
    signal
  )

export interface CreateVerificationJobQueryParams {
  accountId?: string
}

export type CreateVerificationJobProps = Omit<
  MutateProps<void, Failure | Error, CreateVerificationJobQueryParams, VerificationJobDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * create a verification job
 */
export const CreateVerificationJob = (props: CreateVerificationJobProps) => (
  <Mutate<void, Failure | Error, CreateVerificationJobQueryParams, VerificationJobDTORequestBody, void>
    verb="POST"
    path={`/verification-job`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseCreateVerificationJobProps = Omit<
  UseMutateProps<void, Failure | Error, CreateVerificationJobQueryParams, VerificationJobDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * create a verification job
 */
export const useCreateVerificationJob = (props: UseCreateVerificationJobProps) =>
  useMutate<void, Failure | Error, CreateVerificationJobQueryParams, VerificationJobDTORequestBody, void>(
    'POST',
    `/verification-job`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * create a verification job
 */
export const createVerificationJobPromise = (
  props: MutateUsingFetchProps<
    void,
    Failure | Error,
    CreateVerificationJobQueryParams,
    VerificationJobDTORequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<void, Failure | Error, CreateVerificationJobQueryParams, VerificationJobDTORequestBody, void>(
    'POST',
    getConfig('cv/api'),
    `/verification-job`,
    props,
    signal
  )

export interface ListBaselineExecutionsQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  verificationJobIdentifier?: string
}

export type ListBaselineExecutionsProps = Omit<
  GetProps<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>,
  'path'
>

/**
 * list of last 5 successful baseline executions
 */
export const ListBaselineExecutions = (props: ListBaselineExecutionsProps) => (
  <Get<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>
    path={`/verification-job-instance/baseline-executions`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListBaselineExecutionsProps = Omit<
  UseGetProps<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>,
  'path'
>

/**
 * list of last 5 successful baseline executions
 */
export const useListBaselineExecutions = (props: UseListBaselineExecutionsProps) =>
  useGet<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>(
    `/verification-job-instance/baseline-executions`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * list of last 5 successful baseline executions
 */
export const listBaselineExecutionsPromise = (
  props: GetUsingFetchProps<
    RestResponseListTestVerificationBaselineExecutionDTO,
    unknown,
    ListBaselineExecutionsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>(
    getConfig('cv/api'),
    `/verification-job-instance/baseline-executions`,
    props,
    signal
  )

export interface GetDefaultHealthVerificationJobQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
}

export type GetDefaultHealthVerificationJobProps = Omit<
  GetProps<ResponseVerificationJobDTO, Failure | Error, GetDefaultHealthVerificationJobQueryParams, void>,
  'path'
>

/**
 * gets the default health verification job for a project
 */
export const GetDefaultHealthVerificationJob = (props: GetDefaultHealthVerificationJobProps) => (
  <Get<ResponseVerificationJobDTO, Failure | Error, GetDefaultHealthVerificationJobQueryParams, void>
    path={`/verification-job/default-health-job`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDefaultHealthVerificationJobProps = Omit<
  UseGetProps<ResponseVerificationJobDTO, Failure | Error, GetDefaultHealthVerificationJobQueryParams, void>,
  'path'
>

/**
 * gets the default health verification job for a project
 */
export const useGetDefaultHealthVerificationJob = (props: UseGetDefaultHealthVerificationJobProps) =>
  useGet<ResponseVerificationJobDTO, Failure | Error, GetDefaultHealthVerificationJobQueryParams, void>(
    `/verification-job/default-health-job`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets the default health verification job for a project
 */
export const getDefaultHealthVerificationJobPromise = (
  props: GetUsingFetchProps<
    ResponseVerificationJobDTO,
    Failure | Error,
    GetDefaultHealthVerificationJobQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseVerificationJobDTO, Failure | Error, GetDefaultHealthVerificationJobQueryParams, void>(
    getConfig('cv/api'),
    `/verification-job/default-health-job`,
    props,
    signal
  )

export interface CDNGVerificationJobsQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  serviceIdentifier?: string
  envIdentifier?: string
}

export type CDNGVerificationJobsProps = Omit<
  GetProps<ResponseListVerificationJobDTO, Failure | Error, CDNGVerificationJobsQueryParams, void>,
  'path'
>

/**
 * lists all verification jobs for CDNG config screen
 */
export const CDNGVerificationJobs = (props: CDNGVerificationJobsProps) => (
  <Get<ResponseListVerificationJobDTO, Failure | Error, CDNGVerificationJobsQueryParams, void>
    path={`/verification-job/eligible-cdng-verification-jobs`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseCDNGVerificationJobsProps = Omit<
  UseGetProps<ResponseListVerificationJobDTO, Failure | Error, CDNGVerificationJobsQueryParams, void>,
  'path'
>

/**
 * lists all verification jobs for CDNG config screen
 */
export const useCDNGVerificationJobs = (props: UseCDNGVerificationJobsProps) =>
  useGet<ResponseListVerificationJobDTO, Failure | Error, CDNGVerificationJobsQueryParams, void>(
    `/verification-job/eligible-cdng-verification-jobs`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * lists all verification jobs for CDNG config screen
 */
export const cDNGVerificationJobsPromise = (
  props: GetUsingFetchProps<ResponseListVerificationJobDTO, Failure | Error, CDNGVerificationJobsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListVerificationJobDTO, Failure | Error, CDNGVerificationJobsQueryParams, void>(
    getConfig('cv/api'),
    `/verification-job/eligible-cdng-verification-jobs`,
    props,
    signal
  )

export interface GetVerificationJobsQueryParams {
  accountId?: string
  projectIdentifier?: string
  orgIdentifier?: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetVerificationJobsProps = Omit<
  GetProps<ResponsePageVerificationJobDTO, Failure | Error, GetVerificationJobsQueryParams, void>,
  'path'
>

/**
 * lists all verification jobs for an identifier
 */
export const GetVerificationJobs = (props: GetVerificationJobsProps) => (
  <Get<ResponsePageVerificationJobDTO, Failure | Error, GetVerificationJobsQueryParams, void>
    path={`/verification-job/list`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationJobsProps = Omit<
  UseGetProps<ResponsePageVerificationJobDTO, Failure | Error, GetVerificationJobsQueryParams, void>,
  'path'
>

/**
 * lists all verification jobs for an identifier
 */
export const useGetVerificationJobs = (props: UseGetVerificationJobsProps) =>
  useGet<ResponsePageVerificationJobDTO, Failure | Error, GetVerificationJobsQueryParams, void>(
    `/verification-job/list`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * lists all verification jobs for an identifier
 */
export const getVerificationJobsPromise = (
  props: GetUsingFetchProps<ResponsePageVerificationJobDTO, Failure | Error, GetVerificationJobsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageVerificationJobDTO, Failure | Error, GetVerificationJobsQueryParams, void>(
    getConfig('cv/api'),
    `/verification-job/list`,
    props,
    signal
  )

export interface UpdateVerificationJobQueryParams {
  accountId?: string
}

export interface UpdateVerificationJobPathParams {
  identifier: string
}

export type UpdateVerificationJobProps = Omit<
  MutateProps<
    void,
    Failure | Error,
    UpdateVerificationJobQueryParams,
    VerificationJobDTORequestBody,
    UpdateVerificationJobPathParams
  >,
  'path' | 'verb'
> &
  UpdateVerificationJobPathParams

/**
 * update a verification job
 */
export const UpdateVerificationJob = ({ identifier, ...props }: UpdateVerificationJobProps) => (
  <Mutate<
    void,
    Failure | Error,
    UpdateVerificationJobQueryParams,
    VerificationJobDTORequestBody,
    UpdateVerificationJobPathParams
  >
    verb="PUT"
    path={`/verification-job/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseUpdateVerificationJobProps = Omit<
  UseMutateProps<
    void,
    Failure | Error,
    UpdateVerificationJobQueryParams,
    VerificationJobDTORequestBody,
    UpdateVerificationJobPathParams
  >,
  'path' | 'verb'
> &
  UpdateVerificationJobPathParams

/**
 * update a verification job
 */
export const useUpdateVerificationJob = ({ identifier, ...props }: UseUpdateVerificationJobProps) =>
  useMutate<
    void,
    Failure | Error,
    UpdateVerificationJobQueryParams,
    VerificationJobDTORequestBody,
    UpdateVerificationJobPathParams
  >('PUT', (paramsInPath: UpdateVerificationJobPathParams) => `/verification-job/${paramsInPath.identifier}`, {
    base: getConfig('cv/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * update a verification job
 */
export const updateVerificationJobPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    void,
    Failure | Error,
    UpdateVerificationJobQueryParams,
    VerificationJobDTORequestBody,
    UpdateVerificationJobPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    Failure | Error,
    UpdateVerificationJobQueryParams,
    VerificationJobDTORequestBody,
    UpdateVerificationJobPathParams
  >('PUT', getConfig('cv/api'), `/verification-job/${identifier}`, props, signal)
