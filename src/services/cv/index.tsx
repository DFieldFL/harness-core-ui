/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig } from '../config'
export interface ResponseMessage {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
  level?: 'INFO' | 'ERROR'
  message?: string
  exception?: Throwable
}

export interface RestResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: { [key: string]: any }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseBoolean {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: boolean
  responseMessages?: ResponseMessage[]
}

export interface StackTraceElement {
  methodName?: string
  fileName?: string
  lineNumber?: number
  className?: string
  nativeMethod?: boolean
}

export interface Throwable {
  cause?: Throwable
  stackTrace?: StackTraceElement[]
  message?: string
  localizedMessage?: string
  suppressed?: Throwable[]
}

export interface KubernetesActivityDTO {
  accountIdentifier?: string
  projectIdentifier?: string
  orgIdentifier?: string
  serviceIdentifier?: string
  environmentIdentifier?: string
  name: string
  verificationJobRuntimeDetails?: VerificationJobRuntimeDetails[]
  activityStartTime: number
  activityEndTime?: number
  tags?: string[]
  clusterName?: string
  activityDescription?: string
  activitySourceConfigId?: string
}

export interface VerificationJobRuntimeDetails {
  verificationJobIdentifier?: string
  runtimeValues?: {
    [key: string]: string
  }
}

export interface ActivityDTO {
  accountIdentifier?: string
  projectIdentifier?: string
  orgIdentifier?: string
  serviceIdentifier?: string
  environmentIdentifier?: string
  name: string
  verificationJobRuntimeDetails?: VerificationJobRuntimeDetails[]
  activityStartTime: number
  activityEndTime?: number
  tags?: string[]
}

export interface RestResponseString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string
  responseMessages?: ResponseMessage[]
}

export interface KubernetesActivitySourceDTO {
  uuid?: string
  connectorIdentifier: string
  serviceIdentifier: string
  envIdentifier: string
  namespace: string
  clusterName: string
  workloadName?: string
}

export interface ActivityDashboardDTO {
  activityType?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM'
  activityId?: string
  activityName?: string
  activityStartTime?: number
  environmentIdentifier?: string
  environmentName?: string
  serviceIdentifier?: string
  verificationStatus?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
  activityVerificationSummary?: ActivityVerificationSummary
}

export interface ActivityVerificationSummary {
  total?: number
  passed?: number
  failed?: number
  errors?: number
  progress?: number
  notStarted?: number
  remainingTimeMs?: number
  progressPercentage?: number
  startTime?: number
  durationMs?: number
  riskScore?: number
  aggregatedStatus?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
}

export interface RestResponseListActivityDashboardDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivityDashboardDTO[]
  responseMessages?: ResponseMessage[]
}

export interface DeploymentActivityVerificationResultDTO {
  tag?: string
  serviceName?: string
  serviceIdentifier?: string
  preProductionDeploymentSummary?: ActivityVerificationSummary
  productionDeploymentSummary?: ActivityVerificationSummary
  postDeploymentSummary?: ActivityVerificationSummary
}

export interface RestResponseListDeploymentActivityVerificationResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivityVerificationResultDTO[]
  responseMessages?: ResponseMessage[]
}

export interface AdditionalInfo {
  type?: 'TEST' | 'CANARY' | 'BLUE_GREEN' | 'HEALTH'
}

export interface DeploymentActivityResultDTO {
  deploymentTag?: string
  serviceName?: string
  serviceIdentifier?: string
  environments?: string[]
  deploymentResultSummary?: DeploymentResultSummary
}

export interface DeploymentResultSummary {
  preProductionDeploymentVerificationJobInstanceSummaries?: DeploymentVerificationJobInstanceSummary[]
  productionDeploymentVerificationJobInstanceSummaries?: DeploymentVerificationJobInstanceSummary[]
  postDeploymentVerificationJobInstanceSummaries?: DeploymentVerificationJobInstanceSummary[]
}

export interface DeploymentVerificationJobInstanceSummary {
  progressPercentage?: number
  startTime?: number
  durationMs?: number
  riskScore?: number
  environmentName?: string
  jobName?: string
  verificationJobInstanceId?: string
  activityId?: string
  durationInSeconds?: number
  status?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
  additionalInfo?: AdditionalInfo
}

export interface RestResponseDeploymentActivityResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivityResultDTO
  responseMessages?: ResponseMessage[]
}

export interface DeploymentActivityPopoverResultDTO {
  tag?: string
  serviceName?: string
  preProductionDeploymentSummary?: DeploymentPopoverSummary
  productionDeploymentSummary?: DeploymentPopoverSummary
  postDeploymentSummary?: DeploymentPopoverSummary
}

export interface DeploymentPopoverSummary {
  total?: number
  verificationResults?: VerificationResult[]
}

export interface RestResponseDeploymentActivityPopoverResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivityPopoverResultDTO
  responseMessages?: ResponseMessage[]
}

export interface VerificationResult {
  jobName?: string
  status?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
  riskScore?: number
  remainingTimeMs?: number
  progressPercentage?: number
  startTime?: number
}

export interface ActivityVerificationResultDTO {
  activityType?: 'DEPLOYMENT' | 'INFRASTRUCTURE' | 'CUSTOM'
  activityId?: string
  activityName?: string
  activityStartTime?: number
  environmentIdentifier?: string
  environmentName?: string
  serviceIdentifier?: string
  endTime?: number
  remainingTimeMs?: number
  overallRisk?: number
  preActivityRisks?: CategoryRisk[]
  postActivityRisks?: CategoryRisk[]
  progressPercentage?: number
  status?: 'NOT_STARTED' | 'VERIFICATION_PASSED' | 'VERIFICATION_FAILED' | 'ERROR' | 'IN_PROGRESS'
}

export interface CategoryRisk {
  category?: 'PERFORMANCE' | 'ERRORS' | 'RESOURCES'
  risk?: number
}

export interface RestResponseListActivityVerificationResultDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ActivityVerificationResultDTO[]
  responseMessages?: ResponseMessage[]
}

export interface LearningEngineTask {
  uuid?: string
  verificationTaskId?: string
  createdAt?: number
  lastUpdatedAt?: number
  accountId?: string
  analysisType?:
    | 'SERVICE_GUARD_TIME_SERIES'
    | 'LOG_CLUSTER'
    | 'SERVICE_GUARD_LOG_ANALYSIS'
    | 'CANARY_LOG_ANALYSIS'
    | 'TEST_LOG_ANALYSIS'
    | 'TIME_SERIES_CANARY'
    | 'SERVICE_GUARD_FEEDBACK_ANALYSIS'
    | 'TIME_SERIES_LOAD_TEST'
  taskPriority?: number
  analysisSaveUrl?: string
  failureUrl?: string
  analysisStartTime?: number
  analysisEndTime?: number
  analysisEndEpochMinute?: number
  taskStatus?: 'QUEUED' | 'RUNNING' | 'FAILED' | 'SUCCESS' | 'TIMEOUT'
  type?:
    | 'SERVICE_GUARD_TIME_SERIES'
    | 'LOG_CLUSTER'
    | 'SERVICE_GUARD_LOG_ANALYSIS'
    | 'CANARY_LOG_ANALYSIS'
    | 'TEST_LOG_ANALYSIS'
    | 'TIME_SERIES_CANARY'
    | 'SERVICE_GUARD_FEEDBACK_ANALYSIS'
    | 'TIME_SERIES_LOAD_TEST'
}

export interface RestResponseLearningEngineTask {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LearningEngineTask
  responseMessages?: ResponseMessage[]
}

export interface RestResponseVoid {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: Void
  responseMessages?: ResponseMessage[]
}

export interface Void {
  [key: string]: any
}

export interface Cluster {
  text?: string
  label?: number
}

export interface ClusterCoordinates {
  x?: number
  y?: number
  label?: number
  host?: string
}

export interface ClusterSummary {
  label?: number
  clusterType?: 'KNOWN_EVENT' | 'UNKNOWN_EVENT' | 'UNEXPECTED_FREQUENCY'
  risk?: number
  score?: number
  count?: number
  controlFrequencyData?: number[]
  testFrequencyData?: number[]
}

export interface DeploymentLogAnalysisDTO {
  clusters?: Cluster[]
  clusterCoordinates?: ClusterCoordinates[]
  resultSummary?: ResultSummary
  hostSummaries?: HostSummary[]
}

export interface HostSummary {
  host?: string
  resultSummary?: ResultSummary
}

export interface ResultSummary {
  risk?: number
  score?: number
  controlClusterLabels?: number[]
  testClusterSummaries?: ClusterSummary[]
}

export interface AnalysisResult {
  label?: number
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
  count?: number
}

export interface Frequency {
  count?: number
  timestamp?: number
  riskScore?: number
}

export interface LogAnalysisCluster {
  uuid?: string
  createdAt?: number
  lastUpdatedAt?: number
  verificationTaskId?: string
  analysisStartTime?: number
  analysisEndTime?: number
  accountId?: string
  analysisMinute?: number
  label?: number
  frequencyTrend?: Frequency[]
  text?: string
  validUntil?: string
  evicted?: boolean
}

export interface LogAnalysisDTO {
  verificationTaskId?: string
  analysisStartTime?: number
  analysisEndTime?: number
  accountId?: string
  analysisSummaryMessage?: string
  score?: number
  analysisMinute?: number
  logClusters?: LogAnalysisCluster[]
  logAnalysisResults?: AnalysisResult[]
}

export interface LogClusterDTO {
  verificationTaskId?: string
  epochMinute?: number
  host?: string
  log?: string
  clusterLabel?: string
  clusterCount?: number
}

export interface RestResponseListLogClusterDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogClusterDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLogAnalysisCluster {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisCluster[]
  responseMessages?: ResponseMessage[]
}

export interface MetricSum {
  metricName?: string
  risk?: number
  sum?: number
}

export interface RestResponseMapStringMapStringMetricSum {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: MetricSum
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMapStringMapStringListDouble {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: number[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTimeSeriesMetricDefinition {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesMetricDefinition[]
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesMetricDefinition {
  metricName?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX'
  metricGroupName?: string
  actionType?: 'IGNORE' | 'FAIL'
  comparisonType?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
  action?: 'FAIL_IMMEDIATELY' | 'FAIL_AFTER_OCCURRENCES' | 'FAIL_AFTER_CONSECUTIVE_OCCURRENCES'
  occurrenceCount?: number
  thresholdType?: 'ACT_WHEN_LOWER' | 'ACT_WHEN_HIGHER'
  value?: number
}

export interface RestResponseListTimeSeriesRecordDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesRecordDTO[]
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesRecordDTO {
  verificationTaskId?: string
  host?: string
  metricName?: string
  groupName?: string
  epochMinute?: number
  metricValue?: number
}

export interface RestResponseMapStringMapStringListTimeSeriesAnomalies {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: TimeSeriesAnomalies[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesAnomalies {
  transactionName?: string
  metricName?: string
  testData?: number[]
  anomalousTimestamps?: number[]
}

export interface ServiceGuardTimeSeriesAnalysisDTO {
  verificationTaskId?: string
  analysisStartTime?: number
  analysisEndTime?: number
  overallMetricScores?: {
    [key: string]: number
  }
  txnMetricAnalysisData?: {
    [key: string]: {
      [key: string]: ServiceGuardTxnMetricAnalysisDataDTO
    }
  }
}

export interface ServiceGuardTxnMetricAnalysisDataDTO {
  longTermPattern?: boolean
  lastSeenTime?: number
  risk?: number
  score?: number
  shortTermHistory?: number[]
  anomalousPatterns?: TimeSeriesAnomalies[]
  cumulativeSums?: MetricSum
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX'
  keyTransaction?: boolean
}

export interface DeploymentTimeSeriesAnalysisDTO {
  risk?: number
  score?: number
  hostSummaries?: HostInfo[]
  transactionMetricSummaries?: TransactionMetricHostData[]
}

export interface HostData {
  hostName?: string
  risk?: number
  score?: number
  controlData?: number[]
  testData?: number[]
}

export interface HostInfo {
  hostName?: string
  primary?: boolean
  canary?: boolean
  risk?: number
  score?: number
}

export interface TransactionMetricHostData {
  transactionName?: string
  metricName?: string
  risk?: number
  score?: number
  hostData?: HostData[]
}

export interface AppdynamicsMetricValueValidationResponse {
  metricName?: string
  apiResponseStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  value?: number
  errorMessage?: string
}

export interface AppdynamicsValidationResponse {
  metricPackName?: string
  overallStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  values?: AppdynamicsMetricValueValidationResponse[]
}

export interface RestResponseSetAppdynamicsValidationResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: AppdynamicsValidationResponse[]
  responseMessages?: ResponseMessage[]
}

export interface MetricDefinition {
  name?: string
  included?: boolean
  thresholds?: TimeSeriesThreshold[]
}

export interface MetricPack {
  uuid?: string
  createdAt?: number
  lastUpdatedAt?: number
  accountId?: string
  projectIdentifier?: string
  dataSourceType: 'APP_DYNAMICS' | 'SPLUNK'
  identifier?: string
  category: 'PERFORMANCE' | 'ERRORS' | 'RESOURCES'
  metrics?: MetricDefinition[]
}

export interface TimeSeriesThreshold {
  uuid?: string
  createdAt?: number
  lastUpdatedAt?: number
  accountId: string
  projectIdentifier: string
  dataSourceType: 'APP_DYNAMICS' | 'SPLUNK'
  metricPackIdentifier: string
  metricName: string
  metricType: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX'
  metricGroupName?: string
  action: 'IGNORE' | 'FAIL'
  criteria: TimeSeriesThresholdCriteria
}

export interface TimeSeriesThresholdCriteria {
  type?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
  action?: 'FAIL_IMMEDIATELY' | 'FAIL_AFTER_OCCURRENCES' | 'FAIL_AFTER_CONSECUTIVE_OCCURRENCES'
  occurrenceCount?: number
  criteria?: string
}

export interface AppDynamicsApplication {
  name?: string
  id?: number
}

export interface RestResponseListAppDynamicsApplication {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: AppDynamicsApplication[]
  responseMessages?: ResponseMessage[]
}

export interface AppDynamicsTier {
  id?: number
  name?: string
}

export interface RestResponseSetAppDynamicsTier {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: AppDynamicsTier[]
  responseMessages?: ResponseMessage[]
}

export interface CVConfig {
  uuid?: string
  dataCollectionTaskIteration?: number
  createdAt?: number
  lastUpdatedAt?: number
  verificationType: 'TIME_SERIES' | 'LOG'
  accountId: string
  connectorIdentifier: string
  serviceIdentifier: string
  envIdentifier: string
  projectIdentifier: string
  orgIdentifier: string
  category: 'PERFORMANCE' | 'ERRORS' | 'RESOURCES'
  perpetualTaskId?: string
  productName?: string
  groupId?: string
  analysisOrchestrationIteration?: number
  type?: 'APP_DYNAMICS' | 'SPLUNK'
  firstTimeDataCollectionTimeRange?: TimeRange
}

export interface RestResponseCVConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CVConfig
  responseMessages?: ResponseMessage[]
}

export interface TimeRange {
  startTime?: number
  endTime?: number
}

export interface RestResponseListCVConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CVConfig[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string[]
  responseMessages?: ResponseMessage[]
}

export interface DSConfig {
  identifier?: string
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  productName?: string
  connectorIdentifier?: string
  envIdentifier?: string
  type?: 'APP_DYNAMICS' | 'SPLUNK'
}

export interface RestResponseListDSConfig {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DSConfig[]
  responseMessages?: ResponseMessage[]
}

export interface EnvToServicesDTO {
  environment?: EnvironmentResponseDTO
  services?: ServiceResponseDTO[]
}

export interface EnvironmentResponseDTO {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
  identifier?: string
  name?: string
  description?: string
  type?: 'PreProduction' | 'Production'
  deleted?: boolean
  tags?: {
    [key: string]: string
  }
  version?: number
}

export interface RestResponseListEnvToServicesDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: EnvToServicesDTO[]
  responseMessages?: ResponseMessage[]
}

export interface ServiceResponseDTO {
  accountId?: string
  identifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  name?: string
  description?: string
  deleted?: boolean
  tags?: {
    [key: string]: string
  }
  version?: number
}

export interface TimeSeriesDataCollectionRecord {
  accountId?: string
  cvConfigId?: string
  verificationTaskId?: string
  host?: string
  timeStamp?: number
  metricValues?: TimeSeriesDataRecordMetricValue[]
}

export interface TimeSeriesDataRecordGroupValue {
  groupName?: string
  value?: number
}

export interface TimeSeriesDataRecordMetricValue {
  metricName?: string
  timeSeriesValues?: TimeSeriesDataRecordGroupValue[]
}

export interface DataCollectionInfo {
  dataCollectionDsl?: string
  collectHostData?: boolean
  verificationType?: 'TIME_SERIES' | 'LOG'
  dslEnvVariables?: {
    [key: string]: { [key: string]: any }
  }
}

export interface DataCollectionTaskDTO {
  uuid?: string
  accountId?: string
  verificationTaskId?: string
  dataCollectionInfo?: DataCollectionInfo
  startTime?: number
  endTime?: number
}

export interface RestResponseOptionalDataCollectionTaskDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DataCollectionTaskDTO
  responseMessages?: ResponseMessage[]
}

export interface DataCollectionTaskResult {
  dataCollectionTaskId?: string
  status?: 'FAILED' | 'QUEUED' | 'RUNNING' | 'WAITING' | 'EXPIRED' | 'SUCCESS'
  exception?: string
  stacktrace?: string
}

export interface HostRecordDTO {
  accountId?: string
  verificationTaskId?: string
  hosts?: string[]
  startTime?: number
  endTime?: number
}

export interface LogRecordDTO {
  accountId?: string
  verificationTaskId?: string
  host?: string
  timestamp?: number
  log?: string
}

export interface RestResponseListTimeSeriesThreshold {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesThreshold[]
  responseMessages?: ResponseMessage[]
}

export interface MetricDefinitionDTO {
  name?: string
  type?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX'
  path?: string
  validationPath?: string
  thresholds?: TimeSeriesThresholdDTO[]
  included?: boolean
}

export interface MetricPackDTO {
  accountId?: string
  projectIdentifier?: string
  dataSourceType?: 'APP_DYNAMICS' | 'SPLUNK'
  identifier?: string
  category?: 'PERFORMANCE' | 'ERRORS' | 'RESOURCES'
  metrics?: MetricDefinitionDTO[]
  thresholds?: TimeSeriesThresholdDTO[]
}

export interface RestResponseListMetricPackDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: MetricPackDTO[]
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesThresholdDTO {
  accountId?: string
  projectIdentifier?: string
  dataSourceType?: 'APP_DYNAMICS' | 'SPLUNK'
  metricPackIdentifier?: string
  metricName?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX'
  metricGroupName?: string
  action?: 'IGNORE' | 'FAIL'
  criteria?: TimeSeriesThresholdCriteria
}

export interface Bar {
  timestamp?: number
  count?: number
}

export interface Histogram {
  query?: string
  intervalMs?: number
  bars?: Bar[]
  errorMessage?: string
  splunkQuery?: string
  count?: number
}

export interface RestResponseSplunkValidationResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SplunkValidationResponse
  responseMessages?: ResponseMessage[]
}

export interface SampleLog {
  raw?: string
  timestamp?: number
}

export interface SplunkSampleResponse {
  rawSampleLogs?: SampleLog[]
  sample?: {
    [key: string]: string
  }
  splunkQuery?: string
  errorMessage?: string
}

export interface SplunkValidationResponse {
  histogram?: Histogram
  samples?: SplunkSampleResponse
  errorMessage?: string
  queryDurationMillis?: number
}

export interface RestResponseListSplunkSavedSearch {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SplunkSavedSearch[]
  responseMessages?: ResponseMessage[]
}

export interface SplunkSavedSearch {
  title?: string
  searchQuery?: string
}

export interface MetricData {
  timestamp?: number
  value?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'LOW_RISK' | 'MEDIUM_RISK' | 'HIGH_RISK'
}

export interface RestResponseTimeSeriesTestDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesTestDataDTO
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesTestDataDTO {
  cvConfigId?: string
  transactionMetricValues?: {
    [key: string]: {
      [key: string]: number[]
    }
  }
  metricGroupValues?: {
    [key: string]: {
      [key: string]: MetricData[]
    }
  }
}

export interface AnomalyDTO {
  serviceName?: string
  envName?: string
  riskScore?: number
  startTimestamp?: number
  endTimestamp?: number
  category?: 'PERFORMANCE' | 'ERRORS' | 'RESOURCES'
  status?: 'CLOSED' | 'OPEN'
  anomalyDetails?: AnomalyDetailDTO[]
}

export interface AnomalyDetailDTO {
  cvConfigId?: string
  riskScore?: number
  metricDetails?: AnomalyMetricDetail[]
}

export interface AnomalyMetricDetail {
  metricName?: string
  riskScore?: number
  txnDetails?: AnomalyTxnDetail[]
}

export interface AnomalyTxnDetail {
  groupName?: string
  riskScore?: number
}

export interface RestResponseListAnomalyDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: AnomalyDTO[]
  responseMessages?: ResponseMessage[]
}

export interface CategoryRisksDTO {
  startTimeEpoch?: number
  endTimeEpoch?: number
  categoryRisks?: CategoryRisk[]
}

export interface RestResponseCategoryRisksDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CategoryRisksDTO
  responseMessages?: ResponseMessage[]
}

export interface EnvServiceRiskDTO {
  orgIdentifier?: string
  projectIdentifier?: string
  envIdentifier?: string
  risk?: number
  serviceRisks?: ServiceRisk[]
}

export interface RestResponseListEnvServiceRiskDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: EnvServiceRiskDTO[]
  responseMessages?: ResponseMessage[]
}

export interface ServiceRisk {
  serviceIdentifier?: string
  risk?: number
}

export interface HeatMapDTO {
  startTime?: number
  endTime?: number
  riskScore?: number
}

export interface RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: HeatMapDTO[]
  }
  responseMessages?: ResponseMessage[]
}

export interface AnalysisRisk {
  name?: string
  risk?: number
}

export interface EnvSummary {
  riskScore?: number
  envName?: string
  envIdentifier?: string
  serviceSummaries?: ServiceSummary[]
}

export interface RestResponseRiskSummaryPopoverDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: RiskSummaryPopoverDTO
  responseMessages?: ResponseMessage[]
}

export interface RiskSummaryPopoverDTO {
  category?: 'PERFORMANCE' | 'ERRORS' | 'RESOURCES'
  envSummaries?: EnvSummary[]
}

export interface ServiceSummary {
  serviceName?: string
  serviceIdentifier?: string
  risk?: number
  analysisRisks?: AnalysisRisk[]
}

export interface AnalyzedLogDataDTO {
  projectIdentifier?: string
  orgIdentifier?: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  logData?: LogData
}

export interface FrequencyDTO {
  timestamp?: number
  count?: number
}

export interface LogData {
  text?: string
  label?: number
  count?: number
  trend?: FrequencyDTO[]
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
}

export interface Page {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: { [key: string]: any }[]
  pageIndex?: number
  empty?: boolean
}

export interface PageAnalyzedLogDataDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: AnalyzedLogDataDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageAnalyzedLogDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageAnalyzedLogDataDTO
  responseMessages?: ResponseMessage[]
}

export interface CountByTag {
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
  count?: number
}

export interface LogDataByTag {
  timestamp?: number
  countByTags?: CountByTag[]
}

export interface RestResponseSortedSetLogDataByTag {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogDataByTag[]
  responseMessages?: ResponseMessage[]
}

export interface PageTimeSeriesMetricDataDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: TimeSeriesMetricDataDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageTimeSeriesMetricDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageTimeSeriesMetricDataDTO
  responseMessages?: ResponseMessage[]
}

export interface TimeSeriesMetricDataDTO {
  projectIdentifier?: string
  orgIdentifier?: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  category?: 'PERFORMANCE' | 'ERRORS' | 'RESOURCES'
  groupName?: string
  metricName?: string
  metricDataList?: MetricData[]
}

export interface LogAnalysisClusterChartDTO {
  label?: number
  text?: string
  hostName?: string
  risk?: number
  x?: number
  y?: number
}

export interface RestResponseListLogAnalysisClusterChartDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisClusterChartDTO[]
  responseMessages?: ResponseMessage[]
}

export interface LogAnalysisClusterDTO {
  message?: string
  label?: number
  clusterType?: 'KNOWN_EVENT' | 'UNKNOWN_EVENT' | 'UNEXPECTED_FREQUENCY'
  risk?: number
  score?: number
  count?: number
  controlFrequencyData?: number[]
  testFrequencyData?: number[]
}

export interface PageLogAnalysisClusterDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: LogAnalysisClusterDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponsePageLogAnalysisClusterDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageLogAnalysisClusterDTO
  responseMessages?: ResponseMessage[]
}

export interface PageTransactionMetricInfo {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: TransactionMetricInfo[]
  pageIndex?: number
  empty?: boolean
}

export interface RestResponseTransactionMetricInfoSummaryPageDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TransactionMetricInfoSummaryPageDTO
  responseMessages?: ResponseMessage[]
}

export interface TransactionMetric {
  transactionName?: string
  metricName?: string
  score?: number
}

export interface TransactionMetricInfo {
  transactionMetric?: TransactionMetric
  connectorName?: string
  nodes?: HostData[]
}

export interface TransactionMetricInfoSummaryPageDTO {
  pageResponse?: PageTransactionMetricInfo
  deploymentTimeRange?: TimeRange
}

export interface RestResponseVerificationJobDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: VerificationJobDTO
  responseMessages?: ResponseMessage[]
}

export interface VerificationJobDTO {
  identifier?: string
  jobName?: string
  serviceIdentifier?: string
  envIdentifier?: string
  projectIdentifier?: string
  orgIdentifier?: string
  dataSources?: ('APP_DYNAMICS' | 'SPLUNK')[]
  duration?: string
  type?: 'TEST' | 'CANARY' | 'BLUE_GREEN' | 'HEALTH'
}

export interface RestResponseListVerificationJobDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: VerificationJobDTO[]
  responseMessages?: ResponseMessage[]
}

export type CVConfigArrayRequestBody = CVConfig[]

export type ServiceGuardTimeSeriesAnalysisDTORequestBody = ServiceGuardTimeSeriesAnalysisDTO

export type MetricPackArrayRequestBody = MetricPack[]

export type CVConfigRequestBody = CVConfig

export interface GetAppDynamicsApplicationsQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetAppDynamicsApplicationsProps = Omit<
  GetProps<RestResponseListAppDynamicsApplication, unknown, GetAppDynamicsApplicationsQueryParams, void>,
  'path'
>

/**
 * get all appdynamics applications
 */
export const GetAppDynamicsApplications = (props: GetAppDynamicsApplicationsProps) => (
  <Get<RestResponseListAppDynamicsApplication, unknown, GetAppDynamicsApplicationsQueryParams, void>
    path="/appdynamics/applications"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsApplicationsProps = Omit<
  UseGetProps<RestResponseListAppDynamicsApplication, unknown, GetAppDynamicsApplicationsQueryParams, void>,
  'path'
>

/**
 * get all appdynamics applications
 */
export const useGetAppDynamicsApplications = (props: UseGetAppDynamicsApplicationsProps) =>
  useGet<RestResponseListAppDynamicsApplication, unknown, GetAppDynamicsApplicationsQueryParams, void>(
    `/appdynamics/applications`,
    { base: getConfig('cv/api'), ...props }
  )

export interface GetAppDynamicsMetricDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appdAppId: number
  appdTierId: number
  requestGuid: string
}

export type GetAppDynamicsMetricDataProps = Omit<
  MutateProps<
    RestResponseSetAppdynamicsValidationResponse,
    unknown,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const GetAppDynamicsMetricData = (props: GetAppDynamicsMetricDataProps) => (
  <Mutate<
    RestResponseSetAppdynamicsValidationResponse,
    unknown,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackArrayRequestBody,
    void
  >
    verb="POST"
    path="/appdynamics/metric-data"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsMetricDataProps = Omit<
  UseMutateProps<
    RestResponseSetAppdynamicsValidationResponse,
    unknown,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const useGetAppDynamicsMetricData = (props: UseGetAppDynamicsMetricDataProps) =>
  useMutate<
    RestResponseSetAppdynamicsValidationResponse,
    unknown,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackArrayRequestBody,
    void
  >('POST', `/appdynamics/metric-data`, { base: getConfig('cv/api'), ...props })

export interface GetAppDynamicsTiersQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  appDynamicsAppId: number
}

export type GetAppDynamicsTiersProps = Omit<
  GetProps<RestResponseSetAppDynamicsTier, unknown, GetAppDynamicsTiersQueryParams, void>,
  'path'
>

/**
 * get all appdynamics tiers for an application
 */
export const GetAppDynamicsTiers = (props: GetAppDynamicsTiersProps) => (
  <Get<RestResponseSetAppDynamicsTier, unknown, GetAppDynamicsTiersQueryParams, void>
    path="/appdynamics/tiers"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsTiersProps = Omit<
  UseGetProps<RestResponseSetAppDynamicsTier, unknown, GetAppDynamicsTiersQueryParams, void>,
  'path'
>

/**
 * get all appdynamics tiers for an application
 */
export const useGetAppDynamicsTiers = (props: UseGetAppDynamicsTiersProps) =>
  useGet<RestResponseSetAppDynamicsTier, unknown, GetAppDynamicsTiersQueryParams, void>(`/appdynamics/tiers`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface GetDataSourceConfigsQueryParams {
  accountId?: string
  connectorIdentifier?: string
  productName?: string
}

export type GetDataSourceConfigsProps = Omit<
  GetProps<RestResponseListDSConfig, unknown, GetDataSourceConfigsQueryParams, void>,
  'path'
>

/**
 * gets list of data source configs
 */
export const GetDataSourceConfigs = (props: GetDataSourceConfigsProps) => (
  <Get<RestResponseListDSConfig, unknown, GetDataSourceConfigsQueryParams, void>
    path="/ds-config"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDataSourceConfigsProps = Omit<
  UseGetProps<RestResponseListDSConfig, unknown, GetDataSourceConfigsQueryParams, void>,
  'path'
>

/**
 * gets list of data source configs
 */
export const useGetDataSourceConfigs = (props: UseGetDataSourceConfigsProps) =>
  useGet<RestResponseListDSConfig, unknown, GetDataSourceConfigsQueryParams, void>(`/ds-config`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface SaveDataSourceCVConfigQueryParams {
  accountId?: string
}

export type SaveDataSourceCVConfigProps = Omit<
  MutateProps<void, void, SaveDataSourceCVConfigQueryParams, DSConfig, void>,
  'path' | 'verb'
>

/**
 * saves a data source config
 */
export const SaveDataSourceCVConfig = (props: SaveDataSourceCVConfigProps) => (
  <Mutate<void, void, SaveDataSourceCVConfigQueryParams, DSConfig, void>
    verb="PUT"
    path="/ds-config"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveDataSourceCVConfigProps = Omit<
  UseMutateProps<void, void, SaveDataSourceCVConfigQueryParams, DSConfig, void>,
  'path' | 'verb'
>

/**
 * saves a data source config
 */
export const useSaveDataSourceCVConfig = (props: UseSaveDataSourceCVConfigProps) =>
  useMutate<void, void, SaveDataSourceCVConfigQueryParams, DSConfig, void>('PUT', `/ds-config`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface DeleteDataSourceCVConfigByGroupQueryParams {
  accountId?: string
  connectorIdentifier?: string
  productName?: string
  identifier?: string
}

export type DeleteDataSourceCVConfigByGroupProps = Omit<
  MutateProps<void, void, DeleteDataSourceCVConfigByGroupQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes all data source configs for a group
 */
export const DeleteDataSourceCVConfigByGroup = (props: DeleteDataSourceCVConfigByGroupProps) => (
  <Mutate<void, void, DeleteDataSourceCVConfigByGroupQueryParams, void, void>
    verb="DELETE"
    path="/ds-config"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteDataSourceCVConfigByGroupProps = Omit<
  UseMutateProps<void, void, DeleteDataSourceCVConfigByGroupQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes all data source configs for a group
 */
export const useDeleteDataSourceCVConfigByGroup = (props: UseDeleteDataSourceCVConfigByGroupProps) =>
  useMutate<void, void, DeleteDataSourceCVConfigByGroupQueryParams, void, void>('DELETE', `/ds-config`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface GetMetricPacksQueryParams {
  accountId: string
  projectIdentifier: string
  dataSourceType: 'APP_DYNAMICS' | 'SPLUNK'
}

export type GetMetricPacksProps = Omit<
  GetProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  'path'
>

/**
 * get all metric packs for a connector type
 */
export const GetMetricPacks = (props: GetMetricPacksProps) => (
  <Get<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>
    path="/metric-pack"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricPacksProps = Omit<
  UseGetProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  'path'
>

/**
 * get all metric packs for a connector type
 */
export const useGetMetricPacks = (props: UseGetMetricPacksProps) =>
  useGet<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>(`/metric-pack`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface SaveMetricPacksQueryParams {
  accountId: string
  projectIdentifier: string
  dataSourceType: 'APP_DYNAMICS' | 'SPLUNK'
}

export type SaveMetricPacksProps = Omit<
  MutateProps<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPackArrayRequestBody, void>,
  'path' | 'verb'
>

/**
 * saves a metric pack for a connector type
 */
export const SaveMetricPacks = (props: SaveMetricPacksProps) => (
  <Mutate<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPackArrayRequestBody, void>
    verb="POST"
    path="/metric-pack"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveMetricPacksProps = Omit<
  UseMutateProps<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPackArrayRequestBody, void>,
  'path' | 'verb'
>

/**
 * saves a metric pack for a connector type
 */
export const useSaveMetricPacks = (props: UseSaveMetricPacksProps) =>
  useMutate<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPackArrayRequestBody, void>(
    'POST',
    `/metric-pack`,
    { base: getConfig('cv/api'), ...props }
  )

export interface GetSplunkValidationQueryParams {
  accountId: string
  connectorIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  query: string
  requestGuid: string
}

export type GetSplunkValidationProps = Omit<
  GetProps<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>,
  'path'
>

/**
 * validates given setting for splunk data source
 */
export const GetSplunkValidation = (props: GetSplunkValidationProps) => (
  <Get<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>
    path="/splunk/validation"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSplunkValidationProps = Omit<
  UseGetProps<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>,
  'path'
>

/**
 * validates given setting for splunk data source
 */
export const useGetSplunkValidation = (props: UseGetSplunkValidationProps) =>
  useGet<RestResponseSplunkValidationResponse, unknown, GetSplunkValidationQueryParams, void>(`/splunk/validation`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface GetSplunkSavedSearchesQueryParams {
  accountId?: string
  connectorIdentifier?: string
  orgIdentifier: string
  projectIdentifier: string
  requestGuid: string
}

export type GetSplunkSavedSearchesProps = Omit<
  GetProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  'path'
>

/**
 * gets saved searches in splunk
 */
export const GetSplunkSavedSearches = (props: GetSplunkSavedSearchesProps) => (
  <Get<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>
    path="/splunk/saved-searches"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSplunkSavedSearchesProps = Omit<
  UseGetProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  'path'
>

/**
 * gets saved searches in splunk
 */
export const useGetSplunkSavedSearches = (props: UseGetSplunkSavedSearchesProps) =>
  useGet<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>(
    `/splunk/saved-searches`,
    { base: getConfig('cv/api'), ...props }
  )

export interface GetTimeSeriesDataQueryParams {
  accountId: string
  cvConfigId: string
  startTimeEpochMillis: number
  endTimeEpochMillis: number
  metricName: string
  groupNameList: string[]
}

export type GetTimeSeriesDataProps = Omit<
  GetProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  'path'
>

/**
 * get time series data for a given data source config
 */
export const GetTimeSeriesData = (props: GetTimeSeriesDataProps) => (
  <Get<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>
    path="/timeseries/metric-group-data"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetTimeSeriesDataProps = Omit<
  UseGetProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  'path'
>

/**
 * get time series data for a given data source config
 */
export const useGetTimeSeriesData = (props: UseGetTimeSeriesDataProps) =>
  useGet<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>(
    `/timeseries/metric-group-data`,
    { base: getConfig('cv/api'), ...props }
  )

export interface GetMetricDefinitionsQueryParams {
  accountId: string
  cvConfigId: string
}

export type GetMetricDefinitionsProps = Omit<
  GetProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  'path'
>

/**
 * get metric definition for a given data source config
 */
export const GetMetricDefinitions = (props: GetMetricDefinitionsProps) => (
  <Get<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>
    path="/timeseries/metric-template"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricDefinitionsProps = Omit<
  UseGetProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  'path'
>

/**
 * get metric definition for a given data source config
 */
export const useGetMetricDefinitions = (props: UseGetMetricDefinitionsProps) =>
  useGet<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>(
    `/timeseries/metric-template`,
    { base: getConfig('cv/api'), ...props }
  )

export interface GetServicesQueryParams {
  accountId: string
  orgIdentifier?: string
  projectIdentifier: string
}

export type GetServicesProps = Omit<
  GetProps<RestResponseListEnvToServicesDTO, unknown, GetServicesQueryParams, void>,
  'path'
>

/**
 * gets list of env to services mapping for which data sources are configured
 */
export const GetServices = (props: GetServicesProps) => (
  <Get<RestResponseListEnvToServicesDTO, unknown, GetServicesQueryParams, void>
    path="/ds-config/env-to-services"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetServicesProps = Omit<
  UseGetProps<RestResponseListEnvToServicesDTO, unknown, GetServicesQueryParams, void>,
  'path'
>

/**
 * gets list of env to services mapping for which data sources are configured
 */
export const useGetServices = (props: UseGetServicesProps) =>
  useGet<RestResponseListEnvToServicesDTO, unknown, GetServicesQueryParams, void>(`/ds-config/env-to-services`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface GetHeatmapQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier?: string
  envIdentifier?: string
  startTimeMs: number
  endTimeMs: number
}

export type GetHeatmapProps = Omit<
  GetProps<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>,
  'path'
>

/**
 * get heatmap for a time range
 */
export const GetHeatmap = (props: GetHeatmapProps) => (
  <Get<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>
    path="/heatmap"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetHeatmapProps = Omit<
  UseGetProps<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>,
  'path'
>

/**
 * get heatmap for a time range
 */
export const useGetHeatmap = (props: UseGetHeatmapProps) =>
  useGet<RestResponseMapCVMonitoringCategorySortedSetHeatMapDTO, unknown, GetHeatmapQueryParams, void>(`/heatmap`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface GetCategoryRiskMapQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier?: string
  envIdentifier?: string
}

export type GetCategoryRiskMapProps = Omit<
  GetProps<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>,
  'path'
>

/**
 * get current risk for all categories
 */
export const GetCategoryRiskMap = (props: GetCategoryRiskMapProps) => (
  <Get<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>
    path="/heatmap/category-risks"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetCategoryRiskMapProps = Omit<
  UseGetProps<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>,
  'path'
>

/**
 * get current risk for all categories
 */
export const useGetCategoryRiskMap = (props: UseGetCategoryRiskMapProps) =>
  useGet<RestResponseCategoryRisksDTO, unknown, GetCategoryRiskMapQueryParams, void>(`/heatmap/category-risks`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface GetEnvServiceRisksQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetEnvServiceRisksProps = Omit<
  GetProps<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>,
  'path'
>

/**
 * get current risks for each env/service combination
 */
export const GetEnvServiceRisks = (props: GetEnvServiceRisksProps) => (
  <Get<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>
    path="/heatmap/env-service-risks"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetEnvServiceRisksProps = Omit<
  UseGetProps<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>,
  'path'
>

/**
 * get current risks for each env/service combination
 */
export const useGetEnvServiceRisks = (props: UseGetEnvServiceRisksProps) =>
  useGet<RestResponseListEnvServiceRiskDTO, unknown, GetEnvServiceRisksQueryParams, void>(
    `/heatmap/env-service-risks`,
    { base: getConfig('cv/api'), ...props }
  )

export interface GetVerificationJobQueryParams {
  accountId?: string
  identifier?: string
}

export type GetVerificationJobProps = Omit<
  GetProps<RestResponseVerificationJobDTO, unknown, GetVerificationJobQueryParams, void>,
  'path'
>

/**
 * gets the verification job for an identifier
 */
export const GetVerificationJob = (props: GetVerificationJobProps) => (
  <Get<RestResponseVerificationJobDTO, unknown, GetVerificationJobQueryParams, void>
    path="/verification-job"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationJobProps = Omit<
  UseGetProps<RestResponseVerificationJobDTO, unknown, GetVerificationJobQueryParams, void>,
  'path'
>

/**
 * gets the verification job for an identifier
 */
export const useGetVerificationJob = (props: UseGetVerificationJobProps) =>
  useGet<RestResponseVerificationJobDTO, unknown, GetVerificationJobQueryParams, void>(`/verification-job`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface SaveVerificationJobQueryParams {
  accountId?: string
}

export type SaveVerificationJobProps = Omit<
  MutateProps<void, void, SaveVerificationJobQueryParams, VerificationJobDTO, void>,
  'path' | 'verb'
>

/**
 * upserts a verification job for an identifier
 */
export const SaveVerificationJob = (props: SaveVerificationJobProps) => (
  <Mutate<void, void, SaveVerificationJobQueryParams, VerificationJobDTO, void>
    verb="PUT"
    path="/verification-job"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveVerificationJobProps = Omit<
  UseMutateProps<void, void, SaveVerificationJobQueryParams, VerificationJobDTO, void>,
  'path' | 'verb'
>

/**
 * upserts a verification job for an identifier
 */
export const useSaveVerificationJob = (props: UseSaveVerificationJobProps) =>
  useMutate<void, void, SaveVerificationJobQueryParams, VerificationJobDTO, void>('PUT', `/verification-job`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface DeleteVerificationJobQueryParams {
  accountId?: string
  identifier?: string
}

export type DeleteVerificationJobProps = Omit<
  MutateProps<void, void, DeleteVerificationJobQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes a verification job for an identifier
 */
export const DeleteVerificationJob = (props: DeleteVerificationJobProps) => (
  <Mutate<void, void, DeleteVerificationJobQueryParams, void, void>
    verb="DELETE"
    path="/verification-job"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteVerificationJobProps = Omit<
  UseMutateProps<void, void, DeleteVerificationJobQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * deletes a verification job for an identifier
 */
export const useDeleteVerificationJob = (props: UseDeleteVerificationJobProps) =>
  useMutate<void, void, DeleteVerificationJobQueryParams, void, void>('DELETE', `/verification-job`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface GetVerificationJobsQueryParams {
  accountId?: string
  projectIdentifier?: string
  orgIdentifier?: string
}

export type GetVerificationJobsProps = Omit<
  GetProps<RestResponseListVerificationJobDTO, unknown, GetVerificationJobsQueryParams, void>,
  'path'
>

/**
 * lists all verification jobs for an identifier
 */
export const GetVerificationJobs = (props: GetVerificationJobsProps) => (
  <Get<RestResponseListVerificationJobDTO, unknown, GetVerificationJobsQueryParams, void>
    path="/verification-job/list"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationJobsProps = Omit<
  UseGetProps<RestResponseListVerificationJobDTO, unknown, GetVerificationJobsQueryParams, void>,
  'path'
>

/**
 * lists all verification jobs for an identifier
 */
export const useGetVerificationJobs = (props: UseGetVerificationJobsProps) =>
  useGet<RestResponseListVerificationJobDTO, unknown, GetVerificationJobsQueryParams, void>(`/verification-job/list`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface GetAnomalousMetricDashboardDataQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  page?: number
  size?: number
}

export type GetAnomalousMetricDashboardDataProps = Omit<
  GetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>,
  'path'
>

/**
 * get anomalous time series data in a given time range
 */
export const GetAnomalousMetricDashboardData = (props: GetAnomalousMetricDashboardDataProps) => (
  <Get<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>
    path="/timeseries-dashboard/anomalous-metric-data"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAnomalousMetricDashboardDataProps = Omit<
  UseGetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>,
  'path'
>

/**
 * get anomalous time series data in a given time range
 */
export const useGetAnomalousMetricDashboardData = (props: UseGetAnomalousMetricDashboardDataProps) =>
  useGet<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetAnomalousMetricDashboardDataQueryParams, void>(
    `/timeseries-dashboard/anomalous-metric-data`,
    { base: getConfig('cv/api'), ...props }
  )

export interface GetMetricDataQueryParams {
  accountId: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  page?: number
  size?: number
}

export type GetMetricDataProps = Omit<
  GetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>,
  'path'
>

/**
 * get all time series data in a given time range
 */
export const GetMetricData = (props: GetMetricDataProps) => (
  <Get<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>
    path="/timeseries-dashboard/metric-data"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricDataProps = Omit<
  UseGetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>,
  'path'
>

/**
 * get all time series data in a given time range
 */
export const useGetMetricData = (props: UseGetMetricDataProps) =>
  useGet<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetMetricDataQueryParams, void>(
    `/timeseries-dashboard/metric-data`,
    { base: getConfig('cv/api'), ...props }
  )

export interface GetAllLogsQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  page?: number
  size?: number
}

export type GetAllLogsProps = Omit<
  GetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>,
  'path'
>

/**
 * get all logs for a time range
 */
export const GetAllLogs = (props: GetAllLogsProps) => (
  <Get<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>
    path="/log-dashboard/all-logs"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllLogsProps = Omit<
  UseGetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>,
  'path'
>

/**
 * get all logs for a time range
 */
export const useGetAllLogs = (props: UseGetAllLogsProps) =>
  useGet<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsQueryParams, void>(`/log-dashboard/all-logs`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface GetAnomalousLogsQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
  page?: number
  size?: number
}

export type GetAnomalousLogsProps = Omit<
  GetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>,
  'path'
>

/**
 * get anomalous logs for a time range
 */
export const GetAnomalousLogs = (props: GetAnomalousLogsProps) => (
  <Get<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>
    path="/log-dashboard/anomalous-logs"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAnomalousLogsProps = Omit<
  UseGetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>,
  'path'
>

/**
 * get anomalous logs for a time range
 */
export const useGetAnomalousLogs = (props: UseGetAnomalousLogsProps) =>
  useGet<RestResponsePageAnalyzedLogDataDTO, unknown, GetAnomalousLogsQueryParams, void>(
    `/log-dashboard/anomalous-logs`,
    { base: getConfig('cv/api'), ...props }
  )

export interface GetTagCountQueryParams {
  accountId?: string
  projectIdentifier: string
  orgIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoringCategory?: string
  startTime: number
  endTime: number
}

export type GetTagCountProps = Omit<
  GetProps<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>,
  'path'
>

/**
 * get a sorted tag vs logs list
 */
export const GetTagCount = (props: GetTagCountProps) => (
  <Get<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>
    path="/log-dashboard/log-count-by-tags"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetTagCountProps = Omit<
  UseGetProps<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>,
  'path'
>

/**
 * get a sorted tag vs logs list
 */
export const useGetTagCount = (props: UseGetTagCountProps) =>
  useGet<RestResponseSortedSetLogDataByTag, unknown, GetTagCountQueryParams, void>(`/log-dashboard/log-count-by-tags`, {
    base: getConfig('cv/api'),
    ...props
  })

export interface GetDeploymentTimeSeriesQueryParams {
  accountId?: string
  anomalousMetricsOnly?: boolean
  hostName?: string
  pageNumber?: number
}

export interface GetDeploymentTimeSeriesPathParams {
  verificationJobInstanceId: string
}

export type GetDeploymentTimeSeriesProps = Omit<
  GetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >,
  'path'
> &
  GetDeploymentTimeSeriesPathParams

/**
 * get metrics for given verificationJob
 */
export const GetDeploymentTimeSeries = ({ verificationJobInstanceId, ...props }: GetDeploymentTimeSeriesProps) => (
  <Get<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >
    path="/deployment-time-series-analysis/${verificationJobInstanceId}"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentTimeSeriesProps = Omit<
  UseGetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >,
  'path'
> &
  GetDeploymentTimeSeriesPathParams

/**
 * get metrics for given verificationJob
 */
export const useGetDeploymentTimeSeries = ({ verificationJobInstanceId, ...props }: UseGetDeploymentTimeSeriesProps) =>
  useGet<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >(
    (paramsInPath: GetDeploymentTimeSeriesPathParams) =>
      `/deployment-time-series-analysis/${paramsInPath.verificationJobInstanceId}`,
    { base: getConfig('cv/api'), pathParams: { verificationJobInstanceId }, ...props }
  )

export interface GetDeploymentLogAnalysesQueryParams {
  accountId?: string
  label?: number
  pageNumber?: number
  hostName?: string
}

export interface GetDeploymentLogAnalysesPathParams {
  verificationJobInstanceId: string
}

export type GetDeploymentLogAnalysesProps = Omit<
  GetProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >,
  'path'
> &
  GetDeploymentLogAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const GetDeploymentLogAnalyses = ({ verificationJobInstanceId, ...props }: GetDeploymentLogAnalysesProps) => (
  <Get<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >
    path="/deployment-log-analysis/${verificationJobInstanceId}"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentLogAnalysesProps = Omit<
  UseGetProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >,
  'path'
> &
  GetDeploymentLogAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const useGetDeploymentLogAnalyses = ({
  verificationJobInstanceId,
  ...props
}: UseGetDeploymentLogAnalysesProps) =>
  useGet<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysesQueryParams,
    GetDeploymentLogAnalysesPathParams
  >(
    (paramsInPath: GetDeploymentLogAnalysesPathParams) =>
      `/deployment-log-analysis/${paramsInPath.verificationJobInstanceId}`,
    { base: getConfig('cv/api'), pathParams: { verificationJobInstanceId }, ...props }
  )

export interface GetClusterChartAnalysesQueryParams {
  accountId?: string
  hostName?: string
}

export interface GetClusterChartAnalysesPathParams {
  verificationJobInstanceId: string
}

export type GetClusterChartAnalysesProps = Omit<
  GetProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >,
  'path'
> &
  GetClusterChartAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const GetClusterChartAnalyses = ({ verificationJobInstanceId, ...props }: GetClusterChartAnalysesProps) => (
  <Get<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >
    path="/deployment-log-analysis/${verificationJobInstanceId}/clusters"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetClusterChartAnalysesProps = Omit<
  UseGetProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >,
  'path'
> &
  GetClusterChartAnalysesPathParams

/**
 * get logs for given verificationJob
 */
export const useGetClusterChartAnalyses = ({ verificationJobInstanceId, ...props }: UseGetClusterChartAnalysesProps) =>
  useGet<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetClusterChartAnalysesQueryParams,
    GetClusterChartAnalysesPathParams
  >(
    (paramsInPath: GetClusterChartAnalysesPathParams) =>
      `/deployment-log-analysis/${paramsInPath.verificationJobInstanceId}/clusters`,
    { base: getConfig('cv/api'), pathParams: { verificationJobInstanceId }, ...props }
  )

export interface GetRecentDeploymentActivityVerificationsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetRecentDeploymentActivityVerificationsProps = Omit<
  GetProps<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >,
  'path'
>

/**
 * get recent deployment activity verification
 */
export const GetRecentDeploymentActivityVerifications = (props: GetRecentDeploymentActivityVerificationsProps) => (
  <Get<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >
    path="/activity/recent-deployment-activity-verifications"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetRecentDeploymentActivityVerificationsProps = Omit<
  UseGetProps<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >,
  'path'
>

/**
 * get recent deployment activity verification
 */
export const useGetRecentDeploymentActivityVerifications = (props: UseGetRecentDeploymentActivityVerificationsProps) =>
  useGet<
    RestResponseListDeploymentActivityVerificationResultDTO,
    unknown,
    GetRecentDeploymentActivityVerificationsQueryParams,
    void
  >(`/activity/recent-deployment-activity-verifications`, { base: getConfig('cv/api'), ...props })

export interface GetVerificationInstancesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier: string
}

export interface GetVerificationInstancesPathParams {
  deploymentTag: string
}

export type GetVerificationInstancesProps = Omit<
  GetProps<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >,
  'path'
> &
  GetVerificationInstancesPathParams

/**
 * get deployment activities for given build tag
 */
export const GetVerificationInstances = ({ deploymentTag, ...props }: GetVerificationInstancesProps) => (
  <Get<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >
    path="/activity/deployment-activity-verifications/${deploymentTag}"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationInstancesProps = Omit<
  UseGetProps<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >,
  'path'
> &
  GetVerificationInstancesPathParams

/**
 * get deployment activities for given build tag
 */
export const useGetVerificationInstances = ({ deploymentTag, ...props }: UseGetVerificationInstancesProps) =>
  useGet<
    RestResponseDeploymentActivityResultDTO,
    unknown,
    GetVerificationInstancesQueryParams,
    GetVerificationInstancesPathParams
  >(
    (paramsInPath: GetVerificationInstancesPathParams) =>
      `/activity/deployment-activity-verifications/${paramsInPath.deploymentTag}`,
    { base: getConfig('cv/api'), pathParams: { deploymentTag }, ...props }
  )

export interface GetVerificationsPopoverSummaryQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier: string
}

export interface GetVerificationsPopoverSummaryPathParams {
  deploymentTag: string
}

export type GetVerificationsPopoverSummaryProps = Omit<
  GetProps<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >,
  'path'
> &
  GetVerificationsPopoverSummaryPathParams

/**
 * get deployment activities summary for given build tag
 */
export const GetVerificationsPopoverSummary = ({ deploymentTag, ...props }: GetVerificationsPopoverSummaryProps) => (
  <Get<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >
    path="/activity/deployment-activity-verifications-popover-summary/${deploymentTag}"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerificationsPopoverSummaryProps = Omit<
  UseGetProps<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >,
  'path'
> &
  GetVerificationsPopoverSummaryPathParams

/**
 * get deployment activities summary for given build tag
 */
export const useGetVerificationsPopoverSummary = ({
  deploymentTag,
  ...props
}: UseGetVerificationsPopoverSummaryProps) =>
  useGet<
    RestResponseDeploymentActivityPopoverResultDTO,
    unknown,
    GetVerificationsPopoverSummaryQueryParams,
    GetVerificationsPopoverSummaryPathParams
  >(
    (paramsInPath: GetVerificationsPopoverSummaryPathParams) =>
      `/activity/deployment-activity-verifications-popover-summary/${paramsInPath.deploymentTag}`,
    { base: getConfig('cv/api'), pathParams: { deploymentTag }, ...props }
  )

export interface GetRecentActivityVerificationResultsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  size?: number
}

export type GetRecentActivityVerificationResultsProps = Omit<
  GetProps<
    RestResponseListActivityVerificationResultDTO,
    unknown,
    GetRecentActivityVerificationResultsQueryParams,
    void
  >,
  'path'
>

/**
 * get a list of recent activity verification results
 */
export const GetRecentActivityVerificationResults = (props: GetRecentActivityVerificationResultsProps) => (
  <Get<RestResponseListActivityVerificationResultDTO, unknown, GetRecentActivityVerificationResultsQueryParams, void>
    path="/activity/recent-activity-verifications"
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetRecentActivityVerificationResultsProps = Omit<
  UseGetProps<
    RestResponseListActivityVerificationResultDTO,
    unknown,
    GetRecentActivityVerificationResultsQueryParams,
    void
  >,
  'path'
>

/**
 * get a list of recent activity verification results
 */
export const useGetRecentActivityVerificationResults = (props: UseGetRecentActivityVerificationResultsProps) =>
  useGet<RestResponseListActivityVerificationResultDTO, unknown, GetRecentActivityVerificationResultsQueryParams, void>(
    `/activity/recent-activity-verifications`,
    { base: getConfig('cv/api'), ...props }
  )
