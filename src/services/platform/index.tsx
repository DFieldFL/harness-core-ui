/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, mutateUsingFetch, GetUsingFetchProps, MutateUsingFetchProps } from '../config'
export interface AuditEventDTO {
  auditId?: string
  insertId: string
  resourceScope: ResourceScopeDTO
  httpRequestInfo?: HttpRequestInfo
  requestMetadata?: RequestMetadata
  timestamp: number
  authenticationInfo: AuthenticationInfoDTO
  module: 'CD' | 'CI' | 'CORE' | 'CV' | 'CF' | 'CE'
  environment?: Environment
  resource: ResourceDTO
  yamlDiffRecord?: YamlDiffRecordDTO
  action: 'CREATE' | 'UPDATE' | 'RESTORE' | 'DELETE' | 'INVITE' | 'RESEND_INVITE' | 'REVOKE_INVITE'
  auditEventData?: AuditEventData
  internalInfo?: {
    [key: string]: string
  }
}

export interface AuditEventData {
  type: string
}

export interface AuthenticationInfoDTO {
  principal: Principal
  labels?: {
    [key: string]: string
  }
}

export interface Environment {
  type: 'PreProduction' | 'Production'
  identifier: string
}

export interface HttpRequestInfo {
  requestMethod?: string
}

export interface Page {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: { [key: string]: any }[]
  pageIndex?: number
  empty?: boolean
}

export interface PageAuditEventDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: AuditEventDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface Principal {
  type: 'USER' | 'SYSTEM' | 'API_KEY'
  identifier: string
}

export interface RequestMetadata {
  clientIP?: string
}

export interface ResourceDTO {
  type: string
  identifier: string
  labels?: {
    [key: string]: string
  }
}

export interface ResourceScopeDTO {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  labels?: {
    [key: string]: string
  }
}

export interface Response {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: { [key: string]: any }
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ResponsePageAuditEventDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageAuditEventDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface RoleBinding {
  roleIdentifier?: string
  resourceGroupIdentifier?: string
}

export type UserInviteAuditEventData = AuditEventData & {
  roleBindings?: RoleBinding[]
}

export interface YamlDiffRecordDTO {
  oldYaml?: string
  newYaml?: string
}

export interface Failure {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
  message?: string
  correlationId?: string
  errors?: ValidationError[]
}

export interface ValidationError {
  fieldId?: string
  error?: string
}

export interface Error {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
  message?: string
  correlationId?: string
  detailedMessage?: string
  responseMessages?: ResponseMessage[]
}

export interface ResponseMessage {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
  level?: 'INFO' | 'ERROR'
  message?: string
  exception?: Throwable
  failureTypes?: (
    | 'EXPIRED'
    | 'DELEGATE_PROVISIONING'
    | 'CONNECTIVITY'
    | 'AUTHENTICATION'
    | 'VERIFICATION_FAILURE'
    | 'APPLICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'TIMEOUT_ERROR'
  )[]
}

export interface StackTraceElement {
  methodName?: string
  fileName?: string
  lineNumber?: number
  className?: string
  nativeMethod?: boolean
}

export interface Throwable {
  cause?: Throwable
  stackTrace?: StackTraceElement[]
  message?: string
  localizedMessage?: string
  suppressed?: Throwable[]
}

export interface AuditFilterProperties {
  scopes?: ResourceScopeDTO[]
  resources?: ResourceDTO[]
  modules?: ('CD' | 'CI' | 'CORE' | 'CV' | 'CF' | 'CE')[]
  actions?: ('CREATE' | 'UPDATE' | 'RESTORE' | 'DELETE' | 'INVITE' | 'RESEND_INVITE' | 'REVOKE_INVITE')[]
  environments?: Environment[]
  principals?: Principal[]
  startTime?: number
  endTime?: number
  tags?: {
    [key: string]: string
  }
  filterType?: 'Connector' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
}

export interface AuditSettingsDTO {
  retentionPeriodInMonths: number
}

export interface ResponseAuditSettingsDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: AuditSettingsDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ResponseYamlDiffRecordDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: YamlDiffRecordDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface FilterDTO {
  name: string
  identifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  filterProperties: FilterProperties
  filterVisibility?: 'EveryOne' | 'OnlyCreator'
}

export interface FilterProperties {
  tags?: {
    [key: string]: string
  }
  filterType?: 'Connector' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
}

export interface ResponseFilterDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: FilterDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ResponseBoolean {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: boolean
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface PageFilterDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: FilterDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface ResponsePageFilterDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageFilterDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export type EmailSettingDTO = NotificationSettingDTO & {
  subject: string
  body: string
}

export type MSTeamSettingDTO = NotificationSettingDTO & {}

export interface NotificationSettingDTO {
  accountId: string
  recipient: string
  notificationId: string
  type?: 'EMAIL' | 'SLACK' | 'PAGERDUTY' | 'MSTEAMS'
}

export type PagerDutySettingDTO = NotificationSettingDTO & {}

export type SlackSettingDTO = NotificationSettingDTO & {}

export interface NotificationDTO {
  id?: string
  accountIdentifier?: string
  team?: 'OTHER' | 'CD' | 'CV' | 'CI' | 'FFM' | 'PIPELINE' | 'PL' | 'UNRECOGNIZED'
  channelType?: 'EMAIL' | 'SLACK' | 'PAGERDUTY' | 'MSTEAMS'
  processingResponses?: boolean[]
  retries?: number
}

export interface ResponseNotificationDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: NotificationDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface PageNotificationDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: NotificationDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface ResponsePageNotificationDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageNotificationDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface AccountNotificationSettingDTO {
  accountId: string
  sendNotificationViaDelegate?: boolean
  smtpConfig?: SmtpConfig
}

export interface ResponseOptionalAccountNotificationSettingDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: AccountNotificationSettingDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface SmtpConfig {
  type?: string
  host?: string
  port?: number
  fromAddress?: string
  useSSL?: boolean
  username?: string
  password?: string[]
  encryptedPassword?: string
}

export interface ResponseTemplateDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: TemplateDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface TemplateDTO {
  identifier?: string
  team?: 'OTHER' | 'CD' | 'CV' | 'CI' | 'FFM' | 'PIPELINE' | 'PL' | 'UNRECOGNIZED'
  createdAt?: number
  lastModifiedAt?: number
  file?: string[]
}

export interface ResponseListTemplateDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: TemplateDTO[]
  metaData?: { [key: string]: any }
  correlationId?: string
}

export type DynamicResourceSelector = ResourceSelector & {
  resourceType: string
}

export interface ResourceGroupDTO {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  identifier?: string
  name?: string
  resourceSelectors?: ResourceSelector[]
  fullScopeSelected?: boolean
  tags?: {
    [key: string]: string
  }
  description?: string
  color?: string
}

export interface ResourceGroupResponse {
  resourceGroup: ResourceGroupDTO
  createdAt?: number
  lastModifiedAt?: number
  harnessManaged?: boolean
}

export interface ResourceSelector {
  [key: string]: any
}

export interface ResponseResourceGroupResponse {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: ResourceGroupResponse
  metaData?: { [key: string]: any }
  correlationId?: string
}

export type StaticResourceSelector = ResourceSelector & {
  identifiers?: string[]
  resourceType: string
}

export interface ResourceGroupRequest {
  resourcegroup: ResourceGroupDTO
}

export interface PageResourceGroupResponse {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: ResourceGroupResponse[]
  pageIndex?: number
  empty?: boolean
}

export interface ResponsePageResourceGroupResponse {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageResourceGroupResponse
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ResourceType {
  name?: string
  validatorTypes?: ('STATIC' | 'DYNAMIC')[]
}

export interface ResourceTypeDTO {
  resourceTypes?: ResourceType[]
}

export interface ResponseResourceTypeDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: ResourceTypeDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export type ResourceGroupRequestRequestBody = ResourceGroupRequest

export type FilterDTORequestBody = FilterDTO

export type PutTemplateRequestBody = void

export interface GetAuditListQueryParams {
  accountIdentifier: string
  pageIndex?: number
  pageSize?: number
  sortOrders?: string[]
}

export type GetAuditListProps = Omit<
  MutateProps<ResponsePageAuditEventDTO, Failure | Error, GetAuditListQueryParams, AuditFilterProperties, void>,
  'path' | 'verb'
>

/**
 * Get Audit list
 */
export const GetAuditList = (props: GetAuditListProps) => (
  <Mutate<ResponsePageAuditEventDTO, Failure | Error, GetAuditListQueryParams, AuditFilterProperties, void>
    verb="POST"
    path="/audits/list"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetAuditListProps = Omit<
  UseMutateProps<ResponsePageAuditEventDTO, Failure | Error, GetAuditListQueryParams, AuditFilterProperties, void>,
  'path' | 'verb'
>

/**
 * Get Audit list
 */
export const useGetAuditList = (props: UseGetAuditListProps) =>
  useMutate<ResponsePageAuditEventDTO, Failure | Error, GetAuditListQueryParams, AuditFilterProperties, void>(
    'POST',
    `/audits/list`,
    { base: getConfig('notifications/api'), ...props }
  )

/**
 * Get Audit list
 */
export const getAuditListPromise = (
  props: MutateUsingFetchProps<
    ResponsePageAuditEventDTO,
    Failure | Error,
    GetAuditListQueryParams,
    AuditFilterProperties,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponsePageAuditEventDTO, Failure | Error, GetAuditListQueryParams, AuditFilterProperties, void>(
    'POST',
    getConfig('notifications/api'),
    `/audits/list`,
    props,
    signal
  )

export interface PutAuditSettingsQueryParams {
  accountIdentifier: string
}

export type PutAuditSettingsProps = Omit<
  MutateProps<ResponseAuditSettingsDTO, Failure | Error, PutAuditSettingsQueryParams, AuditSettingsDTO, void>,
  'path' | 'verb'
>

/**
 * Update Audit Settings for an account
 */
export const PutAuditSettings = (props: PutAuditSettingsProps) => (
  <Mutate<ResponseAuditSettingsDTO, Failure | Error, PutAuditSettingsQueryParams, AuditSettingsDTO, void>
    verb="PUT"
    path="/auditSettings"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UsePutAuditSettingsProps = Omit<
  UseMutateProps<ResponseAuditSettingsDTO, Failure | Error, PutAuditSettingsQueryParams, AuditSettingsDTO, void>,
  'path' | 'verb'
>

/**
 * Update Audit Settings for an account
 */
export const usePutAuditSettings = (props: UsePutAuditSettingsProps) =>
  useMutate<ResponseAuditSettingsDTO, Failure | Error, PutAuditSettingsQueryParams, AuditSettingsDTO, void>(
    'PUT',
    `/auditSettings`,
    { base: getConfig('notifications/api'), ...props }
  )

/**
 * Update Audit Settings for an account
 */
export const putAuditSettingsPromise = (
  props: MutateUsingFetchProps<
    ResponseAuditSettingsDTO,
    Failure | Error,
    PutAuditSettingsQueryParams,
    AuditSettingsDTO,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseAuditSettingsDTO, Failure | Error, PutAuditSettingsQueryParams, AuditSettingsDTO, void>(
    'PUT',
    getConfig('notifications/api'),
    `/auditSettings`,
    props,
    signal
  )

export interface GetYamlDiffQueryParams {
  accountIdentifier: string
  auditId: string
}

export type GetYamlDiffProps = Omit<
  GetProps<ResponseYamlDiffRecordDTO, Failure | Error, GetYamlDiffQueryParams, void>,
  'path'
>

/**
 * Get Yaml Diff for an audit
 */
export const GetYamlDiff = (props: GetYamlDiffProps) => (
  <Get<ResponseYamlDiffRecordDTO, Failure | Error, GetYamlDiffQueryParams, void>
    path="/auditYaml"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetYamlDiffProps = Omit<
  UseGetProps<ResponseYamlDiffRecordDTO, Failure | Error, GetYamlDiffQueryParams, void>,
  'path'
>

/**
 * Get Yaml Diff for an audit
 */
export const useGetYamlDiff = (props: UseGetYamlDiffProps) =>
  useGet<ResponseYamlDiffRecordDTO, Failure | Error, GetYamlDiffQueryParams, void>(`/auditYaml`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * Get Yaml Diff for an audit
 */
export const getYamlDiffPromise = (
  props: GetUsingFetchProps<ResponseYamlDiffRecordDTO, Failure | Error, GetYamlDiffQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseYamlDiffRecordDTO, Failure | Error, GetYamlDiffQueryParams, void>(
    getConfig('notifications/api'),
    `/auditYaml`,
    props,
    signal
  )

export interface GetFilterQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  type: 'Connector' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
}

export interface GetFilterPathParams {
  identifier: string
}

export type GetFilterProps = Omit<
  GetProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>,
  'path'
> &
  GetFilterPathParams

/**
 * Get Filter
 */
export const GetFilter = ({ identifier, ...props }: GetFilterProps) => (
  <Get<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>
    path="/filters/${identifier}"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetFilterProps = Omit<
  UseGetProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>,
  'path'
> &
  GetFilterPathParams

/**
 * Get Filter
 */
export const useGetFilter = ({ identifier, ...props }: UseGetFilterProps) =>
  useGet<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>(
    (paramsInPath: GetFilterPathParams) => `/filters/${paramsInPath.identifier}`,
    { base: getConfig('notifications/api'), pathParams: { identifier }, ...props }
  )

/**
 * Get Filter
 */
export const getFilterPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams> & {
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>(
    getConfig('notifications/api'),
    `/filters/${identifier}`,
    props,
    signal
  )

export interface DeleteFilterQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  type: 'Connector' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
}

export type DeleteFilterProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a filter
 */
export const DeleteFilter = (props: DeleteFilterProps) => (
  <Mutate<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>
    verb="DELETE"
    path="/filters"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseDeleteFilterProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a filter
 */
export const useDeleteFilter = (props: UseDeleteFilterProps) =>
  useMutate<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>('DELETE', `/filters`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * Delete a filter
 */
export const deleteFilterPromise = (
  props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>(
    'DELETE',
    getConfig('notifications/api'),
    `/filters`,
    props,
    signal
  )

export interface GetFilterListQueryParams {
  pageIndex?: number
  pageSize?: number
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  type: 'Connector' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
}

export type GetFilterListProps = Omit<
  GetProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
  'path'
>

/**
 * Get Filter
 */
export const GetFilterList = (props: GetFilterListProps) => (
  <Get<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>
    path="/filters"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetFilterListProps = Omit<
  UseGetProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
  'path'
>

/**
 * Get Filter
 */
export const useGetFilterList = (props: UseGetFilterListProps) =>
  useGet<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>(`/filters`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * Get Filter
 */
export const getFilterListPromise = (
  props: GetUsingFetchProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>(
    getConfig('notifications/api'),
    `/filters`,
    props,
    signal
  )

export interface PostFilterQueryParams {
  accountIdentifier: string
}

export type PostFilterProps = Omit<
  MutateProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Create a Filter
 */
export const PostFilter = (props: PostFilterProps) => (
  <Mutate<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>
    verb="POST"
    path="/filters"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UsePostFilterProps = Omit<
  UseMutateProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Create a Filter
 */
export const usePostFilter = (props: UsePostFilterProps) =>
  useMutate<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>('POST', `/filters`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * Create a Filter
 */
export const postFilterPromise = (
  props: MutateUsingFetchProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>(
    'POST',
    getConfig('notifications/api'),
    `/filters`,
    props,
    signal
  )

export interface UpdateFilterQueryParams {
  accountIdentifier?: string
}

export type UpdateFilterProps = Omit<
  MutateProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a Filter
 */
export const UpdateFilter = (props: UpdateFilterProps) => (
  <Mutate<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>
    verb="PUT"
    path="/filters"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseUpdateFilterProps = Omit<
  UseMutateProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a Filter
 */
export const useUpdateFilter = (props: UseUpdateFilterProps) =>
  useMutate<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>(
    'PUT',
    `/filters`,
    { base: getConfig('notifications/api'), ...props }
  )

/**
 * Update a Filter
 */
export const updateFilterPromise = (
  props: MutateUsingFetchProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>(
    'PUT',
    getConfig('notifications/api'),
    `/filters`,
    props,
    signal
  )

export type TestNotificationSettingProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, void, NotificationSettingDTO, void>,
  'path' | 'verb'
>

/**
 * Test notification setting
 */
export const TestNotificationSetting = (props: TestNotificationSettingProps) => (
  <Mutate<ResponseBoolean, Failure | Error, void, NotificationSettingDTO, void>
    verb="POST"
    path="/channels/test"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseTestNotificationSettingProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, void, NotificationSettingDTO, void>,
  'path' | 'verb'
>

/**
 * Test notification setting
 */
export const useTestNotificationSetting = (props: UseTestNotificationSettingProps) =>
  useMutate<ResponseBoolean, Failure | Error, void, NotificationSettingDTO, void>('POST', `/channels/test`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * Test notification setting
 */
export const testNotificationSettingPromise = (
  props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, void, NotificationSettingDTO, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseBoolean, Failure | Error, void, NotificationSettingDTO, void>(
    'POST',
    getConfig('notifications/api'),
    `/channels/test`,
    props,
    signal
  )

export interface GetNotificationPathParams {
  id: string
}

export type GetNotificationProps = Omit<
  GetProps<ResponseNotificationDTO, Failure | Error, void, GetNotificationPathParams>,
  'path'
> &
  GetNotificationPathParams

/**
 * Get details of a notification
 */
export const GetNotification = ({ id, ...props }: GetNotificationProps) => (
  <Get<ResponseNotificationDTO, Failure | Error, void, GetNotificationPathParams>
    path="/notifications/${id}"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetNotificationProps = Omit<
  UseGetProps<ResponseNotificationDTO, Failure | Error, void, GetNotificationPathParams>,
  'path'
> &
  GetNotificationPathParams

/**
 * Get details of a notification
 */
export const useGetNotification = ({ id, ...props }: UseGetNotificationProps) =>
  useGet<ResponseNotificationDTO, Failure | Error, void, GetNotificationPathParams>(
    (paramsInPath: GetNotificationPathParams) => `/notifications/${paramsInPath.id}`,
    { base: getConfig('notifications/api'), pathParams: { id }, ...props }
  )

/**
 * Get details of a notification
 */
export const getNotificationPromise = (
  {
    id,
    ...props
  }: GetUsingFetchProps<ResponseNotificationDTO, Failure | Error, void, GetNotificationPathParams> & { id: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseNotificationDTO, Failure | Error, void, GetNotificationPathParams>(
    getConfig('notifications/api'),
    `/notifications/${id}`,
    props,
    signal
  )

export interface ListNotificationsQueryParams {
  team?: 'OTHER' | 'CD' | 'CV' | 'CI' | 'FFM' | 'PIPELINE' | 'PL' | 'UNRECOGNIZED'
  pageIndex?: number
  pageSize?: number
  sortOrders?: string[]
}

export type ListNotificationsProps = Omit<
  GetProps<ResponsePageNotificationDTO, Failure | Error, ListNotificationsQueryParams, void>,
  'path'
>

/**
 * List notifications
 */
export const ListNotifications = (props: ListNotificationsProps) => (
  <Get<ResponsePageNotificationDTO, Failure | Error, ListNotificationsQueryParams, void>
    path="/notifications"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseListNotificationsProps = Omit<
  UseGetProps<ResponsePageNotificationDTO, Failure | Error, ListNotificationsQueryParams, void>,
  'path'
>

/**
 * List notifications
 */
export const useListNotifications = (props: UseListNotificationsProps) =>
  useGet<ResponsePageNotificationDTO, Failure | Error, ListNotificationsQueryParams, void>(`/notifications`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * List notifications
 */
export const listNotificationsPromise = (
  props: GetUsingFetchProps<ResponsePageNotificationDTO, Failure | Error, ListNotificationsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageNotificationDTO, Failure | Error, ListNotificationsQueryParams, void>(
    getConfig('notifications/api'),
    `/notifications`,
    props,
    signal
  )

export interface GetNotificationSettingQueryParams {
  accountIdentifier: string
}

export type GetNotificationSettingProps = Omit<
  GetProps<ResponseOptionalAccountNotificationSettingDTO, Failure | Error, GetNotificationSettingQueryParams, void>,
  'path'
>

/**
 * Get NotificationSetting
 */
export const GetNotificationSetting = (props: GetNotificationSettingProps) => (
  <Get<ResponseOptionalAccountNotificationSettingDTO, Failure | Error, GetNotificationSettingQueryParams, void>
    path="/settings"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetNotificationSettingProps = Omit<
  UseGetProps<ResponseOptionalAccountNotificationSettingDTO, Failure | Error, GetNotificationSettingQueryParams, void>,
  'path'
>

/**
 * Get NotificationSetting
 */
export const useGetNotificationSetting = (props: UseGetNotificationSettingProps) =>
  useGet<ResponseOptionalAccountNotificationSettingDTO, Failure | Error, GetNotificationSettingQueryParams, void>(
    `/settings`,
    { base: getConfig('notifications/api'), ...props }
  )

/**
 * Get NotificationSetting
 */
export const getNotificationSettingPromise = (
  props: GetUsingFetchProps<
    ResponseOptionalAccountNotificationSettingDTO,
    Failure | Error,
    GetNotificationSettingQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseOptionalAccountNotificationSettingDTO,
    Failure | Error,
    GetNotificationSettingQueryParams,
    void
  >(getConfig('notifications/api'), `/settings`, props, signal)

export interface PostSendNotificationViaDelegateQueryParams {
  accountIdentifier?: string
  SendNotificationViaDelegate?: boolean
}

export type PostSendNotificationViaDelegateProps = Omit<
  MutateProps<
    ResponseOptionalAccountNotificationSettingDTO,
    Failure | Error,
    PostSendNotificationViaDelegateQueryParams,
    void,
    void
  >,
  'path' | 'verb'
>

/**
 * Set sendNotificationViaDelegate
 */
export const PostSendNotificationViaDelegate = (props: PostSendNotificationViaDelegateProps) => (
  <Mutate<
    ResponseOptionalAccountNotificationSettingDTO,
    Failure | Error,
    PostSendNotificationViaDelegateQueryParams,
    void,
    void
  >
    verb="PUT"
    path="/settings"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UsePostSendNotificationViaDelegateProps = Omit<
  UseMutateProps<
    ResponseOptionalAccountNotificationSettingDTO,
    Failure | Error,
    PostSendNotificationViaDelegateQueryParams,
    void,
    void
  >,
  'path' | 'verb'
>

/**
 * Set sendNotificationViaDelegate
 */
export const usePostSendNotificationViaDelegate = (props: UsePostSendNotificationViaDelegateProps) =>
  useMutate<
    ResponseOptionalAccountNotificationSettingDTO,
    Failure | Error,
    PostSendNotificationViaDelegateQueryParams,
    void,
    void
  >('PUT', `/settings`, { base: getConfig('notifications/api'), ...props })

/**
 * Set sendNotificationViaDelegate
 */
export const postSendNotificationViaDelegatePromise = (
  props: MutateUsingFetchProps<
    ResponseOptionalAccountNotificationSettingDTO,
    Failure | Error,
    PostSendNotificationViaDelegateQueryParams,
    void,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseOptionalAccountNotificationSettingDTO,
    Failure | Error,
    PostSendNotificationViaDelegateQueryParams,
    void,
    void
  >('PUT', getConfig('notifications/api'), `/settings`, props, signal)

export interface GetTemplateQueryParams {
  team?: 'OTHER' | 'CD' | 'CV' | 'CI' | 'FFM' | 'PIPELINE' | 'PL' | 'UNRECOGNIZED'
}

export interface GetTemplatePathParams {
  identifier: string
}

export type GetTemplateProps = Omit<
  GetProps<ResponseTemplateDTO, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams>,
  'path'
> &
  GetTemplatePathParams

/**
 * Get template by identifier
 */
export const GetTemplate = ({ identifier, ...props }: GetTemplateProps) => (
  <Get<ResponseTemplateDTO, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams>
    path="/templates/${identifier}"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetTemplateProps = Omit<
  UseGetProps<ResponseTemplateDTO, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams>,
  'path'
> &
  GetTemplatePathParams

/**
 * Get template by identifier
 */
export const useGetTemplate = ({ identifier, ...props }: UseGetTemplateProps) =>
  useGet<ResponseTemplateDTO, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams>(
    (paramsInPath: GetTemplatePathParams) => `/templates/${paramsInPath.identifier}`,
    { base: getConfig('notifications/api'), pathParams: { identifier }, ...props }
  )

/**
 * Get template by identifier
 */
export const getTemplatePromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<ResponseTemplateDTO, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams> & {
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseTemplateDTO, Failure | Error, GetTemplateQueryParams, GetTemplatePathParams>(
    getConfig('notifications/api'),
    `/templates/${identifier}`,
    props,
    signal
  )

export interface PutTemplateQueryParams {
  team: 'OTHER' | 'CD' | 'CV' | 'CI' | 'FFM' | 'PIPELINE' | 'PL' | 'UNRECOGNIZED'
}

export interface PutTemplatePathParams {
  identifier: string
}

export type PutTemplateProps = Omit<
  MutateProps<
    ResponseTemplateDTO,
    Failure | Error,
    PutTemplateQueryParams,
    PutTemplateRequestBody,
    PutTemplatePathParams
  >,
  'path' | 'verb'
> &
  PutTemplatePathParams

/**
 * Update a template
 */
export const PutTemplate = ({ identifier, ...props }: PutTemplateProps) => (
  <Mutate<ResponseTemplateDTO, Failure | Error, PutTemplateQueryParams, PutTemplateRequestBody, PutTemplatePathParams>
    verb="PUT"
    path="/templates/${identifier}"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UsePutTemplateProps = Omit<
  UseMutateProps<
    ResponseTemplateDTO,
    Failure | Error,
    PutTemplateQueryParams,
    PutTemplateRequestBody,
    PutTemplatePathParams
  >,
  'path' | 'verb'
> &
  PutTemplatePathParams

/**
 * Update a template
 */
export const usePutTemplate = ({ identifier, ...props }: UsePutTemplateProps) =>
  useMutate<
    ResponseTemplateDTO,
    Failure | Error,
    PutTemplateQueryParams,
    PutTemplateRequestBody,
    PutTemplatePathParams
  >('PUT', (paramsInPath: PutTemplatePathParams) => `/templates/${paramsInPath.identifier}`, {
    base: getConfig('notifications/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * Update a template
 */
export const putTemplatePromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    ResponseTemplateDTO,
    Failure | Error,
    PutTemplateQueryParams,
    PutTemplateRequestBody,
    PutTemplatePathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseTemplateDTO,
    Failure | Error,
    PutTemplateQueryParams,
    PutTemplateRequestBody,
    PutTemplatePathParams
  >('PUT', getConfig('notifications/api'), `/templates/${identifier}`, props, signal)

export interface DeleteTemplateQueryParams {
  team: 'OTHER' | 'CD' | 'CV' | 'CI' | 'FFM' | 'PIPELINE' | 'PL' | 'UNRECOGNIZED'
}

export type DeleteTemplateProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, DeleteTemplateQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a template
 */
export const DeleteTemplate = (props: DeleteTemplateProps) => (
  <Mutate<ResponseBoolean, Failure | Error, DeleteTemplateQueryParams, string, void>
    verb="DELETE"
    path="/templates"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseDeleteTemplateProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, DeleteTemplateQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a template
 */
export const useDeleteTemplate = (props: UseDeleteTemplateProps) =>
  useMutate<ResponseBoolean, Failure | Error, DeleteTemplateQueryParams, string, void>('DELETE', `/templates`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * Delete a template
 */
export const deleteTemplatePromise = (
  props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteTemplateQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseBoolean, Failure | Error, DeleteTemplateQueryParams, string, void>(
    'DELETE',
    getConfig('notifications/api'),
    `/templates`,
    props,
    signal
  )

export interface GetTemplatesQueryParams {
  team: 'OTHER' | 'CD' | 'CV' | 'CI' | 'FFM' | 'PIPELINE' | 'PL' | 'UNRECOGNIZED'
}

export type GetTemplatesProps = Omit<
  GetProps<ResponseListTemplateDTO, Failure | Error, GetTemplatesQueryParams, void>,
  'path'
>

/**
 * Get templates
 */
export const GetTemplates = (props: GetTemplatesProps) => (
  <Get<ResponseListTemplateDTO, Failure | Error, GetTemplatesQueryParams, void>
    path="/templates"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetTemplatesProps = Omit<
  UseGetProps<ResponseListTemplateDTO, Failure | Error, GetTemplatesQueryParams, void>,
  'path'
>

/**
 * Get templates
 */
export const useGetTemplates = (props: UseGetTemplatesProps) =>
  useGet<ResponseListTemplateDTO, Failure | Error, GetTemplatesQueryParams, void>(`/templates`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * Get templates
 */
export const getTemplatesPromise = (
  props: GetUsingFetchProps<ResponseListTemplateDTO, Failure | Error, GetTemplatesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListTemplateDTO, Failure | Error, GetTemplatesQueryParams, void>(
    getConfig('notifications/api'),
    `/templates`,
    props,
    signal
  )

export type PostTemplateProps = Omit<
  MutateProps<ResponseTemplateDTO, Failure | Error, void, void, void>,
  'path' | 'verb'
>

/**
 * Create a template
 */
export const PostTemplate = (props: PostTemplateProps) => (
  <Mutate<ResponseTemplateDTO, Failure | Error, void, void, void>
    verb="POST"
    path="/templates"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UsePostTemplateProps = Omit<
  UseMutateProps<ResponseTemplateDTO, Failure | Error, void, void, void>,
  'path' | 'verb'
>

/**
 * Create a template
 */
export const usePostTemplate = (props: UsePostTemplateProps) =>
  useMutate<ResponseTemplateDTO, Failure | Error, void, void, void>('POST', `/templates`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * Create a template
 */
export const postTemplatePromise = (
  props: MutateUsingFetchProps<ResponseTemplateDTO, Failure | Error, void, void, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseTemplateDTO, Failure | Error, void, void, void>(
    'POST',
    getConfig('notifications/api'),
    `/templates`,
    props,
    signal
  )

export interface InsertOrUpdateTemplateQueryParams {
  team?: 'OTHER' | 'CD' | 'CV' | 'CI' | 'FFM' | 'PIPELINE' | 'PL' | 'UNRECOGNIZED'
  identifier?: string
  harnessManaged?: boolean
}

export type InsertOrUpdateTemplateProps = Omit<
  MutateProps<ResponseTemplateDTO, Failure | Error, InsertOrUpdateTemplateQueryParams, PutTemplateRequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a template if exists else create
 */
export const InsertOrUpdateTemplate = (props: InsertOrUpdateTemplateProps) => (
  <Mutate<ResponseTemplateDTO, Failure | Error, InsertOrUpdateTemplateQueryParams, PutTemplateRequestBody, void>
    verb="PUT"
    path="/templates/insertOrUpdate"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseInsertOrUpdateTemplateProps = Omit<
  UseMutateProps<ResponseTemplateDTO, Failure | Error, InsertOrUpdateTemplateQueryParams, PutTemplateRequestBody, void>,
  'path' | 'verb'
>

/**
 * Update a template if exists else create
 */
export const useInsertOrUpdateTemplate = (props: UseInsertOrUpdateTemplateProps) =>
  useMutate<ResponseTemplateDTO, Failure | Error, InsertOrUpdateTemplateQueryParams, PutTemplateRequestBody, void>(
    'PUT',
    `/templates/insertOrUpdate`,
    { base: getConfig('notifications/api'), ...props }
  )

/**
 * Update a template if exists else create
 */
export const insertOrUpdateTemplatePromise = (
  props: MutateUsingFetchProps<
    ResponseTemplateDTO,
    Failure | Error,
    InsertOrUpdateTemplateQueryParams,
    PutTemplateRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseTemplateDTO,
    Failure | Error,
    InsertOrUpdateTemplateQueryParams,
    PutTemplateRequestBody,
    void
  >('PUT', getConfig('notifications/api'), `/templates/insertOrUpdate`, props, signal)

export interface GetResourceGroupQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface GetResourceGroupPathParams {
  identifier: string
}

export type GetResourceGroupProps = Omit<
  GetProps<ResponseResourceGroupResponse, Failure | Error, GetResourceGroupQueryParams, GetResourceGroupPathParams>,
  'path'
> &
  GetResourceGroupPathParams

/**
 * Gets a resource group by identifier
 */
export const GetResourceGroup = ({ identifier, ...props }: GetResourceGroupProps) => (
  <Get<ResponseResourceGroupResponse, Failure | Error, GetResourceGroupQueryParams, GetResourceGroupPathParams>
    path="/resourcegroup/${identifier}"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetResourceGroupProps = Omit<
  UseGetProps<ResponseResourceGroupResponse, Failure | Error, GetResourceGroupQueryParams, GetResourceGroupPathParams>,
  'path'
> &
  GetResourceGroupPathParams

/**
 * Gets a resource group by identifier
 */
export const useGetResourceGroup = ({ identifier, ...props }: UseGetResourceGroupProps) =>
  useGet<ResponseResourceGroupResponse, Failure | Error, GetResourceGroupQueryParams, GetResourceGroupPathParams>(
    (paramsInPath: GetResourceGroupPathParams) => `/resourcegroup/${paramsInPath.identifier}`,
    { base: getConfig('notifications/api'), pathParams: { identifier }, ...props }
  )

/**
 * Gets a resource group by identifier
 */
export const getResourceGroupPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    ResponseResourceGroupResponse,
    Failure | Error,
    GetResourceGroupQueryParams,
    GetResourceGroupPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseResourceGroupResponse,
    Failure | Error,
    GetResourceGroupQueryParams,
    GetResourceGroupPathParams
  >(getConfig('notifications/api'), `/resourcegroup/${identifier}`, props, signal)

export interface UpdateResourceGroupQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface UpdateResourceGroupPathParams {
  identifier: string
}

export type UpdateResourceGroupProps = Omit<
  MutateProps<
    ResponseResourceGroupResponse,
    Failure | Error,
    UpdateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    UpdateResourceGroupPathParams
  >,
  'path' | 'verb'
> &
  UpdateResourceGroupPathParams

/**
 * Update a resource group
 */
export const UpdateResourceGroup = ({ identifier, ...props }: UpdateResourceGroupProps) => (
  <Mutate<
    ResponseResourceGroupResponse,
    Failure | Error,
    UpdateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    UpdateResourceGroupPathParams
  >
    verb="PUT"
    path="/resourcegroup/${identifier}"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseUpdateResourceGroupProps = Omit<
  UseMutateProps<
    ResponseResourceGroupResponse,
    Failure | Error,
    UpdateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    UpdateResourceGroupPathParams
  >,
  'path' | 'verb'
> &
  UpdateResourceGroupPathParams

/**
 * Update a resource group
 */
export const useUpdateResourceGroup = ({ identifier, ...props }: UseUpdateResourceGroupProps) =>
  useMutate<
    ResponseResourceGroupResponse,
    Failure | Error,
    UpdateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    UpdateResourceGroupPathParams
  >('PUT', (paramsInPath: UpdateResourceGroupPathParams) => `/resourcegroup/${paramsInPath.identifier}`, {
    base: getConfig('notifications/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * Update a resource group
 */
export const updateResourceGroupPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    ResponseResourceGroupResponse,
    Failure | Error,
    UpdateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    UpdateResourceGroupPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseResourceGroupResponse,
    Failure | Error,
    UpdateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    UpdateResourceGroupPathParams
  >('PUT', getConfig('notifications/api'), `/resourcegroup/${identifier}`, props, signal)

export interface DeleteResourceGroupQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type DeleteResourceGroupProps = Omit<
  MutateProps<ResponseBoolean, Failure | Error, DeleteResourceGroupQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Deletes a resource group
 */
export const DeleteResourceGroup = (props: DeleteResourceGroupProps) => (
  <Mutate<ResponseBoolean, Failure | Error, DeleteResourceGroupQueryParams, string, void>
    verb="DELETE"
    path="/resourcegroup"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseDeleteResourceGroupProps = Omit<
  UseMutateProps<ResponseBoolean, Failure | Error, DeleteResourceGroupQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Deletes a resource group
 */
export const useDeleteResourceGroup = (props: UseDeleteResourceGroupProps) =>
  useMutate<ResponseBoolean, Failure | Error, DeleteResourceGroupQueryParams, string, void>(
    'DELETE',
    `/resourcegroup`,
    { base: getConfig('notifications/api'), ...props }
  )

/**
 * Deletes a resource group
 */
export const deleteResourceGroupPromise = (
  props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteResourceGroupQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseBoolean, Failure | Error, DeleteResourceGroupQueryParams, string, void>(
    'DELETE',
    getConfig('notifications/api'),
    `/resourcegroup`,
    props,
    signal
  )

export interface GetResourceGroupListQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  searchTerm?: string
  pageIndex?: number
  pageSize?: number
  sortOrders?: string[]
}

export type GetResourceGroupListProps = Omit<
  GetProps<ResponsePageResourceGroupResponse, Failure | Error, GetResourceGroupListQueryParams, void>,
  'path'
>

/**
 * Get Resource Group list
 */
export const GetResourceGroupList = (props: GetResourceGroupListProps) => (
  <Get<ResponsePageResourceGroupResponse, Failure | Error, GetResourceGroupListQueryParams, void>
    path="/resourcegroup"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetResourceGroupListProps = Omit<
  UseGetProps<ResponsePageResourceGroupResponse, Failure | Error, GetResourceGroupListQueryParams, void>,
  'path'
>

/**
 * Get Resource Group list
 */
export const useGetResourceGroupList = (props: UseGetResourceGroupListProps) =>
  useGet<ResponsePageResourceGroupResponse, Failure | Error, GetResourceGroupListQueryParams, void>(`/resourcegroup`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * Get Resource Group list
 */
export const getResourceGroupListPromise = (
  props: GetUsingFetchProps<ResponsePageResourceGroupResponse, Failure | Error, GetResourceGroupListQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageResourceGroupResponse, Failure | Error, GetResourceGroupListQueryParams, void>(
    getConfig('notifications/api'),
    `/resourcegroup`,
    props,
    signal
  )

export interface CreateResourceGroupQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type CreateResourceGroupProps = Omit<
  MutateProps<
    ResponseResourceGroupResponse,
    Failure | Error,
    CreateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates a resource group
 */
export const CreateResourceGroup = (props: CreateResourceGroupProps) => (
  <Mutate<
    ResponseResourceGroupResponse,
    Failure | Error,
    CreateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    void
  >
    verb="POST"
    path="/resourcegroup"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseCreateResourceGroupProps = Omit<
  UseMutateProps<
    ResponseResourceGroupResponse,
    Failure | Error,
    CreateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates a resource group
 */
export const useCreateResourceGroup = (props: UseCreateResourceGroupProps) =>
  useMutate<
    ResponseResourceGroupResponse,
    Failure | Error,
    CreateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    void
  >('POST', `/resourcegroup`, { base: getConfig('notifications/api'), ...props })

/**
 * Creates a resource group
 */
export const createResourceGroupPromise = (
  props: MutateUsingFetchProps<
    ResponseResourceGroupResponse,
    Failure | Error,
    CreateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseResourceGroupResponse,
    Failure | Error,
    CreateResourceGroupQueryParams,
    ResourceGroupRequestRequestBody,
    void
  >('POST', getConfig('notifications/api'), `/resourcegroup`, props, signal)

export interface GetResourceTypesQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type GetResourceTypesProps = Omit<
  GetProps<ResponseResourceTypeDTO, Failure | Error, GetResourceTypesQueryParams, void>,
  'path'
>

/**
 * Gets a resource types available at this scope
 */
export const GetResourceTypes = (props: GetResourceTypesProps) => (
  <Get<ResponseResourceTypeDTO, Failure | Error, GetResourceTypesQueryParams, void>
    path="/resourcetype"
    base={getConfig('notifications/api')}
    {...props}
  />
)

export type UseGetResourceTypesProps = Omit<
  UseGetProps<ResponseResourceTypeDTO, Failure | Error, GetResourceTypesQueryParams, void>,
  'path'
>

/**
 * Gets a resource types available at this scope
 */
export const useGetResourceTypes = (props: UseGetResourceTypesProps) =>
  useGet<ResponseResourceTypeDTO, Failure | Error, GetResourceTypesQueryParams, void>(`/resourcetype`, {
    base: getConfig('notifications/api'),
    ...props
  })

/**
 * Gets a resource types available at this scope
 */
export const getResourceTypesPromise = (
  props: GetUsingFetchProps<ResponseResourceTypeDTO, Failure | Error, GetResourceTypesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseResourceTypeDTO, Failure | Error, GetResourceTypesQueryParams, void>(
    getConfig('notifications/api'),
    `/resourcetype`,
    props,
    signal
  )
