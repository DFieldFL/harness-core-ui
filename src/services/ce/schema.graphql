"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field or enum value as deprecated"
directive @deprecated(
  "The reason for the deprecation"
  reason: String = "No longer supported"
) on FIELD_DEFINITION | ENUM_VALUE

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR

"This union of all types of recommendations"
union recommendationDetails = NodeRecommendationDTO | WorkloadRecommendationDTO

type BillingData {
  accountid: String
  actualidlecost: Float
  appid: String
  avgcpuutilization: Float
  avgcpuutilizationvalue: Float
  avgmemoryutilization: Float
  avgmemoryutilizationvalue: Float
  billingaccountid: String
  billingamount: Float
  cloudprovider: String
  cloudproviderid: String
  cloudservicename: String
  clusterid: String
  clustername: String
  clustertype: String
  cpuactualidlecost: Float
  cpubillingamount: Float
  cpuidlecost: Float
  cpulimit: Float
  cpurequest: Float
  cpusystemcost: Float
  cpuunallocatedcost: Float
  cpuunitseconds: Float
  endtime: OffsetDateTime
  envid: String
  idlecost: Float
  instanceid: String
  instancename: String
  instancetype: String
  launchtype: String
  maxcpuutilization: Float
  maxcpuutilizationvalue: Float
  maxmemoryutilization: Float
  maxmemoryutilizationvalue: Float
  memoryactualidlecost: Float
  memorybillingamount: Float
  memoryidlecost: Float
  memorylimit: Float
  memorymbseconds: Float
  memoryrequest: Float
  memorysystemcost: Float
  memoryunallocatedcost: Float
  namespace: String
  networkcost: Float
  parentinstanceid: String
  pricingsource: String
  region: String
  serviceid: String
  settingid: String
  starttime: OffsetDateTime
  storageactualidlecost: Float
  storagecost: Float
  storagembseconds: Float
  storagerequest: Float
  storageunallocatedcost: Float
  storageutilizationvalue: Float
  systemcost: Float
  taskid: String
  unallocatedcost: Float
  usagedurationseconds: Float
  workloadname: String
  workloadtype: String
}

type BillingDataDemo {
  billingamount: Float
  instancedata: InstanceDataDemo
  instanceid: String
  instancename: String
  starttime: Long
}

type ClusterData {
  appId: String
  appName: String
  avgCpuUtilization: Float
  avgMemoryUtilization: Float
  cloudProvider: String
  cloudProviderId: String
  cloudServiceName: String
  clusterId: String
  clusterName: String
  clusterType: String
  costTrend: Float
  cpuBillingAmount: Float
  cpuIdleCost: Float
  cpuUnallocatedCost: Float
  efficiencyScore: Int!
  efficiencyScoreTrendPercentage: Int!
  envId: String
  envName: String
  environment: String
  id: String
  idleCost: Float
  launchType: String
  maxCpuUtilization: Float
  maxMemoryUtilization: Float
  memoryBillingAmount: Float
  memoryIdleCost: Float
  memoryUnallocatedCost: Float
  name: String
  namespace: String
  networkCost: Float
  prevBillingAmount: Float
  region: String
  serviceId: String
  serviceName: String
  storageActualIdleCost: Float
  storageCost: Float
  storageRequest: Float
  storageUnallocatedCost: Float
  storageUtilizationValue: Float
  totalCost: Float
  trendType: String
  type: String
  unallocatedCost: Float
  workloadName: String
  workloadType: String
}

type ContainerHistogramDTO {
  containerName: String
  containerRecommendation: ContainerRecommendation
  cpuHistogram: HistogramExp
  memoryHistogram: HistogramExp
}

type ContainerRecommendation {
  burstable: ResourceRequirement
  current: ResourceRequirement
  guaranteed: ResourceRequirement
  lastDayCost: Cost
  numDays: Int!
  percentileBased: Map_String_ResourceRequirementScalar
  recommended: ResourceRequirement
  totalSamplesCount: Int!
}

type Cost {
  cpu: BigDecimal
  memory: BigDecimal
}

type DataPoint {
  key: Reference!
  value: BigDecimal!
}

type FilterStatsDTO {
  key: String
  values: [String]
}

type HistogramExp {
  bucketWeights: [Float]
  firstBucketSize: Float!
  growthRatio: Float!
  maxBucket: Int!
  minBucket: Int!
  numBuckets: Int!
  precomputed: [Float]
  totalWeight: Float!
}

type InstanceDataDemo {
  cloudprovider: String
  instancetype: String
  region: String
}

type NodeRecommendationDTO {
  currentCloudProvider: String
  currentService: String
  id: String
  maxCpu: Int
  maxMemory: Int
  sumCpu: Int
  sumMemory: Int
}

type PerspectiveData {
  customerViews: [QLCEView]
  sampleViews: [QLCEView]
}

type PerspectiveEntityStatsData {
  data: [QLCEViewEntityStatsDataPoint]
}

type PerspectiveFieldsData {
  fieldIdentifierData: [QLCEViewFieldIdentifierData]
}

type PerspectiveFilterData {
  values: [String]
}

type PerspectiveOverviewStatsData {
  isAwsOrGcpOrClusterConfigured: Boolean
  unifiedTableDataPresent: Boolean
}

type PerspectiveTimeSeriesData {
  stats: [TimeSeriesDataPoints]
}

type PerspectiveTrendStats {
  cost: StatsInfo
}

type QLCEView {
  chartType: ViewChartType
  createdAt: Long
  createdBy: String
  dataSources: [ViewFieldIdentifier]
  groupBy: QLCEViewField
  id: String
  lastUpdatedAt: Long
  name: String
  reportScheduledConfigured: Boolean!
  timeRange: ViewTimeRangeType
  totalCost: Float!
  viewState: ViewState
  viewType: ViewType
}

type QLCEViewEntityStatsDataPoint {
  clusterData: ClusterData
  clusterPerspective: Boolean!
  cost: BigDecimal
  costTrend: BigDecimal
  id: String
  name: String
}

type QLCEViewField {
  fieldId: String!
  fieldName: String!
  identifier: ViewFieldIdentifier
  identifierName: String
}

type QLCEViewFieldIdentifierData {
  identifier: ViewFieldIdentifier!
  identifierName: String!
  values: [QLCEViewField]!
}

"Query root"
type Query {
  billingData(request: GridRequestInput): [BillingData]
  billingdata(clusterid: String, endTime: OffsetTime, startTime: OffsetTime): [BillingDataDemo]
  instancedata(instanceid: String!): InstanceDataDemo
  "Fields for perspective explorer"
  perspectiveFields(filters: [QLCEViewFilterWrapperInput]): PerspectiveFieldsData
  "Filter values for perspective"
  perspectiveFilters(
    aggregateFunction: [QLCEViewAggregationInput]
    filters: [QLCEViewFilterWrapperInput]
    groupBy: [QLCEViewGroupByInput]
    limit: Int
    offset: Int
    sortCriteria: [QLCEViewSortCriteriaInput]
  ): PerspectiveFilterData
  "Table for perspective"
  perspectiveGrid(
    aggregateFunction: [QLCEViewAggregationInput]
    filters: [QLCEViewFilterWrapperInput]
    groupBy: [QLCEViewGroupByInput]
    limit: Int
    offset: Int
    sortCriteria: [QLCEViewSortCriteriaInput]
  ): PerspectiveEntityStatsData
  "Overview stats for perspective"
  perspectiveOverviewStats: PerspectiveOverviewStatsData
  "Table for perspective"
  perspectiveTimeSeriesStats(
    aggregateFunction: [QLCEViewAggregationInput]
    filters: [QLCEViewFilterWrapperInput]
    groupBy: [QLCEViewGroupByInput]
    includeOthers: Boolean!
    limit: Int
    offset: Int
    sortCriteria: [QLCEViewSortCriteriaInput]
  ): PerspectiveTimeSeriesData
  "Trend stats for perspective"
  perspectiveTrendStats(
    aggregateFunction: [QLCEViewAggregationInput]
    filters: [QLCEViewFilterWrapperInput]
  ): PerspectiveTrendStats
  "Fetch perspectives for account"
  perspectives: PerspectiveData
  "recommendation details/drillDown"
  recommendationDetails(
    "defaults to Now()"
    endTime: OffsetDateTime
    id: String!
    resourceType: ResourceType!
    "defaults to Now().minusDays(7)"
    startTime: OffsetDateTime
  ): recommendationDetails
  "possible filter values for each column"
  recommendationFilterStats(
    clusterName: String
    keys: [String] = []
    minCost: Float
    minSaving: Float
    name: String
    namespace: String
    resourceType: ResourceType
  ): [FilterStatsDTO]
  "Possible filter values for each key"
  recommendationFilterStatsV2(filter: K8sRecommendationFilterDTOInput = {}, keys: [String] = []): [FilterStatsDTO]
  "top panel stats API"
  recommendationStats(
    clusterName: String
    id: String
    minCost: Float
    minSaving: Float
    name: String
    namespace: String
    resourceType: ResourceType
  ): RecommendationOverviewStats
  "Top panel stats API, aggregated"
  recommendationStatsV2(filter: K8sRecommendationFilterDTOInput = {}): RecommendationOverviewStats
  "the list of all types of recommendations for overview page"
  recommendations(
    clusterName: String
    id: String
    limit: Long = 10
    minCost: Float
    minSaving: Float
    name: String
    namespace: String
    offset: Long = 0
    resourceType: ResourceType
  ): RecommendationsDTO
  "The list of all types of recommendations for overview page"
  recommendationsV2(filter: K8sRecommendationFilterDTOInput = { limit: 10, offset: 0 }): RecommendationsDTO
}

type RecommendationItemDTO {
  clusterName: String
  id: String!
  monthlyCost: Float
  monthlySaving: Float
  "recommendation details/drillDown"
  recommendationDetails(
    "defaults to Now()"
    endTime: OffsetDateTime
    "defaults to Now().minusDays(7)"
    startTime: OffsetDateTime
  ): recommendationDetails
  resourceName: String
  resourceType: ResourceType!
}

type RecommendationOverviewStats {
  totalMonthlyCost: Float!
  totalMonthlySaving: Float!
}

type RecommendationsDTO {
  items: [RecommendationItemDTO]
  limit: Long!
  offset: Long!
}

type Reference {
  id: String!
  name: String!
  type: String!
}

type ResourceRequirement {
  CPU: String
  MEMORY: String
  empty: Boolean!
  limits: Map_String_StringScalar
  requests: Map_String_StringScalar
}

type StatsInfo {
  statsDescription: String!
  statsLabel: String!
  statsTrend: BigDecimal!
  statsValue: String!
  value: BigDecimal!
}

type TimeSeriesDataPoints {
  time: Long!
  values: [DataPoint]!
}

type WorkloadRecommendationDTO {
  "use items.containerRecommendation"
  containerRecommendations: Map_String_ContainerRecommendationScalar @deprecated
  items: [ContainerHistogramDTO]
  lastDayCost: Cost
}

enum AggregationOperation {
  AVG
  COUNT
  MAX
  MIN
  SUM
}

enum FilterOperator {
  EQUALS
  GREATER_OR_EQUALS
  IN
  LESS_OR_EQUALS
  LIKE
  NOT_EQUALS
  NOT_IN
  NOT_NULL
  TIME_AFTER
  TIME_BEFORE
}

enum QLCESortOrder {
  ASCENDING
  DESCENDING
}

enum QLCEViewAggregateOperation {
  MAX
  MIN
  SUM
}

enum QLCEViewFilterOperator {
  EQUALS
  IN
  NOT_IN
  NOT_NULL
  NULL
}

enum QLCEViewSortType {
  CLUSTER_COST
  COST
  TIME
}

enum QLCEViewTimeFilterOperator {
  AFTER
  BEFORE
}

enum QLCEViewTimeGroupType {
  DAY
  HOUR
  MONTH
  WEEK
}

enum ResourceType {
  NODE_POOL
  WORKLOAD
}

enum SortOrder {
  ASC
  ASCENDING
  DESC
  DESCENDING
}

enum ViewChartType {
  STACKED_LINE_CHART
  STACKED_TIME_SERIES
}

enum ViewFieldIdentifier {
  AWS
  AZURE
  CLUSTER
  COMMON
  CUSTOM
  GCP
  LABEL
}

enum ViewState {
  COMPLETED
  DRAFT
}

enum ViewTimeRangeType {
  CURRENT_MONTH
  CUSTOM
  LAST_30
  LAST_7
  LAST_MONTH
}

enum ViewType {
  CUSTOMER
  DEFAULT_AZURE
  SAMPLE
}

"Built-in java.math.BigDecimal"
scalar BigDecimal

"Long type"
scalar Long

"Built-in scalar for map-like structures"
scalar Map_String_ContainerRecommendationScalar

"Built-in scalar for map-like structures"
scalar Map_String_ResourceRequirementScalar

"Built-in scalar for map-like structures"
scalar Map_String_StringScalar

"Built-in scalar representing a date-time with a UTC offset"
scalar OffsetDateTime

"Built-in scalar representing a time with a UTC offset"
scalar OffsetTime

"Use SPQR's SchemaPrinter to remove this from SDL"
scalar UNREPRESENTABLE

input FieldAggregationInput {
  field: String
  operation: AggregationOperation
}

input FieldFilterInput {
  field: String
  operator: FilterOperator
  values: [String]
}

input GridRequestInput {
  aggregate: [FieldAggregationInput]
  entity: String
  groupBy: [String]
  having: [FieldFilterInput]
  limit: Int
  offset: Int
  orderBy: [SortCriteriaInput]
  where: [FieldFilterInput]
}

input K8sRecommendationFilterDTOInput {
  clusterNames: [String]
  ids: [String]
  limit: Long
  minCost: Float
  minSaving: Float
  names: [String]
  namespaces: [String]
  offset: Long
  resourceTypes: [ResourceType]
}

input QLCEViewAggregationInput {
  columnName: String!
  operationType: QLCEViewAggregateOperation!
}

input QLCEViewFieldInputInput {
  fieldId: String!
  fieldName: String!
  identifier: ViewFieldIdentifier!
  identifierName: String
}

input QLCEViewFilterInput {
  field: QLCEViewFieldInputInput!
  operator: QLCEViewFilterOperator!
  values: [String]
}

input QLCEViewFilterWrapperInput {
  idFilter: QLCEViewFilterInput
  ruleFilter: QLCEViewRuleInput
  timeFilter: QLCEViewTimeFilterInput
  viewMetadataFilter: QLCEViewMetadataFilterInput
}

input QLCEViewGroupByInput {
  entityGroupBy: QLCEViewFieldInputInput
  timeTruncGroupBy: QLCEViewTimeTruncGroupByInput
}

input QLCEViewMetadataFilterInput {
  isPreview: Boolean!
  viewId: String!
}

input QLCEViewRuleInput {
  conditions: [QLCEViewFilterInput]
}

input QLCEViewSortCriteriaInput {
  sortOrder: QLCESortOrder!
  sortType: QLCEViewSortType!
}

input QLCEViewTimeFilterInput {
  field: QLCEViewFieldInputInput!
  operator: QLCEViewTimeFilterOperator!
  value: BigDecimal!
}

input QLCEViewTimeTruncGroupByInput {
  resolution: QLCEViewTimeGroupType!
}

input SortCriteriaInput {
  field: String
  order: SortOrder
}
