/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'
import { getConfig } from '../config'

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>

export interface HealthResponse {
  healthy?: boolean
}

export type Status = 'SUCCESS' | 'FAILURE' | 'ERROR'

/**
 * A name and value pair.
 */
export interface Tag {
  name: string
  value?: string
}

export interface Project {
  name?: string
  description?: string
  identifier?: string
  tags?: Tag[]
}

export interface Projects {
  pageCount?: number
  itemCount?: number
  pageSize?: number
  pageIndex?: number
  projects?: Project[]
}

export interface Error {
  code: string
  message: string
}

export interface Environment {
  name?: string
  description?: string
  identifier?: string
  project?: string
  tags?: Tag[]
}

export interface Environments {
  environments?: Environment[]
}

export interface Prerequisite {
  feature: string
  variations: string[]
}

export interface Variation {
  identifier: string
  value: string | number | boolean | { [key: string]: any }
  name?: string
  description?: string
}

export interface FeatureFlag {
  prerequisites?: Prerequisite[]
  name: string
  description?: string
  identifier: string
  owner?: string
  createdAt?: number
  modifiedAt?: number
  kind: 'boolean' | 'int' | 'string' | 'json'
  archived?: boolean
  variations: Variation[]
  tags?: Tag[]
  defaultOnVariation?: string
  defaultOffVariation?: string
  version?: number
  project: string
}

export interface FeatureFlags {
  version?: number
  pageCount: number
  itemCount: number
  pageSize: number
  pageIndex: number
  features: FeatureFlag[]
}

export interface Target {
  identifier?: string
  environment: string
  project: string
  name?: string
  anonymous?: boolean
  attributes?: { [key: string]: any }
}

export interface Targets {
  pageCount?: number
  itemCount?: number
  pageSize?: number
  pageIndex?: number
  targets?: Target[]
}

export interface Clause {
  attribute?: string
  op?: string
  value?: string | number | number | boolean | {}[]
  negate?: boolean
}

export interface TargetSegment {
  /**
   * Unique identifier for the target segment.
   */
  identifier: string
  /**
   * Name of the target segment.
   */
  name: string
  environment?: string
  tags?: Tag[]
  included?: string[]
  excluded?: string[]
  /**
   * An array of rules that can cause a user to be included in this segment.
   */
  rules?: Clause[]
  createdAt?: number
  modifiedAt?: number
  version?: number
}

export interface TargetSegments {
  pageCount?: number
  itemCount?: number
  pageSize?: number
  pageIndex?: number
  targetsegments?: TargetSegment[]
}

export type FeatureFlagState = 'on' | 'off'

export interface VariationToTargetMap {
  variation?: string
  targets?: string[]
  targetSegments?: string[]
}

export interface WeightedVariation {
  variation?: string
  weight?: number
}

export interface Distribution {
  bucketBy?: string
  variations?: WeightedVariation[]
}

export type Serve = Distribution | string

export interface ServingRule {
  order: number
  clauses: Clause[]
  serve: Serve
}

export interface FeatureFlagActivation {
  feature: string
  environment: string
  identifier?: string
  state: FeatureFlagState
  variationToTargetMap?: VariationToTargetMap[]
  rules?: ServingRule[]
  defaultServe: Serve
  offVariation: string
  createdAt?: number
  modifiedAt?: number
  version?: number
  project: string
}

export interface FeatureFlagActivations {
  pageCount?: number
  itemCount?: number
  pageSize?: number
  pageIndex?: number
  featureFlagActivations?: FeatureFlagActivation[]
}

export interface ProjectRequestRequestBody {
  identifier: string
  name: string
  description?: string
  tags?: Tag[]
}

export interface EnvironmentRequestRequestBody {
  identifier: string
  name: string
  description?: string
  project: string
  tags?: Tag[]
}

export type FeatureFlagRequestRequestBody = FeatureFlag

export type TargetRequestRequestBody = Target

export interface TargetSegmentRequestRequestBody {
  identifier?: string
  /**
   * Name of the target segment.
   */
  name: string
  environment: string
  project: string
  tags?: Tag[]
  included?: string[]
  excluded?: string[]
  /**
   * An array of rules that can cause a user to be included in this segment.
   */
  rules?: Clause[]
}

export interface FeatureFlagActivationRequestRequestBody {
  feature: string
  state: FeatureFlagState
  variationToTargetMap?: VariationToTargetMap[]
  rules?: ServingRule[]
  defaultServe: Serve
  offVariation: string
  project: string
  environment: string
}

/**
 * OK
 */
export interface ProjectsResponseResponse {
  status?: Status
  data?: Projects
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * Unauthenticated
 */
export type UnauthenticatedResponse = Error

/**
 * Unauthorized
 */
export type UnauthorizedResponse = Error

/**
 * The specified resource was not found
 */
export type NotFoundResponse = Error

/**
 * Internal server error
 */
export type InternalServerErrorResponse = Error

/**
 * Bad request
 */
export type BadRequestResponse = Error

/**
 * The specified resource already exists
 */
export type ConflictResponse = Error

/**
 * OK
 */
export interface ProjectResponseResponse {
  status?: Status
  data?: Project
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface EnvironmentsResponseResponse {
  status?: Status
  data?: Environments
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface EnvironmentResponseResponse {
  status?: Status
  data?: Environment
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface FeatureFlagsResponseResponse {
  status?: Status
  data?: FeatureFlags
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface FeatureFlagResponseResponse {
  status?: Status
  data?: FeatureFlag
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface TargetsResponseResponse {
  status?: Status
  data?: Targets
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface TargetResponseResponse {
  status?: Status
  data?: Target
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface TargetSegmentsResponseResponse {
  status?: Status
  data?: TargetSegments
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface TargetSegmentResponseResponse {
  status?: Status
  data?: TargetSegment
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface FeatureFlagActivationsResponseResponse {
  status?: Status
  data?: FeatureFlagActivations
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface FeatureFlagActivationResponseResponse {
  status?: Status
  data?: FeatureFlagActivation
  metaData?: { [key: string]: any }
  correlationId?: string
}

export type GetHealthStatusProps = Omit<GetProps<HealthResponse, void, void, void>, 'path'>

/**
 * Request basic health status.
 */
export const GetHealthStatus = (props: GetHealthStatusProps) => (
  <Get<HealthResponse, void, void, void> path={`/health`} base={getConfig('cf')} {...props} />
)

export type UseGetHealthStatusProps = Omit<UseGetProps<HealthResponse, void, void, void>, 'path'>

/**
 * Request basic health status.
 */
export const useGetHealthStatus = (props: UseGetHealthStatusProps) =>
  useGet<HealthResponse, void, void, void>(`/health`, { base: getConfig('cf'), ...props })

export type CreateProjectProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    ProjectRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Project.
 *
 * Used to create a project.
 */
export const CreateProject = (props: CreateProjectProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    ProjectRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/projects`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateProjectProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    ProjectRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Project.
 *
 * Used to create a project.
 */
export const useCreateProject = (props: UseCreateProjectProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    ProjectRequestRequestBody,
    void
  >('POST', `/admin/projects`, { base: getConfig('cf'), ...props })

export interface GetAllProjectsQueryParams {
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: string
}

export type GetAllProjectsProps = Omit<
  GetProps<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >,
  'path'
>

/**
 * Get all projects
 *
 * Get all projects
 */
export const GetAllProjects = (props: GetAllProjectsProps) => (
  <Get<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >
    path={`/admin/projects`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllProjectsProps = Omit<
  UseGetProps<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >,
  'path'
>

/**
 * Get all projects
 *
 * Get all projects
 */
export const useGetAllProjects = (props: UseGetAllProjectsProps) =>
  useGet<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >(`/admin/projects`, { base: getConfig('cf'), ...props })

export interface GetProjectPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetProjectProps = Omit<
  GetProps<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetProjectPathParams
  >,
  'path'
> &
  GetProjectPathParams

/**
 * Get Project by an key.
 *
 * Used to retrieve project by the projectKey.
 */
export const GetProject = ({ identifier, ...props }: GetProjectProps) => (
  <Get<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetProjectPathParams
  >
    path={`/admin/projects/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetProjectProps = Omit<
  UseGetProps<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetProjectPathParams
  >,
  'path'
> &
  GetProjectPathParams

/**
 * Get Project by an key.
 *
 * Used to retrieve project by the projectKey.
 */
export const useGetProject = ({ identifier, ...props }: UseGetProjectProps) =>
  useGet<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetProjectPathParams
  >((paramsInPath: GetProjectPathParams) => `/admin/projects/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface ModifyProjectPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyProjectProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >,
  'path' | 'verb'
> &
  ModifyProjectPathParams

/**
 * Modify a Project.
 *
 * Used to modify a project.
 */
export const ModifyProject = ({ identifier, ...props }: ModifyProjectProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >
    verb="PUT"
    path={`/admin/projects/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyProjectProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >,
  'path' | 'verb'
> &
  ModifyProjectPathParams

/**
 * Modify a Project.
 *
 * Used to modify a project.
 */
export const useModifyProject = ({ identifier, ...props }: UseModifyProjectProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >('PUT', (paramsInPath: ModifyProjectPathParams) => `/admin/projects/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export type DeleteProjectProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete Project
 *
 * Used to delete project
 */
export const DeleteProject = (props: DeleteProjectProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/projects`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteProjectProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete Project
 *
 * Used to delete project
 */
export const useDeleteProject = (props: UseDeleteProjectProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    string,
    void
  >('DELETE', `/admin/projects`, { base: getConfig('cf'), ...props })

export type CreateEnvironmentProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    EnvironmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Environment.
 *
 * Used to create an environment.
 */
export const CreateEnvironment = (props: CreateEnvironmentProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    EnvironmentRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/environments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateEnvironmentProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    EnvironmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Environment.
 *
 * Used to create an environment.
 */
export const useCreateEnvironment = (props: UseCreateEnvironmentProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    EnvironmentRequestRequestBody,
    void
  >('POST', `/admin/environments`, { base: getConfig('cf'), ...props })

export interface GetAllEnvironmentsQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: string
}

export type GetAllEnvironmentsProps = Omit<
  GetProps<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Get all environments in a project
 *
 * Get all the environments in a project
 */
export const GetAllEnvironments = (props: GetAllEnvironmentsProps) => (
  <Get<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >
    path={`/admin/environments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllEnvironmentsProps = Omit<
  UseGetProps<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Get all environments in a project
 *
 * Get all the environments in a project
 */
export const useGetAllEnvironments = (props: UseGetAllEnvironmentsProps) =>
  useGet<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >(`/admin/environments`, { base: getConfig('cf'), ...props })

export interface GetEnvironmentQueryParams {
  /**
   * Project
   */
  project: string
}

export interface GetEnvironmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetEnvironmentProps = Omit<
  GetProps<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >,
  'path'
> &
  GetEnvironmentPathParams

/**
 * Get Environment by an identifier.
 *
 * Used to retrieve an Environment by the Environment Identifier.
 */
export const GetEnvironment = ({ identifier, ...props }: GetEnvironmentProps) => (
  <Get<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >
    path={`/admin/environments/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetEnvironmentProps = Omit<
  UseGetProps<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >,
  'path'
> &
  GetEnvironmentPathParams

/**
 * Get Environment by an identifier.
 *
 * Used to retrieve an Environment by the Environment Identifier.
 */
export const useGetEnvironment = ({ identifier, ...props }: UseGetEnvironmentProps) =>
  useGet<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >((paramsInPath: GetEnvironmentPathParams) => `/admin/environments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface ModifyEnvironmentQueryParams {
  /**
   * Project
   */
  project: string
}

export interface ModifyEnvironmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyEnvironmentProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >,
  'path' | 'verb'
> &
  ModifyEnvironmentPathParams

/**
 * Modify an Environment.
 *
 * Used to modify an Environment.
 */
export const ModifyEnvironment = ({ identifier, ...props }: ModifyEnvironmentProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >
    verb="PUT"
    path={`/admin/environments/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyEnvironmentProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >,
  'path' | 'verb'
> &
  ModifyEnvironmentPathParams

/**
 * Modify an Environment.
 *
 * Used to modify an Environment.
 */
export const useModifyEnvironment = ({ identifier, ...props }: UseModifyEnvironmentProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >('PUT', (paramsInPath: ModifyEnvironmentPathParams) => `/admin/environments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface DeleteEnvironmentQueryParams {
  /**
   * Project
   */
  project: string
}

export type DeleteEnvironmentProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete Environment
 *
 * Used to delete an Environment
 */
export const DeleteEnvironment = (props: DeleteEnvironmentProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/environments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteEnvironmentProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete Environment
 *
 * Used to delete an Environment
 */
export const useDeleteEnvironment = (props: UseDeleteEnvironmentProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >('DELETE', `/admin/environments`, { base: getConfig('cf'), ...props })

export interface StreamPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type StreamProps = Omit<GetProps<void, void, void, StreamPathParams>, 'path'> & StreamPathParams

/**
 * Stream endpoint.
 */
export const Stream = ({ identifier, ...props }: StreamProps) => (
  <Get<void, void, void, StreamPathParams>
    path={`/stream/environments/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseStreamProps = Omit<UseGetProps<void, void, void, StreamPathParams>, 'path'> & StreamPathParams

/**
 * Stream endpoint.
 */
export const useStream = ({ identifier, ...props }: UseStreamProps) =>
  useGet<void, void, void, StreamPathParams>(
    (paramsInPath: StreamPathParams) => `/stream/environments/${paramsInPath.identifier}`,
    { base: getConfig('cf'), pathParams: { identifier }, ...props }
  )

export type CreateFeatureFlagProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create feature flag.
 *
 * Used to create feature flag.
 */
export const CreateFeatureFlag = (props: CreateFeatureFlagProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/feature-flags`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateFeatureFlagProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create feature flag.
 *
 * Used to create feature flag.
 */
export const useCreateFeatureFlag = (props: UseCreateFeatureFlagProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagRequestRequestBody,
    void
  >('POST', `/admin/feature-flags`, { base: getConfig('cf'), ...props })

export interface GetAllFeatureFlagsQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: string
}

export type GetAllFeatureFlagsProps = Omit<
  GetProps<
    FeatureFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeatureFlagsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve feature flags.
 *
 * Used to retrieve certain feature flags for certain project
 */
export const GetAllFeatureFlags = (props: GetAllFeatureFlagsProps) => (
  <Get<
    FeatureFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeatureFlagsQueryParams,
    void
  >
    path={`/admin/feature-flags`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllFeatureFlagsProps = Omit<
  UseGetProps<
    FeatureFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeatureFlagsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve feature flags.
 *
 * Used to retrieve certain feature flags for certain project
 */
export const useGetAllFeatureFlags = (props: UseGetAllFeatureFlagsProps) =>
  useGet<
    FeatureFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeatureFlagsQueryParams,
    void
  >(`/admin/feature-flags`, { base: getConfig('cf'), ...props })

export interface GetFeatureFlagQueryParams {
  /**
   * Project
   */
  project: string
}

export interface GetFeatureFlagPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetFeatureFlagProps = Omit<
  GetProps<
    FeatureFlagResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >,
  'path'
> &
  GetFeatureFlagPathParams

/**
 * Retrieve feature flag.
 *
 * Used to retrieve certain feature flags for certain id and account id.
 */
export const GetFeatureFlag = ({ identifier, ...props }: GetFeatureFlagProps) => (
  <Get<
    FeatureFlagResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >
    path={`/admin/feature-flags/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetFeatureFlagProps = Omit<
  UseGetProps<
    FeatureFlagResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >,
  'path'
> &
  GetFeatureFlagPathParams

/**
 * Retrieve feature flag.
 *
 * Used to retrieve certain feature flags for certain id and account id.
 */
export const useGetFeatureFlag = ({ identifier, ...props }: UseGetFeatureFlagProps) =>
  useGet<
    FeatureFlagResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >((paramsInPath: GetFeatureFlagPathParams) => `/admin/feature-flags/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface ModifyFeatureFlagQueryParams {
  /**
   * Project
   */
  project: string
}

export interface ModifyFeatureFlagPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyFeatureFlagProps = Omit<
  MutateProps<
    FeatureFlagResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    ModifyFeatureFlagPathParams
  >,
  'path' | 'verb'
> &
  ModifyFeatureFlagPathParams

/**
 * Modify feature flag.
 *
 * Used to modify feature flag with certain id and account id.
 */
export const ModifyFeatureFlag = ({ identifier, ...props }: ModifyFeatureFlagProps) => (
  <Mutate<
    FeatureFlagResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    ModifyFeatureFlagPathParams
  >
    verb="PUT"
    path={`/admin/feature-flags/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyFeatureFlagProps = Omit<
  UseMutateProps<
    FeatureFlagResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    ModifyFeatureFlagPathParams
  >,
  'path' | 'verb'
> &
  ModifyFeatureFlagPathParams

/**
 * Modify feature flag.
 *
 * Used to modify feature flag with certain id and account id.
 */
export const useModifyFeatureFlag = ({ identifier, ...props }: UseModifyFeatureFlagProps) =>
  useMutate<
    FeatureFlagResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    ModifyFeatureFlagPathParams
  >('PUT', (paramsInPath: ModifyFeatureFlagPathParams) => `/admin/feature-flags/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface DeleteFeatureFlagQueryParams {
  /**
   * Project
   */
  project: string
}

export type DeleteFeatureFlagProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete feature flag.
 *
 * Used to delete feature flag with certain id and account id.
 */
export const DeleteFeatureFlag = (props: DeleteFeatureFlagProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/feature-flags`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteFeatureFlagProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete feature flag.
 *
 * Used to delete feature flag with certain id and account id.
 */
export const useDeleteFeatureFlag = (props: UseDeleteFeatureFlagProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >('DELETE', `/admin/feature-flags`, { base: getConfig('cf'), ...props })

export type CreateTargetProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    TargetRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create target.
 *
 * Used to create target.
 */
export const CreateTarget = (props: CreateTargetProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    TargetRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/targets`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateTargetProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    TargetRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create target.
 *
 * Used to create target.
 */
export const useCreateTarget = (props: UseCreateTargetProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    TargetRequestRequestBody,
    void
  >('POST', `/admin/targets`, { base: getConfig('cf'), ...props })

export interface GetAllTargetsQueryParams {
  /**
   * Environment
   */
  environment: string
  /**
   * Project
   */
  project: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: string
}

export type GetAllTargetsProps = Omit<
  GetProps<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all targets.
 *
 * Used to retrieve all targets for certain account id.
 */
export const GetAllTargets = (props: GetAllTargetsProps) => (
  <Get<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >
    path={`/admin/targets`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllTargetsProps = Omit<
  UseGetProps<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all targets.
 *
 * Used to retrieve all targets for certain account id.
 */
export const useGetAllTargets = (props: UseGetAllTargetsProps) =>
  useGet<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >(`/admin/targets`, { base: getConfig('cf'), ...props })

export interface GetTargetQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface GetTargetPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetTargetProps = Omit<
  GetProps<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >,
  'path'
> &
  GetTargetPathParams

/**
 * Retrieve target.
 *
 * Used to retrieve certain target for certain id and account id.
 */
export const GetTarget = ({ identifier, ...props }: GetTargetProps) => (
  <Get<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >
    path={`/admin/targets/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetTargetProps = Omit<
  UseGetProps<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >,
  'path'
> &
  GetTargetPathParams

/**
 * Retrieve target.
 *
 * Used to retrieve certain target for certain id and account id.
 */
export const useGetTarget = ({ identifier, ...props }: UseGetTargetProps) =>
  useGet<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >((paramsInPath: GetTargetPathParams) => `/admin/targets/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface ModifyTargetQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface ModifyTargetPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyTargetProps = Omit<
  MutateProps<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >,
  'path' | 'verb'
> &
  ModifyTargetPathParams

/**
 * Modify target.
 *
 * Used to modify target with certain id and account id.
 */
export const ModifyTarget = ({ identifier, ...props }: ModifyTargetProps) => (
  <Mutate<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >
    verb="PUT"
    path={`/admin/targets/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyTargetProps = Omit<
  UseMutateProps<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >,
  'path' | 'verb'
> &
  ModifyTargetPathParams

/**
 * Modify target.
 *
 * Used to modify target with certain id and account id.
 */
export const useModifyTarget = ({ identifier, ...props }: UseModifyTargetProps) =>
  useMutate<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >('PUT', (paramsInPath: ModifyTargetPathParams) => `/admin/targets/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface DeleteTargetQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export type DeleteTargetProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete target.
 *
 * Used to delete target with certain id and account id.
 */
export const DeleteTarget = (props: DeleteTargetProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/targets`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteTargetProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete target.
 *
 * Used to delete target with certain id and account id.
 */
export const useDeleteTarget = (props: UseDeleteTargetProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >('DELETE', `/admin/targets`, { base: getConfig('cf'), ...props })

export type CreateTargetSegmentProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    TargetSegmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create target segment.
 *
 * Used to create target segment.
 */
export const CreateTargetSegment = (props: CreateTargetSegmentProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    TargetSegmentRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/target-segments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateTargetSegmentProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    TargetSegmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create target segment.
 *
 * Used to create target segment.
 */
export const useCreateTargetSegment = (props: UseCreateTargetSegmentProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    TargetSegmentRequestRequestBody,
    void
  >('POST', `/admin/target-segments`, { base: getConfig('cf'), ...props })

export interface GetAllTargetSegmentsQueryParams {
  /**
   * Environment
   */
  environment: string
  /**
   * Project
   */
  project: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: string
}

export type GetAllTargetSegmentsProps = Omit<
  GetProps<
    TargetSegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetSegmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all target segments.
 *
 * Used to retrieve all target segments for certain account id.
 */
export const GetAllTargetSegments = (props: GetAllTargetSegmentsProps) => (
  <Get<
    TargetSegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetSegmentsQueryParams,
    void
  >
    path={`/admin/target-segments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllTargetSegmentsProps = Omit<
  UseGetProps<
    TargetSegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetSegmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all target segments.
 *
 * Used to retrieve all target segments for certain account id.
 */
export const useGetAllTargetSegments = (props: UseGetAllTargetSegmentsProps) =>
  useGet<
    TargetSegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetSegmentsQueryParams,
    void
  >(`/admin/target-segments`, { base: getConfig('cf'), ...props })

export interface GetTargetSegmentQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface GetTargetSegmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetTargetSegmentProps = Omit<
  GetProps<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentQueryParams,
    GetTargetSegmentPathParams
  >,
  'path'
> &
  GetTargetSegmentPathParams

/**
 * Retrieve target segment.
 *
 * Used to retrieve certain target segment for certain id and account id.
 */
export const GetTargetSegment = ({ identifier, ...props }: GetTargetSegmentProps) => (
  <Get<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentQueryParams,
    GetTargetSegmentPathParams
  >
    path={`/admin/target-segments/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetTargetSegmentProps = Omit<
  UseGetProps<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentQueryParams,
    GetTargetSegmentPathParams
  >,
  'path'
> &
  GetTargetSegmentPathParams

/**
 * Retrieve target segment.
 *
 * Used to retrieve certain target segment for certain id and account id.
 */
export const useGetTargetSegment = ({ identifier, ...props }: UseGetTargetSegmentProps) =>
  useGet<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentQueryParams,
    GetTargetSegmentPathParams
  >((paramsInPath: GetTargetSegmentPathParams) => `/admin/target-segments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface ModifyTargetSegmentQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface ModifyTargetSegmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyTargetSegmentProps = Omit<
  MutateProps<
    TargetSegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetSegmentQueryParams,
    TargetSegmentRequestRequestBody,
    ModifyTargetSegmentPathParams
  >,
  'path' | 'verb'
> &
  ModifyTargetSegmentPathParams

/**
 * Modify target segment.
 *
 * Used to modify target segment with certain id and account id.
 */
export const ModifyTargetSegment = ({ identifier, ...props }: ModifyTargetSegmentProps) => (
  <Mutate<
    TargetSegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetSegmentQueryParams,
    TargetSegmentRequestRequestBody,
    ModifyTargetSegmentPathParams
  >
    verb="PUT"
    path={`/admin/target-segments/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyTargetSegmentProps = Omit<
  UseMutateProps<
    TargetSegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetSegmentQueryParams,
    TargetSegmentRequestRequestBody,
    ModifyTargetSegmentPathParams
  >,
  'path' | 'verb'
> &
  ModifyTargetSegmentPathParams

/**
 * Modify target segment.
 *
 * Used to modify target segment with certain id and account id.
 */
export const useModifyTargetSegment = ({ identifier, ...props }: UseModifyTargetSegmentProps) =>
  useMutate<
    TargetSegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetSegmentQueryParams,
    TargetSegmentRequestRequestBody,
    ModifyTargetSegmentPathParams
  >('PUT', (paramsInPath: ModifyTargetSegmentPathParams) => `/admin/target-segments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface DeleteTargetSegmentQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export type DeleteTargetSegmentProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetSegmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete target segment.
 *
 * Used to delete target segment with certain id and account id.
 */
export const DeleteTargetSegment = (props: DeleteTargetSegmentProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetSegmentQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/target-segments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteTargetSegmentProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetSegmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete target segment.
 *
 * Used to delete target segment with certain id and account id.
 */
export const useDeleteTargetSegment = (props: UseDeleteTargetSegmentProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetSegmentQueryParams,
    string,
    void
  >('DELETE', `/admin/target-segments`, { base: getConfig('cf'), ...props })

export type CreateFeatureFlagActivationProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagActivationRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create feature flag activation.
 *
 * Used to create feature flag activation.
 */
export const CreateFeatureFlagActivation = (props: CreateFeatureFlagActivationProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagActivationRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/feature-flag-activations`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateFeatureFlagActivationProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagActivationRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create feature flag activation.
 *
 * Used to create feature flag activation.
 */
export const useCreateFeatureFlagActivation = (props: UseCreateFeatureFlagActivationProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagActivationRequestRequestBody,
    void
  >('POST', `/admin/feature-flag-activations`, { base: getConfig('cf'), ...props })

export interface GetAllFeatureFlagsActivationQueryParams {
  /**
   * Environment
   */
  environment: string
  /**
   * Project
   */
  project: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: string
}

export type GetAllFeatureFlagsActivationProps = Omit<
  GetProps<
    FeatureFlagActivationsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeatureFlagsActivationQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all feature flag activations.
 *
 * Used to retrieve all feature flag activations for certain account id.
 */
export const GetAllFeatureFlagsActivation = (props: GetAllFeatureFlagsActivationProps) => (
  <Get<
    FeatureFlagActivationsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeatureFlagsActivationQueryParams,
    void
  >
    path={`/admin/feature-flag-activations`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllFeatureFlagsActivationProps = Omit<
  UseGetProps<
    FeatureFlagActivationsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeatureFlagsActivationQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all feature flag activations.
 *
 * Used to retrieve all feature flag activations for certain account id.
 */
export const useGetAllFeatureFlagsActivation = (props: UseGetAllFeatureFlagsActivationProps) =>
  useGet<
    FeatureFlagActivationsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeatureFlagsActivationQueryParams,
    void
  >(`/admin/feature-flag-activations`, { base: getConfig('cf'), ...props })

export interface GetFeatureFlagActivationQueryParams {
  /**
   * Environment
   */
  environment: string
  /**
   * Project
   */
  project: string
}

export interface GetFeatureFlagActivationPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetFeatureFlagActivationProps = Omit<
  GetProps<
    FeatureFlagActivationResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagActivationQueryParams,
    GetFeatureFlagActivationPathParams
  >,
  'path'
> &
  GetFeatureFlagActivationPathParams

/**
 * Retrieve feature flag activation.
 *
 * Used to retrieve certain feature flag activation for certain id, environment and account id.
 */
export const GetFeatureFlagActivation = ({ identifier, ...props }: GetFeatureFlagActivationProps) => (
  <Get<
    FeatureFlagActivationResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagActivationQueryParams,
    GetFeatureFlagActivationPathParams
  >
    path={`/admin/feature-flag-activations/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetFeatureFlagActivationProps = Omit<
  UseGetProps<
    FeatureFlagActivationResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagActivationQueryParams,
    GetFeatureFlagActivationPathParams
  >,
  'path'
> &
  GetFeatureFlagActivationPathParams

/**
 * Retrieve feature flag activation.
 *
 * Used to retrieve certain feature flag activation for certain id, environment and account id.
 */
export const useGetFeatureFlagActivation = ({ identifier, ...props }: UseGetFeatureFlagActivationProps) =>
  useGet<
    FeatureFlagActivationResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagActivationQueryParams,
    GetFeatureFlagActivationPathParams
  >(
    (paramsInPath: GetFeatureFlagActivationPathParams) => `/admin/feature-flag-activations/${paramsInPath.identifier}`,
    { base: getConfig('cf'), pathParams: { identifier }, ...props }
  )

export interface ModifyFeatureFlagActivationPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyFeatureFlagActivationProps = Omit<
  MutateProps<
    FeatureFlagActivationResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagActivationRequestRequestBody,
    ModifyFeatureFlagActivationPathParams
  >,
  'path' | 'verb'
> &
  ModifyFeatureFlagActivationPathParams

/**
 * Modify feature flag activation.
 *
 * Used to modify feature flag activation for certain id, environment and account id.
 */
export const ModifyFeatureFlagActivation = ({ identifier, ...props }: ModifyFeatureFlagActivationProps) => (
  <Mutate<
    FeatureFlagActivationResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagActivationRequestRequestBody,
    ModifyFeatureFlagActivationPathParams
  >
    verb="PUT"
    path={`/admin/feature-flag-activations/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyFeatureFlagActivationProps = Omit<
  UseMutateProps<
    FeatureFlagActivationResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagActivationRequestRequestBody,
    ModifyFeatureFlagActivationPathParams
  >,
  'path' | 'verb'
> &
  ModifyFeatureFlagActivationPathParams

/**
 * Modify feature flag activation.
 *
 * Used to modify feature flag activation for certain id, environment and account id.
 */
export const useModifyFeatureFlagActivation = ({ identifier, ...props }: UseModifyFeatureFlagActivationProps) =>
  useMutate<
    FeatureFlagActivationResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    void,
    FeatureFlagActivationRequestRequestBody,
    ModifyFeatureFlagActivationPathParams
  >(
    'PUT',
    (paramsInPath: ModifyFeatureFlagActivationPathParams) =>
      `/admin/feature-flag-activations/${paramsInPath.identifier}`,
    { base: getConfig('cf'), pathParams: { identifier }, ...props }
  )

export interface DeleteFeatureFlagActivationQueryParams {
  /**
   * Environment
   */
  environment: string
  /**
   * Project
   */
  project: string
}

export type DeleteFeatureFlagActivationProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagActivationQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete feature flag activation.
 *
 * Used to delete feature flag activation for certain id, environment and account id.
 */
export const DeleteFeatureFlagActivation = (props: DeleteFeatureFlagActivationProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagActivationQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/feature-flag-activations`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteFeatureFlagActivationProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagActivationQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete feature flag activation.
 *
 * Used to delete feature flag activation for certain id, environment and account id.
 */
export const useDeleteFeatureFlagActivation = (props: UseDeleteFeatureFlagActivationProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagActivationQueryParams,
    string,
    void
  >('DELETE', `/admin/feature-flag-activations`, { base: getConfig('cf'), ...props })
