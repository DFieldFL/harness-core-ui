/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig } from '../config'
export type Status = 'SUCCESS' | 'FAILURE' | 'ERROR'

/**
 * A name and value pair.
 */
export interface Tag {
  name: string
  value?: string
}

export interface Project {
  name: string
  description?: string
  identifier: string
  tags?: Tag[]
}

export interface Projects {
  pageCount?: number
  itemCount?: number
  pageSize?: number
  pageIndex?: number
  projects?: Project[]
}

export interface Error {
  code: string
  message: string
}

export interface Pagination {
  version?: number
  pageCount: number
  itemCount: number
  pageSize: number
  pageIndex: number
}

export interface ApiKey {
  name: string
  /**
   * The Key will be shown only on create. On subsequemt GET calls, only the masked APIKeys will be returned
   */
  apiKey: string
  identifier: string
  type: 'Server' | 'Client'
}

export type ApiKeys = Pagination & {
  apiKeys?: ApiKey[]
}

export interface Environment {
  name: string
  description?: string
  identifier: string
  project: string
  apiKeys: ApiKeys
  tags?: Tag[]
}

export interface Environments {
  environments?: Environment[]
}

export interface Prerequisite {
  feature: string
  variations: string[]
}

export interface Variation {
  identifier: string
  value: string
  name?: string
  description?: string
}

export interface TargetMap {
  identifier?: string
  name: string
}

export interface VariationMap {
  variation: string
  targets?: TargetMap[]
  targetSegments?: string[]
}

export interface Clause {
  id: string
  attribute: string
  op: string
  values: string[]
  negate: boolean
}

export interface WeightedVariation {
  variation: string
  weight: number
}

export interface Distribution {
  bucketBy: string
  variations: WeightedVariation[]
}

export interface Serve {
  distribution?: Distribution
  variation?: string
}

export interface ServingRule {
  ruleId: string
  priority: number
  clauses: Clause[]
  serve: Serve
}

export type FeatureState = 'on' | 'off'

export interface Feature {
  project: string
  identifier: string
  prerequisites?: Prerequisite[]
  name: string
  description?: string
  owner?: string[]
  kind: 'boolean' | 'int' | 'string' | 'json'
  archived: boolean
  variations: Variation[]
  defaultOnVariation: string
  defaultOffVariation: string
  permanent: boolean
  envProperties?: {
    environment: string
    variationMap?: VariationMap[]
    rules?: ServingRule[]
    state: FeatureState
    defaultServe: Serve
    offVariation: string
    modifiedAt: number
    version?: number
  }
  createdAt: number
  modifiedAt: number
  tags?: Tag[]
  evaluation?: string
}

export type Features = Pagination & {
  features?: Feature[]
}

export type PatchInstruction = {
  /**
   * The name of the modification you would like to perform on a resource.
   */
  kind: string
  parameters: { [key: string]: any }
}[]

export interface PatchOperation {
  comment?: string
  /**
   * Time of execution in unix epoch milliseconds when the scheduled changes will be applied
   */
  executionTime?: number
  instructions: PatchInstruction
}

export interface Target {
  identifier: string
  account: string
  org: string
  environment: string
  project: string
  name: string
  anonymous?: boolean
  attributes?: { [key: string]: any }
  createdAt?: number
}

export type Targets = Pagination & {
  targets?: Target[]
}

export interface TargetDetailSegment {
  identifier?: string
  name?: string
}

export interface TargetDetail {
  identifier?: string
  includedSegments?: TargetDetailSegment[]
  excludedSegments?: TargetDetailSegment[]
  ruleSegments?: TargetDetailSegment[]
}

export interface Segment {
  /**
   * Unique identifier for the segment.
   */
  identifier: string
  /**
   * Name of the segment.
   */
  name: string
  environment?: string
  tags?: Tag[]
  included?: string[]
  excluded?: string[]
  /**
   * An array of rules that can cause a user to be included in this segment.
   */
  rules?: Clause[]
  createdAt?: number
  modifiedAt?: number
  version?: number
}

export type Segments = Pagination & {
  segments?: Segment[]
}

export interface SegmentFlag {
  identifier: string
  type: 'DIRECT' | 'CONDITION'
  project: string
  environment: string
  name: string
  description?: string
  variation: string
}

export interface AuditTrail {
  objectIdentifier: string
  objectType: string
  project: string
  enviroment?: string
  status: string
  instructionSet: { [key: string]: any }[]
  action: string
  actor: string
  comment: string
  executedOn: number
  objectBefore: string
  objectAfter: string
}

export type AuditTrails = Pagination & {
  auditTrails?: AuditTrail[]
}

/**
 * A pair of object id and object body
 */
export interface ObjectSnapshot {
  id: string
  value?: { [key: string]: any }
}

export interface ObjectSnapshots {
  objectsnapshots?: ObjectSnapshot[]
}

export interface TargetAndSegment {
  name?: string
  identifier?: string
  type: 'target' | 'segment'
}

export type TargetsAndSegments = Pagination & {
  entities?: TargetAndSegment[]
}

export interface ProjectRequestRequestBody {
  identifier: string
  name: string
  description?: string
  tags?: Tag[]
}

export type APIKeyRequestRequestBody = {
  identifier: string
  name: string
  description?: string
  type: 'Server' | 'Client'
  expiredAt?: number
}

export interface APIKeyUpdateRequestRequestBody {
  name?: string
  description?: string
  expiredAt?: number
}

export interface EnvironmentRequestRequestBody {
  identifier: string
  name: string
  description?: string
  project: string
  tags?: Tag[]
}

export type FeatureFlagRequestRequestBody = {
  project: string
  prerequisites?: Prerequisite[]
  name: string
  description?: string
  identifier: string
  owner?: string
  kind: 'boolean' | 'int' | 'string' | 'json'
  archived: boolean
  variations: Variation[]
  tags?: Tag[]
  defaultOnVariation: string
  defaultOffVariation: string
  permanent: boolean
}

export type FeaturePatchRequestRequestBody = PatchOperation

export type TargetRequestRequestBody = Target

export interface SegmentRequestRequestBody {
  identifier?: string
  /**
   * Name of the target segment.
   */
  name: string
  environment: string
  project: string
  tags?: Tag[]
  included?: string[]
  excluded?: string[]
  /**
   * An array of rules that can cause a user to be included in this segment.
   */
  rules?: Clause[]
}

export type SegmentPatchRequestRequestBody = PatchOperation

/**
 * OK
 */
export interface ProjectsResponseResponse {
  status?: Status
  data?: Projects
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * Unauthenticated
 */
export type UnauthenticatedResponse = Error

/**
 * Unauthorized
 */
export type UnauthorizedResponse = Error

/**
 * The specified resource was not found
 */
export type NotFoundResponse = Error

/**
 * Internal server error
 */
export type InternalServerErrorResponse = Error

/**
 * Bad request
 */
export type BadRequestResponse = Error

/**
 * The specified resource already exists
 */
export type ConflictResponse = Error

/**
 * OK
 */
export interface ProjectResponseResponse {
  status?: Status
  data?: Project
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export type APIKeysResponseResponse = ApiKeys

/**
 * Created
 */
export type APIKeyResponseResponse = ApiKey

/**
 * OK
 */
export interface EnvironmentsResponseResponse {
  status: Status
  data: Environments
  metaData?: { [key: string]: any }
  correlationId: string
}

/**
 * OK
 */
export interface EnvironmentResponseResponse {
  status?: Status
  data?: Environment
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export type FeaturesResponseResponse = Features

/**
 * OK
 */
export type FeatureResponseResponse = Feature

/**
 * OK
 */
export type TargetsResponseResponse = Targets

/**
 * OK
 */
export type TargetResponseResponse = Target

/**
 * OK
 */
export type TargetDetailResponseResponse = TargetDetail

/**
 * OK
 */
export type SegmentsResponseResponse = Segments

/**
 * OK
 */
export type SegmentResponseResponse = Segment

/**
 * OK
 */
export type SegmentFlagsResponseResponse = SegmentFlag[]

/**
 * OK
 */
export interface AuditTrailResponseResponse {
  status?: Status
  data?: AuditTrails
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export interface ObjectSnapshotResponseResponse {
  status?: Status
  data?: ObjectSnapshots
  metaData?: { [key: string]: any }
  correlationId?: string
}

/**
 * OK
 */
export type TargetSegmentResponseResponse = TargetsAndSegments

export interface CreateProjectQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export type CreateProjectProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateProjectQueryParams,
    ProjectRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Project.
 *
 * Used to create a project.
 */
export const CreateProject = (props: CreateProjectProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateProjectQueryParams,
    ProjectRequestRequestBody,
    void
  >
    verb="POST"
    path="/admin/projects"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateProjectProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateProjectQueryParams,
    ProjectRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Project.
 *
 * Used to create a project.
 */
export const useCreateProject = (props: UseCreateProjectProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateProjectQueryParams,
    ProjectRequestRequestBody,
    void
  >('POST', `/admin/projects`, { base: getConfig('cf'), ...props })

export interface GetAllProjectsQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: 'name' | 'identifier' | 'archived' | 'kind' | 'modifiedAt'
}

export type GetAllProjectsProps = Omit<
  GetProps<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >,
  'path'
>

/**
 * Get all projects
 *
 * Get all projects
 */
export const GetAllProjects = (props: GetAllProjectsProps) => (
  <Get<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >
    path="/admin/projects"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllProjectsProps = Omit<
  UseGetProps<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >,
  'path'
>

/**
 * Get all projects
 *
 * Get all projects
 */
export const useGetAllProjects = (props: UseGetAllProjectsProps) =>
  useGet<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >(`/admin/projects`, { base: getConfig('cf'), ...props })

export interface GetProjectQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export interface GetProjectPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetProjectProps = Omit<
  GetProps<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetProjectQueryParams,
    GetProjectPathParams
  >,
  'path'
> &
  GetProjectPathParams

/**
 * Get Project by an key.
 *
 * Used to retrieve project by the projectKey.
 */
export const GetProject = ({ identifier, ...props }: GetProjectProps) => (
  <Get<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetProjectQueryParams,
    GetProjectPathParams
  >
    path="/admin/projects/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetProjectProps = Omit<
  UseGetProps<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetProjectQueryParams,
    GetProjectPathParams
  >,
  'path'
> &
  GetProjectPathParams

/**
 * Get Project by an key.
 *
 * Used to retrieve project by the projectKey.
 */
export const useGetProject = ({ identifier, ...props }: UseGetProjectProps) =>
  useGet<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetProjectQueryParams,
    GetProjectPathParams
  >((paramsInPath: GetProjectPathParams) => `/admin/projects/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface ModifyProjectQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export interface ModifyProjectPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyProjectProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyProjectQueryParams,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >,
  'path' | 'verb'
> &
  ModifyProjectPathParams

/**
 * Modify a Project.
 *
 * Used to modify a project.
 */
export const ModifyProject = ({ identifier, ...props }: ModifyProjectProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyProjectQueryParams,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >
    verb="PUT"
    path="/admin/projects/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyProjectProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyProjectQueryParams,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >,
  'path' | 'verb'
> &
  ModifyProjectPathParams

/**
 * Modify a Project.
 *
 * Used to modify a project.
 */
export const useModifyProject = ({ identifier, ...props }: UseModifyProjectProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyProjectQueryParams,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >('PUT', (paramsInPath: ModifyProjectPathParams) => `/admin/projects/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface DeleteProjectQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export type DeleteProjectProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteProjectQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete Project
 *
 * Used to delete project
 */
export const DeleteProject = (props: DeleteProjectProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteProjectQueryParams,
    string,
    void
  >
    verb="DELETE"
    path="/admin/projects"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteProjectProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteProjectQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete Project
 *
 * Used to delete project
 */
export const useDeleteProject = (props: UseDeleteProjectProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteProjectQueryParams,
    string,
    void
  >('DELETE', `/admin/projects`, { base: getConfig('cf'), ...props })

export interface AddAPIKeyQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Environment
   */
  environment: string
  /**
   * Project
   */
  project: string
}

export type AddAPIKeyProps = Omit<
  MutateProps<
    APIKeyResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    AddAPIKeyQueryParams,
    APIKeyRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Add an API Key to environment.
 *
 * Used to create a key in an environment. The Key will be shown only on create. On subsequemt GET calls, only the masked APIKeys will be returned
 */
export const AddAPIKey = (props: AddAPIKeyProps) => (
  <Mutate<
    APIKeyResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    AddAPIKeyQueryParams,
    APIKeyRequestRequestBody,
    void
  >
    verb="POST"
    path="/admin/apikey"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseAddAPIKeyProps = Omit<
  UseMutateProps<
    APIKeyResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    AddAPIKeyQueryParams,
    APIKeyRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Add an API Key to environment.
 *
 * Used to create a key in an environment. The Key will be shown only on create. On subsequemt GET calls, only the masked APIKeys will be returned
 */
export const useAddAPIKey = (props: UseAddAPIKeyProps) =>
  useMutate<
    APIKeyResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    AddAPIKeyQueryParams,
    APIKeyRequestRequestBody,
    void
  >('POST', `/admin/apikey`, { base: getConfig('cf'), ...props })

export interface GetAllAPIKeysQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
}

export type GetAllAPIKeysProps = Omit<
  GetProps<
    APIKeysResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllAPIKeysQueryParams,
    void
  >,
  'path'
>

/**
 * Get all APiKeys for an environment
 *
 * Get all the apiKeys for an environment
 */
export const GetAllAPIKeys = (props: GetAllAPIKeysProps) => (
  <Get<
    APIKeysResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllAPIKeysQueryParams,
    void
  >
    path="/admin/apikey"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllAPIKeysProps = Omit<
  UseGetProps<
    APIKeysResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllAPIKeysQueryParams,
    void
  >,
  'path'
>

/**
 * Get all APiKeys for an environment
 *
 * Get all the apiKeys for an environment
 */
export const useGetAllAPIKeys = (props: UseGetAllAPIKeysProps) =>
  useGet<
    APIKeysResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllAPIKeysQueryParams,
    void
  >(`/admin/apikey`, { base: getConfig('cf'), ...props })

export interface DeleteApiKeyQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export type DeleteApiKeyProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteApiKeyQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete APIKey
 *
 * Used to delete an APIKey
 */
export const DeleteApiKey = (props: DeleteApiKeyProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteApiKeyQueryParams,
    string,
    void
  >
    verb="DELETE"
    path="/admin/apikey"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteApiKeyProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteApiKeyQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete APIKey
 *
 * Used to delete an APIKey
 */
export const useDeleteApiKey = (props: UseDeleteApiKeyProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteApiKeyQueryParams,
    string,
    void
  >('DELETE', `/admin/apikey`, { base: getConfig('cf'), ...props })

export interface UpdateAPIKeyQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export interface UpdateAPIKeyPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type UpdateAPIKeyProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateAPIKeyQueryParams,
    APIKeyUpdateRequestRequestBody,
    UpdateAPIKeyPathParams
  >,
  'path' | 'verb'
> &
  UpdateAPIKeyPathParams

/**
 * Add an API Key to environment.
 *
 * Used to create a key in an environment.
 */
export const UpdateAPIKey = ({ identifier, ...props }: UpdateAPIKeyProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateAPIKeyQueryParams,
    APIKeyUpdateRequestRequestBody,
    UpdateAPIKeyPathParams
  >
    verb="PUT"
    path="/admin/apikey/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseUpdateAPIKeyProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateAPIKeyQueryParams,
    APIKeyUpdateRequestRequestBody,
    UpdateAPIKeyPathParams
  >,
  'path' | 'verb'
> &
  UpdateAPIKeyPathParams

/**
 * Add an API Key to environment.
 *
 * Used to create a key in an environment.
 */
export const useUpdateAPIKey = ({ identifier, ...props }: UseUpdateAPIKeyProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateAPIKeyQueryParams,
    APIKeyUpdateRequestRequestBody,
    UpdateAPIKeyPathParams
  >('PUT', (paramsInPath: UpdateAPIKeyPathParams) => `/admin/apikey/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface GetAPIKeyQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export interface GetAPIKeyPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetAPIKeyProps = Omit<
  GetProps<
    APIKeyResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAPIKeyQueryParams,
    GetAPIKeyPathParams
  >,
  'path'
> &
  GetAPIKeyPathParams

/**
 * Get all APiKeys for an environment
 *
 * Get all the apiKeys for an environment
 */
export const GetAPIKey = ({ identifier, ...props }: GetAPIKeyProps) => (
  <Get<
    APIKeyResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAPIKeyQueryParams,
    GetAPIKeyPathParams
  >
    path="/admin/apikey/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAPIKeyProps = Omit<
  UseGetProps<
    APIKeyResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAPIKeyQueryParams,
    GetAPIKeyPathParams
  >,
  'path'
> &
  GetAPIKeyPathParams

/**
 * Get all APiKeys for an environment
 *
 * Get all the apiKeys for an environment
 */
export const useGetAPIKey = ({ identifier, ...props }: UseGetAPIKeyProps) =>
  useGet<
    APIKeyResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAPIKeyQueryParams,
    GetAPIKeyPathParams
  >((paramsInPath: GetAPIKeyPathParams) => `/admin/apikey/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface CreateEnvironmentQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export type CreateEnvironmentProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Environment.
 *
 * Used to create an environment.
 */
export const CreateEnvironment = (props: CreateEnvironmentProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    void
  >
    verb="POST"
    path="/admin/environments"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateEnvironmentProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Environment.
 *
 * Used to create an environment.
 */
export const useCreateEnvironment = (props: UseCreateEnvironmentProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    void
  >('POST', `/admin/environments`, { base: getConfig('cf'), ...props })

export interface GetAllEnvironmentsQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: 'name' | 'identifier' | 'archived' | 'kind' | 'modifiedAt'
}

export type GetAllEnvironmentsProps = Omit<
  GetProps<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Get all environments in a project
 *
 * Get all the environments in a project
 */
export const GetAllEnvironments = (props: GetAllEnvironmentsProps) => (
  <Get<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >
    path="/admin/environments"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllEnvironmentsProps = Omit<
  UseGetProps<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Get all environments in a project
 *
 * Get all the environments in a project
 */
export const useGetAllEnvironments = (props: UseGetAllEnvironmentsProps) =>
  useGet<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >(`/admin/environments`, { base: getConfig('cf'), ...props })

export interface GetEnvironmentQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export interface GetEnvironmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetEnvironmentProps = Omit<
  GetProps<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >,
  'path'
> &
  GetEnvironmentPathParams

/**
 * Get Environment by an identifier.
 *
 * Used to retrieve an Environment by the Environment Identifier.
 */
export const GetEnvironment = ({ identifier, ...props }: GetEnvironmentProps) => (
  <Get<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >
    path="/admin/environments/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetEnvironmentProps = Omit<
  UseGetProps<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >,
  'path'
> &
  GetEnvironmentPathParams

/**
 * Get Environment by an identifier.
 *
 * Used to retrieve an Environment by the Environment Identifier.
 */
export const useGetEnvironment = ({ identifier, ...props }: UseGetEnvironmentProps) =>
  useGet<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >((paramsInPath: GetEnvironmentPathParams) => `/admin/environments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface ModifyEnvironmentQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
}

export interface ModifyEnvironmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyEnvironmentProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >,
  'path' | 'verb'
> &
  ModifyEnvironmentPathParams

/**
 * Modify an Environment.
 *
 * Used to modify an Environment.
 */
export const ModifyEnvironment = ({ identifier, ...props }: ModifyEnvironmentProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >
    verb="PUT"
    path="/admin/environments/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyEnvironmentProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >,
  'path' | 'verb'
> &
  ModifyEnvironmentPathParams

/**
 * Modify an Environment.
 *
 * Used to modify an Environment.
 */
export const useModifyEnvironment = ({ identifier, ...props }: UseModifyEnvironmentProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >('PUT', (paramsInPath: ModifyEnvironmentPathParams) => `/admin/environments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface DeleteEnvironmentQueryParams {
  /**
   * Project
   */
  project: string
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export type DeleteEnvironmentProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete Environment
 *
 * Used to delete an Environment
 */
export const DeleteEnvironment = (props: DeleteEnvironmentProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >
    verb="DELETE"
    path="/admin/environments"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteEnvironmentProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete Environment
 *
 * Used to delete an Environment
 */
export const useDeleteEnvironment = (props: UseDeleteEnvironmentProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >('DELETE', `/admin/environments`, { base: getConfig('cf'), ...props })

export interface CreateFeatureFlagQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export type CreateFeatureFlagProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create a feature
 *
 * Create a feature flag.
 */
export const CreateFeatureFlag = (props: CreateFeatureFlagProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    void
  >
    verb="POST"
    path="/admin/features"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateFeatureFlagProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create a feature
 *
 * Create a feature flag.
 */
export const useCreateFeatureFlag = (props: UseCreateFeatureFlagProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    void
  >('POST', `/admin/features`, { base: getConfig('cf'), ...props })

export interface GetAllFeaturesQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment?: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: 'name' | 'identifier' | 'archived' | 'kind' | 'modifiedAt'
  /**
   * Name of the feature flag
   */
  name?: string
  /**
   * Identifier of the feature flag
   */
  identifier?: string
  /**
   * Status of the feature flag
   */
  archived?: boolean
  /**
   * Kind of the feature flag
   */
  kind?: 'json' | 'string' | 'int' | 'boolean'
  /**
   * Identifier of a target
   */
  targetIdentifier?: string
}

export type GetAllFeaturesProps = Omit<
  GetProps<
    FeaturesResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeaturesQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all feature activations.
 *
 * Used to retrieve all feature activations for certain account id.
 */
export const GetAllFeatures = (props: GetAllFeaturesProps) => (
  <Get<
    FeaturesResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeaturesQueryParams,
    void
  >
    path="/admin/features"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllFeaturesProps = Omit<
  UseGetProps<
    FeaturesResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeaturesQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all feature activations.
 *
 * Used to retrieve all feature activations for certain account id.
 */
export const useGetAllFeatures = (props: UseGetAllFeaturesProps) =>
  useGet<
    FeaturesResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeaturesQueryParams,
    void
  >(`/admin/features`, { base: getConfig('cf'), ...props })

export interface GetFeatureFlagQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment?: string
}

export interface GetFeatureFlagPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetFeatureFlagProps = Omit<
  GetProps<
    FeatureResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >,
  'path'
> &
  GetFeatureFlagPathParams

/**
 * Retrieve a feature
 *
 * Retrieve certain feature flag with certain identifier and account id.
 */
export const GetFeatureFlag = ({ identifier, ...props }: GetFeatureFlagProps) => (
  <Get<
    FeatureResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >
    path="/admin/features/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetFeatureFlagProps = Omit<
  UseGetProps<
    FeatureResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >,
  'path'
> &
  GetFeatureFlagPathParams

/**
 * Retrieve a feature
 *
 * Retrieve certain feature flag with certain identifier and account id.
 */
export const useGetFeatureFlag = ({ identifier, ...props }: UseGetFeatureFlagProps) =>
  useGet<
    FeatureResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >((paramsInPath: GetFeatureFlagPathParams) => `/admin/features/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface PatchFeatureQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface PatchFeaturePathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type PatchFeatureProps = Omit<
  MutateProps<
    FeatureResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchFeatureQueryParams,
    FeaturePatchRequestRequestBody,
    PatchFeaturePathParams
  >,
  'path' | 'verb'
> &
  PatchFeaturePathParams

/**
 * Modify a feature using instructions
 *
 * Modify feature flag with certain identifier and account id.
 */
export const PatchFeature = ({ identifier, ...props }: PatchFeatureProps) => (
  <Mutate<
    FeatureResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchFeatureQueryParams,
    FeaturePatchRequestRequestBody,
    PatchFeaturePathParams
  >
    verb="PATCH"
    path="/admin/features/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UsePatchFeatureProps = Omit<
  UseMutateProps<
    FeatureResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchFeatureQueryParams,
    FeaturePatchRequestRequestBody,
    PatchFeaturePathParams
  >,
  'path' | 'verb'
> &
  PatchFeaturePathParams

/**
 * Modify a feature using instructions
 *
 * Modify feature flag with certain identifier and account id.
 */
export const usePatchFeature = ({ identifier, ...props }: UsePatchFeatureProps) =>
  useMutate<
    FeatureResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchFeatureQueryParams,
    FeaturePatchRequestRequestBody,
    PatchFeaturePathParams
  >('PATCH', (paramsInPath: PatchFeaturePathParams) => `/admin/features/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface DeleteFeatureFlagQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
}

export type DeleteFeatureFlagProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete a feature
 *
 * Delete feature with certain identifier and account id.
 */
export const DeleteFeatureFlag = (props: DeleteFeatureFlagProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >
    verb="DELETE"
    path="/admin/features"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteFeatureFlagProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete a feature
 *
 * Delete feature with certain identifier and account id.
 */
export const useDeleteFeatureFlag = (props: UseDeleteFeatureFlagProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >('DELETE', `/admin/features`, { base: getConfig('cf'), ...props })

export interface CreateTargetQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export type CreateTargetProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateTargetQueryParams,
    TargetRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create target.
 *
 * Used to create target.
 */
export const CreateTarget = (props: CreateTargetProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateTargetQueryParams,
    TargetRequestRequestBody,
    void
  >
    verb="POST"
    path="/admin/targets"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateTargetProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateTargetQueryParams,
    TargetRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create target.
 *
 * Used to create target.
 */
export const useCreateTarget = (props: UseCreateTargetProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateTargetQueryParams,
    TargetRequestRequestBody,
    void
  >('POST', `/admin/targets`, { base: getConfig('cf'), ...props })

export interface GetAllTargetsQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASC' | 'DESC'
  /**
   * SortByField
   */
  sortByField?: 'createdAt' | 'name' | 'identifier'
  /**
   * Name of the target
   */
  targetName?: string
  /**
   * Identifier of the target
   */
  targetIdentifier?: string
}

export type GetAllTargetsProps = Omit<
  GetProps<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all targets.
 *
 * Used to retrieve all targets for certain account id.
 */
export const GetAllTargets = (props: GetAllTargetsProps) => (
  <Get<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >
    path="/admin/targets"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllTargetsProps = Omit<
  UseGetProps<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all targets.
 *
 * Used to retrieve all targets for certain account id.
 */
export const useGetAllTargets = (props: UseGetAllTargetsProps) =>
  useGet<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >(`/admin/targets`, { base: getConfig('cf'), ...props })

export interface UploadTargetsQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export type UploadTargetsProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UploadTargetsQueryParams,
    void,
    void
  >,
  'path' | 'verb'
>

/**
 * Upload targets
 *
 * Add targets by uploading a CSV file.
 */
export const UploadTargets = (props: UploadTargetsProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UploadTargetsQueryParams,
    void,
    void
  >
    verb="POST"
    path="/admin/targets/upload"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseUploadTargetsProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UploadTargetsQueryParams,
    void,
    void
  >,
  'path' | 'verb'
>

/**
 * Upload targets
 *
 * Add targets by uploading a CSV file.
 */
export const useUploadTargets = (props: UseUploadTargetsProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UploadTargetsQueryParams,
    void,
    void
  >('POST', `/admin/targets/upload`, { base: getConfig('cf'), ...props })

export interface GetTargetQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface GetTargetPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetTargetProps = Omit<
  GetProps<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >,
  'path'
> &
  GetTargetPathParams

/**
 * Retrieve target.
 *
 * Used to retrieve certain target for certain id and account id.
 */
export const GetTarget = ({ identifier, ...props }: GetTargetProps) => (
  <Get<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >
    path="/admin/targets/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetTargetProps = Omit<
  UseGetProps<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >,
  'path'
> &
  GetTargetPathParams

/**
 * Retrieve target.
 *
 * Used to retrieve certain target for certain id and account id.
 */
export const useGetTarget = ({ identifier, ...props }: UseGetTargetProps) =>
  useGet<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >((paramsInPath: GetTargetPathParams) => `/admin/targets/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface ModifyTargetQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface ModifyTargetPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyTargetProps = Omit<
  MutateProps<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >,
  'path' | 'verb'
> &
  ModifyTargetPathParams

/**
 * Modify target
 *
 * Used to modify target with certain id and account id.
 */
export const ModifyTarget = ({ identifier, ...props }: ModifyTargetProps) => (
  <Mutate<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >
    verb="PUT"
    path="/admin/targets/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyTargetProps = Omit<
  UseMutateProps<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >,
  'path' | 'verb'
> &
  ModifyTargetPathParams

/**
 * Modify target
 *
 * Used to modify target with certain id and account id.
 */
export const useModifyTarget = ({ identifier, ...props }: UseModifyTargetProps) =>
  useMutate<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >('PUT', (paramsInPath: ModifyTargetPathParams) => `/admin/targets/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface DeleteTargetQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export type DeleteTargetProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete target.
 *
 * Used to delete target with certain id and account id.
 */
export const DeleteTarget = (props: DeleteTargetProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >
    verb="DELETE"
    path="/admin/targets"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteTargetProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete target.
 *
 * Used to delete target with certain id and account id.
 */
export const useDeleteTarget = (props: UseDeleteTargetProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >('DELETE', `/admin/targets`, { base: getConfig('cf'), ...props })

export interface GetTargetSegmentsQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface GetTargetSegmentsPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetTargetSegmentsProps = Omit<
  GetProps<
    TargetDetailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentsQueryParams,
    GetTargetSegmentsPathParams
  >,
  'path'
> &
  GetTargetSegmentsPathParams

/**
 * Retrieve the segmenets that the specified target belongs to.
 *
 * Used to retrieve certain segments for a certian target
 */
export const GetTargetSegments = ({ identifier, ...props }: GetTargetSegmentsProps) => (
  <Get<
    TargetDetailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentsQueryParams,
    GetTargetSegmentsPathParams
  >
    path="/admin/targets/${identifier}/segments"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetTargetSegmentsProps = Omit<
  UseGetProps<
    TargetDetailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentsQueryParams,
    GetTargetSegmentsPathParams
  >,
  'path'
> &
  GetTargetSegmentsPathParams

/**
 * Retrieve the segmenets that the specified target belongs to.
 *
 * Used to retrieve certain segments for a certian target
 */
export const useGetTargetSegments = ({ identifier, ...props }: UseGetTargetSegmentsProps) =>
  useGet<
    TargetDetailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentsQueryParams,
    GetTargetSegmentsPathParams
  >((paramsInPath: GetTargetSegmentsPathParams) => `/admin/targets/${paramsInPath.identifier}/segments`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface CreateSegmentQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
}

export type CreateSegmentProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateSegmentQueryParams,
    SegmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create segment.
 *
 * Used to create segment.
 */
export const CreateSegment = (props: CreateSegmentProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateSegmentQueryParams,
    SegmentRequestRequestBody,
    void
  >
    verb="POST"
    path="/admin/segments"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateSegmentProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateSegmentQueryParams,
    SegmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create segment.
 *
 * Used to create segment.
 */
export const useCreateSegment = (props: UseCreateSegmentProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateSegmentQueryParams,
    SegmentRequestRequestBody,
    void
  >('POST', `/admin/segments`, { base: getConfig('cf'), ...props })

export interface GetAllSegmentsQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Environment
   */
  environment: string
  /**
   * Project
   */
  project: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * query
   */
  queryString?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: 'name' | 'identifier' | 'archived' | 'kind' | 'modifiedAt'
}

export type GetAllSegmentsProps = Omit<
  GetProps<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAllSegmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all segments.
 *
 * Used to retrieve all segments for certain account id.
 */
export const GetAllSegments = (props: GetAllSegmentsProps) => (
  <Get<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAllSegmentsQueryParams,
    void
  >
    path="/admin/segments"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllSegmentsProps = Omit<
  UseGetProps<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAllSegmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve all segments.
 *
 * Used to retrieve all segments for certain account id.
 */
export const useGetAllSegments = (props: UseGetAllSegmentsProps) =>
  useGet<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAllSegmentsQueryParams,
    void
  >(`/admin/segments`, { base: getConfig('cf'), ...props })

export interface GetSegmentQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface GetSegmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetSegmentProps = Omit<
  GetProps<
    SegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentQueryParams,
    GetSegmentPathParams
  >,
  'path'
> &
  GetSegmentPathParams

/**
 * Retrieve segment.
 *
 * Used to retrieve certain segment for certain id and account id.
 */
export const GetSegment = ({ identifier, ...props }: GetSegmentProps) => (
  <Get<
    SegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentQueryParams,
    GetSegmentPathParams
  >
    path="/admin/segments/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetSegmentProps = Omit<
  UseGetProps<
    SegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentQueryParams,
    GetSegmentPathParams
  >,
  'path'
> &
  GetSegmentPathParams

/**
 * Retrieve segment.
 *
 * Used to retrieve certain segment for certain id and account id.
 */
export const useGetSegment = ({ identifier, ...props }: UseGetSegmentProps) =>
  useGet<
    SegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentQueryParams,
    GetSegmentPathParams
  >((paramsInPath: GetSegmentPathParams) => `/admin/segments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface PatchSegmentQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface PatchSegmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type PatchSegmentProps = Omit<
  MutateProps<
    SegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchSegmentQueryParams,
    SegmentPatchRequestRequestBody,
    PatchSegmentPathParams
  >,
  'path' | 'verb'
> &
  PatchSegmentPathParams

/**
 * Patch segment.
 *
 * Used to modify segment with certain id and account id.
 */
export const PatchSegment = ({ identifier, ...props }: PatchSegmentProps) => (
  <Mutate<
    SegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchSegmentQueryParams,
    SegmentPatchRequestRequestBody,
    PatchSegmentPathParams
  >
    verb="PATCH"
    path="/admin/segments/${identifier}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UsePatchSegmentProps = Omit<
  UseMutateProps<
    SegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchSegmentQueryParams,
    SegmentPatchRequestRequestBody,
    PatchSegmentPathParams
  >,
  'path' | 'verb'
> &
  PatchSegmentPathParams

/**
 * Patch segment.
 *
 * Used to modify segment with certain id and account id.
 */
export const usePatchSegment = ({ identifier, ...props }: UsePatchSegmentProps) =>
  useMutate<
    SegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchSegmentQueryParams,
    SegmentPatchRequestRequestBody,
    PatchSegmentPathParams
  >('PATCH', (paramsInPath: PatchSegmentPathParams) => `/admin/segments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface DeleteSegmentQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export type DeleteSegmentProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteSegmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete segment.
 *
 * Used to delete segment with certain id and account id.
 */
export const DeleteSegment = (props: DeleteSegmentProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteSegmentQueryParams,
    string,
    void
  >
    verb="DELETE"
    path="/admin/segments"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteSegmentProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteSegmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete segment.
 *
 * Used to delete segment with certain id and account id.
 */
export const useDeleteSegment = (props: UseDeleteSegmentProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteSegmentQueryParams,
    string,
    void
  >('DELETE', `/admin/segments`, { base: getConfig('cf'), ...props })

export interface GetSegmentFlagsQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
}

export interface GetSegmentFlagsPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetSegmentFlagsProps = Omit<
  GetProps<
    SegmentFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentFlagsQueryParams,
    GetSegmentFlagsPathParams
  >,
  'path'
> &
  GetSegmentFlagsPathParams

/**
 * Retrieve segment flags.
 *
 * Used to retrieve certain segment flags for certain id and account id.
 */
export const GetSegmentFlags = ({ identifier, ...props }: GetSegmentFlagsProps) => (
  <Get<
    SegmentFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentFlagsQueryParams,
    GetSegmentFlagsPathParams
  >
    path="/admin/segments/${identifier}/flags"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetSegmentFlagsProps = Omit<
  UseGetProps<
    SegmentFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentFlagsQueryParams,
    GetSegmentFlagsPathParams
  >,
  'path'
> &
  GetSegmentFlagsPathParams

/**
 * Retrieve segment flags.
 *
 * Used to retrieve certain segment flags for certain id and account id.
 */
export const useGetSegmentFlags = ({ identifier, ...props }: UseGetSegmentFlagsProps) =>
  useGet<
    SegmentFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentFlagsQueryParams,
    GetSegmentFlagsPathParams
  >((paramsInPath: GetSegmentFlagsPathParams) => `/admin/segments/${paramsInPath.identifier}/flags`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

export interface GetAuditByParamsQueryParams {
  /**
   * Environment
   */
  environment?: string
  /**
   * Project
   */
  project?: string
  /**
   * Object Type (FeatureActivation Or Segment)
   */
  objectType: 'FeatureActivation' | 'Segment'
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Account
   */
  account: string
  /**
   * Start Time
   */
  startTime?: number
  /**
   * End Time
   */
  endTime?: number
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * Actor
   */
  actor?: string
  /**
   * Action
   */
  action?: ('FeatureActivationCreated' | 'SegmentCreated' | 'FeatureActivationPatched')[]
  /**
   * Identifier of the entity
   */
  identifier?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASC' | 'DESC'
  /**
   * SortByField
   */
  sortByField?: 'executed_on' | 'actor' | 'action'
}

export type GetAuditByParamsProps = Omit<
  GetProps<
    AuditTrailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAuditByParamsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve Audit
 *
 * Used to retrieve audit details based on environment, project, object type, organization, account and timestamp
 */
export const GetAuditByParams = (props: GetAuditByParamsProps) => (
  <Get<
    AuditTrailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAuditByParamsQueryParams,
    void
  >
    path="/admin/audit"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAuditByParamsProps = Omit<
  UseGetProps<
    AuditTrailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAuditByParamsQueryParams,
    void
  >,
  'path'
>

/**
 * Retrieve Audit
 *
 * Used to retrieve audit details based on environment, project, object type, organization, account and timestamp
 */
export const useGetAuditByParams = (props: UseGetAuditByParamsProps) =>
  useGet<
    AuditTrailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAuditByParamsQueryParams,
    void
  >(`/admin/audit`, { base: getConfig('cf'), ...props })

export interface GetOSByIdPathParams {
  /**
   * Unique identifiers for the object in the API.
   */
  identifiers: string[]
}

export type GetOSByIdProps = Omit<
  GetProps<
    ObjectSnapshotResponseResponse | void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetOSByIdPathParams
  >,
  'path'
> &
  GetOSByIdPathParams

/**
 * Retrieve Object Snapshot
 *
 * Used to retrieve the json body of the object from the object snapshot table
 */
export const GetOSById = ({ identifiers, ...props }: GetOSByIdProps) => (
  <Get<
    ObjectSnapshotResponseResponse | void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetOSByIdPathParams
  >
    path="/admin/objects/${identifiers}"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetOSByIdProps = Omit<
  UseGetProps<
    ObjectSnapshotResponseResponse | void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetOSByIdPathParams
  >,
  'path'
> &
  GetOSByIdPathParams

/**
 * Retrieve Object Snapshot
 *
 * Used to retrieve the json body of the object from the object snapshot table
 */
export const useGetOSById = ({ identifiers, ...props }: UseGetOSByIdProps) =>
  useGet<
    ObjectSnapshotResponseResponse | void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetOSByIdPathParams
  >((paramsInPath: GetOSByIdPathParams) => `/admin/objects/${paramsInPath.identifiers}`, {
    base: getConfig('cf'),
    pathParams: { identifiers },
    ...props
  })

export interface GetTargetsAndSegmentsQueryParams {
  /**
   * Account
   */
  account: string
  /**
   * Organization Identifier
   */
  org: string
  /**
   * Project
   */
  project: string
  /**
   * Environment
   */
  environment: string
  /**
   * Identifier of the target or segment
   */
  tsIdentifier?: string
  /**
   * Name of the target or segment
   */
  tsName?: string
  /**
   * SortByField
   */
  sortByField?: 'name' | 'identifier'
  /**
   * SortOrder
   */
  sortOrder?: 'ASC' | 'DESC'
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
}

export type GetTargetsAndSegmentsProps = Omit<
  GetProps<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Get targets and segments for an environment with search and sort features
 *
 * Get targets and segments for an environment with search and sort features
 */
export const GetTargetsAndSegments = (props: GetTargetsAndSegmentsProps) => (
  <Get<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsQueryParams,
    void
  >
    path="/admin/targets-segments/"
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetTargetsAndSegmentsProps = Omit<
  UseGetProps<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Get targets and segments for an environment with search and sort features
 *
 * Get targets and segments for an environment with search and sort features
 */
export const useGetTargetsAndSegments = (props: UseGetTargetsAndSegmentsProps) =>
  useGet<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsQueryParams,
    void
  >(`/admin/targets-segments/`, { base: getConfig('cf'), ...props })
