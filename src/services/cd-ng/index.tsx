/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>

export interface ProjectDTO {
  id?: string
  accountId?: string
  orgId?: string
  identifier?: string
  name?: string
  description?: string
  owners?: string[]
  tags?: string[]
}

export interface CreateProjectRequest {
  accountId?: string
  orgId?: string
  identifier?: string
  name?: string
  description?: string
  owners?: string[]
  tags?: string[]
}

export interface OptionalProjectDTO {
  present?: boolean
}

export interface OptionalOrganizationDTO {
  present?: boolean
}

export interface UpdateProjectRequest {
  name?: string
  description?: string
  owners?: string[]
  tags?: string[]
}

export interface CreateOrganizationRequest {
  accountId?: string
  identifier?: string
  name?: string
  color?: string
  description: string
  tags: string[]
}

export interface UpdateOrganizationRequest {
  name?: string
  color?: string
  description: string
  tags: string[]
}

export interface OrganizationDTO {
  id?: string
  accountId?: string
  identifier?: string
  name?: string
  color?: string
  description?: string
  tags?: string[]
}

export interface GetOrganizationsForAccountQueryParams {
  accountId?: string
}

export type GetOrganizationsForAccountProps = Omit<
  GetProps<OrganizationDTO[], unknown, GetOrganizationsForAccountQueryParams, void>,
  'path'
>

export const GetOrganizationsForAccount = (props: GetOrganizationsForAccountProps) => (
  <Get<OrganizationDTO[], unknown, GetOrganizationsForAccountQueryParams, void>
    path={`/organizations`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetOrganizationsForAccountProps = Omit<
  UseGetProps<OrganizationDTO[], GetOrganizationsForAccountQueryParams, void>,
  'path'
>

export const useGetOrganizationsForAccount = (props: UseGetOrganizationsForAccountProps) =>
  useGet<OrganizationDTO[], unknown, GetOrganizationsForAccountQueryParams, void>(`/organizations`, {
    base: '/cd/api',
    ...props
  })

export type CreateOrganizationProps = Omit<
  MutateProps<OrganizationDTO, unknown, void, CreateOrganizationRequest, void>,
  'path' | 'verb'
>

export const CreateOrganization = (props: CreateOrganizationProps) => (
  <Mutate<OrganizationDTO, unknown, void, CreateOrganizationRequest, void>
    verb="POST"
    path={`/organizations`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseCreateOrganizationProps = Omit<
  UseMutateProps<OrganizationDTO, void, CreateOrganizationRequest, void>,
  'path' | 'verb'
>

export const useCreateOrganization = (props: UseCreateOrganizationProps) =>
  useMutate<OrganizationDTO, unknown, void, CreateOrganizationRequest, void>('POST', `/organizations`, {
    base: '/cd/api',
    ...props
  })

export interface GetOrganizationPathParams {
  organizationId: string
}

export type GetOrganizationProps = Omit<GetProps<OrganizationDTO, unknown, void, GetOrganizationPathParams>, 'path'> &
  GetOrganizationPathParams

export const GetOrganization = ({ organizationId, ...props }: GetOrganizationProps) => (
  <Get<OrganizationDTO, unknown, void, GetOrganizationPathParams>
    path={`/organizations/${organizationId}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetOrganizationProps = Omit<UseGetProps<OrganizationDTO, void, GetOrganizationPathParams>, 'path'> &
  GetOrganizationPathParams

export const useGetOrganization = ({ organizationId, ...props }: UseGetOrganizationProps) =>
  useGet<OrganizationDTO, unknown, void, GetOrganizationPathParams>(
    ({ organizationId }: GetOrganizationPathParams) => `/organizations/${organizationId}`,
    { base: '/cd/api', pathParams: { organizationId }, ...props }
  )

export interface UpdateOrganizationPathParams {
  organizationId: string
}

export type UpdateOrganizationProps = Omit<
  MutateProps<OrganizationDTO, unknown, void, UpdateOrganizationRequest, UpdateOrganizationPathParams>,
  'path' | 'verb'
> &
  UpdateOrganizationPathParams

export const UpdateOrganization = ({ organizationId, ...props }: UpdateOrganizationProps) => (
  <Mutate<OrganizationDTO, unknown, void, UpdateOrganizationRequest, UpdateOrganizationPathParams>
    verb="PUT"
    path={`/organizations/${organizationId}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseUpdateOrganizationProps = Omit<
  UseMutateProps<OrganizationDTO, void, UpdateOrganizationRequest, UpdateOrganizationPathParams>,
  'path' | 'verb'
> &
  UpdateOrganizationPathParams

export const useUpdateOrganization = ({ organizationId, ...props }: UseUpdateOrganizationProps) =>
  useMutate<OrganizationDTO, unknown, void, UpdateOrganizationRequest, UpdateOrganizationPathParams>(
    'PUT',
    ({ organizationId }: UpdateOrganizationPathParams) => `/organizations/${organizationId}`,
    { base: '/cd/api', pathParams: { organizationId }, ...props }
  )

export interface ListQueryParams {
  organizationId?: string
}

export type ListProps = Omit<GetProps<ProjectDTO[], unknown, ListQueryParams, void>, 'path'>

export const List = (props: ListProps) => (
  <Get<ProjectDTO[], unknown, ListQueryParams, void> path={`/projects`} base={'/cd/api'} {...props} />
)

export type UseListProps = Omit<UseGetProps<ProjectDTO[], ListQueryParams, void>, 'path'>

export const useList = (props: UseListProps) =>
  useGet<ProjectDTO[], unknown, ListQueryParams, void>(`/projects`, { base: '/cd/api', ...props })

export type CreateProps = Omit<MutateProps<ProjectDTO, unknown, void, CreateProjectRequest, void>, 'path' | 'verb'>

export const Create = (props: CreateProps) => (
  <Mutate<ProjectDTO, unknown, void, CreateProjectRequest, void>
    verb="POST"
    path={`/projects`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseCreateProps = Omit<UseMutateProps<ProjectDTO, void, CreateProjectRequest, void>, 'path' | 'verb'>

export const useCreate = (props: UseCreateProps) =>
  useMutate<ProjectDTO, unknown, void, CreateProjectRequest, void>('POST', `/projects`, { base: '/cd/api', ...props })

export interface GetProjectPathParams {
  projectId: string
}

export type GetProjectProps = Omit<GetProps<ProjectDTO, unknown, void, GetProjectPathParams>, 'path'> &
  GetProjectPathParams

export const GetProject = ({ projectId, ...props }: GetProjectProps) => (
  <Get<ProjectDTO, unknown, void, GetProjectPathParams> path={`/projects/${projectId}`} base={'/cd/api'} {...props} />
)

export type UseGetProjectProps = Omit<UseGetProps<ProjectDTO, void, GetProjectPathParams>, 'path'> &
  GetProjectPathParams

export const useGetProject = ({ projectId, ...props }: UseGetProjectProps) =>
  useGet<ProjectDTO, unknown, void, GetProjectPathParams>(
    ({ projectId }: GetProjectPathParams) => `/projects/${projectId}`,
    { base: '/cd/api', pathParams: { projectId }, ...props }
  )

export interface UpdatePathParams {
  projectId: string
}

export type UpdateProps = Omit<
  MutateProps<ProjectDTO, unknown, void, UpdateProjectRequest, UpdatePathParams>,
  'path' | 'verb'
> &
  UpdatePathParams

export const Update = ({ projectId, ...props }: UpdateProps) => (
  <Mutate<ProjectDTO, unknown, void, UpdateProjectRequest, UpdatePathParams>
    verb="PUT"
    path={`/projects/${projectId}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseUpdateProps = Omit<
  UseMutateProps<ProjectDTO, void, UpdateProjectRequest, UpdatePathParams>,
  'path' | 'verb'
> &
  UpdatePathParams

export const useUpdate = ({ projectId, ...props }: UseUpdateProps) =>
  useMutate<ProjectDTO, unknown, void, UpdateProjectRequest, UpdatePathParams>(
    'PUT',
    ({ projectId }: UpdatePathParams) => `/projects/${projectId}`,
    { base: '/cd/api', pathParams: { projectId }, ...props }
  )
