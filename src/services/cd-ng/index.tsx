/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>

export interface ProjectDTO {
  id?: string
  accountIdentifier?: string
  orgIdentifier?: string
  identifier?: string
  name?: string
  color?: string
  purposeList?: string[]
  description?: string
  owners?: string[]
  tags?: string[]
}

export interface ResponseDTOBoolean {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: boolean
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ConnectorConfigDTO {
  [key: string]: any
}

export interface SecretManagerConfig {
  uuid: string
  encryptionType?: 'LOCAL' | 'KMS' | 'GCP_KMS' | 'AWS_SECRETS_MANAGER' | 'AZURE_VAULT' | 'CYBERARK' | 'VAULT' | 'CUSTOM'
  accountId?: string
  numOfEncryptedValue?: number
  encryptedBy?: string
  createdBy?: EmbeddedUser
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  lastUpdatedAt: number
  nextTokenRenewIteration?: number
  templatizedFields?: string[]
  default?: boolean
  encryptionServiceUrl?: string
  validationCriteria?: string
  name?: string
}

export interface ConnectorRequestDTO {
  name?: string
  identifier?: string
  description?: string
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifer?: string
  tags?: string[]
  type?: 'KUBERNETES_CLUSTER'
  spec?: ConnectorConfigDTO
}

export interface ResponseDTOOptionalOrganizationDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: OrganizationDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface AppEnvRestriction {
  appFilter?: GenericEntityFilter
  envFilter?: EnvFilter
}

export interface ResponseDTOPageProjectDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageProjectDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ErrorDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'ENGINE_REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
  message?: string
  correlationId?: string
  detailedMessage?: string
}

export interface ResponseDTOProjectDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: ProjectDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface FailureDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'ENGINE_REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
  message?: string
  correlationId?: string
  validationErrors?: ValidationError[]
}

export interface ResponseDTOListSecretManagerConfig {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: SecretManagerConfig[]
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface UsageRestrictions {
  appEnvRestrictions?: AppEnvRestriction[]
}

export interface ResponseDTOEncryptedData {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: EncryptedData
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface Pageable {
  unpaged?: boolean
  paged?: boolean
  pageNumber?: number
  pageSize?: number
  offset?: number
  sort?: Sort
}

export interface EmbeddedUser {
  uuid?: string
  name?: string
  email?: string
}

export interface ResponseDTOSecretManagerConfig {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: SecretManagerConfig
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface UpdateOrganizationDTO {
  name: string
  color: string
  description: string
  tags: string[]
}

export interface Sort {
  sorted?: boolean
  unsorted?: boolean
  empty?: boolean
}

export interface ResponseDTOPageOrganizationDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageOrganizationDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface EncryptedDataParams {
  name?: string
  value?: string
}

export interface PageProjectDTO {
  totalPages?: number
  totalElements?: number
  size?: number
  content?: ProjectDTO[]
  number?: number
  first?: boolean
  last?: boolean
  numberOfElements?: number
  pageable?: Pageable
  sort?: Sort
  empty?: boolean
}

export interface ValidationError {
  field?: string
  error?: string
}

export interface UpdateProjectDTO {
  name: string
  description: string
  owners: string[]
  tags: string[]
  purposeList: string[]
}

export interface ResponseDTOOrganizationDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: OrganizationDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface EncryptedData {
  name?: string
  encryptionKey?: string
  encryptedValue?: string[]
  path?: string
  parameters?: EncryptedDataParams[]
  type?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'AZURE_VAULT'
  parents?: EncryptedDataParent[]
  accountId?: string
  enabled?: boolean
  kmsId?: string
  encryptionType?: 'LOCAL' | 'KMS' | 'GCP_KMS' | 'AWS_SECRETS_MANAGER' | 'AZURE_VAULT' | 'CYBERARK' | 'VAULT' | 'CUSTOM'
  fileSize?: number
  appIds?: string[]
  serviceIds?: string[]
  envIds?: string[]
  backupEncryptedValue?: string[]
  backupEncryptionKey?: string
  backupKmsId?: string
  backupEncryptionType?:
    | 'LOCAL'
    | 'KMS'
    | 'GCP_KMS'
    | 'AWS_SECRETS_MANAGER'
    | 'AZURE_VAULT'
    | 'CYBERARK'
    | 'VAULT'
    | 'CUSTOM'
  serviceVariableIds?: string[]
  searchTags?: {
    [key: string]: AtomicInteger
  }
  scopedToAccount?: boolean
  usageRestrictions?: UsageRestrictions
  nextMigrationIteration?: number
  nextAwsToGcpKmsMigrationIteration?: number
  base64Encoded?: boolean
  encryptedBy?: string
  setupUsage?: number
  runTimeUsage?: number
  changeLog?: number
  keywords?: string[]
  uuid: string
  appId: string
  createdBy?: EmbeddedUser
  createdAt?: number
  lastUpdatedBy?: EmbeddedUser
  lastUpdatedAt: number
}

export interface ConnectorConfigSummaryDTO {
  [key: string]: any
}

export interface CreateProjectDTO {
  accountIdentifier: string
  identifier: string
  name: string
  color: string
  purposeList: string[]
  description?: string
  owners: string[]
  tags: string[]
}

export interface EnvFilter {
  ids?: string[]
  filterTypes?: string[]
}

export interface OptionalConnectorDTO {
  present?: boolean
}

export interface GenericEntityFilter {
  ids?: string[]
  filterType?: string
}

export interface OrganizationDTO {
  id?: string
  accountIdentifier?: string
  identifier?: string
  name?: string
  color?: string
  description?: string
  tags?: string[]
}

export type WorkflowFilter = EnvFilter & {}

export interface ResponseDTOString {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: string
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface CreateOrganizationDTO {
  identifier: string
  name: string
  color: string
  description?: string
  tags: string[]
}

export interface PageOrganizationDTO {
  totalPages?: number
  totalElements?: number
  size?: number
  content?: OrganizationDTO[]
  number?: number
  first?: boolean
  last?: boolean
  numberOfElements?: number
  pageable?: Pageable
  sort?: Sort
  empty?: boolean
}

export interface ConnectorDTO {
  name?: string
  identifier?: string
  description?: string
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifer?: string
  tags?: string[]
  type1?: 'KUBERNETES_CLUSTER'
  type?: 'KUBERNETES_CLUSTER'
  spec?: ConnectorConfigDTO
  createdAt?: number
  lastModifiedAt?: number
}

export interface AtomicInteger {
  andIncrement?: number
  andDecrement?: number
}

export interface EncryptedDataParent {
  id?: string
  type?:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'AZURE_VAULT'
  fieldName?: string
}

export interface ResponseDTOListEncryptedData {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: EncryptedData[]
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ConnectorSummaryDTO {
  identifier?: string
  name?: string
  description?: string
  accountId?: string
  orgId?: string
  projectId?: string
  accountName?: string
  orgName?: string
  projectName?: string
  type?: 'KUBERNETES_CLUSTER'
  categories?: 'CLOUD_PROVIDER'[]
  connectorDetials?: ConnectorConfigSummaryDTO
  tags?: string[]
  createdAt?: number
  lastModifiedAt?: number
  version?: number
}

export interface ResponseDTOOptionalProjectDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: ProjectDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface PageConnectorSummaryDTO {
  totalPages?: number
  totalElements?: number
  size?: number
  content?: ConnectorSummaryDTO[]
  number?: number
  first?: boolean
  last?: boolean
  numberOfElements?: number
  pageable?: Pageable
  sort?: Sort
  empty?: boolean
}

export type ConnectorRequestDTORequestBody = ConnectorRequestDTO

export interface GetOrganizationListQueryParams {
  page?: number
  size?: number
  sort?: string[]
}

export interface GetOrganizationListPathParams {
  accountIdentifier: string
}

export type GetOrganizationListProps = Omit<
  GetProps<
    ResponseDTOPageOrganizationDTO,
    FailureDTO | ErrorDTO,
    GetOrganizationListQueryParams,
    GetOrganizationListPathParams
  >,
  'path'
> &
  GetOrganizationListPathParams

/**
 * Get Organization list
 */
export const GetOrganizationList = ({ accountIdentifier, ...props }: GetOrganizationListProps) => (
  <Get<
    ResponseDTOPageOrganizationDTO,
    FailureDTO | ErrorDTO,
    GetOrganizationListQueryParams,
    GetOrganizationListPathParams
  >
    path={`/accounts/${accountIdentifier}/organizations`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetOrganizationListProps = Omit<
  UseGetProps<ResponseDTOPageOrganizationDTO, GetOrganizationListQueryParams, GetOrganizationListPathParams>,
  'path'
> &
  GetOrganizationListPathParams

/**
 * Get Organization list
 */
export const useGetOrganizationList = ({ accountIdentifier, ...props }: UseGetOrganizationListProps) =>
  useGet<
    ResponseDTOPageOrganizationDTO,
    FailureDTO | ErrorDTO,
    GetOrganizationListQueryParams,
    GetOrganizationListPathParams
  >(({ accountIdentifier }: GetOrganizationListPathParams) => `/accounts/${accountIdentifier}/organizations`, {
    base: '/cd/api',
    pathParams: { accountIdentifier },
    ...props
  })

export interface PostOrganizationPathParams {
  accountIdentifier: string
}

export type PostOrganizationProps = Omit<
  MutateProps<
    ResponseDTOOrganizationDTO,
    FailureDTO | ErrorDTO,
    void,
    CreateOrganizationDTO,
    PostOrganizationPathParams
  >,
  'path' | 'verb'
> &
  PostOrganizationPathParams

/**
 * Create an Organization
 */
export const PostOrganization = ({ accountIdentifier, ...props }: PostOrganizationProps) => (
  <Mutate<ResponseDTOOrganizationDTO, FailureDTO | ErrorDTO, void, CreateOrganizationDTO, PostOrganizationPathParams>
    verb="POST"
    path={`/accounts/${accountIdentifier}/organizations`}
    base={'/cd/api'}
    {...props}
  />
)

export type UsePostOrganizationProps = Omit<
  UseMutateProps<ResponseDTOOrganizationDTO, void, CreateOrganizationDTO, PostOrganizationPathParams>,
  'path' | 'verb'
> &
  PostOrganizationPathParams

/**
 * Create an Organization
 */
export const usePostOrganization = ({ accountIdentifier, ...props }: UsePostOrganizationProps) =>
  useMutate<ResponseDTOOrganizationDTO, FailureDTO | ErrorDTO, void, CreateOrganizationDTO, PostOrganizationPathParams>(
    'POST',
    ({ accountIdentifier }: PostOrganizationPathParams) => `/accounts/${accountIdentifier}/organizations`,
    { base: '/cd/api', pathParams: { accountIdentifier }, ...props }
  )

export interface GetOrganizationPathParams {
  accountIdentifier: string
  organizationIdentifier: string
}

export type GetOrganizationProps = Omit<
  GetProps<ResponseDTOOptionalOrganizationDTO, FailureDTO | ErrorDTO, void, GetOrganizationPathParams>,
  'path'
> &
  GetOrganizationPathParams

/**
 * Get an Organization
 */
export const GetOrganization = ({ accountIdentifier, organizationIdentifier, ...props }: GetOrganizationProps) => (
  <Get<ResponseDTOOptionalOrganizationDTO, FailureDTO | ErrorDTO, void, GetOrganizationPathParams>
    path={`/accounts/${accountIdentifier}/organizations/${organizationIdentifier}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetOrganizationProps = Omit<
  UseGetProps<ResponseDTOOptionalOrganizationDTO, void, GetOrganizationPathParams>,
  'path'
> &
  GetOrganizationPathParams

/**
 * Get an Organization
 */
export const useGetOrganization = ({ accountIdentifier, organizationIdentifier, ...props }: UseGetOrganizationProps) =>
  useGet<ResponseDTOOptionalOrganizationDTO, FailureDTO | ErrorDTO, void, GetOrganizationPathParams>(
    ({ accountIdentifier, organizationIdentifier }: GetOrganizationPathParams) =>
      `/accounts/${accountIdentifier}/organizations/${organizationIdentifier}`,
    { base: '/cd/api', pathParams: { accountIdentifier, organizationIdentifier }, ...props }
  )

export interface PutOrganizationPathParams {
  accountIdentifier: string
  organizationIdentifier: string
}

export type PutOrganizationProps = Omit<
  MutateProps<
    ResponseDTOOptionalOrganizationDTO,
    FailureDTO | ErrorDTO,
    void,
    UpdateOrganizationDTO,
    PutOrganizationPathParams
  >,
  'path' | 'verb'
> &
  PutOrganizationPathParams

/**
 * Update Organization by identifier
 */
export const PutOrganization = ({ accountIdentifier, organizationIdentifier, ...props }: PutOrganizationProps) => (
  <Mutate<
    ResponseDTOOptionalOrganizationDTO,
    FailureDTO | ErrorDTO,
    void,
    UpdateOrganizationDTO,
    PutOrganizationPathParams
  >
    verb="PUT"
    path={`/accounts/${accountIdentifier}/organizations/${organizationIdentifier}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UsePutOrganizationProps = Omit<
  UseMutateProps<ResponseDTOOptionalOrganizationDTO, void, UpdateOrganizationDTO, PutOrganizationPathParams>,
  'path' | 'verb'
> &
  PutOrganizationPathParams

/**
 * Update Organization by identifier
 */
export const usePutOrganization = ({ accountIdentifier, organizationIdentifier, ...props }: UsePutOrganizationProps) =>
  useMutate<
    ResponseDTOOptionalOrganizationDTO,
    FailureDTO | ErrorDTO,
    void,
    UpdateOrganizationDTO,
    PutOrganizationPathParams
  >(
    'PUT',
    ({ accountIdentifier, organizationIdentifier }: PutOrganizationPathParams) =>
      `/accounts/${accountIdentifier}/organizations/${organizationIdentifier}`,
    { base: '/cd/api', pathParams: { accountIdentifier, organizationIdentifier }, ...props }
  )

export interface DeleteOrganizationPathParams {
  accountIdentifier: string
}

export type DeleteOrganizationProps = Omit<
  MutateProps<ResponseDTOBoolean, FailureDTO | ErrorDTO, void, string, DeleteOrganizationPathParams>,
  'path' | 'verb'
> &
  DeleteOrganizationPathParams

/**
 * Delete Organization by identifier
 */
export const DeleteOrganization = ({ accountIdentifier, ...props }: DeleteOrganizationProps) => (
  <Mutate<ResponseDTOBoolean, FailureDTO | ErrorDTO, void, string, DeleteOrganizationPathParams>
    verb="DELETE"
    path={`/accounts/${accountIdentifier}/organizations`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseDeleteOrganizationProps = Omit<
  UseMutateProps<ResponseDTOBoolean, void, string, DeleteOrganizationPathParams>,
  'path' | 'verb'
> &
  DeleteOrganizationPathParams

/**
 * Delete Organization by identifier
 */
export const useDeleteOrganization = ({ accountIdentifier, ...props }: UseDeleteOrganizationProps) =>
  useMutate<ResponseDTOBoolean, FailureDTO | ErrorDTO, void, string, DeleteOrganizationPathParams>(
    'DELETE',
    ({ accountIdentifier }: DeleteOrganizationPathParams) => `/accounts/${accountIdentifier}/organizations`,
    { base: '/cd/api', pathParams: { accountIdentifier }, ...props }
  )

export interface GetProjectListForAccountQueryParams {
  page?: number
  size?: number
  sort?: string[]
}

export interface GetProjectListForAccountPathParams {
  accountIdentifier: string
}

export type GetProjectListForAccountProps = Omit<
  GetProps<
    ResponseDTOPageProjectDTO,
    FailureDTO | ErrorDTO,
    GetProjectListForAccountQueryParams,
    GetProjectListForAccountPathParams
  >,
  'path'
> &
  GetProjectListForAccountPathParams

/**
 * Gets Project list for an account
 */
export const GetProjectListForAccount = ({ accountIdentifier, ...props }: GetProjectListForAccountProps) => (
  <Get<
    ResponseDTOPageProjectDTO,
    FailureDTO | ErrorDTO,
    GetProjectListForAccountQueryParams,
    GetProjectListForAccountPathParams
  >
    path={`/accounts/${accountIdentifier}/projects`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetProjectListForAccountProps = Omit<
  UseGetProps<ResponseDTOPageProjectDTO, GetProjectListForAccountQueryParams, GetProjectListForAccountPathParams>,
  'path'
> &
  GetProjectListForAccountPathParams

/**
 * Gets Project list for an account
 */
export const useGetProjectListForAccount = ({ accountIdentifier, ...props }: UseGetProjectListForAccountProps) =>
  useGet<
    ResponseDTOPageProjectDTO,
    FailureDTO | ErrorDTO,
    GetProjectListForAccountQueryParams,
    GetProjectListForAccountPathParams
  >(({ accountIdentifier }: GetProjectListForAccountPathParams) => `/accounts/${accountIdentifier}/projects`, {
    base: '/cd/api',
    pathParams: { accountIdentifier },
    ...props
  })

export interface GetConnectorListQueryParams {
  page?: number
  size?: number
}

export type GetConnectorListProps = Omit<
  GetProps<PageConnectorSummaryDTO, unknown, GetConnectorListQueryParams, void>,
  'path'
>

/**
 * Gets Connector list
 */
export const GetConnectorList = (props: GetConnectorListProps) => (
  <Get<PageConnectorSummaryDTO, unknown, GetConnectorListQueryParams, void>
    path={`/connectors`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetConnectorListProps = Omit<
  UseGetProps<PageConnectorSummaryDTO, GetConnectorListQueryParams, void>,
  'path'
>

/**
 * Gets Connector list
 */
export const useGetConnectorList = (props: UseGetConnectorListProps) =>
  useGet<PageConnectorSummaryDTO, unknown, GetConnectorListQueryParams, void>(`/connectors`, {
    base: '/cd/api',
    ...props
  })

export type CreateConnectorProps = Omit<
  MutateProps<ConnectorDTO, unknown, void, ConnectorRequestDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Creates a Connector
 */
export const CreateConnector = (props: CreateConnectorProps) => (
  <Mutate<ConnectorDTO, unknown, void, ConnectorRequestDTORequestBody, void>
    verb="POST"
    path={`/connectors`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseCreateConnectorProps = Omit<
  UseMutateProps<ConnectorDTO, void, ConnectorRequestDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Creates a Connector
 */
export const useCreateConnector = (props: UseCreateConnectorProps) =>
  useMutate<ConnectorDTO, unknown, void, ConnectorRequestDTORequestBody, void>('POST', `/connectors`, {
    base: '/cd/api',
    ...props
  })

export type UpdateConnectorProps = Omit<
  MutateProps<ConnectorDTO, unknown, void, ConnectorRequestDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Updates a Connector
 */
export const UpdateConnector = (props: UpdateConnectorProps) => (
  <Mutate<ConnectorDTO, unknown, void, ConnectorRequestDTORequestBody, void>
    verb="PUT"
    path={`/connectors`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseUpdateConnectorProps = Omit<
  UseMutateProps<ConnectorDTO, void, ConnectorRequestDTORequestBody, void>,
  'path' | 'verb'
>

/**
 * Updates a Connector
 */
export const useUpdateConnector = (props: UseUpdateConnectorProps) =>
  useMutate<ConnectorDTO, unknown, void, ConnectorRequestDTORequestBody, void>('PUT', `/connectors`, {
    base: '/cd/api',
    ...props
  })

export interface GetConnectorQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface GetConnectorPathParams {
  connectorIdentifier: string
}

export type GetConnectorProps = Omit<
  GetProps<ConnectorDTO, unknown, GetConnectorQueryParams, GetConnectorPathParams>,
  'path'
> &
  GetConnectorPathParams

/**
 * Get Connector
 */
export const GetConnector = ({ connectorIdentifier, ...props }: GetConnectorProps) => (
  <Get<ConnectorDTO, unknown, GetConnectorQueryParams, GetConnectorPathParams>
    path={`/connectors/${connectorIdentifier}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetConnectorProps = Omit<
  UseGetProps<ConnectorDTO, GetConnectorQueryParams, GetConnectorPathParams>,
  'path'
> &
  GetConnectorPathParams

/**
 * Get Connector
 */
export const useGetConnector = ({ connectorIdentifier, ...props }: UseGetConnectorProps) =>
  useGet<ConnectorDTO, unknown, GetConnectorQueryParams, GetConnectorPathParams>(
    ({ connectorIdentifier }: GetConnectorPathParams) => `/connectors/${connectorIdentifier}`,
    { base: '/cd/api', pathParams: { connectorIdentifier }, ...props }
  )

export interface DeleteConnectorQueryParams {
  accountIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type DeleteConnectorProps = Omit<
  MutateProps<boolean, unknown, DeleteConnectorQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a connector by identifier
 */
export const DeleteConnector = (props: DeleteConnectorProps) => (
  <Mutate<boolean, unknown, DeleteConnectorQueryParams, string, void>
    verb="DELETE"
    path={`/connectors`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseDeleteConnectorProps = Omit<
  UseMutateProps<boolean, DeleteConnectorQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete a connector by identifier
 */
export const useDeleteConnector = (props: UseDeleteConnectorProps) =>
  useMutate<boolean, unknown, DeleteConnectorQueryParams, string, void>('DELETE', `/connectors`, {
    base: '/cd/api',
    ...props
  })

export interface PostDelegateQueryParams {
  accountId?: string
}

export type PostDelegateProps = Omit<GetProps<string, unknown, PostDelegateQueryParams, void>, 'path'>

/**
 * Create a delegate tasks
 */
export const PostDelegate = (props: PostDelegateProps) => (
  <Get<string, unknown, PostDelegateQueryParams, void> path={`/delegate-tasks`} base={'/cd/api'} {...props} />
)

export type UsePostDelegateProps = Omit<UseGetProps<string, PostDelegateQueryParams, void>, 'path'>

/**
 * Create a delegate tasks
 */
export const usePostDelegate = (props: UsePostDelegateProps) =>
  useGet<string, unknown, PostDelegateQueryParams, void>(`/delegate-tasks`, { base: '/cd/api', ...props })

export interface GetProjectListForOrganizationQueryParams {
  page?: number
  size?: number
  sort?: string[]
}

export interface GetProjectListForOrganizationPathParams {
  orgIdentifier: string
}

export type GetProjectListForOrganizationProps = Omit<
  GetProps<
    ResponseDTOPageProjectDTO,
    FailureDTO | ErrorDTO,
    GetProjectListForOrganizationQueryParams,
    GetProjectListForOrganizationPathParams
  >,
  'path'
> &
  GetProjectListForOrganizationPathParams

/**
 * Gets Project list for an organization
 */
export const GetProjectListForOrganization = ({ orgIdentifier, ...props }: GetProjectListForOrganizationProps) => (
  <Get<
    ResponseDTOPageProjectDTO,
    FailureDTO | ErrorDTO,
    GetProjectListForOrganizationQueryParams,
    GetProjectListForOrganizationPathParams
  >
    path={`/organizations/${orgIdentifier}/projects`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetProjectListForOrganizationProps = Omit<
  UseGetProps<
    ResponseDTOPageProjectDTO,
    GetProjectListForOrganizationQueryParams,
    GetProjectListForOrganizationPathParams
  >,
  'path'
> &
  GetProjectListForOrganizationPathParams

/**
 * Gets Project list for an organization
 */
export const useGetProjectListForOrganization = ({ orgIdentifier, ...props }: UseGetProjectListForOrganizationProps) =>
  useGet<
    ResponseDTOPageProjectDTO,
    FailureDTO | ErrorDTO,
    GetProjectListForOrganizationQueryParams,
    GetProjectListForOrganizationPathParams
  >(({ orgIdentifier }: GetProjectListForOrganizationPathParams) => `/organizations/${orgIdentifier}/projects`, {
    base: '/cd/api',
    pathParams: { orgIdentifier },
    ...props
  })

export interface PostProjectPathParams {
  orgIdentifier: string
}

export type PostProjectProps = Omit<
  MutateProps<ResponseDTOProjectDTO, FailureDTO | ErrorDTO, void, CreateProjectDTO, PostProjectPathParams>,
  'path' | 'verb'
> &
  PostProjectPathParams

/**
 * Create a Project
 */
export const PostProject = ({ orgIdentifier, ...props }: PostProjectProps) => (
  <Mutate<ResponseDTOProjectDTO, FailureDTO | ErrorDTO, void, CreateProjectDTO, PostProjectPathParams>
    verb="POST"
    path={`/organizations/${orgIdentifier}/projects`}
    base={'/cd/api'}
    {...props}
  />
)

export type UsePostProjectProps = Omit<
  UseMutateProps<ResponseDTOProjectDTO, void, CreateProjectDTO, PostProjectPathParams>,
  'path' | 'verb'
> &
  PostProjectPathParams

/**
 * Create a Project
 */
export const usePostProject = ({ orgIdentifier, ...props }: UsePostProjectProps) =>
  useMutate<ResponseDTOProjectDTO, FailureDTO | ErrorDTO, void, CreateProjectDTO, PostProjectPathParams>(
    'POST',
    ({ orgIdentifier }: PostProjectPathParams) => `/organizations/${orgIdentifier}/projects`,
    { base: '/cd/api', pathParams: { orgIdentifier }, ...props }
  )

export interface GetProjectPathParams {
  orgIdentifier: string
  projectIdentifier: string
}

export type GetProjectProps = Omit<
  GetProps<ResponseDTOOptionalProjectDTO, FailureDTO | ErrorDTO, void, GetProjectPathParams>,
  'path'
> &
  GetProjectPathParams

/**
 * Gets a Project by identifier
 */
export const GetProject = ({ orgIdentifier, projectIdentifier, ...props }: GetProjectProps) => (
  <Get<ResponseDTOOptionalProjectDTO, FailureDTO | ErrorDTO, void, GetProjectPathParams>
    path={`/organizations/${orgIdentifier}/projects/${projectIdentifier}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetProjectProps = Omit<UseGetProps<ResponseDTOOptionalProjectDTO, void, GetProjectPathParams>, 'path'> &
  GetProjectPathParams

/**
 * Gets a Project by identifier
 */
export const useGetProject = ({ orgIdentifier, projectIdentifier, ...props }: UseGetProjectProps) =>
  useGet<ResponseDTOOptionalProjectDTO, FailureDTO | ErrorDTO, void, GetProjectPathParams>(
    ({ orgIdentifier, projectIdentifier }: GetProjectPathParams) =>
      `/organizations/${orgIdentifier}/projects/${projectIdentifier}`,
    { base: '/cd/api', pathParams: { orgIdentifier, projectIdentifier }, ...props }
  )

export interface PutProjectPathParams {
  orgIdentifier: string
  projectIdentifier: string
}

export type PutProjectProps = Omit<
  MutateProps<ResponseDTOOptionalProjectDTO, FailureDTO | ErrorDTO, void, UpdateProjectDTO, PutProjectPathParams>,
  'path' | 'verb'
> &
  PutProjectPathParams

/**
 * Update a project by identifier
 */
export const PutProject = ({ orgIdentifier, projectIdentifier, ...props }: PutProjectProps) => (
  <Mutate<ResponseDTOOptionalProjectDTO, FailureDTO | ErrorDTO, void, UpdateProjectDTO, PutProjectPathParams>
    verb="PUT"
    path={`/organizations/${orgIdentifier}/projects/${projectIdentifier}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UsePutProjectProps = Omit<
  UseMutateProps<ResponseDTOOptionalProjectDTO, void, UpdateProjectDTO, PutProjectPathParams>,
  'path' | 'verb'
> &
  PutProjectPathParams

/**
 * Update a project by identifier
 */
export const usePutProject = ({ orgIdentifier, projectIdentifier, ...props }: UsePutProjectProps) =>
  useMutate<ResponseDTOOptionalProjectDTO, FailureDTO | ErrorDTO, void, UpdateProjectDTO, PutProjectPathParams>(
    'PUT',
    ({ orgIdentifier, projectIdentifier }: PutProjectPathParams) =>
      `/organizations/${orgIdentifier}/projects/${projectIdentifier}`,
    { base: '/cd/api', pathParams: { orgIdentifier, projectIdentifier }, ...props }
  )

export interface DeleteProjectPathParams {
  orgIdentifier: string
}

export type DeleteProjectProps = Omit<
  MutateProps<ResponseDTOBoolean, FailureDTO | ErrorDTO, void, string, DeleteProjectPathParams>,
  'path' | 'verb'
> &
  DeleteProjectPathParams

/**
 * Delete a project by identifier
 */
export const DeleteProject = ({ orgIdentifier, ...props }: DeleteProjectProps) => (
  <Mutate<ResponseDTOBoolean, FailureDTO | ErrorDTO, void, string, DeleteProjectPathParams>
    verb="DELETE"
    path={`/organizations/${orgIdentifier}/projects`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseDeleteProjectProps = Omit<
  UseMutateProps<ResponseDTOBoolean, void, string, DeleteProjectPathParams>,
  'path' | 'verb'
> &
  DeleteProjectPathParams

/**
 * Delete a project by identifier
 */
export const useDeleteProject = ({ orgIdentifier, ...props }: UseDeleteProjectProps) =>
  useMutate<ResponseDTOBoolean, FailureDTO | ErrorDTO, void, string, DeleteProjectPathParams>(
    'DELETE',
    ({ orgIdentifier }: DeleteProjectPathParams) => `/organizations/${orgIdentifier}/projects`,
    { base: '/cd/api', pathParams: { orgIdentifier }, ...props }
  )

export interface ListSecretManagersQueryParams {
  accountIdentifier: string
}

export type ListSecretManagersProps = Omit<
  GetProps<ResponseDTOListSecretManagerConfig, FailureDTO | ErrorDTO, ListSecretManagersQueryParams, void>,
  'path'
>

/**
 * Get secret managers for an account
 */
export const ListSecretManagers = (props: ListSecretManagersProps) => (
  <Get<ResponseDTOListSecretManagerConfig, FailureDTO | ErrorDTO, ListSecretManagersQueryParams, void>
    path={`/secret-managers`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseListSecretManagersProps = Omit<
  UseGetProps<ResponseDTOListSecretManagerConfig, ListSecretManagersQueryParams, void>,
  'path'
>

/**
 * Get secret managers for an account
 */
export const useListSecretManagers = (props: UseListSecretManagersProps) =>
  useGet<ResponseDTOListSecretManagerConfig, FailureDTO | ErrorDTO, ListSecretManagersQueryParams, void>(
    `/secret-managers`,
    { base: '/cd/api', ...props }
  )

export interface SaveOrUpdateSecretManagerQueryParams {
  accountIdentifier: string
}

export type SaveOrUpdateSecretManagerProps = Omit<
  MutateProps<
    ResponseDTOString,
    FailureDTO | ErrorDTO,
    SaveOrUpdateSecretManagerQueryParams,
    SecretManagerConfig,
    void
  >,
  'path' | 'verb'
>

/**
 * Create or update a secret manager
 */
export const SaveOrUpdateSecretManager = (props: SaveOrUpdateSecretManagerProps) => (
  <Mutate<ResponseDTOString, FailureDTO | ErrorDTO, SaveOrUpdateSecretManagerQueryParams, SecretManagerConfig, void>
    verb="POST"
    path={`/secret-managers`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseSaveOrUpdateSecretManagerProps = Omit<
  UseMutateProps<ResponseDTOString, SaveOrUpdateSecretManagerQueryParams, SecretManagerConfig, void>,
  'path' | 'verb'
>

/**
 * Create or update a secret manager
 */
export const useSaveOrUpdateSecretManager = (props: UseSaveOrUpdateSecretManagerProps) =>
  useMutate<ResponseDTOString, FailureDTO | ErrorDTO, SaveOrUpdateSecretManagerQueryParams, SecretManagerConfig, void>(
    'POST',
    `/secret-managers`,
    { base: '/cd/api', ...props }
  )

export interface GetSecretManagerByIdQueryParams {
  accountIdentifier: string
}

export interface GetSecretManagerByIdPathParams {
  kmsId: string
}

export type GetSecretManagerByIdProps = Omit<
  GetProps<
    ResponseDTOSecretManagerConfig,
    FailureDTO | ErrorDTO,
    GetSecretManagerByIdQueryParams,
    GetSecretManagerByIdPathParams
  >,
  'path'
> &
  GetSecretManagerByIdPathParams

/**
 * Get a secret manager by kmsId
 */
export const GetSecretManagerById = ({ kmsId, ...props }: GetSecretManagerByIdProps) => (
  <Get<
    ResponseDTOSecretManagerConfig,
    FailureDTO | ErrorDTO,
    GetSecretManagerByIdQueryParams,
    GetSecretManagerByIdPathParams
  >
    path={`/secret-managers/${kmsId}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetSecretManagerByIdProps = Omit<
  UseGetProps<ResponseDTOSecretManagerConfig, GetSecretManagerByIdQueryParams, GetSecretManagerByIdPathParams>,
  'path'
> &
  GetSecretManagerByIdPathParams

/**
 * Get a secret manager by kmsId
 */
export const useGetSecretManagerById = ({ kmsId, ...props }: UseGetSecretManagerByIdProps) =>
  useGet<
    ResponseDTOSecretManagerConfig,
    FailureDTO | ErrorDTO,
    GetSecretManagerByIdQueryParams,
    GetSecretManagerByIdPathParams
  >(({ kmsId }: GetSecretManagerByIdPathParams) => `/secret-managers/${kmsId}`, {
    base: '/cd/api',
    pathParams: { kmsId },
    ...props
  })

export interface DeleteSecretManagerQueryParams {
  accountIdentifier: string
}

export type DeleteSecretManagerProps = Omit<
  MutateProps<ResponseDTOBoolean, FailureDTO | ErrorDTO, DeleteSecretManagerQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete secret manager
 */
export const DeleteSecretManager = (props: DeleteSecretManagerProps) => (
  <Mutate<ResponseDTOBoolean, FailureDTO | ErrorDTO, DeleteSecretManagerQueryParams, string, void>
    verb="DELETE"
    path={`/secret-managers`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseDeleteSecretManagerProps = Omit<
  UseMutateProps<ResponseDTOBoolean, DeleteSecretManagerQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Delete secret manager
 */
export const useDeleteSecretManager = (props: UseDeleteSecretManagerProps) =>
  useMutate<ResponseDTOBoolean, FailureDTO | ErrorDTO, DeleteSecretManagerQueryParams, string, void>(
    'DELETE',
    `/secret-managers`,
    { base: '/cd/api', ...props }
  )

export interface ListSecretsForAccountQueryParams {
  accountIdentifier: string
  type:
    | 'HOST_CONNECTION_ATTRIBUTES'
    | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
    | 'SMTP'
    | 'SFTP'
    | 'JENKINS'
    | 'BAMBOO'
    | 'STRING'
    | 'SPLUNK'
    | 'ELK'
    | 'LOGZ'
    | 'SUMO'
    | 'DATA_DOG'
    | 'APM_VERIFICATION'
    | 'BUG_SNAG'
    | 'LOG_VERIFICATION'
    | 'APP_DYNAMICS'
    | 'NEW_RELIC'
    | 'DYNA_TRACE'
    | 'INSTANA'
    | 'DATA_DOG_LOG'
    | 'CLOUD_WATCH'
    | 'SCALYR'
    | 'ELB'
    | 'SLACK'
    | 'AWS'
    | 'GCS'
    | 'GCP'
    | 'AZURE'
    | 'PCF'
    | 'DIRECT'
    | 'KUBERNETES_CLUSTER'
    | 'DOCKER'
    | 'ECR'
    | 'GCR'
    | 'ACR'
    | 'PHYSICAL_DATA_CENTER'
    | 'KUBERNETES'
    | 'NEXUS'
    | 'ARTIFACTORY'
    | 'SMB'
    | 'AMAZON_S3'
    | 'GIT'
    | 'SSH_SESSION_CONFIG'
    | 'SERVICE_VARIABLE'
    | 'CONFIG_FILE'
    | 'KMS'
    | 'GCP_KMS'
    | 'JIRA'
    | 'SERVICENOW'
    | 'SECRET_TEXT'
    | 'YAML_GIT_SYNC'
    | 'VAULT'
    | 'AWS_SECRETS_MANAGER'
    | 'CYBERARK'
    | 'WINRM_CONNECTION_ATTRIBUTES'
    | 'WINRM_SESSION_CONFIG'
    | 'PROMETHEUS'
    | 'INFRASTRUCTURE_MAPPING'
    | 'HTTP_HELM_REPO'
    | 'AMAZON_S3_HELM_REPO'
    | 'GCS_HELM_REPO'
    | 'SPOT_INST'
    | 'AZURE_ARTIFACTS_PAT'
    | 'CUSTOM'
    | 'CE_AWS'
    | 'CE_GCP'
    | 'AZURE_VAULT'
  includeDetails?: boolean
}

export type ListSecretsForAccountProps = Omit<
  GetProps<ResponseDTOListEncryptedData, unknown, ListSecretsForAccountQueryParams, void>,
  'path'
>

/**
 * Get secrets for an account
 */
export const ListSecretsForAccount = (props: ListSecretsForAccountProps) => (
  <Get<ResponseDTOListEncryptedData, unknown, ListSecretsForAccountQueryParams, void>
    path={`/secrets`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseListSecretsForAccountProps = Omit<
  UseGetProps<ResponseDTOListEncryptedData, ListSecretsForAccountQueryParams, void>,
  'path'
>

/**
 * Get secrets for an account
 */
export const useListSecretsForAccount = (props: UseListSecretsForAccountProps) =>
  useGet<ResponseDTOListEncryptedData, unknown, ListSecretsForAccountQueryParams, void>(`/secrets`, {
    base: '/cd/api',
    ...props
  })

export interface GetSecretByIdQueryParams {
  accountIdentifier: string
}

export interface GetSecretByIdPathParams {
  secretId: string
}

export type GetSecretByIdProps = Omit<
  GetProps<ResponseDTOEncryptedData, unknown, GetSecretByIdQueryParams, GetSecretByIdPathParams>,
  'path'
> &
  GetSecretByIdPathParams

/**
 * Gets a secret by id
 */
export const GetSecretById = ({ secretId, ...props }: GetSecretByIdProps) => (
  <Get<ResponseDTOEncryptedData, unknown, GetSecretByIdQueryParams, GetSecretByIdPathParams>
    path={`/secrets/${secretId}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetSecretByIdProps = Omit<
  UseGetProps<ResponseDTOEncryptedData, GetSecretByIdQueryParams, GetSecretByIdPathParams>,
  'path'
> &
  GetSecretByIdPathParams

/**
 * Gets a secret by id
 */
export const useGetSecretById = ({ secretId, ...props }: UseGetSecretByIdProps) =>
  useGet<ResponseDTOEncryptedData, unknown, GetSecretByIdQueryParams, GetSecretByIdPathParams>(
    ({ secretId }: GetSecretByIdPathParams) => `/secrets/${secretId}`,
    { base: '/cd/api', pathParams: { secretId }, ...props }
  )
