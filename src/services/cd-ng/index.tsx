/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>

export interface CreateOrganizationDTO {
  accountId?: string
  identifier?: string
  name?: string
  color?: string
  description: string
  tags: string[]
}

export interface ProjectDTO {
  id?: string
  accountId?: string
  orgId?: string
  identifier?: string
  name?: string
  description?: string
  owners?: string[]
  tags?: string[]
}

export interface PageOrganizationDTO {
  totalPages?: number
  totalElements?: number
  first?: boolean
  size?: number
  content?: OrganizationDTO[]
  number?: number
  sort?: Sort
  last?: boolean
  numberOfElements?: number
  pageable?: Pageable
  empty?: boolean
}

export interface Pageable {
  offset?: number
  sort?: Sort
  pageNumber?: number
  pageSize?: number
  unpaged?: boolean
  paged?: boolean
}

export interface OptionalProjectDTO {
  present?: boolean
}

export interface OptionalOrganizationDTO {
  present?: boolean
}

export interface CreateProjectDTO {
  accountId?: string
  orgId?: string
  identifier?: string
  name?: string
  color?: string
  description?: string
  owners?: string[]
  tags?: string[]
}

export interface UpdateOrganizationDTO {
  name?: string
  color?: string
  description: string
  tags: string[]
}

export interface Sort {
  sorted?: boolean
  unsorted?: boolean
  empty?: boolean
}

export interface UpdateProjectDTO {
  name?: string
  description?: string
  owners?: string[]
  tags?: string[]
}

export interface PageProjectDTO {
  totalPages?: number
  totalElements?: number
  first?: boolean
  size?: number
  content?: ProjectDTO[]
  number?: number
  sort?: Sort
  last?: boolean
  numberOfElements?: number
  pageable?: Pageable
  empty?: boolean
}

export interface OrganizationDTO {
  id?: string
  accountId?: string
  identifier?: string
  name?: string
  color?: string
  description?: string
  tags?: string[]
}

export interface GetOrganizationsQueryParams {
  accountId?: string
  filter?: string
  page?: number
  size?: number
  sort?: string[]
}

export type GetOrganizationsProps = Omit<
  GetProps<PageOrganizationDTO, unknown, GetOrganizationsQueryParams, void>,
  'path'
>

export const GetOrganizations = (props: GetOrganizationsProps) => (
  <Get<PageOrganizationDTO, unknown, GetOrganizationsQueryParams, void>
    path={`/organizations`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetOrganizationsProps = Omit<UseGetProps<PageOrganizationDTO, GetOrganizationsQueryParams, void>, 'path'>

export const useGetOrganizations = (props: UseGetOrganizationsProps) =>
  useGet<PageOrganizationDTO, unknown, GetOrganizationsQueryParams, void>(`/organizations`, {
    base: '/cd/api',
    ...props
  })

export type CreateProps = Omit<
  MutateProps<OrganizationDTO, unknown, void, CreateOrganizationDTO, void>,
  'path' | 'verb'
>

export const Create = (props: CreateProps) => (
  <Mutate<OrganizationDTO, unknown, void, CreateOrganizationDTO, void>
    verb="POST"
    path={`/organizations`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseCreateProps = Omit<UseMutateProps<OrganizationDTO, void, CreateOrganizationDTO, void>, 'path' | 'verb'>

export const useCreate = (props: UseCreateProps) =>
  useMutate<OrganizationDTO, unknown, void, CreateOrganizationDTO, void>('POST', `/organizations`, {
    base: '/cd/api',
    ...props
  })

export interface GetOrganizationPathParams {
  organizationId: string
}

export type GetOrganizationProps = Omit<GetProps<OrganizationDTO, unknown, void, GetOrganizationPathParams>, 'path'> &
  GetOrganizationPathParams

export const GetOrganization = ({ organizationId, ...props }: GetOrganizationProps) => (
  <Get<OrganizationDTO, unknown, void, GetOrganizationPathParams>
    path={`/organizations/${organizationId}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseGetOrganizationProps = Omit<UseGetProps<OrganizationDTO, void, GetOrganizationPathParams>, 'path'> &
  GetOrganizationPathParams

export const useGetOrganization = ({ organizationId, ...props }: UseGetOrganizationProps) =>
  useGet<OrganizationDTO, unknown, void, GetOrganizationPathParams>(
    ({ organizationId }: GetOrganizationPathParams) => `/organizations/${organizationId}`,
    { base: '/cd/api', pathParams: { organizationId }, ...props }
  )

export interface UpdateOrganizationPathParams {
  organizationId: string
}

export type UpdateOrganizationProps = Omit<
  MutateProps<OrganizationDTO, unknown, void, UpdateOrganizationDTO, UpdateOrganizationPathParams>,
  'path' | 'verb'
> &
  UpdateOrganizationPathParams

export const UpdateOrganization = ({ organizationId, ...props }: UpdateOrganizationProps) => (
  <Mutate<OrganizationDTO, unknown, void, UpdateOrganizationDTO, UpdateOrganizationPathParams>
    verb="PUT"
    path={`/organizations/${organizationId}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseUpdateOrganizationProps = Omit<
  UseMutateProps<OrganizationDTO, void, UpdateOrganizationDTO, UpdateOrganizationPathParams>,
  'path' | 'verb'
> &
  UpdateOrganizationPathParams

export const useUpdateOrganization = ({ organizationId, ...props }: UseUpdateOrganizationProps) =>
  useMutate<OrganizationDTO, unknown, void, UpdateOrganizationDTO, UpdateOrganizationPathParams>(
    'PUT',
    ({ organizationId }: UpdateOrganizationPathParams) => `/organizations/${organizationId}`,
    { base: '/cd/api', pathParams: { organizationId }, ...props }
  )

export type DeleteOrganizationProps = Omit<MutateProps<boolean, unknown, void, string, void>, 'path' | 'verb'>

export const DeleteOrganization = (props: DeleteOrganizationProps) => (
  <Mutate<boolean, unknown, void, string, void> verb="DELETE" path={`/organizations`} base={'/cd/api'} {...props} />
)

export type UseDeleteOrganizationProps = Omit<UseMutateProps<boolean, void, string, void>, 'path' | 'verb'>

export const useDeleteOrganization = (props: UseDeleteOrganizationProps) =>
  useMutate<boolean, unknown, void, string, void>('DELETE', `/organizations`, { base: '/cd/api', ...props })

export interface GetProjectsQueryParams {
  orgId?: string
  filter?: string
  page?: number
  size?: number
  sort?: string[]
}

export type GetProjectsProps = Omit<GetProps<PageProjectDTO, unknown, GetProjectsQueryParams, void>, 'path'>

export const GetProjects = (props: GetProjectsProps) => (
  <Get<PageProjectDTO, unknown, GetProjectsQueryParams, void> path={`/projects`} base={'/cd/api'} {...props} />
)

export type UseGetProjectsProps = Omit<UseGetProps<PageProjectDTO, GetProjectsQueryParams, void>, 'path'>

export const useGetProjects = (props: UseGetProjectsProps) =>
  useGet<PageProjectDTO, unknown, GetProjectsQueryParams, void>(`/projects`, { base: '/cd/api', ...props })

export type CreateProjectProps = Omit<MutateProps<ProjectDTO, unknown, void, CreateProjectDTO, void>, 'path' | 'verb'>

export const CreateProject = (props: CreateProjectProps) => (
  <Mutate<ProjectDTO, unknown, void, CreateProjectDTO, void>
    verb="POST"
    path={`/projects`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseCreateProjectProps = Omit<UseMutateProps<ProjectDTO, void, CreateProjectDTO, void>, 'path' | 'verb'>

export const useCreateProject = (props: UseCreateProjectProps) =>
  useMutate<ProjectDTO, unknown, void, CreateProjectDTO, void>('POST', `/projects`, { base: '/cd/api', ...props })

export interface GetProjectPathParams {
  projectId: string
}

export type GetProjectProps = Omit<GetProps<ProjectDTO, unknown, void, GetProjectPathParams>, 'path'> &
  GetProjectPathParams

export const GetProject = ({ projectId, ...props }: GetProjectProps) => (
  <Get<ProjectDTO, unknown, void, GetProjectPathParams> path={`/projects/${projectId}`} base={'/cd/api'} {...props} />
)

export type UseGetProjectProps = Omit<UseGetProps<ProjectDTO, void, GetProjectPathParams>, 'path'> &
  GetProjectPathParams

export const useGetProject = ({ projectId, ...props }: UseGetProjectProps) =>
  useGet<ProjectDTO, unknown, void, GetProjectPathParams>(
    ({ projectId }: GetProjectPathParams) => `/projects/${projectId}`,
    { base: '/cd/api', pathParams: { projectId }, ...props }
  )

export interface UpdateProjectPathParams {
  projectId: string
}

export type UpdateProjectProps = Omit<
  MutateProps<ProjectDTO, unknown, void, UpdateProjectDTO, UpdateProjectPathParams>,
  'path' | 'verb'
> &
  UpdateProjectPathParams

export const UpdateProject = ({ projectId, ...props }: UpdateProjectProps) => (
  <Mutate<ProjectDTO, unknown, void, UpdateProjectDTO, UpdateProjectPathParams>
    verb="PUT"
    path={`/projects/${projectId}`}
    base={'/cd/api'}
    {...props}
  />
)

export type UseUpdateProjectProps = Omit<
  UseMutateProps<ProjectDTO, void, UpdateProjectDTO, UpdateProjectPathParams>,
  'path' | 'verb'
> &
  UpdateProjectPathParams

export const useUpdateProject = ({ projectId, ...props }: UseUpdateProjectProps) =>
  useMutate<ProjectDTO, unknown, void, UpdateProjectDTO, UpdateProjectPathParams>(
    'PUT',
    ({ projectId }: UpdateProjectPathParams) => `/projects/${projectId}`,
    { base: '/cd/api', pathParams: { projectId }, ...props }
  )

export type DeleteProjectProps = Omit<MutateProps<boolean, unknown, void, string, void>, 'path' | 'verb'>

export const DeleteProject = (props: DeleteProjectProps) => (
  <Mutate<boolean, unknown, void, string, void> verb="DELETE" path={`/projects`} base={'/cd/api'} {...props} />
)

export type UseDeleteProjectProps = Omit<UseMutateProps<boolean, void, string, void>, 'path' | 'verb'>

export const useDeleteProject = (props: UseDeleteProjectProps) =>
  useMutate<boolean, unknown, void, string, void>('DELETE', `/projects`, { base: '/cd/api', ...props })
