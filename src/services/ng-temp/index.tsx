/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>

export type K8sRollingRollbackStepInfo = StepWrapper & {
  displayName?: string
  identifier: string
  k8sRollingRollback?: K8sRollingRollbackStepParameters
}

export interface UseFromStage {
  stage: string
}

export interface RestResponseString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string
  responseMessages?: ResponseMessage[]
}

export interface ServiceSpec {
  deploymentType?: string
  artifacts?: ArtifactListConfig
  manifests?: ManifestListConfig
}

export interface ArtifactListConfig {
  primary?: ArtifactConfigWrapper
  sidecars?: SidecarArtifactWrapper[]
  refType?: RefType
}

export interface Deployment {
  runParallel?: boolean
  skipCondition?: string
  description?: string
  infrastructure?: PipelineInfrastructure
  service?: ServiceConfig
  stageVariables?: StageVariables
  execution?: PhaseWrapper[]
}

export type ShellScriptStepInfo = StepWrapper & {
  displayName?: string
  identifier: string
  shellScript?: ShellScriptStepParameters
}

export interface ArtifactConfigWrapper {
  identifier: string
  artifactType?: string
  sourceType?: string
  uniqueHash?: string
  sourceAttributes?: ArtifactSourceAttributes
}

export type Parallel = ExecutionSection & {
  sections: StepWrapper[]
}

export interface ExecutionSection {
  [key: string]: any
}

export interface RefType {
  type?: string
}

export interface ShellScriptStepParameters {
  executeOnDelegate?: boolean
  host?: string
  tags?: string[]
  connectionType?: 'SSH' | 'WINRM'
  sshKeyRef?: string
  connectionAttributes?: string
  commandPath?: string
  scriptType?: 'BASH' | 'POWERSHELL'
  scriptString?: string
  outputVars?: string
  sweepingOutputName?: string
  sweepingOutputScope?: string
}

export interface Pageable {
  pageSize?: number
  offset?: number
  paged?: boolean
  sort?: Sort
  unpaged?: boolean
  pageNumber?: number
}

export type DeploymentStage = Stage & {
  displayName?: string
  deployment?: Deployment
}

export type Stage = StageWrapper & {
  identifier: string
}

export interface Sort {
  sorted?: boolean
  unsorted?: boolean
  empty?: boolean
}

export interface SidecarArtifactWrapper {
  artifact?: ArtifactConfigWrapper
  identifier: string
}

export interface PipelineInfrastructure {
  infrastructureSpec?: InfrastructureSpec
  environment?: EnvironmentYaml
  steps?: Step[]
  rollbackSteps?: Step[]
  previousStageIdentifier?: string
  refType?: RefType
}

export interface PhaseWrapper {
  [key: string]: any
}

export interface StageVariables {
  variables?: Variable[]
  previousStageIdentifier?: string
  overrides?: Variable[]
}

export type HttpStepInfo = StepWrapper & {
  displayName?: string
  type?: string
  identifier: string
  http?: HttpSpec
}

export interface ResponseMessage {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'ENGINE_REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
  level?: 'INFO' | 'ERROR'
  message?: string
  exception?: Throwable
}

export interface ArtifactSourceAttributes {
  [key: string]: any
}

export type K8sRollingStepInfo = StepWrapper & {
  displayName?: string
  identifier: string
  k8sRolling?: K8sRollingStepParameters
}

export type ManifestConfig = ManifestConfigWrapper & {}

export interface InfrastructureSpec {
  infrastructure?: Infrastructure
}

export interface OverrideConfig {
  manifestListConfig?: ManifestListConfig
  artifactListConfig?: ArtifactListConfig
}

export interface Throwable {
  cause?: Throwable
  stackTrace?: StackTraceElement[]
  message?: string
  localizedMessage?: string
  suppressed?: Throwable[]
}

export interface K8sRollingRollbackStepParameters {
  timeout?: number
}

export interface StoreConfig {
  kind?: string
}

export type StepInfo = StepWrapper & {
  identifier: string
}

export interface Variable {
  name: string
  value: string
  type: string
}

export interface StepWrapper {
  [key: string]: any
}

export interface StackTraceElement {
  methodName?: string
  fileName?: string
  lineNumber?: number
  className?: string
  nativeMethod?: boolean
}

export interface ManifestListConfig {
  manifests?: ManifestConfigWrapper[]
  refType?: RefType
}

export interface Step {
  [key: string]: any
}

export interface ServiceConfig {
  identifier: string
  displayName: string
  description?: string
  serviceSpec?: ServiceSpec
  overrides?: OverrideConfig
  useFromStage?: UseFromStage
  refType?: RefType
}

export type SidecarArtifact = SidecarArtifactWrapper & {}

export interface CDPipelineDTO {
  displayName?: string
  description?: string
  stages?: StageWrapper[]
  identifier?: string
  yamlPipeline?: string
}

export interface Infrastructure {
  kind?: 'K8S_DIRECT'
  infraMapping?: InfraMapping
  refType?: RefType
}

export interface InfraMapping {
  uuid?: string
  refType?: RefType
}

export interface ManifestAttributes {
  kind?: string
  storeConfig?: StoreConfig
  identifier: string
}

export interface ManifestConfigWrapper {
  manifestAttributes?: ManifestAttributes
  identifier: string
}

export interface HttpSpec {
  url?: string
  body?: string
  header?: string
  method?: string
  socketTimeoutMillis?: number
}

export interface StageWrapper {
  [key: string]: any
}

export interface PageCDPipelineDTO {
  totalPages?: number
  totalElements?: number
  size?: number
  content?: CDPipelineDTO[]
  number?: number
  first?: boolean
  last?: boolean
  pageable?: Pageable
  numberOfElements?: number
  sort?: Sort
  empty?: boolean
}

export interface RestResponseCDPipelineDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: CDPipelineDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponsePageCDPipelineDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageCDPipelineDTO
  responseMessages?: ResponseMessage[]
}

export type CDPhase = PhaseWrapper & {
  identifier: string
  displayName?: string
  steps?: ExecutionSection[]
  rollbackSteps?: ExecutionSection[]
}

export interface EnvironmentYaml {
  displayName?: string
  identifier?: string
  type?: 'PRE_PRODUCTION' | 'PRODUCTION'
  tags?: Tag[]
  refType?: RefType
}

export interface K8sRollingStepParameters {
  timeout?: number
  skipDryRun?: boolean
}

export interface Tag {
  key: string
  value: string
}

export interface GetListOfPipelinesQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier: string
  filter?: string
  page?: number
  size?: number
  sort?: string[]
}

export type GetListOfPipelinesProps = Omit<
  GetProps<RestResponsePageCDPipelineDTO, unknown, GetListOfPipelinesQueryParams, void>,
  'path'
>

export const GetListOfPipelines = (props: GetListOfPipelinesProps) => (
  <Get<RestResponsePageCDPipelineDTO, unknown, GetListOfPipelinesQueryParams, void>
    path={`/ng/pipelines`}
    base={'/api'}
    {...props}
  />
)

export type UseGetListOfPipelinesProps = Omit<
  UseGetProps<RestResponsePageCDPipelineDTO, unknown, GetListOfPipelinesQueryParams, void>,
  'path'
>

export const useGetListOfPipelines = (props: UseGetListOfPipelinesProps) =>
  useGet<RestResponsePageCDPipelineDTO, unknown, GetListOfPipelinesQueryParams, void>(`/ng/pipelines`, {
    base: '/api',
    ...props
  })

export interface CreateNgPipelineQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier: string
}

export type CreateNgPipelineProps = Omit<
  MutateProps<CDPipelineDTO, unknown, CreateNgPipelineQueryParams, string, void>,
  'path' | 'verb'
>

export const CreateNgPipeline = (props: CreateNgPipelineProps) => (
  <Mutate<CDPipelineDTO, unknown, CreateNgPipelineQueryParams, string, void>
    verb="POST"
    path={`/ng/pipelines`}
    base={'/api'}
    {...props}
  />
)

export type UseCreateNgPipelineProps = Omit<
  UseMutateProps<CDPipelineDTO, unknown, CreateNgPipelineQueryParams, string, void>,
  'path' | 'verb'
>

export const useCreateNgPipeline = (props: UseCreateNgPipelineProps) =>
  useMutate<CDPipelineDTO, unknown, CreateNgPipelineQueryParams, string, void>('POST', `/ng/pipelines`, {
    base: '/api',
    ...props
  })

export interface RunPipelineQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface RunPipelinePathParams {
  identifier: string
}

export type RunPipelineProps = Omit<
  MutateProps<RestResponseString, unknown, RunPipelineQueryParams, void, RunPipelinePathParams>,
  'path' | 'verb'
> &
  RunPipelinePathParams

export const RunPipeline = ({ identifier, ...props }: RunPipelineProps) => (
  <Mutate<RestResponseString, unknown, RunPipelineQueryParams, void, RunPipelinePathParams>
    verb="POST"
    path={`/ng/pipelines/${identifier}/run`}
    base={'/api'}
    {...props}
  />
)

export type UseRunPipelineProps = Omit<
  UseMutateProps<RestResponseString, unknown, RunPipelineQueryParams, void, RunPipelinePathParams>,
  'path' | 'verb'
> &
  RunPipelinePathParams

export const useRunPipeline = ({ identifier, ...props }: UseRunPipelineProps) =>
  useMutate<RestResponseString, unknown, RunPipelineQueryParams, void, RunPipelinePathParams>(
    'POST',
    (paramsInPath: RunPipelinePathParams) => `/ng/pipelines/${paramsInPath.identifier}/run`,
    { base: '/api', pathParams: { identifier }, ...props }
  )

export interface GetNgPipelineByIdentifierQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface GetNgPipelineByIdentifierPathParams {
  pipelineIdentifier: string
}

export type GetNgPipelineByIdentifierProps = Omit<
  GetProps<
    RestResponseCDPipelineDTO,
    unknown,
    GetNgPipelineByIdentifierQueryParams,
    GetNgPipelineByIdentifierPathParams
  >,
  'path'
> &
  GetNgPipelineByIdentifierPathParams

export const GetNgPipelineByIdentifier = ({ pipelineIdentifier, ...props }: GetNgPipelineByIdentifierProps) => (
  <Get<RestResponseCDPipelineDTO, unknown, GetNgPipelineByIdentifierQueryParams, GetNgPipelineByIdentifierPathParams>
    path={`/ng/pipelines/${pipelineIdentifier}`}
    base={'/api'}
    {...props}
  />
)

export type UseGetNgPipelineByIdentifierProps = Omit<
  UseGetProps<
    RestResponseCDPipelineDTO,
    unknown,
    GetNgPipelineByIdentifierQueryParams,
    GetNgPipelineByIdentifierPathParams
  >,
  'path'
> &
  GetNgPipelineByIdentifierPathParams

export const useGetNgPipelineByIdentifier = ({ pipelineIdentifier, ...props }: UseGetNgPipelineByIdentifierProps) =>
  useGet<RestResponseCDPipelineDTO, unknown, GetNgPipelineByIdentifierQueryParams, GetNgPipelineByIdentifierPathParams>(
    (paramsInPath: GetNgPipelineByIdentifierPathParams) => `/ng/pipelines/${paramsInPath.pipelineIdentifier}`,
    { base: '/api', pathParams: { pipelineIdentifier }, ...props }
  )
