/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig } from '../config'
export interface Service {
  id?: number
  name: string
  org_id: number
  project_id?: string
  fulfilment: string
  kind: string
  cloud_account_id: number
  idle_time_mins?: number
  host_name?: string
  health_check?: HealthCheck
  custom_domains?: string[]
  match_all_subdomains?: boolean
  disabled?: boolean
  routing?: RoutingData
  opts?: Opts
}

export interface ServiceDep {
  service_id?: any
  dep_id?: any
  delay_secs?: any
}

export interface SaveServiceRequest {
  deps?: ServiceDep[]
  service?: Service
  apply_now?: boolean
}

export interface FirewallRule {
  from?: string
  protocol?: string
  to?: string
}

export interface NetworkSecurityGroup {
  id?: string
  name?: string
  inbound_rules?: FirewallRule[]
  outbound_rules?: FirewallRule[]
}

export interface SecurityGroupsOfInstancesResponse {
  [key: string]: NetworkSecurityGroup[]
}

export interface Resource {
  id?: string
  name?: string
  region?: string
  availability_zone?: string
  status?: string
  type?: string
  launch_time?: string
  ipv4?: string[]
  private_ipv4?: string[]
  /**
   * tag key as attribute key and tag value as attribute value
   */
  tags?: { [key: string]: any }
  resource_type?: string
  provider_name?: string
  is_spot?: boolean
  platform?: string
  cloud_account_id?: number
  metadata?: { [key: string]: any }
  provider_type?: string
}

export interface ResourcesResponse {
  response?: Resource[]
}

export interface AllResourcesOfAccountResponse {
  response?: Resource[]
}

export interface ResourceFilterBody {
  /**
   * String representation of TOML filter
   */
  Text?: string
}

export interface ServiceUsageRecord {
  service_id?: number
  path?: string
  session_id?: string
  idle_time_mins?: number
}

export interface Account {
  id?: number
  name?: string
  org_id?: number
  created_by?: number
  service_provider?: string
}

export interface AllAccountsResponse {
  response?: Account[]
}

export interface ServicesResponse {
  response?: Service[]
}

export type ServiceUsageResponse = ServiceUsageRecord[]

export interface ServiceSaveRequest {
  service?: Service
}

export interface ServiceStats {
  service_id?: number
  idle_time_percentage?: number
  down_time_mins?: number
  total_time_mins?: number
}

export interface ServiceDepTree {
  service?: Service
  children?: ServiceDepTree[]
}

export interface ServiceStatsResponse {
  stats?: ServiceStats
  dep_tree?: ServiceDepTree
}

export interface InstanceBasedRoutingData {
  filter_text?: string
}

export interface HealthCheck {
  protocol?: string
  path?: string
  port?: any
  timeout?: any
}

export interface Opts {
  preserve_private_ip?: boolean
  delete_cloud_resources?: boolean
  always_use_private_ip?: boolean
}

export interface PortConfig {
  protocol?: string
  target_protocol?: string
  port?: number
  target_port?: number
  server_name?: string
  action?: 'forward' | 'redirect'
  redirect_url?: string
  routing_rules?: RoutingRule[]
}

export interface ServiceDependency {
  service_id?: number
  dep_id?: number
  delay_secs?: number
}

export interface ServiceDefinitionByIDResponse {
  service?: Service
  deps?: ServiceDependency[]
}

export interface RoutingRule {
  path_match?: string
}

export interface RoutingData {
  instance?: InstanceBasedRoutingData
  ports?: PortConfig[]
  lb?: string
}

export interface GetServicesPathParams {
  org_id: string
  project_id: string
}

export type GetServicesProps = Omit<GetProps<ServicesResponse, void, void, GetServicesPathParams>, 'path'> &
  GetServicesPathParams

/**
 * Gets all Autostopping Gateways
 *
 * Multiple status values can be provided with comma separated strings
 */
export const GetServices = ({ org_id, project_id, ...props }: GetServicesProps) => (
  <Get<ServicesResponse, void, void, GetServicesPathParams>
    path="/orgs/${org_id}/projects/${project_id}/services"
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetServicesProps = Omit<UseGetProps<ServicesResponse, void, void, GetServicesPathParams>, 'path'> &
  GetServicesPathParams

/**
 * Gets all Autostopping Gateways
 *
 * Multiple status values can be provided with comma separated strings
 */
export const useGetServices = ({ org_id, project_id, ...props }: UseGetServicesProps) =>
  useGet<ServicesResponse, void, void, GetServicesPathParams>(
    (paramsInPath: GetServicesPathParams) =>
      `/orgs/${paramsInPath.org_id}/projects/${paramsInPath.project_id}/services`,
    { base: getConfig('lw/api'), pathParams: { org_id, project_id }, ...props }
  )

export interface SaveServicePathParams {
  org_id: string
  project_id: string
}

export type SaveServiceProps = Omit<
  MutateProps<ServicesResponse, void, void, SaveServiceRequest, SaveServicePathParams>,
  'path' | 'verb'
> &
  SaveServicePathParams

/**
 * Create/Update Autostopping gateway
 */
export const SaveService = ({ org_id, project_id, ...props }: SaveServiceProps) => (
  <Mutate<ServicesResponse, void, void, SaveServiceRequest, SaveServicePathParams>
    verb="POST"
    path="/orgs/${org_id}/projects/${project_id}/services"
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseSaveServiceProps = Omit<
  UseMutateProps<ServicesResponse, void, void, SaveServiceRequest, SaveServicePathParams>,
  'path' | 'verb'
> &
  SaveServicePathParams

/**
 * Create/Update Autostopping gateway
 */
export const useSaveService = ({ org_id, project_id, ...props }: UseSaveServiceProps) =>
  useMutate<ServicesResponse, void, void, SaveServiceRequest, SaveServicePathParams>(
    'POST',
    (paramsInPath: SaveServicePathParams) =>
      `/orgs/${paramsInPath.org_id}/projects/${paramsInPath.project_id}/services`,
    { base: getConfig('lw/api'), pathParams: { org_id, project_id }, ...props }
  )

export interface GetServiceDefinitionByIDPathParams {
  org_id: string
  project_id: string
  id: number
}

export type GetServiceDefinitionByIDProps = Omit<
  GetProps<ServiceDefinitionByIDResponse, void, void, GetServiceDefinitionByIDPathParams>,
  'path'
> &
  GetServiceDefinitionByIDPathParams

/**
 * Gets autostopping gateway by id
 *
 * Get service definition of auto stopping gateway
 */
export const GetServiceDefinitionByID = ({ org_id, project_id, id, ...props }: GetServiceDefinitionByIDProps) => (
  <Get<ServiceDefinitionByIDResponse, void, void, GetServiceDefinitionByIDPathParams>
    path="/orgs/${org_id}/projects/${project_id}/services/${id}"
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetServiceDefinitionByIDProps = Omit<
  UseGetProps<ServiceDefinitionByIDResponse, void, void, GetServiceDefinitionByIDPathParams>,
  'path'
> &
  GetServiceDefinitionByIDPathParams

/**
 * Gets autostopping gateway by id
 *
 * Get service definition of auto stopping gateway
 */
export const useGetServiceDefinitionByID = ({ org_id, project_id, id, ...props }: UseGetServiceDefinitionByIDProps) =>
  useGet<ServiceDefinitionByIDResponse, void, void, GetServiceDefinitionByIDPathParams>(
    (paramsInPath: GetServiceDefinitionByIDPathParams) =>
      `/orgs/${paramsInPath.org_id}/projects/${paramsInPath.project_id}/services/${paramsInPath.id}`,
    { base: getConfig('lw/api'), pathParams: { org_id, project_id, id }, ...props }
  )

export interface GetServiceStatsPathParams {
  org_id: string
  project_id: string
  id: number
}

export type GetServiceStatsProps = Omit<GetProps<ServiceStatsResponse, void, void, GetServiceStatsPathParams>, 'path'> &
  GetServiceStatsPathParams

/**
 * Get statuses of given autostopping gateway
 *
 * Returns duartion of idle time and down time
 */
export const GetServiceStats = ({ org_id, project_id, id, ...props }: GetServiceStatsProps) => (
  <Get<ServiceStatsResponse, void, void, GetServiceStatsPathParams>
    path="/orgs/${org_id}/projects/${project_id}/services/${id}/stats"
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetServiceStatsProps = Omit<
  UseGetProps<ServiceStatsResponse, void, void, GetServiceStatsPathParams>,
  'path'
> &
  GetServiceStatsPathParams

/**
 * Get statuses of given autostopping gateway
 *
 * Returns duartion of idle time and down time
 */
export const useGetServiceStats = ({ org_id, project_id, id, ...props }: UseGetServiceStatsProps) =>
  useGet<ServiceStatsResponse, void, void, GetServiceStatsPathParams>(
    (paramsInPath: GetServiceStatsPathParams) =>
      `/orgs/${paramsInPath.org_id}/projects/${paramsInPath.project_id}/services/${paramsInPath.id}/stats`,
    { base: getConfig('lw/api'), pathParams: { org_id, project_id, id }, ...props }
  )

export interface GetServiceRequestsPathParams {
  org_id: string
  project_id: string
  id: number
}

export type GetServiceRequestsProps = Omit<
  GetProps<ServiceUsageResponse, void, void, GetServiceRequestsPathParams>,
  'path'
> &
  GetServiceRequestsPathParams

/**
 * Get service usage records
 *
 * Returns service usage records of requested autostopping gateway
 */
export const GetServiceRequests = ({ org_id, project_id, id, ...props }: GetServiceRequestsProps) => (
  <Get<ServiceUsageResponse, void, void, GetServiceRequestsPathParams>
    path="/orgs/${org_id}/projects/${project_id}/services/${id}/requests"
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseGetServiceRequestsProps = Omit<
  UseGetProps<ServiceUsageResponse, void, void, GetServiceRequestsPathParams>,
  'path'
> &
  GetServiceRequestsPathParams

/**
 * Get service usage records
 *
 * Returns service usage records of requested autostopping gateway
 */
export const useGetServiceRequests = ({ org_id, project_id, id, ...props }: UseGetServiceRequestsProps) =>
  useGet<ServiceUsageResponse, void, void, GetServiceRequestsPathParams>(
    (paramsInPath: GetServiceRequestsPathParams) =>
      `/orgs/${paramsInPath.org_id}/projects/${paramsInPath.project_id}/services/${paramsInPath.id}/requests`,
    { base: getConfig('lw/api'), pathParams: { org_id, project_id, id }, ...props }
  )

export interface AllAccountsPathParams {
  org_id: string
}

export type AllAccountsProps = Omit<GetProps<AllAccountsResponse, void, void, AllAccountsPathParams>, 'path'> &
  AllAccountsPathParams

/**
 * Lists all accounts under an org
 *
 * Returns all the accounts under the requesting organization
 */
export const AllAccounts = ({ org_id, ...props }: AllAccountsProps) => (
  <Get<AllAccountsResponse, void, void, AllAccountsPathParams>
    path="/orgs/${org_id}/accounts"
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllAccountsProps = Omit<UseGetProps<AllAccountsResponse, void, void, AllAccountsPathParams>, 'path'> &
  AllAccountsPathParams

/**
 * Lists all accounts under an org
 *
 * Returns all the accounts under the requesting organization
 */
export const useAllAccounts = ({ org_id, ...props }: UseAllAccountsProps) =>
  useGet<AllAccountsResponse, void, void, AllAccountsPathParams>(
    (paramsInPath: AllAccountsPathParams) => `/orgs/${paramsInPath.org_id}/accounts`,
    { base: getConfig('lw/api'), pathParams: { org_id }, ...props }
  )

export interface AllResourcesOfAccountResponse {}

export interface AllResourcesOfAccountQueryParams {
  cloud_account_id: number
  type: string
}

export interface AllResourcesOfAccountPathParams {
  org_id: string
}

export type AllResourcesOfAccountProps = Omit<
  MutateProps<
    AllResourcesOfAccountResponse,
    void,
    AllResourcesOfAccountQueryParams,
    ResourceFilterBody,
    AllResourcesOfAccountPathParams
  >,
  'path' | 'verb'
> &
  AllResourcesOfAccountPathParams

/**
 * Lists all resources under an account
 *
 * Returns all resources under an account matching the given filter
 */
export const AllResourcesOfAccount = ({ org_id, ...props }: AllResourcesOfAccountProps) => (
  <Mutate<
    AllResourcesOfAccountResponse,
    void,
    AllResourcesOfAccountQueryParams,
    ResourceFilterBody,
    AllResourcesOfAccountPathParams
  >
    verb="POST"
    path="/orgs/${org_id}/resources"
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseAllResourcesOfAccountProps = Omit<
  UseMutateProps<
    AllResourcesOfAccountResponse,
    void,
    AllResourcesOfAccountQueryParams,
    ResourceFilterBody,
    AllResourcesOfAccountPathParams
  >,
  'path' | 'verb'
> &
  AllResourcesOfAccountPathParams

/**
 * Lists all resources under an account
 *
 * Returns all resources under an account matching the given filter
 */
export const useAllResourcesOfAccount = ({ org_id, ...props }: UseAllResourcesOfAccountProps) =>
  useMutate<
    AllResourcesOfAccountResponse,
    void,
    AllResourcesOfAccountQueryParams,
    ResourceFilterBody,
    AllResourcesOfAccountPathParams
  >('POST', (paramsInPath: AllResourcesOfAccountPathParams) => `/orgs/${paramsInPath.org_id}/resources`, {
    base: getConfig('lw/api'),
    pathParams: { org_id },
    ...props
  })

export interface SecurityGroupsOfInstancesResponse {}

export interface SecurityGroupsOfInstancesPathParams {
  org_id: string
  accountID: number
}

export type SecurityGroupsOfInstancesProps = Omit<
  MutateProps<SecurityGroupsOfInstancesResponse, void, void, void, SecurityGroupsOfInstancesPathParams>,
  'path' | 'verb'
> &
  SecurityGroupsOfInstancesPathParams

/**
 * Network security groups of an instance
 *
 * Returns all the network security group definitions
 */
export const SecurityGroupsOfInstances = ({ org_id, accountID, ...props }: SecurityGroupsOfInstancesProps) => (
  <Mutate<SecurityGroupsOfInstancesResponse, void, void, void, SecurityGroupsOfInstancesPathParams>
    verb="POST"
    path="/orgs/${org_id}/accounts/${accountID}/instance_nsg}"
    base={getConfig('lw/api')}
    {...props}
  />
)

export type UseSecurityGroupsOfInstancesProps = Omit<
  UseMutateProps<SecurityGroupsOfInstancesResponse, void, void, void, SecurityGroupsOfInstancesPathParams>,
  'path' | 'verb'
> &
  SecurityGroupsOfInstancesPathParams

/**
 * Network security groups of an instance
 *
 * Returns all the network security group definitions
 */
export const useSecurityGroupsOfInstances = ({ org_id, accountID, ...props }: UseSecurityGroupsOfInstancesProps) =>
  useMutate<SecurityGroupsOfInstancesResponse, void, void, void, SecurityGroupsOfInstancesPathParams>(
    'POST',
    (paramsInPath: SecurityGroupsOfInstancesPathParams) =>
      `/orgs/${paramsInPath.org_id}/accounts/${paramsInPath.accountID}/instance_nsg}`,
    { base: getConfig('lw/api'), pathParams: { org_id, accountID }, ...props }
  )
