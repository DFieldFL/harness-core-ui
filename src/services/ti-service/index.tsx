/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps } from 'restful-react'

import { getConfig } from '../config'
export interface Error {
  /**
   * Details about the error encountered
   */
  error_msg?: string
}

export interface TestReportSummary {
  total_tests?: number
  duration_ms?: number
  tests?: TestCaseSummary[]
}

export interface TestCaseSummary {
  name?: string
  status?: TestCaseStatus
}

export interface Result {
  status?: TestCaseStatus
  /**
   * Message corresponding to the test case status
   */
  message?: string
  /**
   * Type corresponding to the test case status
   */
  type?: string
  /**
   * Description corresponding to the test case status
   */
  desc?: string
}

export interface TestSuite {
  name?: string
  duration_ms?: number
  total_tests?: number
  failed_tests?: number
  skipped_tests?: number
  passed_tests?: number
  fail_pct?: number
}

export interface ResponseMetadata {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
}

export interface TestSuites {
  data?: ResponseMetadata
  content?: TestSuite[]
}

export interface TestCases {
  data?: ResponseMetadata
  content?: TestCase[]
}

export interface TestCase {
  name?: string
  suite_name?: string
  class_name?: string
  duration_ms?: number
  result?: Result
  /**
   * (Truncated) stdout while running the test
   */
  stdout?: string
  /**
   * (Truncated) stderr while running the test
   */
  stderr?: string
}

/**
 * Status of the test
 */
export type TestCaseStatus = 'passed' | 'skipped' | 'error' | 'failed'

export interface ReportSummaryQueryParams {
  /**
   * Account ID corresponding to report
   */
  accountId: string
  /**
   * Org ID corresponding to report
   */
  orgId: string
  /**
   * Project ID corresponding to report
   */
  projectId: string
  /**
   * Pipeline ID corresponding to report
   */
  pipelineId: string
  /**
   * Build ID corresponding to report
   */
  buildId: string
  /**
   * Report type
   */
  report: 'junit'
}

export type ReportSummaryProps = Omit<GetProps<TestReportSummary, Error, ReportSummaryQueryParams, void>, 'path'>

/**
 * Get test report summary
 *
 * Get summary of test reports
 */
export const ReportSummary = (props: ReportSummaryProps) => (
  <Get<TestReportSummary, Error, ReportSummaryQueryParams, void>
    path="/ti-service/reports/summary"
    base={getConfig('')}
    {...props}
  />
)

export type UseReportSummaryProps = Omit<UseGetProps<TestReportSummary, Error, ReportSummaryQueryParams, void>, 'path'>

/**
 * Get test report summary
 *
 * Get summary of test reports
 */
export const useReportSummary = (props: UseReportSummaryProps) =>
  useGet<TestReportSummary, Error, ReportSummaryQueryParams, void>(`/ti-service/reports/summary`, {
    base: getConfig(''),
    ...props
  })

export interface TestSuiteSummaryQueryParams {
  /**
   * Account ID corresponding to report
   */
  accountId: string
  /**
   * Org ID corresponding to report
   */
  orgId: string
  /**
   * Project ID corresponding to report
   */
  projectId: string
  /**
   * Pipeline ID corresponding to report
   */
  pipelineId: string
  /**
   * Build ID corresponding to report
   */
  buildId: string
  /**
   * Report type
   */
  report: 'junit'
  /**
   * Max number of elements in response
   */
  pageSize?: number
  /**
   * Index of the page whose responses need to be returned
   */
  pageIndex?: number
  /**
   * Filter by status
   */
  status?: 'failed'
  /**
   * Attribute to sort on
   */
  sort?: 'suite_name' | 'duration_ms' | 'total_tests' | 'skipped_tests' | 'passed_tests' | 'failed_tests' | 'fail_pct'
  /**
   * Display results in ascending or descending order
   */
  order?: 'ASC' | 'DESC'
}

export type TestSuiteSummaryProps = Omit<GetProps<TestSuites, Error, TestSuiteSummaryQueryParams, void>, 'path'>

/**
 * Get test suites
 *
 * Get information about test suites
 */
export const TestSuiteSummary = (props: TestSuiteSummaryProps) => (
  <Get<TestSuites, Error, TestSuiteSummaryQueryParams, void>
    path="/ti-service/reports/test_suites"
    base={getConfig('')}
    {...props}
  />
)

export type UseTestSuiteSummaryProps = Omit<UseGetProps<TestSuites, Error, TestSuiteSummaryQueryParams, void>, 'path'>

/**
 * Get test suites
 *
 * Get information about test suites
 */
export const useTestSuiteSummary = (props: UseTestSuiteSummaryProps) =>
  useGet<TestSuites, Error, TestSuiteSummaryQueryParams, void>(`/ti-service/reports/test_suites`, {
    base: getConfig(''),
    ...props
  })

export interface GetTokenQueryParams {
  /**
   * Account ID to generate token for
   */
  accountId: string
}

export type GetTokenProps = Omit<GetProps<string, Error, GetTokenQueryParams, void>, 'path'>

/**
 * Get an account level token
 */
export const GetToken = (props: GetTokenProps) => (
  <Get<string, Error, GetTokenQueryParams, void> path="/ti-service/token" base={getConfig('')} {...props} />
)

export type UseGetTokenProps = Omit<UseGetProps<string, Error, GetTokenQueryParams, void>, 'path'>

/**
 * Get an account level token
 */
export const useGetToken = (props: UseGetTokenProps) =>
  useGet<string, Error, GetTokenQueryParams, void>(`/ti-service/token`, { base: getConfig(''), ...props })

export interface TestCaseSummaryQueryParams {
  /**
   * Account ID corresponding to report
   */
  accountId: string
  /**
   * Org ID corresponding to report
   */
  orgId: string
  /**
   * Project ID corresponding to report
   */
  projectId: string
  /**
   * Pipeline ID corresponding to report
   */
  pipelineId: string
  /**
   * Build ID corresponding to report
   */
  buildId: string
  /**
   * Report type
   */
  report: 'junit'
  /**
   * Get test cases corresponding to the suite name
   */
  suite_name: string
  /**
   * Max number of elements in response
   */
  pageSize?: number
  /**
   * Index of the page whose responses need to be returned
   */
  pageIndex?: number
  /**
   * Filter by status
   */
  status?: 'failed'
  /**
   * Attribute to sort on
   */
  sort?: 'name' | 'class_name' | 'status' | 'duration_ms'
  /**
   * Display results in ascending or descending order
   */
  order?: 'ASC' | 'DESC'
}

export type TestCaseSummaryProps = Omit<GetProps<TestCases, Error, TestCaseSummaryQueryParams, void>, 'path'>

/**
 * Get test cases
 *
 * Get test case details
 */
export const TestCaseSummary = (props: TestCaseSummaryProps) => (
  <Get<TestCases, Error, TestCaseSummaryQueryParams, void>
    path="/ti-service/reports/test_cases"
    base={getConfig('')}
    {...props}
  />
)

export type UseTestCaseSummaryProps = Omit<UseGetProps<TestCases, Error, TestCaseSummaryQueryParams, void>, 'path'>

/**
 * Get test cases
 *
 * Get test case details
 */
export const useTestCaseSummary = (props: UseTestCaseSummaryProps) =>
  useGet<TestCases, Error, TestCaseSummaryQueryParams, void>(`/ti-service/reports/test_cases`, {
    base: getConfig(''),
    ...props
  })
