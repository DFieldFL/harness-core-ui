/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'
import { getConfig, getUsingFetch, mutateUsingFetch, GetUsingFetchProps, MutateUsingFetchProps } from '../config'

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>

export interface CIBuildAuthor {
  id?: string
  name?: string
  email?: string
  avatar?: string
}

export interface CIBuildBranchHook {
  name?: string
  link?: string
  state?: string
  commits?: CIBuildCommit[]
}

export interface CIBuildCommit {
  id?: string
  link?: string
  message?: string
  ownerName?: string
  ownerId?: string
  ownerEmail?: string
}

export interface CIBuildPRHook {
  id?: number
  link?: string
  title?: string
  body?: string
  sourceRepo?: string
  sourceBranch?: string
  targetBranch?: string
  state?: string
  commits?: CIBuildCommit[]
}

export interface CIBuildPipeline {
  id?: string
  name?: string
  tags?: Tag[]
}

export interface CIBuildResponseDTO {
  id?: number
  status?: string
  errorMessage?: string
  startTime?: number
  endTime?: number
  pipeline?: CIBuildPipeline
  triggerType?: string
  event?: string
  author?: CIBuildAuthor
  branch?: CIBuildBranchHook
  pullRequest?: CIBuildPRHook
  graph?: OrchestrationGraphDTO
}

export interface Duration {
  seconds?: number
  zero?: boolean
  nano?: number
  negative?: boolean
  units?: TemporalUnit[]
}

export interface EdgeList {
  edges?: string[]
  nextIds?: string[]
}

export interface FailureInfo {
  errorMessage?: string
  failureTypes?: (
    | 'EXPIRED'
    | 'DELEGATE_PROVISIONING'
    | 'CONNECTIVITY'
    | 'AUTHENTICATION'
    | 'VERIFICATION_FAILURE'
    | 'APPLICATION_ERROR'
  )[]
}

export interface GraphVertex {
  uuid?: string
  planNodeId?: string
  identifier?: string
  name?: string
  startTs?: number
  endTs?: number
  initialWaitDuration?: Duration
  lastUpdatedAt?: number
  stepType?: string
  status?:
    | 'RUNNING'
    | 'INTERVENTION_WAITING'
    | 'TIMED_WAITING'
    | 'ASYNC_WAITING'
    | 'TASK_WAITING'
    | 'DISCONTINUING'
    | 'QUEUED'
    | 'SKIPPED'
    | 'PAUSED'
    | 'ABORTED'
    | 'ERRORED'
    | 'FAILED'
    | 'EXPIRED'
    | 'SUSPENDED'
    | 'SUCCEEDED'
  failureInfo?: FailureInfo
  stepParameters?: StepParameters
  mode?:
    | 'SYNC'
    | 'ASYNC'
    | 'SKIP'
    | 'TASK_CHAIN'
    | 'TASK_CHAIN_V2'
    | 'TASK_CHAIN_V3'
    | 'TASK'
    | 'TASK_V2'
    | 'TASK_V3'
    | 'CHILD_CHAIN'
    | 'CHILDREN'
    | 'CHILD'
  interruptHistories?: InterruptEffect[]
  outcomes?: Outcome[]
  retryIds?: string[]
  skipType?: 'SKIP_TREE' | 'SKIP_NODE' | 'NOOP'
}

export interface InterruptEffect {
  interruptId: string
  tookEffectAt: number
  interruptType:
    | 'ABORT'
    | 'ABORT_ALL'
    | 'PAUSE'
    | 'PAUSE_ALL'
    | 'RESUME'
    | 'RESUME_ALL'
    | 'RETRY'
    | 'IGNORE'
    | 'MARK_FAILED'
    | 'MARK_SUCCESS'
    | 'ROLLBACK'
    | 'NEXT_STEP'
    | 'END_EXECUTION'
    | 'ROLLBACK_DONE'
    | 'MARK_EXPIRED'
}

export interface OrchestrationAdjacencyList {
  graphVertexMap?: {
    [key: string]: GraphVertex
  }
  adjacencyMap?: {
    [key: string]: EdgeList
  }
}

export interface OrchestrationGraphDTO {
  planExecutionId?: string
  startTs?: number
  endTs?: number
  status?:
    | 'RUNNING'
    | 'INTERVENTION_WAITING'
    | 'TIMED_WAITING'
    | 'ASYNC_WAITING'
    | 'TASK_WAITING'
    | 'DISCONTINUING'
    | 'QUEUED'
    | 'SKIPPED'
    | 'PAUSED'
    | 'ABORTED'
    | 'ERRORED'
    | 'FAILED'
    | 'EXPIRED'
    | 'SUSPENDED'
    | 'SUCCEEDED'
  rootNodeIds?: string[]
  adjacencyList?: OrchestrationAdjacencyList
}

export interface Outcome {
  refType?: RefType
}

export interface RefType {
  type?: string
}

export interface Response {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: { [key: string]: any }
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ResponseCIBuildResponseDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: CIBuildResponseDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface StepParameters {
  [key: string]: any
}

export interface Tag {
  key: string
  value: string
}

export interface TemporalUnit {
  duration?: Duration
  timeBased?: boolean
  dateBased?: boolean
  durationEstimated?: boolean
}

export interface Page {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: { [key: string]: any }[]
  pageIndex?: number
  empty?: boolean
}

export interface PageCIBuildResponseDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: CIBuildResponseDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface ResponsePageCIBuildResponseDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageCIBuildResponseDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ResponseMessage {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
  level?: 'INFO' | 'ERROR'
  message?: string
  exception?: Throwable
}

export interface RestResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: { [key: string]: any }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string
  responseMessages?: ResponseMessage[]
}

export interface StackTraceElement {
  methodName?: string
  fileName?: string
  lineNumber?: number
  className?: string
  nativeMethod?: boolean
}

export interface Throwable {
  cause?: Throwable
  stackTrace?: StackTraceElement[]
  message?: string
  localizedMessage?: string
  suppressed?: Throwable[]
}

export interface NGVariable {
  description?: string
  required?: boolean
  name?: string
  type?: 'String' | 'Number'
  metadata?: string
}

export interface NgPipeline {
  name: string
  identifier: string
  description?: string
  tags?: Tag[]
  variables?: NGVariable[]
  stages?: StageElementWrapper[]
  metadata?: string
}

export interface NgPipelineEntity {
  uuid?: string
  ngPipeline?: NgPipeline
  yamlPipeline?: string
  accountId?: string
  orgIdentifier?: string
  identifier?: string
  projectIdentifier?: string
  createdAt?: number
  lastUpdatedAt: number
  deleted?: boolean
}

export type ParallelStageElement = StageElementWrapper & {
  sections: StageElementWrapper[]
  metadata?: string
}

export interface ResponseNgPipelineEntity {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: NgPipelineEntity
  metaData?: { [key: string]: any }
  correlationId?: string
}

export type StageElement = StageElementWrapper & {
  identifier: string
  name?: string
  description?: string
  type?: string
  metadata?: string
  spec?: StageType
}

export interface StageElementWrapper {
  [key: string]: any
}

export interface StageType {
  identifier: string
}

export interface WebHookRequest {
  application?: string
  artifacts?: {
    [key: string]: { [key: string]: any }
  }[]
  parameters?: {
    [key: string]: string
  }
}

export interface GetBuildQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface GetBuildPathParams {
  buildIdentifier: number
}

export type GetBuildProps = Omit<
  GetProps<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams>,
  'path'
> &
  GetBuildPathParams

/**
 * Gets a build by identifier
 */
export const GetBuild = ({ buildIdentifier, ...props }: GetBuildProps) => (
  <Get<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams>
    path={`/ci/builds/${buildIdentifier}`}
    base={getConfig('ci')}
    {...props}
  />
)

export type UseGetBuildProps = Omit<
  UseGetProps<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams>,
  'path'
> &
  GetBuildPathParams

/**
 * Gets a build by identifier
 */
export const useGetBuild = ({ buildIdentifier, ...props }: UseGetBuildProps) =>
  useGet<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams>(
    (paramsInPath: GetBuildPathParams) => `/ci/builds/${paramsInPath.buildIdentifier}`,
    { base: getConfig('ci'), pathParams: { buildIdentifier }, ...props }
  )

/**
 * Gets a build by identifier
 */
export const getBuildPromise = (
  {
    buildIdentifier,
    ...props
  }: GetUsingFetchProps<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams> & {
    buildIdentifier: number
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams>(
    getConfig('ci'),
    `/ci/builds/${buildIdentifier}`,
    props,
    signal
  )

export interface GetBuildsQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier: string
  userIdentifier?: string
  branch?: string
  tags?: string[]
  page?: number
  size?: number
  sort?: string[]
}

export type GetBuildsProps = Omit<GetProps<ResponsePageCIBuildResponseDTO, unknown, GetBuildsQueryParams, void>, 'path'>

/**
 * Get builds list
 */
export const GetBuilds = (props: GetBuildsProps) => (
  <Get<ResponsePageCIBuildResponseDTO, unknown, GetBuildsQueryParams, void>
    path={`/ci/builds`}
    base={getConfig('ci')}
    {...props}
  />
)

export type UseGetBuildsProps = Omit<
  UseGetProps<ResponsePageCIBuildResponseDTO, unknown, GetBuildsQueryParams, void>,
  'path'
>

/**
 * Get builds list
 */
export const useGetBuilds = (props: UseGetBuildsProps) =>
  useGet<ResponsePageCIBuildResponseDTO, unknown, GetBuildsQueryParams, void>(`/ci/builds`, {
    base: getConfig('ci'),
    ...props
  })

/**
 * Get builds list
 */
export const getBuildsPromise = (
  props: GetUsingFetchProps<ResponsePageCIBuildResponseDTO, unknown, GetBuildsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageCIBuildResponseDTO, unknown, GetBuildsQueryParams, void>(
    getConfig('ci'),
    `/ci/builds`,
    props,
    signal
  )

export interface PostPipelineQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier: string
}

export type PostPipelineProps = Omit<
  MutateProps<RestResponseString, unknown, PostPipelineQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Create a CI Pipeline
 */
export const PostPipeline = (props: PostPipelineProps) => (
  <Mutate<RestResponseString, unknown, PostPipelineQueryParams, string, void>
    verb="POST"
    path={`/ci/pipelines`}
    base={getConfig('ci')}
    {...props}
  />
)

export type UsePostPipelineProps = Omit<
  UseMutateProps<RestResponseString, unknown, PostPipelineQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * Create a CI Pipeline
 */
export const usePostPipeline = (props: UsePostPipelineProps) =>
  useMutate<RestResponseString, unknown, PostPipelineQueryParams, string, void>('POST', `/ci/pipelines`, {
    base: getConfig('ci'),
    ...props
  })

/**
 * Create a CI Pipeline
 */
export const postPipelinePromise = (
  props: MutateUsingFetchProps<RestResponseString, unknown, PostPipelineQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseString, unknown, PostPipelineQueryParams, string, void>(
    'POST',
    getConfig('ci'),
    `/ci/pipelines`,
    props,
    signal
  )

export interface GetPipelineQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface GetPipelinePathParams {
  pipelineIdentifier: string
}

export type GetPipelineProps = Omit<
  GetProps<ResponseNgPipelineEntity, unknown, GetPipelineQueryParams, GetPipelinePathParams>,
  'path'
> &
  GetPipelinePathParams

/**
 * Gets a CI pipeline by identifier
 */
export const GetPipeline = ({ pipelineIdentifier, ...props }: GetPipelineProps) => (
  <Get<ResponseNgPipelineEntity, unknown, GetPipelineQueryParams, GetPipelinePathParams>
    path={`/ci/pipelines/${pipelineIdentifier}`}
    base={getConfig('ci')}
    {...props}
  />
)

export type UseGetPipelineProps = Omit<
  UseGetProps<ResponseNgPipelineEntity, unknown, GetPipelineQueryParams, GetPipelinePathParams>,
  'path'
> &
  GetPipelinePathParams

/**
 * Gets a CI pipeline by identifier
 */
export const useGetPipeline = ({ pipelineIdentifier, ...props }: UseGetPipelineProps) =>
  useGet<ResponseNgPipelineEntity, unknown, GetPipelineQueryParams, GetPipelinePathParams>(
    (paramsInPath: GetPipelinePathParams) => `/ci/pipelines/${paramsInPath.pipelineIdentifier}`,
    { base: getConfig('ci'), pathParams: { pipelineIdentifier }, ...props }
  )

/**
 * Gets a CI pipeline by identifier
 */
export const getPipelinePromise = (
  {
    pipelineIdentifier,
    ...props
  }: GetUsingFetchProps<ResponseNgPipelineEntity, unknown, GetPipelineQueryParams, GetPipelinePathParams> & {
    pipelineIdentifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseNgPipelineEntity, unknown, GetPipelineQueryParams, GetPipelinePathParams>(
    getConfig('ci'),
    `/ci/pipelines/${pipelineIdentifier}`,
    props,
    signal
  )

export interface ExecutePipelineQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface ExecutePipelinePathParams {
  identifier: string
}

export type ExecutePipelineProps = Omit<
  MutateProps<RestResponseString, unknown, ExecutePipelineQueryParams, void, ExecutePipelinePathParams>,
  'path' | 'verb'
> &
  ExecutePipelinePathParams

/**
 * Execute a CI pipeline
 */
export const ExecutePipeline = ({ identifier, ...props }: ExecutePipelineProps) => (
  <Mutate<RestResponseString, unknown, ExecutePipelineQueryParams, void, ExecutePipelinePathParams>
    verb="POST"
    path={`/ci/pipelines/${identifier}/run`}
    base={getConfig('ci')}
    {...props}
  />
)

export type UseExecutePipelineProps = Omit<
  UseMutateProps<RestResponseString, unknown, ExecutePipelineQueryParams, void, ExecutePipelinePathParams>,
  'path' | 'verb'
> &
  ExecutePipelinePathParams

/**
 * Execute a CI pipeline
 */
export const useExecutePipeline = ({ identifier, ...props }: UseExecutePipelineProps) =>
  useMutate<RestResponseString, unknown, ExecutePipelineQueryParams, void, ExecutePipelinePathParams>(
    'POST',
    (paramsInPath: ExecutePipelinePathParams) => `/ci/pipelines/${paramsInPath.identifier}/run`,
    { base: getConfig('ci'), pathParams: { identifier }, ...props }
  )

/**
 * Execute a CI pipeline
 */
export const executePipelinePromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<RestResponseString, unknown, ExecutePipelineQueryParams, void, ExecutePipelinePathParams> & {
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseString, unknown, ExecutePipelineQueryParams, void, ExecutePipelinePathParams>(
    'POST',
    getConfig('ci'),
    `/ci/pipelines/${identifier}/run`,
    props,
    signal
  )

export interface PingPathParams {
  id: string
}

export type PingProps = Omit<GetProps<void, void, void, PingPathParams>, 'path'> & PingPathParams

export const Ping = ({ id, ...props }: PingProps) => (
  <Get<void, void, void, PingPathParams> path={`/ci/${id}`} base={getConfig('ci')} {...props} />
)

export type UsePingProps = Omit<UseGetProps<void, void, void, PingPathParams>, 'path'> & PingPathParams

export const usePing = ({ id, ...props }: UsePingProps) =>
  useGet<void, void, void, PingPathParams>((paramsInPath: PingPathParams) => `/ci/${paramsInPath.id}`, {
    base: getConfig('ci'),
    pathParams: { id },
    ...props
  })

export const pingPromise = (
  { id, ...props }: GetUsingFetchProps<void, void, void, PingPathParams> & { id: string },
  signal?: RequestInit['signal']
) => getUsingFetch<void, void, void, PingPathParams>(getConfig('ci'), `/ci/${id}`, props, signal)

export interface RunPipelineFromTriggerPathParams {
  id: string
}

export type RunPipelineFromTriggerProps = Omit<
  MutateProps<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams>,
  'path' | 'verb'
> &
  RunPipelineFromTriggerPathParams

export const RunPipelineFromTrigger = ({ id, ...props }: RunPipelineFromTriggerProps) => (
  <Mutate<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams>
    verb="POST"
    path={`/ci/webhook/trigger/${id}`}
    base={getConfig('ci')}
    {...props}
  />
)

export type UseRunPipelineFromTriggerProps = Omit<
  UseMutateProps<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams>,
  'path' | 'verb'
> &
  RunPipelineFromTriggerPathParams

export const useRunPipelineFromTrigger = ({ id, ...props }: UseRunPipelineFromTriggerProps) =>
  useMutate<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams>(
    'POST',
    (paramsInPath: RunPipelineFromTriggerPathParams) => `/ci/webhook/trigger/${paramsInPath.id}`,
    { base: getConfig('ci'), pathParams: { id }, ...props }
  )

export const runPipelineFromTriggerPromise = (
  {
    id,
    ...props
  }: MutateUsingFetchProps<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams> & {
    id: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams>(
    'POST',
    getConfig('ci'),
    `/ci/webhook/trigger/${id}`,
    props,
    signal
  )

export interface ParkedHttpQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type ParkedHttpProps = Omit<MutateProps<string, unknown, ParkedHttpQueryParams, void, void>, 'path' | 'verb'>

/**
 * Parked task using Delegate 2.0 framework
 */
export const ParkedHttp = (props: ParkedHttpProps) => (
  <Mutate<string, unknown, ParkedHttpQueryParams, void, void>
    verb="POST"
    path={`/sample/parked/http`}
    base={getConfig('ci')}
    {...props}
  />
)

export type UseParkedHttpProps = Omit<
  UseMutateProps<string, unknown, ParkedHttpQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Parked task using Delegate 2.0 framework
 */
export const useParkedHttp = (props: UseParkedHttpProps) =>
  useMutate<string, unknown, ParkedHttpQueryParams, void, void>('POST', `/sample/parked/http`, {
    base: getConfig('ci'),
    ...props
  })

/**
 * Parked task using Delegate 2.0 framework
 */
export const parkedHttpPromise = (
  props: MutateUsingFetchProps<string, unknown, ParkedHttpQueryParams, void, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<string, unknown, ParkedHttpQueryParams, void, void>(
    'POST',
    getConfig('ci'),
    `/sample/parked/http`,
    props,
    signal
  )

export interface AsyncTaskOutputQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type AsyncTaskOutputProps = Omit<
  MutateProps<string, unknown, AsyncTaskOutputQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Create a delegate tasks
 */
export const AsyncTaskOutput = (props: AsyncTaskOutputProps) => (
  <Mutate<string, unknown, AsyncTaskOutputQueryParams, void, void>
    verb="POST"
    path={`/sample/async/output`}
    base={getConfig('ci')}
    {...props}
  />
)

export type UseAsyncTaskOutputProps = Omit<
  UseMutateProps<string, unknown, AsyncTaskOutputQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Create a delegate tasks
 */
export const useAsyncTaskOutput = (props: UseAsyncTaskOutputProps) =>
  useMutate<string, unknown, AsyncTaskOutputQueryParams, void, void>('POST', `/sample/async/output`, {
    base: getConfig('ci'),
    ...props
  })

/**
 * Create a delegate tasks
 */
export const asyncTaskOutputPromise = (
  props: MutateUsingFetchProps<string, unknown, AsyncTaskOutputQueryParams, void, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<string, unknown, AsyncTaskOutputQueryParams, void, void>(
    'POST',
    getConfig('ci'),
    `/sample/async/output`,
    props,
    signal
  )
