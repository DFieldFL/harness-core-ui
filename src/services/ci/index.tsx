/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, mutateUsingFetch, GetUsingFetchProps, MutateUsingFetchProps } from '../config'
export interface AdviserIssuer {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserAdviserIssuer
  defaultInstanceForType?: AdviserIssuer
  adviserType?: 'UNKNOWN' | 'NEXT_STEP' | 'RETRY' | 'INTERVENTION_WAIT' | 'END_PLAN' | 'MARK_SUCCESS' | 'UNRECOGNIZED'
  adviserTypeValue?: number
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface AdviserIssuerOrBuilder {
  adviserType?: 'UNKNOWN' | 'NEXT_STEP' | 'RETRY' | 'INTERVENTION_WAIT' | 'END_PLAN' | 'MARK_SUCCESS' | 'UNRECOGNIZED'
  adviserTypeValue?: number
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface AmbianceDTO {
  setupAbstractions?: {
    [key: string]: string
  }
  levels?: LevelDTO[]
  planExecutionId?: string
}

export interface AsyncExecutableResponse {
  unknownFields?: UnknownFieldSet
  mode?: 'RUNNING_MODE' | 'APPROVAL_WAITING_MODE' | 'RESOURCE_WAITING_MODE' | 'UNRECOGNIZED'
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserAsyncExecutableResponse
  defaultInstanceForType?: AsyncExecutableResponse
  logKeysList?: string[]
  logKeysCount?: number
  unitsCount?: number
  callbackIdsList?: string[]
  callbackIdsCount?: number
  modeValue?: number
  unitsList?: string[]
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface AsyncExecutableResponseOrBuilder {
  mode?: 'RUNNING_MODE' | 'APPROVAL_WAITING_MODE' | 'RESOURCE_WAITING_MODE' | 'UNRECOGNIZED'
  logKeysList?: string[]
  logKeysCount?: number
  unitsCount?: number
  callbackIdsList?: string[]
  callbackIdsCount?: number
  modeValue?: number
  unitsList?: string[]
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface ByteString {
  empty?: boolean
  validUtf8?: boolean
}

export interface CIBuildAuthor {
  id?: string
  name?: string
  email?: string
  avatar?: string
}

export interface CIBuildBranchHook {
  name?: string
  link?: string
  state?: string
  commits?: CIBuildCommit[]
}

export interface CIBuildCommit {
  id?: string
  link?: string
  message?: string
  ownerName?: string
  ownerId?: string
  ownerEmail?: string
  timeStamp?: number
}

export interface CIBuildPRHook {
  id?: number
  link?: string
  title?: string
  body?: string
  sourceRepo?: string
  sourceBranch?: string
  targetBranch?: string
  state?: string
  commits?: CIBuildCommit[]
}

export interface CIBuildPipeline {
  id?: string
  name?: string
  tags?: NGTag[]
}

export interface CIBuildResponseDTO {
  id?: number
  status?: string
  errorMessage?: string
  startTime?: number
  endTime?: number
  pipeline?: CIBuildPipeline
  triggerType?: string
  event?: string
  author?: CIBuildAuthor
  branch?: CIBuildBranchHook
  pullRequest?: CIBuildPRHook
  graph?: OrchestrationGraphDTO
}

export interface Child {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserChild
  defaultInstanceForType?: Child
  childNodeId?: string
  childNodeIdBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface ChildChainExecutableResponse {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserChildChainExecutableResponse
  defaultInstanceForType?: ChildChainExecutableResponse
  nextChildId?: string
  nextChildIdBytes?: ByteString
  previousChildId?: string
  previousChildIdBytes?: ByteString
  passThroughData?: ByteString
  lastLink?: boolean
  suspend?: boolean
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface ChildChainExecutableResponseOrBuilder {
  nextChildId?: string
  nextChildIdBytes?: ByteString
  previousChildId?: string
  previousChildIdBytes?: ByteString
  passThroughData?: ByteString
  lastLink?: boolean
  suspend?: boolean
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface ChildExecutableResponse {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserChildExecutableResponse
  defaultInstanceForType?: ChildExecutableResponse
  childNodeId?: string
  childNodeIdBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface ChildExecutableResponseOrBuilder {
  childNodeId?: string
  childNodeIdBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface ChildOrBuilder {
  childNodeId?: string
  childNodeIdBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface ChildrenExecutableResponse {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserChildrenExecutableResponse
  defaultInstanceForType?: ChildrenExecutableResponse
  childrenList?: Child[]
  childrenCount?: number
  childrenOrBuilderList?: ChildOrBuilder[]
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface ChildrenExecutableResponseOrBuilder {
  childrenList?: Child[]
  childrenCount?: number
  childrenOrBuilderList?: ChildOrBuilder[]
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface DelegateSelectionLogParams {
  delegateId?: string
  delegateType?: string
  delegateName?: string
  delegateHostName?: string
  delegateProfileName?: string
  conclusion?: string
  message?: string
  eventTimestamp?: number
  profileScopingRulesDetails?: ProfileScopingRulesDetails
}

export interface Descriptor {
  index?: number
  fullName?: string
  file?: FileDescriptor
  containingType?: Descriptor
  nestedTypes?: Descriptor[]
  enumTypes?: EnumDescriptor[]
  fields?: FieldDescriptor[]
  extensions?: FieldDescriptor[]
  oneofs?: OneofDescriptor[]
  name?: string
  options?: MessageOptions
  extendable?: boolean
}

export interface Duration {
  seconds?: number
  nano?: number
  zero?: boolean
  negative?: boolean
  units?: TemporalUnit[]
}

export interface EdgeList {
  edges?: string[]
  nextIds?: string[]
}

export interface EnumDescriptor {
  index?: number
  fullName?: string
  file?: FileDescriptor
  containingType?: Descriptor
  values?: EnumValueDescriptor[]
  name?: string
  options?: EnumOptions
}

export interface EnumOptions {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserEnumOptions
  defaultInstanceForType?: EnumOptions
  deprecated?: boolean
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionCount?: number
  allowAlias?: boolean
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
}

export interface EnumValueDescriptor {
  index?: number
  fullName?: string
  file?: FileDescriptor
  type?: EnumDescriptor
  name?: string
  number?: number
  options?: EnumValueOptions
}

export interface EnumValueOptions {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserEnumValueOptions
  defaultInstanceForType?: EnumValueOptions
  deprecated?: boolean
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionCount?: number
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
}

export interface ExecutableResponse {
  unknownFields?: UnknownFieldSet
  task?: TaskExecutableResponse
  asyncOrBuilder?: AsyncExecutableResponseOrBuilder
  childOrBuilder?: ChildExecutableResponseOrBuilder
  childrenOrBuilder?: ChildrenExecutableResponseOrBuilder
  childChain?: ChildChainExecutableResponse
  childChainOrBuilder?: ChildChainExecutableResponseOrBuilder
  taskOrBuilder?: TaskExecutableResponseOrBuilder
  taskChain?: TaskChainExecutableResponse
  taskChainOrBuilder?: TaskChainExecutableResponseOrBuilder
  sync?: SyncExecutableResponse
  syncOrBuilder?: SyncExecutableResponseOrBuilder
  skipTask?: SkipTaskExecutableResponse
  skipTaskOrBuilder?: SkipTaskExecutableResponseOrBuilder
  children?: ChildrenExecutableResponse
  responseCase?:
    | 'ASYNC'
    | 'CHILD'
    | 'CHILDREN'
    | 'CHILDCHAIN'
    | 'TASK'
    | 'TASKCHAIN'
    | 'SYNC'
    | 'SKIPTASK'
    | 'RESPONSE_NOT_SET'
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserExecutableResponse
  defaultInstanceForType?: ExecutableResponse
  async?: AsyncExecutableResponse
  child?: ChildExecutableResponse
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface FailureInfoDTO {
  message?: string
  failureTypeList?: (
    | 'EXPIRED'
    | 'DELEGATE_PROVISIONING'
    | 'CONNECTIVITY'
    | 'AUTHENTICATION'
    | 'VERIFICATION_FAILURE'
    | 'APPLICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'TIMEOUT_ERROR'
  )[]
  responseMessages?: ResponseMessage[]
}

export interface FieldDescriptor {
  index?: number
  fullName?: string
  jsonName?: string
  file?: FileDescriptor
  extensionScope?: Descriptor
  type?:
    | 'DOUBLE'
    | 'FLOAT'
    | 'INT64'
    | 'UINT64'
    | 'INT32'
    | 'FIXED64'
    | 'FIXED32'
    | 'BOOL'
    | 'STRING'
    | 'GROUP'
    | 'MESSAGE'
    | 'BYTES'
    | 'UINT32'
    | 'ENUM'
    | 'SFIXED32'
    | 'SFIXED64'
    | 'SINT32'
    | 'SINT64'
  containingType?: Descriptor
  messageType?: Descriptor
  containingOneof?: OneofDescriptor
  enumType?: EnumDescriptor
  defaultValue?: { [key: string]: any }
  name?: string
  number?: number
  repeated?: boolean
  javaType?: 'INT' | 'LONG' | 'FLOAT' | 'DOUBLE' | 'BOOLEAN' | 'STRING' | 'BYTE_STRING' | 'ENUM' | 'MESSAGE'
  mapField?: boolean
  options?: FieldOptions
  required?: boolean
  optional?: boolean
  liteJavaType?: 'INT' | 'LONG' | 'FLOAT' | 'DOUBLE' | 'BOOLEAN' | 'STRING' | 'BYTE_STRING' | 'ENUM' | 'MESSAGE'
  liteType?:
    | 'DOUBLE'
    | 'FLOAT'
    | 'INT64'
    | 'UINT64'
    | 'INT32'
    | 'FIXED64'
    | 'FIXED32'
    | 'BOOL'
    | 'STRING'
    | 'GROUP'
    | 'MESSAGE'
    | 'BYTES'
    | 'UINT32'
    | 'ENUM'
    | 'SFIXED32'
    | 'SFIXED64'
    | 'SINT32'
    | 'SINT64'
  packed?: boolean
  packable?: boolean
  extension?: boolean
}

export interface FieldOptions {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserFieldOptions
  defaultInstanceForType?: FieldOptions
  packed?: boolean
  deprecated?: boolean
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionCount?: number
  ctype?: 'STRING' | 'CORD' | 'STRING_PIECE'
  jstype?: 'JS_NORMAL' | 'JS_STRING' | 'JS_NUMBER'
  lazy?: boolean
  weak?: boolean
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
}

export interface FileDescriptor {
  messageTypes?: Descriptor[]
  enumTypes?: EnumDescriptor[]
  services?: ServiceDescriptor[]
  extensions?: FieldDescriptor[]
  dependencies?: FileDescriptor[]
  publicDependencies?: FileDescriptor[]
  name?: string
  package?: string
  file?: FileDescriptor
  options?: FileOptions
  fullName?: string
  syntax?: 'UNKNOWN' | 'PROTO2' | 'PROTO3'
}

export interface FileOptions {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserFileOptions
  defaultInstanceForType?: FileOptions
  javaStringCheckUtf8?: boolean
  deprecated?: boolean
  phpMetadataNamespace?: string
  phpMetadataNamespaceBytes?: ByteString
  rubyPackage?: string
  rubyPackageBytes?: ByteString
  javaPackage?: string
  javaPackageBytes?: ByteString
  javaOuterClassname?: string
  javaOuterClassnameBytes?: ByteString
  javaMultipleFiles?: boolean
  javaGenerateEqualsAndHash?: boolean
  optimizeFor?: 'SPEED' | 'CODE_SIZE' | 'LITE_RUNTIME'
  goPackage?: string
  goPackageBytes?: ByteString
  ccGenericServices?: boolean
  javaGenericServices?: boolean
  pyGenericServices?: boolean
  phpGenericServices?: boolean
  ccEnableArenas?: boolean
  objcClassPrefix?: string
  objcClassPrefixBytes?: ByteString
  csharpNamespace?: string
  csharpNamespaceBytes?: ByteString
  swiftPrefix?: string
  swiftPrefixBytes?: ByteString
  phpClassPrefix?: string
  phpClassPrefixBytes?: ByteString
  phpNamespace?: string
  phpNamespaceBytes?: ByteString
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionCount?: number
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
}

export interface GraphDelegateSelectionLogParams {
  taskId?: string
  taskName?: string
  selectionLogParams?: DelegateSelectionLogParams
}

export interface GraphVertexDTO {
  uuid?: string
  ambiance?: AmbianceDTO
  planNodeId?: string
  identifier?: string
  name?: string
  startTs?: number
  endTs?: number
  initialWaitDuration?: Duration
  lastUpdatedAt?: number
  stepType?: string
  status?:
    | 'NO_OP'
    | 'RUNNING'
    | 'INTERVENTION_WAITING'
    | 'TIMED_WAITING'
    | 'ASYNC_WAITING'
    | 'TASK_WAITING'
    | 'DISCONTINUING'
    | 'PAUSING'
    | 'QUEUED'
    | 'SKIPPED'
    | 'PAUSED'
    | 'ABORTED'
    | 'ERRORED'
    | 'FAILED'
    | 'EXPIRED'
    | 'SUSPENDED'
    | 'SUCCEEDED'
    | 'IGNORE_FAILED'
    | 'APPROVAL_WAITING'
    | 'RESOURCE_WAITING'
    | 'UNRECOGNIZED'
  failureInfo?: FailureInfoDTO
  skipInfo?: SkipInfo
  nodeRunInfo?: NodeRunInfo
  stepParameters?: {
    [key: string]: { [key: string]: any }
  }
  mode?:
    | 'UNKNOWN'
    | 'SYNC'
    | 'ASYNC'
    | 'TASK_CHAIN'
    | 'TASK'
    | 'CHILD_CHAIN'
    | 'CHILDREN'
    | 'CHILD'
    | 'SKIP'
    | 'UNRECOGNIZED'
  graphDelegateSelectionLogParams?: GraphDelegateSelectionLogParams[]
  executableResponses?: ExecutableResponse[]
  interruptHistories?: InterruptEffect[]
  outcomes?: {
    [key: string]: { [key: string]: any }
  }[]
  retryIds?: string[]
  progressDataMap?: {
    [key: string]: ProgressData[]
  }
  unitProgresses?: UnitProgress[]
  skipType?: 'NOOP' | 'SKIP_TREE' | 'SKIP_NODE' | 'UNRECOGNIZED'
  representationStrategy?: 'camelCase'
}

export interface InterruptConfig {
  unknownFields?: UnknownFieldSet
  issuedBy?: IssuedBy
  configCase?: 'RETRYINTERRUPTCONFIG' | 'CONFIG_NOT_SET'
  issuedByOrBuilder?: IssuedByOrBuilder
  retryInterruptConfig?: RetryInterruptConfig
  retryInterruptConfigOrBuilder?: RetryInterruptConfigOrBuilder
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserInterruptConfig
  defaultInstanceForType?: InterruptConfig
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface InterruptEffect {
  interruptId: string
  tookEffectAt: number
  interruptType:
    | 'UNKNOWN'
    | 'ABORT'
    | 'ABORT_ALL'
    | 'PAUSE'
    | 'PAUSE_ALL'
    | 'RESUME'
    | 'RESUME_ALL'
    | 'RETRY'
    | 'IGNORE'
    | 'WAITING_FOR_MANUAL_INTERVENTION'
    | 'MARK_FAILED'
    | 'MARK_SUCCESS'
    | 'NEXT_STEP'
    | 'END_EXECUTION'
    | 'MARK_EXPIRED'
    | 'CUSTOM_FAILURE'
    | 'UNRECOGNIZED'
  interruptConfig: InterruptConfig
}

export interface IssuedBy {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserIssuedBy
  defaultInstanceForType?: IssuedBy
  timeoutIssuerOrBuilder?: TimeoutIssuerOrBuilder
  issuerCase?: 'MANUALISSUER' | 'ADVISERISSUER' | 'TIMEOUTISSUER' | 'ISSUER_NOT_SET'
  manualIssuer?: ManualIssuer
  timeoutIssuer?: TimeoutIssuer
  manualIssuerOrBuilder?: ManualIssuerOrBuilder
  adviserIssuer?: AdviserIssuer
  adviserIssuerOrBuilder?: AdviserIssuerOrBuilder
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface IssuedByOrBuilder {
  timeoutIssuerOrBuilder?: TimeoutIssuerOrBuilder
  issuerCase?: 'MANUALISSUER' | 'ADVISERISSUER' | 'TIMEOUTISSUER' | 'ISSUER_NOT_SET'
  manualIssuer?: ManualIssuer
  timeoutIssuer?: TimeoutIssuer
  manualIssuerOrBuilder?: ManualIssuerOrBuilder
  adviserIssuer?: AdviserIssuer
  adviserIssuerOrBuilder?: AdviserIssuerOrBuilder
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface LevelDTO {
  setupId?: string
  runtimeId?: string
  identifier?: string
  stepType?: string
  group?: string
}

export interface ManualIssuer {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserManualIssuer
  defaultInstanceForType?: ManualIssuer
  userIdBytes?: ByteString
  emailId?: string
  userId?: string
  emailIdBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface ManualIssuerOrBuilder {
  userIdBytes?: ByteString
  emailId?: string
  userId?: string
  emailIdBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface Message {
  parserForType?: ParserMessage
  serializedSize?: number
  initialized?: boolean
  defaultInstanceForType?: MessageLite
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface MessageLite {
  serializedSize?: number
  parserForType?: ParserMessageLite
  initialized?: boolean
  defaultInstanceForType?: MessageLite
}

export interface MessageOptions {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserMessageOptions
  defaultInstanceForType?: MessageOptions
  mapEntry?: boolean
  messageSetWireFormat?: boolean
  deprecated?: boolean
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  noStandardDescriptorAccessor?: boolean
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionCount?: number
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
}

export interface MethodDescriptor {
  index?: number
  fullName?: string
  file?: FileDescriptor
  service?: ServiceDescriptor
  inputType?: Descriptor
  outputType?: Descriptor
  name?: string
  options?: MethodOptions
  clientStreaming?: boolean
  serverStreaming?: boolean
}

export interface MethodOptions {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserMethodOptions
  defaultInstanceForType?: MethodOptions
  deprecated?: boolean
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionCount?: number
  idempotencyLevel?: 'IDEMPOTENCY_UNKNOWN' | 'NO_SIDE_EFFECTS' | 'IDEMPOTENT'
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
}

export interface NGTag {
  key: string
  value: string
}

export interface NamePart {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserNamePart
  defaultInstanceForType?: NamePart
  namePart?: string
  namePartBytes?: ByteString
  isExtension?: boolean
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface NamePartOrBuilder {
  namePart?: string
  namePartBytes?: ByteString
  isExtension?: boolean
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface NodeRunInfo {
  unknownFields?: UnknownFieldSet
  whenConditionBytes?: ByteString
  whenCondition?: string
  evaluatedCondition?: boolean
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserNodeRunInfo
  defaultInstanceForType?: NodeRunInfo
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface OneofDescriptor {
  index?: number
  fullName?: string
  file?: FileDescriptor
  containingType?: Descriptor
  fieldCount?: number
  fields?: FieldDescriptor[]
  name?: string
  options?: OneofOptions
}

export interface OneofOptions {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserOneofOptions
  defaultInstanceForType?: OneofOptions
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionCount?: number
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
}

export interface OrchestrationAdjacencyListDTO {
  graphVertexMap?: {
    [key: string]: GraphVertexDTO
  }
  adjacencyMap?: {
    [key: string]: EdgeList
  }
}

export interface OrchestrationGraphDTO {
  planExecutionId?: string
  startTs?: number
  endTs?: number
  status?:
    | 'NO_OP'
    | 'RUNNING'
    | 'INTERVENTION_WAITING'
    | 'TIMED_WAITING'
    | 'ASYNC_WAITING'
    | 'TASK_WAITING'
    | 'DISCONTINUING'
    | 'PAUSING'
    | 'QUEUED'
    | 'SKIPPED'
    | 'PAUSED'
    | 'ABORTED'
    | 'ERRORED'
    | 'FAILED'
    | 'EXPIRED'
    | 'SUSPENDED'
    | 'SUCCEEDED'
    | 'IGNORE_FAILED'
    | 'APPROVAL_WAITING'
    | 'RESOURCE_WAITING'
    | 'UNRECOGNIZED'
  rootNodeIds?: string[]
  adjacencyList?: OrchestrationAdjacencyListDTO
}

export interface Page {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: { [key: string]: any }[]
  pageIndex?: number
  empty?: boolean
}

export interface PageCIBuildResponseDTO {
  totalPages?: number
  totalItems?: number
  pageItemCount?: number
  pageSize?: number
  content?: CIBuildResponseDTO[]
  pageIndex?: number
  empty?: boolean
}

export interface Parser {
  [key: string]: any
}

export interface ParserAdviserIssuer {
  [key: string]: any
}

export interface ParserAsyncExecutableResponse {
  [key: string]: any
}

export interface ParserChild {
  [key: string]: any
}

export interface ParserChildChainExecutableResponse {
  [key: string]: any
}

export interface ParserChildExecutableResponse {
  [key: string]: any
}

export interface ParserChildrenExecutableResponse {
  [key: string]: any
}

export interface ParserEnumOptions {
  [key: string]: any
}

export interface ParserEnumValueOptions {
  [key: string]: any
}

export interface ParserExecutableResponse {
  [key: string]: any
}

export interface ParserFieldOptions {
  [key: string]: any
}

export interface ParserFileOptions {
  [key: string]: any
}

export interface ParserInterruptConfig {
  [key: string]: any
}

export interface ParserIssuedBy {
  [key: string]: any
}

export interface ParserManualIssuer {
  [key: string]: any
}

export interface ParserMessage {
  [key: string]: any
}

export interface ParserMessageLite {
  [key: string]: any
}

export interface ParserMessageOptions {
  [key: string]: any
}

export interface ParserMethodOptions {
  [key: string]: any
}

export interface ParserNamePart {
  [key: string]: any
}

export interface ParserNodeRunInfo {
  [key: string]: any
}

export interface ParserOneofOptions {
  [key: string]: any
}

export interface ParserRetryInterruptConfig {
  [key: string]: any
}

export interface ParserServiceOptions {
  [key: string]: any
}

export interface ParserSkipInfo {
  [key: string]: any
}

export interface ParserSkipTaskExecutableResponse {
  [key: string]: any
}

export interface ParserSyncExecutableResponse {
  [key: string]: any
}

export interface ParserTaskChainExecutableResponse {
  [key: string]: any
}

export interface ParserTaskExecutableResponse {
  [key: string]: any
}

export interface ParserTimeoutIssuer {
  [key: string]: any
}

export interface ParserUninterpretedOption {
  [key: string]: any
}

export interface ParserUnitProgress {
  [key: string]: any
}

export interface ProfileScopingRulesDetails {
  profileId?: string
  profileName?: string
  scopingRulesDescriptions?: string[]
}

export interface ProgressData {
  [key: string]: any
}

export interface Response {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: { [key: string]: any }
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface ResponseMessage {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'DATA'
  level?: 'INFO' | 'ERROR'
  message?: string
  exception?: Throwable
  failureTypes?: (
    | 'EXPIRED'
    | 'DELEGATE_PROVISIONING'
    | 'CONNECTIVITY'
    | 'AUTHENTICATION'
    | 'VERIFICATION_FAILURE'
    | 'APPLICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'TIMEOUT_ERROR'
  )[]
}

export interface ResponsePageCIBuildResponseDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PageCIBuildResponseDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface RetryInterruptConfig {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserRetryInterruptConfig
  defaultInstanceForType?: RetryInterruptConfig
  retryId?: string
  retryIdBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface RetryInterruptConfigOrBuilder {
  retryId?: string
  retryIdBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface ServiceDescriptor {
  index?: number
  fullName?: string
  file?: FileDescriptor
  methods?: MethodDescriptor[]
  name?: string
  options?: ServiceOptions
}

export interface ServiceOptions {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserServiceOptions
  defaultInstanceForType?: ServiceOptions
  deprecated?: boolean
  uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
  uninterpretedOptionList?: UninterpretedOption[]
  uninterpretedOptionCount?: number
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
  allFieldsRaw?: {
    [key: string]: { [key: string]: any }
  }
}

export interface SkipInfo {
  unknownFields?: UnknownFieldSet
  skipCondition?: string
  skipConditionBytes?: ByteString
  evaluatedCondition?: boolean
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserSkipInfo
  defaultInstanceForType?: SkipInfo
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface SkipTaskExecutableResponse {
  unknownFields?: UnknownFieldSet
  message?: string
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserSkipTaskExecutableResponse
  defaultInstanceForType?: SkipTaskExecutableResponse
  messageBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface SkipTaskExecutableResponseOrBuilder {
  message?: string
  messageBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface StackTraceElement {
  methodName?: string
  fileName?: string
  lineNumber?: number
  className?: string
  nativeMethod?: boolean
}

export interface SyncExecutableResponse {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserSyncExecutableResponse
  defaultInstanceForType?: SyncExecutableResponse
  logKeysList?: string[]
  logKeysCount?: number
  unitsCount?: number
  unitsList?: string[]
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface SyncExecutableResponseOrBuilder {
  logKeysList?: string[]
  logKeysCount?: number
  unitsCount?: number
  unitsList?: string[]
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface TaskChainExecutableResponse {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserTaskChainExecutableResponse
  defaultInstanceForType?: TaskChainExecutableResponse
  taskName?: string
  taskId?: string
  logKeysList?: string[]
  logKeysCount?: number
  unitsCount?: number
  unitsList?: string[]
  passThroughData?: ByteString
  taskIdBytes?: ByteString
  taskCategoryValue?: number
  taskCategory?: 'UNKNOWN_CATEGORY' | 'DELEGATE_TASK_V1' | 'DELEGATE_TASK_V2' | 'UNRECOGNIZED'
  taskNameBytes?: ByteString
  chainEnd?: boolean
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface TaskChainExecutableResponseOrBuilder {
  taskName?: string
  taskId?: string
  logKeysList?: string[]
  logKeysCount?: number
  unitsCount?: number
  unitsList?: string[]
  passThroughData?: ByteString
  taskIdBytes?: ByteString
  taskCategoryValue?: number
  taskCategory?: 'UNKNOWN_CATEGORY' | 'DELEGATE_TASK_V1' | 'DELEGATE_TASK_V2' | 'UNRECOGNIZED'
  taskNameBytes?: ByteString
  chainEnd?: boolean
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface TaskExecutableResponse {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserTaskExecutableResponse
  defaultInstanceForType?: TaskExecutableResponse
  taskName?: string
  taskId?: string
  logKeysList?: string[]
  logKeysCount?: number
  unitsCount?: number
  unitsList?: string[]
  taskIdBytes?: ByteString
  taskCategoryValue?: number
  taskCategory?: 'UNKNOWN_CATEGORY' | 'DELEGATE_TASK_V1' | 'DELEGATE_TASK_V2' | 'UNRECOGNIZED'
  taskNameBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface TaskExecutableResponseOrBuilder {
  taskName?: string
  taskId?: string
  logKeysList?: string[]
  logKeysCount?: number
  unitsCount?: number
  unitsList?: string[]
  taskIdBytes?: ByteString
  taskCategoryValue?: number
  taskCategory?: 'UNKNOWN_CATEGORY' | 'DELEGATE_TASK_V1' | 'DELEGATE_TASK_V2' | 'UNRECOGNIZED'
  taskNameBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface TemporalUnit {
  timeBased?: boolean
  dateBased?: boolean
  durationEstimated?: boolean
  duration?: Duration
}

export interface Throwable {
  cause?: Throwable
  stackTrace?: StackTraceElement[]
  message?: string
  localizedMessage?: string
  suppressed?: Throwable[]
}

export interface TimeoutIssuer {
  unknownFields?: UnknownFieldSet
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserTimeoutIssuer
  defaultInstanceForType?: TimeoutIssuer
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface TimeoutIssuerOrBuilder {
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface UninterpretedOption {
  unknownFields?: UnknownFieldSet
  nameCount?: number
  stringValue?: ByteString
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserUninterpretedOption
  defaultInstanceForType?: UninterpretedOption
  doubleValue?: number
  positiveIntValue?: number
  negativeIntValue?: number
  aggregateValue?: string
  aggregateValueBytes?: ByteString
  nameList?: NamePart[]
  nameOrBuilderList?: NamePartOrBuilder[]
  identifierValue?: string
  identifierValueBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface UninterpretedOptionOrBuilder {
  nameCount?: number
  stringValue?: ByteString
  doubleValue?: number
  positiveIntValue?: number
  negativeIntValue?: number
  aggregateValue?: string
  aggregateValueBytes?: ByteString
  nameList?: NamePart[]
  nameOrBuilderList?: NamePartOrBuilder[]
  identifierValue?: string
  identifierValueBytes?: ByteString
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  unknownFields?: UnknownFieldSet
  defaultInstanceForType?: Message
  initializationErrorString?: string
  descriptorForType?: Descriptor
  initialized?: boolean
}

export interface UnitProgress {
  unknownFields?: UnknownFieldSet
  statusValue?: number
  unitName?: string
  status?: 'UNKNOWN' | 'SUCCESS' | 'FAILURE' | 'RUNNING' | 'QUEUED' | 'SKIPPED' | 'EXPIRED' | 'UNRECOGNIZED'
  startTime?: number
  endTime?: number
  unitNameBytes?: ByteString
  initialized?: boolean
  serializedSize?: number
  parserForType?: ParserUnitProgress
  defaultInstanceForType?: UnitProgress
  allFields?: {
    [key: string]: { [key: string]: any }
  }
  initializationErrorString?: string
  descriptorForType?: Descriptor
}

export interface UnknownFieldSet {
  initialized?: boolean
  serializedSize?: number
  parserForType?: Parser
  defaultInstanceForType?: UnknownFieldSet
  serializedSizeAsMessageSet?: number
}

export interface ResponseCIBuildResponseDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: CIBuildResponseDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface BuildHealth {
  count?: number
  rate?: number
}

export interface BuildInfo {
  total?: BuildHealth
  success?: BuildHealth
  failed?: BuildHealth
}

export interface DashboardBuildsHealthInfo {
  builds?: BuildInfo
}

export interface ResponseDashboardBuildsHealthInfo {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: DashboardBuildsHealthInfo
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface Failure {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'DATA'
  message?: string
  correlationId?: string
  errors?: ValidationError[]
}

export interface ValidationError {
  fieldId?: string
  error?: string
}

export interface Error {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_KEY'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'INVALID_YAML_PAYLOAD'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'DATA'
  message?: string
  correlationId?: string
  detailedMessage?: string
  responseMessages?: ResponseMessage[]
}

export interface BuildCount {
  total?: number
  success?: number
  failed?: number
}

export interface BuildExecutionInfo {
  time?: string
  builds?: BuildCount
}

export interface DashboardBuildExecutionInfo {
  buildExecutionInfoList?: BuildExecutionInfo[]
}

export interface ResponseDashboardBuildExecutionInfo {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: DashboardBuildExecutionInfo
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface BuildRepositoryCount {
  count?: number
}

export interface DashboardBuildRepositoryInfo {
  repositoryInfo?: RepositoryInfo[]
}

export interface RepositoryBuildInfo {
  time?: string
  builds?: BuildRepositoryCount
}

export interface RepositoryInfo {
  name?: string
  buildCount?: number
  percentSuccess?: number
  successRate?: number
  lastCommit?: string
  countList?: RepositoryBuildInfo[]
  time?: string
}

export interface ResponseDashboardBuildRepositoryInfo {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: DashboardBuildRepositoryInfo
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface BuildActiveInfo {
  piplineName?: string
  branch?: string
  commit?: string
  commitID?: string
  startTs?: string
  status?: string
  endTs?: string
}

export interface BuildFailureInfo {
  piplineName?: string
  branch?: string
  commit?: string
  commitID?: string
  startTs?: string
  endTs?: string
}

export interface DashboardBuildsActiveAndFailedInfo {
  failed?: BuildFailureInfo[]
  active?: BuildActiveInfo[]
}

export interface ResponseDashboardBuildsActiveAndFailedInfo {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: DashboardBuildsActiveAndFailedInfo
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface RestResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: { [key: string]: any }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string
  responseMessages?: ResponseMessage[]
}

export interface JsonNode {
  array?: boolean
  null?: boolean
  containerNode?: boolean
  object?: boolean
  nodeType?: 'ARRAY' | 'BINARY' | 'BOOLEAN' | 'MISSING' | 'NULL' | 'NUMBER' | 'OBJECT' | 'POJO' | 'STRING'
  pojo?: boolean
  number?: boolean
  integralNumber?: boolean
  floatingPointNumber?: boolean
  short?: boolean
  int?: boolean
  long?: boolean
  float?: boolean
  double?: boolean
  bigDecimal?: boolean
  bigInteger?: boolean
  textual?: boolean
  boolean?: boolean
  binary?: boolean
  valueNode?: boolean
  missingNode?: boolean
}

export interface PartialSchemaDTO {
  schema?: JsonNode
  nodeType?: string
  nodeName?: string
  namespace?: string
}

export interface ResponsePartialSchemaDTO {
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  data?: PartialSchemaDTO
  metaData?: { [key: string]: any }
  correlationId?: string
}

export interface GetBuildsOldQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier: string
  userIdentifier?: string
  branch?: string
  tags?: string[]
  page?: number
  size?: number
  sort?: string[]
}

export type GetBuildsOldProps = Omit<
  GetProps<ResponsePageCIBuildResponseDTO, unknown, GetBuildsOldQueryParams, void>,
  'path'
>

/**
 * Get builds list
 */
export const GetBuildsOld = (props: GetBuildsOldProps) => (
  <Get<ResponsePageCIBuildResponseDTO, unknown, GetBuildsOldQueryParams, void>
    path="/ci/builds"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseGetBuildsOldProps = Omit<
  UseGetProps<ResponsePageCIBuildResponseDTO, unknown, GetBuildsOldQueryParams, void>,
  'path'
>

/**
 * Get builds list
 */
export const useGetBuildsOld = (props: UseGetBuildsOldProps) =>
  useGet<ResponsePageCIBuildResponseDTO, unknown, GetBuildsOldQueryParams, void>(`/ci/builds`, {
    base: getConfig('ci'),
    ...props
  })

/**
 * Get builds list
 */
export const getBuildsOldPromise = (
  props: GetUsingFetchProps<ResponsePageCIBuildResponseDTO, unknown, GetBuildsOldQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageCIBuildResponseDTO, unknown, GetBuildsOldQueryParams, void>(
    getConfig('ci'),
    `/ci/builds`,
    props,
    signal
  )

export interface GetBuildQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface GetBuildPathParams {
  buildIdentifier: number
}

export type GetBuildProps = Omit<
  GetProps<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams>,
  'path'
> &
  GetBuildPathParams

/**
 * Gets a build by identifier
 */
export const GetBuild = ({ buildIdentifier, ...props }: GetBuildProps) => (
  <Get<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams>
    path="/ci/builds/${buildIdentifier}"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseGetBuildProps = Omit<
  UseGetProps<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams>,
  'path'
> &
  GetBuildPathParams

/**
 * Gets a build by identifier
 */
export const useGetBuild = ({ buildIdentifier, ...props }: UseGetBuildProps) =>
  useGet<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams>(
    (paramsInPath: GetBuildPathParams) => `/ci/builds/${paramsInPath.buildIdentifier}`,
    { base: getConfig('ci'), pathParams: { buildIdentifier }, ...props }
  )

/**
 * Gets a build by identifier
 */
export const getBuildPromise = (
  {
    buildIdentifier,
    ...props
  }: GetUsingFetchProps<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams> & {
    buildIdentifier: number
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseCIBuildResponseDTO, unknown, GetBuildQueryParams, GetBuildPathParams>(
    getConfig('ci'),
    `/ci/builds/${buildIdentifier}`,
    props,
    signal
  )

export interface GetBuildHealthQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  startInterval: string
  endInterval: string
}

export type GetBuildHealthProps = Omit<
  GetProps<ResponseDashboardBuildsHealthInfo, Failure | Error, GetBuildHealthQueryParams, void>,
  'path'
>

/**
 * Get build health
 */
export const GetBuildHealth = (props: GetBuildHealthProps) => (
  <Get<ResponseDashboardBuildsHealthInfo, Failure | Error, GetBuildHealthQueryParams, void>
    path="/ci/buildHealth"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseGetBuildHealthProps = Omit<
  UseGetProps<ResponseDashboardBuildsHealthInfo, Failure | Error, GetBuildHealthQueryParams, void>,
  'path'
>

/**
 * Get build health
 */
export const useGetBuildHealth = (props: UseGetBuildHealthProps) =>
  useGet<ResponseDashboardBuildsHealthInfo, Failure | Error, GetBuildHealthQueryParams, void>(`/ci/buildHealth`, {
    base: getConfig('ci'),
    ...props
  })

/**
 * Get build health
 */
export const getBuildHealthPromise = (
  props: GetUsingFetchProps<ResponseDashboardBuildsHealthInfo, Failure | Error, GetBuildHealthQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseDashboardBuildsHealthInfo, Failure | Error, GetBuildHealthQueryParams, void>(
    getConfig('ci'),
    `/ci/buildHealth`,
    props,
    signal
  )

export interface GetBuildExecutionQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  startInterval: string
  endInterval?: string
}

export type GetBuildExecutionProps = Omit<
  GetProps<ResponseDashboardBuildExecutionInfo, Failure | Error, GetBuildExecutionQueryParams, void>,
  'path'
>

/**
 * Get build execution
 */
export const GetBuildExecution = (props: GetBuildExecutionProps) => (
  <Get<ResponseDashboardBuildExecutionInfo, Failure | Error, GetBuildExecutionQueryParams, void>
    path="/ci/buildExecution"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseGetBuildExecutionProps = Omit<
  UseGetProps<ResponseDashboardBuildExecutionInfo, Failure | Error, GetBuildExecutionQueryParams, void>,
  'path'
>

/**
 * Get build execution
 */
export const useGetBuildExecution = (props: UseGetBuildExecutionProps) =>
  useGet<ResponseDashboardBuildExecutionInfo, Failure | Error, GetBuildExecutionQueryParams, void>(
    `/ci/buildExecution`,
    { base: getConfig('ci'), ...props }
  )

/**
 * Get build execution
 */
export const getBuildExecutionPromise = (
  props: GetUsingFetchProps<ResponseDashboardBuildExecutionInfo, Failure | Error, GetBuildExecutionQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseDashboardBuildExecutionInfo, Failure | Error, GetBuildExecutionQueryParams, void>(
    getConfig('ci'),
    `/ci/buildExecution`,
    props,
    signal
  )

export interface GetRepositoryBuildQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  startInterval: string
  endInterval?: string
}

export type GetRepositoryBuildProps = Omit<
  GetProps<ResponseDashboardBuildRepositoryInfo, Failure | Error, GetRepositoryBuildQueryParams, void>,
  'path'
>

/**
 * Get build getRepositoryBuild
 */
export const GetRepositoryBuild = (props: GetRepositoryBuildProps) => (
  <Get<ResponseDashboardBuildRepositoryInfo, Failure | Error, GetRepositoryBuildQueryParams, void>
    path="/ci/repositoryBuild"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseGetRepositoryBuildProps = Omit<
  UseGetProps<ResponseDashboardBuildRepositoryInfo, Failure | Error, GetRepositoryBuildQueryParams, void>,
  'path'
>

/**
 * Get build getRepositoryBuild
 */
export const useGetRepositoryBuild = (props: UseGetRepositoryBuildProps) =>
  useGet<ResponseDashboardBuildRepositoryInfo, Failure | Error, GetRepositoryBuildQueryParams, void>(
    `/ci/repositoryBuild`,
    { base: getConfig('ci'), ...props }
  )

/**
 * Get build getRepositoryBuild
 */
export const getRepositoryBuildPromise = (
  props: GetUsingFetchProps<ResponseDashboardBuildRepositoryInfo, Failure | Error, GetRepositoryBuildQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseDashboardBuildRepositoryInfo, Failure | Error, GetRepositoryBuildQueryParams, void>(
    getConfig('ci'),
    `/ci/repositoryBuild`,
    props,
    signal
  )

export interface GetBuildsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  top?: number
}

export type GetBuildsProps = Omit<
  GetProps<ResponseDashboardBuildsActiveAndFailedInfo, Failure | Error, GetBuildsQueryParams, void>,
  'path'
>

/**
 * Get builds
 */
export const GetBuilds = (props: GetBuildsProps) => (
  <Get<ResponseDashboardBuildsActiveAndFailedInfo, Failure | Error, GetBuildsQueryParams, void>
    path="/ci/getBuilds"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseGetBuildsProps = Omit<
  UseGetProps<ResponseDashboardBuildsActiveAndFailedInfo, Failure | Error, GetBuildsQueryParams, void>,
  'path'
>

/**
 * Get builds
 */
export const useGetBuilds = (props: UseGetBuildsProps) =>
  useGet<ResponseDashboardBuildsActiveAndFailedInfo, Failure | Error, GetBuildsQueryParams, void>(`/ci/getBuilds`, {
    base: getConfig('ci'),
    ...props
  })

/**
 * Get builds
 */
export const getBuildsPromise = (
  props: GetUsingFetchProps<ResponseDashboardBuildsActiveAndFailedInfo, Failure | Error, GetBuildsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseDashboardBuildsActiveAndFailedInfo, Failure | Error, GetBuildsQueryParams, void>(
    getConfig('ci'),
    `/ci/getBuilds`,
    props,
    signal
  )

export interface ExecutePipelineQueryParams {
  accountIdentifier: string
  orgIdentifier?: string
  projectIdentifier?: string
  branch?: string
  tag?: string
}

export interface ExecutePipelinePathParams {
  identifier: string
}

export type ExecutePipelineProps = Omit<
  MutateProps<Response, Failure | Error, ExecutePipelineQueryParams, void, ExecutePipelinePathParams>,
  'path' | 'verb'
> &
  ExecutePipelinePathParams

/**
 * Execute a CI pipeline
 */
export const ExecutePipeline = ({ identifier, ...props }: ExecutePipelineProps) => (
  <Mutate<Response, Failure | Error, ExecutePipelineQueryParams, void, ExecutePipelinePathParams>
    verb="POST"
    path="/ci/execute/${identifier}/run"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseExecutePipelineProps = Omit<
  UseMutateProps<Response, Failure | Error, ExecutePipelineQueryParams, void, ExecutePipelinePathParams>,
  'path' | 'verb'
> &
  ExecutePipelinePathParams

/**
 * Execute a CI pipeline
 */
export const useExecutePipeline = ({ identifier, ...props }: UseExecutePipelineProps) =>
  useMutate<Response, Failure | Error, ExecutePipelineQueryParams, void, ExecutePipelinePathParams>(
    'POST',
    (paramsInPath: ExecutePipelinePathParams) => `/ci/execute/${paramsInPath.identifier}/run`,
    { base: getConfig('ci'), pathParams: { identifier }, ...props }
  )

/**
 * Execute a CI pipeline
 */
export const executePipelinePromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<Response, Failure | Error, ExecutePipelineQueryParams, void, ExecutePipelinePathParams> & {
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<Response, Failure | Error, ExecutePipelineQueryParams, void, ExecutePipelinePathParams>(
    'POST',
    getConfig('ci'),
    `/ci/execute/${identifier}/run`,
    props,
    signal
  )

export interface RunPipelineFromTriggerPathParams {
  id: string
}

export type RunPipelineFromTriggerProps = Omit<
  MutateProps<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams>,
  'path' | 'verb'
> &
  RunPipelineFromTriggerPathParams

export const RunPipelineFromTrigger = ({ id, ...props }: RunPipelineFromTriggerProps) => (
  <Mutate<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams>
    verb="POST"
    path="/ci/webhook/trigger/${id}"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseRunPipelineFromTriggerProps = Omit<
  UseMutateProps<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams>,
  'path' | 'verb'
> &
  RunPipelineFromTriggerPathParams

export const useRunPipelineFromTrigger = ({ id, ...props }: UseRunPipelineFromTriggerProps) =>
  useMutate<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams>(
    'POST',
    (paramsInPath: RunPipelineFromTriggerPathParams) => `/ci/webhook/trigger/${paramsInPath.id}`,
    { base: getConfig('ci'), pathParams: { id }, ...props }
  )

export const runPipelineFromTriggerPromise = (
  {
    id,
    ...props
  }: MutateUsingFetchProps<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams> & {
    id: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseString, unknown, void, string, RunPipelineFromTriggerPathParams>(
    'POST',
    getConfig('ci'),
    `/ci/webhook/trigger/${id}`,
    props,
    signal
  )

export interface GetPartialYamlSchemaQueryParams {
  projectIdentifier?: string
  orgIdentifier?: string
  scope?: 'account' | 'org' | 'project' | 'unknown'
}

export type GetPartialYamlSchemaProps = Omit<
  GetProps<ResponsePartialSchemaDTO, Failure | Error, GetPartialYamlSchemaQueryParams, void>,
  'path'
>

/**
 * Get Partial Yaml Schema
 */
export const GetPartialYamlSchema = (props: GetPartialYamlSchemaProps) => (
  <Get<ResponsePartialSchemaDTO, Failure | Error, GetPartialYamlSchemaQueryParams, void>
    path="/partial-yaml-schema"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseGetPartialYamlSchemaProps = Omit<
  UseGetProps<ResponsePartialSchemaDTO, Failure | Error, GetPartialYamlSchemaQueryParams, void>,
  'path'
>

/**
 * Get Partial Yaml Schema
 */
export const useGetPartialYamlSchema = (props: UseGetPartialYamlSchemaProps) =>
  useGet<ResponsePartialSchemaDTO, Failure | Error, GetPartialYamlSchemaQueryParams, void>(`/partial-yaml-schema`, {
    base: getConfig('ci'),
    ...props
  })

/**
 * Get Partial Yaml Schema
 */
export const getPartialYamlSchemaPromise = (
  props: GetUsingFetchProps<ResponsePartialSchemaDTO, Failure | Error, GetPartialYamlSchemaQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePartialSchemaDTO, Failure | Error, GetPartialYamlSchemaQueryParams, void>(
    getConfig('ci'),
    `/partial-yaml-schema`,
    props,
    signal
  )

export type GetCIHealthStatusProps = Omit<GetProps<RestResponseString, unknown, void, void>, 'path'>

/**
 * get health for CI service
 */
export const GetCIHealthStatus = (props: GetCIHealthStatusProps) => (
  <Get<RestResponseString, unknown, void, void> path="/health" base={getConfig('ci')} {...props} />
)

export type UseGetCIHealthStatusProps = Omit<UseGetProps<RestResponseString, unknown, void, void>, 'path'>

/**
 * get health for CI service
 */
export const useGetCIHealthStatus = (props: UseGetCIHealthStatusProps) =>
  useGet<RestResponseString, unknown, void, void>(`/health`, { base: getConfig('ci'), ...props })

/**
 * get health for CI service
 */
export const getCIHealthStatusPromise = (
  props: GetUsingFetchProps<RestResponseString, unknown, void, void>,
  signal?: RequestInit['signal']
) => getUsingFetch<RestResponseString, unknown, void, void>(getConfig('ci'), `/health`, props, signal)

export interface AsyncTaskOutputQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type AsyncTaskOutputProps = Omit<
  MutateProps<string, unknown, AsyncTaskOutputQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Create a delegate tasks
 */
export const AsyncTaskOutput = (props: AsyncTaskOutputProps) => (
  <Mutate<string, unknown, AsyncTaskOutputQueryParams, void, void>
    verb="POST"
    path="/sample/async/output"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseAsyncTaskOutputProps = Omit<
  UseMutateProps<string, unknown, AsyncTaskOutputQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Create a delegate tasks
 */
export const useAsyncTaskOutput = (props: UseAsyncTaskOutputProps) =>
  useMutate<string, unknown, AsyncTaskOutputQueryParams, void, void>('POST', `/sample/async/output`, {
    base: getConfig('ci'),
    ...props
  })

/**
 * Create a delegate tasks
 */
export const asyncTaskOutputPromise = (
  props: MutateUsingFetchProps<string, unknown, AsyncTaskOutputQueryParams, void, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<string, unknown, AsyncTaskOutputQueryParams, void, void>(
    'POST',
    getConfig('ci'),
    `/sample/async/output`,
    props,
    signal
  )

export interface ParkedHttpQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type ParkedHttpProps = Omit<MutateProps<string, unknown, ParkedHttpQueryParams, void, void>, 'path' | 'verb'>

/**
 * Parked task using Delegate 2.0 framework
 */
export const ParkedHttp = (props: ParkedHttpProps) => (
  <Mutate<string, unknown, ParkedHttpQueryParams, void, void>
    verb="POST"
    path="/sample/parked/http"
    base={getConfig('ci')}
    {...props}
  />
)

export type UseParkedHttpProps = Omit<
  UseMutateProps<string, unknown, ParkedHttpQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * Parked task using Delegate 2.0 framework
 */
export const useParkedHttp = (props: UseParkedHttpProps) =>
  useMutate<string, unknown, ParkedHttpQueryParams, void, void>('POST', `/sample/parked/http`, {
    base: getConfig('ci'),
    ...props
  })

/**
 * Parked task using Delegate 2.0 framework
 */
export const parkedHttpPromise = (
  props: MutateUsingFetchProps<string, unknown, ParkedHttpQueryParams, void, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<string, unknown, ParkedHttpQueryParams, void, void>(
    'POST',
    getConfig('ci'),
    `/sample/parked/http`,
    props,
    signal
  )
