{
  "swagger": "2.0",
  "info": {
    "version": "2.0",
    "title": "CI API Reference"
  },
  "host": "localhost",
  "tags": [
    {
      "name": "ci"
    },
    {
      "name": "partial-yaml-schema"
    },
    {
      "name": "health"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/ci/buildHealth": {
      "get": {
        "tags": ["ci"],
        "summary": "Get build health",
        "description": "",
        "operationId": "getBuildHealth",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardBuildsHealthInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ci/buildExecution": {
      "get": {
        "tags": ["ci"],
        "summary": "Get build execution",
        "description": "",
        "operationId": "getBuildExecution",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardBuildExecutionInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ci/repositoryBuild": {
      "get": {
        "tags": ["ci"],
        "summary": "Get build getRepositoryBuild",
        "description": "",
        "operationId": "getRepositoryBuild",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardBuildRepositoryInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ci/getBuilds": {
      "get": {
        "tags": ["ci"],
        "summary": "Get builds",
        "description": "",
        "operationId": "getBuilds",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseDashboardBuildsActiveAndFailedInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ci/usage/ci": {
      "get": {
        "tags": ["ci"],
        "summary": "Get usage",
        "description": "",
        "operationId": "getUsage",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "accountIdentifier",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseCIUsageResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema/dummyApiForSwaggerStageSchemaCheck": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "dummy api for checking integration stage",
        "description": "",
        "operationId": "dummyApiForSwaggerStageSchemaCheck",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseStageElementConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema/dummyApiForSwaggerStepSchemaCheck": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "dummy api for checking integration stage",
        "description": "",
        "operationId": "dummyApiForSwaggerStepSchemaCheck",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseStepElementConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema/dummyApiForSwaggerCIPipelineModuleInfoSchemaCheck": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "dummy api for checking CIPipelineModuleInfo",
        "description": "",
        "operationId": "dummyApiForSwaggerCIPipelineModuleInfoSchemaCheck",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseCIPipelineModuleInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partial-yaml-schema": {
      "get": {
        "tags": ["partial-yaml-schema"],
        "summary": "Get Partial Yaml Schema",
        "description": "",
        "operationId": "getPartialYamlSchema",
        "consumes": ["application/json", "text/yaml", "text/html", "text/plain"],
        "produces": ["application/json", "text/yaml", "text/html", "text/plain"],
        "parameters": [
          {
            "name": "projectIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orgIdentifier",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["account", "org", "project", "unknown"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponsePartialSchemaDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Failure"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["health"],
        "summary": "get health for CI service",
        "description": "",
        "operationId": "getCIHealthStatus",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RestResponseString"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BuildHealth": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "rate": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "BuildInfo": {
      "type": "object",
      "properties": {
        "total": {
          "$ref": "#/definitions/BuildHealth"
        },
        "success": {
          "$ref": "#/definitions/BuildHealth"
        },
        "failed": {
          "$ref": "#/definitions/BuildHealth"
        }
      }
    },
    "DashboardBuildsHealthInfo": {
      "type": "object",
      "properties": {
        "builds": {
          "$ref": "#/definitions/BuildInfo"
        }
      }
    },
    "Response": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "type": "object"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ResponseDashboardBuildsHealthInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DashboardBuildsHealthInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "Failure": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "CYBERARK_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "JIRA_STEP_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION"
          ]
        },
        "message": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationError"
          }
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "fieldId": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "CYBERARK_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "JIRA_STEP_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION"
          ]
        },
        "message": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "detailedMessage": {
          "type": "string"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        },
        "metadata": {
          "$ref": "#/definitions/ErrorMetadataDTO"
        }
      }
    },
    "ErrorMetadataDTO": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "ResponseMessage": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "DEFAULT_ERROR_CODE",
            "INVALID_ARGUMENT",
            "INVALID_EMAIL",
            "DOMAIN_NOT_ALLOWED_TO_REGISTER",
            "COMMNITY_EDITION_NOT_FOUND",
            "DEPLOY_MODE_IS_NOT_ON_PREM",
            "USER_ALREADY_REGISTERED",
            "USER_INVITATION_DOES_NOT_EXIST",
            "USER_DOES_NOT_EXIST",
            "USER_INVITE_OPERATION_FAILED",
            "USER_DISABLED",
            "ACCOUNT_DOES_NOT_EXIST",
            "INACTIVE_ACCOUNT",
            "ACCOUNT_MIGRATED",
            "USER_DOMAIN_NOT_ALLOWED",
            "MAX_FAILED_ATTEMPT_COUNT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "ROLE_DOES_NOT_EXIST",
            "EMAIL_NOT_VERIFIED",
            "EMAIL_VERIFICATION_TOKEN_NOT_FOUND",
            "INVALID_TOKEN",
            "REVOKED_TOKEN",
            "INVALID_CAPTCHA_TOKEN",
            "NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS",
            "EXPIRED_TOKEN",
            "TOKEN_ALREADY_REFRESHED_ONCE",
            "ACCESS_DENIED",
            "NG_ACCESS_DENIED",
            "INVALID_CREDENTIAL",
            "INVALID_CREDENTIALS_THIRD_PARTY",
            "INVALID_KEY",
            "INVALID_CONNECTOR_TYPE",
            "INVALID_KEYPATH",
            "INVALID_VARIABLE",
            "UNKNOWN_HOST",
            "UNREACHABLE_HOST",
            "INVALID_PORT",
            "SSH_SESSION_TIMEOUT",
            "SOCKET_CONNECTION_ERROR",
            "CONNECTION_ERROR",
            "SOCKET_CONNECTION_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "SSH_CONNECTION_ERROR",
            "USER_GROUP_ERROR",
            "INVALID_EXECUTION_ID",
            "ERROR_IN_GETTING_CHANNEL_STREAMS",
            "UNEXPECTED",
            "UNKNOWN_ERROR",
            "UNKNOWN_EXECUTOR_TYPE_ERROR",
            "DUPLICATE_STATE_NAMES",
            "TRANSITION_NOT_LINKED",
            "TRANSITION_TO_INCORRECT_STATE",
            "TRANSITION_TYPE_NULL",
            "STATES_WITH_DUP_TRANSITIONS",
            "BARRIERS_NOT_RUNNING_CONCURRENTLY",
            "NON_FORK_STATES",
            "NON_REPEAT_STATES",
            "INITIAL_STATE_NOT_DEFINED",
            "FILE_INTEGRITY_CHECK_FAILED",
            "INVALID_URL",
            "FILE_DOWNLOAD_FAILED",
            "PLATFORM_SOFTWARE_DELETE_ERROR",
            "INVALID_CSV_FILE",
            "INVALID_REQUEST",
            "SCHEMA_VALIDATION_FAILED",
            "FILTER_CREATION_ERROR",
            "INVALID_YAML_ERROR",
            "PLAN_CREATION_ERROR",
            "INVALID_INFRA_STATE",
            "PIPELINE_ALREADY_TRIGGERED",
            "NON_EXISTING_PIPELINE",
            "DUPLICATE_COMMAND_NAMES",
            "INVALID_PIPELINE",
            "COMMAND_DOES_NOT_EXIST",
            "DUPLICATE_ARTIFACTSTREAM_NAMES",
            "DUPLICATE_HOST_NAMES",
            "STATE_NOT_FOR_TYPE",
            "STATE_MACHINE_ISSUE",
            "STATE_DISCONTINUE_FAILED",
            "STATE_PAUSE_FAILED",
            "PAUSE_ALL_ALREADY",
            "RESUME_ALL_ALREADY",
            "ROLLBACK_ALREADY",
            "ABORT_ALL_ALREADY",
            "EXPIRE_ALL_ALREADY",
            "RETRY_FAILED",
            "UNKNOWN_ARTIFACT_TYPE",
            "UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE",
            "INIT_TIMEOUT",
            "LICENSE_EXPIRED",
            "NOT_LICENSED",
            "REQUEST_TIMEOUT",
            "WORKFLOW_ALREADY_TRIGGERED",
            "JENKINS_ERROR",
            "INVALID_ARTIFACT_SOURCE",
            "INVALID_ARTIFACT_SERVER",
            "INVALID_CLOUD_PROVIDER",
            "UPDATE_NOT_ALLOWED",
            "DELETE_NOT_ALLOWED",
            "APPDYNAMICS_CONFIGURATION_ERROR",
            "APM_CONFIGURATION_ERROR",
            "SPLUNK_CONFIGURATION_ERROR",
            "ELK_CONFIGURATION_ERROR",
            "LOGZ_CONFIGURATION_ERROR",
            "SUMO_CONFIGURATION_ERROR",
            "INSTANA_CONFIGURATION_ERROR",
            "APPDYNAMICS_ERROR",
            "STACKDRIVER_ERROR",
            "STACKDRIVER_CONFIGURATION_ERROR",
            "NEWRELIC_CONFIGURATION_ERROR",
            "NEWRELIC_ERROR",
            "DYNA_TRACE_CONFIGURATION_ERROR",
            "DYNA_TRACE_ERROR",
            "CLOUDWATCH_ERROR",
            "CLOUDWATCH_CONFIGURATION_ERROR",
            "PROMETHEUS_CONFIGURATION_ERROR",
            "DATA_DOG_CONFIGURATION_ERROR",
            "SERVICE_GUARD_CONFIGURATION_ERROR",
            "ENCRYPTION_NOT_CONFIGURED",
            "UNAVAILABLE_DELEGATES",
            "WORKFLOW_EXECUTION_IN_PROGRESS",
            "PIPELINE_EXECUTION_IN_PROGRESS",
            "AWS_ACCESS_DENIED",
            "AWS_CLUSTER_NOT_FOUND",
            "AWS_SERVICE_NOT_FOUND",
            "IMAGE_NOT_FOUND",
            "ILLEGAL_ARGUMENT",
            "IMAGE_TAG_NOT_FOUND",
            "DELEGATE_NOT_AVAILABLE",
            "INVALID_YAML_PAYLOAD",
            "AUTHENTICATION_ERROR",
            "AUTHORIZATION_ERROR",
            "UNRECOGNIZED_YAML_FIELDS",
            "COULD_NOT_MAP_BEFORE_YAML",
            "MISSING_BEFORE_YAML",
            "MISSING_YAML",
            "NON_EMPTY_DELETIONS",
            "GENERAL_YAML_ERROR",
            "GENERAL_YAML_INFO",
            "YAML_GIT_SYNC_ERROR",
            "GIT_CONNECTION_ERROR",
            "GIT_ERROR",
            "ARTIFACT_SERVER_ERROR",
            "ENCRYPT_DECRYPT_ERROR",
            "SECRET_MANAGEMENT_ERROR",
            "SECRET_NOT_FOUND",
            "KMS_OPERATION_ERROR",
            "GCP_KMS_OPERATION_ERROR",
            "VAULT_OPERATION_ERROR",
            "AWS_SECRETS_MANAGER_OPERATION_ERROR",
            "AZURE_KEY_VAULT_OPERATION_ERROR",
            "CYBERARK_OPERATION_ERROR",
            "UNSUPPORTED_OPERATION_EXCEPTION",
            "FEATURE_UNAVAILABLE",
            "GENERAL_ERROR",
            "BASELINE_CONFIGURATION_ERROR",
            "SAML_IDP_CONFIGURATION_NOT_AVAILABLE",
            "INVALID_AUTHENTICATION_MECHANISM",
            "INVALID_SAML_CONFIGURATION",
            "INVALID_OAUTH_CONFIGURATION",
            "INVALID_LDAP_CONFIGURATION",
            "USER_GROUP_SYNC_FAILURE",
            "USER_GROUP_ALREADY_EXIST",
            "INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION",
            "EXPLANATION",
            "HINT",
            "NOT_WHITELISTED_IP",
            "INVALID_TOTP_TOKEN",
            "EMAIL_FAILED",
            "SSL_HANDSHAKE_FAILED",
            "NO_APPS_ASSIGNED",
            "INVALID_INFRA_CONFIGURATION",
            "TEMPLATES_LINKED",
            "USER_HAS_NO_PERMISSIONS",
            "USER_NOT_AUTHORIZED",
            "USER_ALREADY_PRESENT",
            "INVALID_USAGE_RESTRICTION",
            "USAGE_RESTRICTION_ERROR",
            "STATE_EXECUTION_INSTANCE_NOT_FOUND",
            "DELEGATE_TASK_RETRY",
            "KUBERNETES_API_TASK_EXCEPTION",
            "KUBERNETES_TASK_EXCEPTION",
            "KUBERNETES_YAML_ERROR",
            "SAVE_FILE_INTO_GCP_STORAGE_FAILED",
            "READ_FILE_FROM_GCP_STORAGE_FAILED",
            "FILE_NOT_FOUND_ERROR",
            "USAGE_LIMITS_EXCEEDED",
            "EVENT_PUBLISH_FAILED",
            "JIRA_ERROR",
            "EXPRESSION_EVALUATION_FAILED",
            "KUBERNETES_VALUES_ERROR",
            "KUBERNETES_CLUSTER_ERROR",
            "INCORRECT_SIGN_IN_MECHANISM",
            "OAUTH_LOGIN_FAILED",
            "INVALID_TERRAFORM_TARGETS_REQUEST",
            "TERRAFORM_EXECUTION_ERROR",
            "FILE_READ_FAILED",
            "FILE_SIZE_EXCEEDS_LIMIT",
            "CLUSTER_NOT_FOUND",
            "MARKETPLACE_TOKEN_NOT_FOUND",
            "INVALID_MARKETPLACE_TOKEN",
            "INVALID_TICKETING_SERVER",
            "SERVICENOW_ERROR",
            "PASSWORD_EXPIRED",
            "USER_LOCKED",
            "PASSWORD_STRENGTH_CHECK_FAILED",
            "ACCOUNT_DISABLED",
            "INVALID_ACCOUNT_PERMISSION",
            "PAGERDUTY_ERROR",
            "HEALTH_ERROR",
            "SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED",
            "DOMAIN_WHITELIST_FILTER_CHECK_FAILED",
            "INVALID_DASHBOARD_UPDATE_REQUEST",
            "DUPLICATE_FIELD",
            "INVALID_AZURE_VAULT_CONFIGURATION",
            "USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS",
            "INVALID_ROLLBACK",
            "DATA_COLLECTION_ERROR",
            "SUMO_DATA_COLLECTION_ERROR",
            "DEPLOYMENT_GOVERNANCE_ERROR",
            "BATCH_PROCESSING_ERROR",
            "GRAPHQL_ERROR",
            "FILE_CREATE_ERROR",
            "ILLEGAL_STATE",
            "GIT_DIFF_COMMIT_NOT_IN_ORDER",
            "FAILED_TO_ACQUIRE_PERSISTENT_LOCK",
            "FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK",
            "POD_NOT_FOUND_ERROR",
            "COMMAND_EXECUTION_ERROR",
            "REGISTRY_EXCEPTION",
            "ENGINE_INTERRUPT_PROCESSING_EXCEPTION",
            "ENGINE_IO_EXCEPTION",
            "ENGINE_OUTCOME_EXCEPTION",
            "ENGINE_SWEEPING_OUTPUT_EXCEPTION",
            "CACHE_NOT_FOUND_EXCEPTION",
            "ENGINE_ENTITY_UPDATE_EXCEPTION",
            "SHELL_EXECUTION_EXCEPTION",
            "TEMPLATE_NOT_FOUND",
            "AZURE_SERVICE_EXCEPTION",
            "AZURE_CLIENT_EXCEPTION",
            "GIT_UNSEEN_REMOTE_HEAD_COMMIT",
            "TIMEOUT_ENGINE_EXCEPTION",
            "NO_AVAILABLE_DELEGATES",
            "NO_INSTALLED_DELEGATES",
            "DUPLICATE_DELEGATE_EXCEPTION",
            "GCP_MARKETPLACE_EXCEPTION",
            "MISSING_DEFAULT_GOOGLE_CREDENTIALS",
            "INCORRECT_DEFAULT_GOOGLE_CREDENTIALS",
            "OPTIMISTIC_LOCKING_EXCEPTION",
            "NG_PIPELINE_EXECUTION_EXCEPTION",
            "NG_PIPELINE_CREATE_EXCEPTION",
            "RESOURCE_NOT_FOUND_EXCEPTION",
            "PMS_INITIALIZE_SDK_EXCEPTION",
            "UNEXPECTED_SNIPPET_EXCEPTION",
            "UNEXPECTED_SCHEMA_EXCEPTION",
            "CONNECTOR_VALIDATION_EXCEPTION",
            "TIMESCALE_NOT_AVAILABLE",
            "MIGRATION_EXCEPTION",
            "REQUEST_PROCESSING_INTERRUPTED",
            "GCP_SECRET_MANAGER_OPERATION_ERROR",
            "GCP_SECRET_OPERATION_ERROR",
            "GIT_OPERATION_ERROR",
            "TASK_FAILURE_ERROR",
            "INSTANCE_STATS_PROCESS_ERROR",
            "INSTANCE_STATS_MIGRATION_ERROR",
            "DEPLOYMENT_MIGRATION_ERROR",
            "INSTANCE_STATS_AGGREGATION_ERROR",
            "UNRESOLVED_EXPRESSIONS_ERROR",
            "KRYO_HANDLER_NOT_FOUND_ERROR",
            "DELEGATE_ERROR_HANDLER_EXCEPTION",
            "UNEXPECTED_TYPE_ERROR",
            "EXCEPTION_HANDLER_NOT_FOUND",
            "CONNECTOR_NOT_FOUND_EXCEPTION",
            "GCP_SERVER_ERROR",
            "HTTP_RESPONSE_EXCEPTION",
            "SCM_NOT_FOUND_ERROR",
            "SCM_CONFLICT_ERROR",
            "SCM_UNPROCESSABLE_ENTITY",
            "PROCESS_EXECUTION_EXCEPTION",
            "SCM_UNAUTHORIZED",
            "DATA",
            "CONTEXT",
            "PR_CREATION_ERROR",
            "URL_NOT_REACHABLE",
            "URL_NOT_PROVIDED",
            "ENGINE_EXPRESSION_EVALUATION_ERROR",
            "ENGINE_FUNCTOR_ERROR",
            "JIRA_CLIENT_ERROR",
            "SCM_NOT_MODIFIED",
            "JIRA_STEP_ERROR",
            "BUCKET_SERVER_ERROR",
            "GIT_SYNC_ERROR",
            "TEMPLATE_EXCEPTION"
          ]
        },
        "level": {
          "type": "string",
          "enum": ["INFO", "ERROR"]
        },
        "message": {
          "type": "string"
        },
        "exception": {
          "$ref": "#/definitions/Throwable"
        },
        "failureTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "EXPIRED",
              "DELEGATE_PROVISIONING",
              "CONNECTIVITY",
              "AUTHENTICATION",
              "VERIFICATION_FAILURE",
              "APPLICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "TIMEOUT_ERROR"
            ]
          }
        }
      }
    },
    "SampleErrorMetadataDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorMetadataDTO"
        },
        {
          "type": "object",
          "properties": {
            "sampleMap": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "methodName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "className": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      }
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "message": {
          "type": "string"
        },
        "localizedMessage": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      }
    },
    "BuildCount": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "success": {
          "type": "integer",
          "format": "int64"
        },
        "failed": {
          "type": "integer",
          "format": "int64"
        },
        "aborted": {
          "type": "integer",
          "format": "int64"
        },
        "expired": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BuildExecutionInfo": {
      "type": "object",
      "properties": {
        "time": {
          "type": "integer",
          "format": "int64"
        },
        "builds": {
          "$ref": "#/definitions/BuildCount"
        }
      }
    },
    "DashboardBuildExecutionInfo": {
      "type": "object",
      "properties": {
        "buildExecutionInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildExecutionInfo"
          }
        }
      }
    },
    "ResponseDashboardBuildExecutionInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DashboardBuildExecutionInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "AuthorInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "BuildRepositoryCount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DashboardBuildRepositoryInfo": {
      "type": "object",
      "properties": {
        "repositoryInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryInfo"
          }
        }
      }
    },
    "LastRepositoryInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/AuthorInfo"
        },
        "commit": {
          "type": "string"
        },
        "startTime": {
          "type": "integer",
          "format": "int64"
        },
        "endTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RepositoryBuildInfo": {
      "type": "object",
      "properties": {
        "time": {
          "type": "integer",
          "format": "int64"
        },
        "builds": {
          "$ref": "#/definitions/BuildRepositoryCount"
        }
      }
    },
    "RepositoryInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "buildCount": {
          "type": "integer",
          "format": "int64"
        },
        "percentSuccess": {
          "type": "number",
          "format": "double"
        },
        "successRate": {
          "type": "number",
          "format": "double"
        },
        "lastRepository": {
          "$ref": "#/definitions/LastRepositoryInfo"
        },
        "countList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryBuildInfo"
          }
        }
      }
    },
    "ResponseDashboardBuildRepositoryInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DashboardBuildRepositoryInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "BuildActiveInfo": {
      "type": "object",
      "properties": {
        "piplineName": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "commitID": {
          "type": "string"
        },
        "triggerType": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/AuthorInfo"
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "planExecutionId": {
          "type": "string"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "gitInfo": {
          "$ref": "#/definitions/GitInfo"
        },
        "serviceInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDeploymentInfo"
          }
        }
      }
    },
    "BuildFailureInfo": {
      "type": "object",
      "properties": {
        "piplineName": {
          "type": "string"
        },
        "pipelineIdentifier": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "commitID": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/AuthorInfo"
        },
        "gitInfo": {
          "$ref": "#/definitions/GitInfo"
        },
        "startTs": {
          "type": "integer",
          "format": "int64"
        },
        "endTs": {
          "type": "integer",
          "format": "int64"
        },
        "triggerType": {
          "type": "string"
        },
        "planExecutionId": {
          "type": "string"
        },
        "serviceInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDeploymentInfo"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "DashboardBuildsActiveAndFailedInfo": {
      "type": "object",
      "properties": {
        "failed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildFailureInfo"
          }
        },
        "active": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildActiveInfo"
          }
        }
      }
    },
    "GitInfo": {
      "type": "object",
      "properties": {
        "sourceBranch": {
          "type": "string"
        },
        "targetBranch": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "commitID": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        }
      }
    },
    "ResponseDashboardBuildsActiveAndFailedInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/DashboardBuildsActiveAndFailedInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "ServiceDeploymentInfo": {
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "serviceTag": {
          "type": "string"
        }
      }
    },
    "CIUsageResult": {
      "type": "object",
      "properties": {
        "accountIdentifier": {
          "type": "string"
        },
        "module": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "activeCommitters": {
          "$ref": "#/definitions/UsageDataDTO"
        }
      }
    },
    "ReferenceDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "projectIdentifier": {
          "type": "string"
        },
        "orgIdentifier": {
          "type": "string"
        },
        "accountIdentifier": {
          "type": "string"
        }
      }
    },
    "ResponseCIUsageResult": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/CIUsageResult"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "UsageDataDTO": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "displayName": {
          "type": "string"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferenceDTO"
          }
        }
      }
    },
    "AbortFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Abort"]
            }
          }
        }
      ]
    },
    "AddRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["AddRule"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/AddRuleYamlSpec"
            }
          }
        }
      ]
    },
    "AddRuleYamlSpec": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "distribution": {
          "$ref": "#/definitions/DistributionYamlSpec"
        },
        "serve": {
          "$ref": "#/definitions/Serve"
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Clause"
          }
        }
      }
    },
    "AddSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["AddSegmentToVariationTargetMap"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/AddSegmentToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "AddSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["segments", "variation"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["AddTargetsToVariationTargetMap"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/AddTargetsToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "AddTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["targets", "variation"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApprovalStageConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StageInfoConfig"
        },
        {
          "type": "object",
          "required": ["execution"],
          "properties": {
            "execution": {
              "$ref": "#/definitions/ExecutionElementConfig"
            }
          }
        }
      ]
    },
    "ApproverInputInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        }
      }
    },
    "Approvers": {
      "type": "object",
      "required": ["disallowPipelineExecutor", "minimumCount", "userGroups"],
      "properties": {
        "userGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "minimumCount": {
          "type": "integer",
          "format": "int32"
        },
        "disallowPipelineExecutor": {
          "type": "boolean"
        }
      }
    },
    "AwsVmBuildJobInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildJobEnvInfo"
        },
        {
          "type": "object",
          "properties": {
            "workDir": {
              "type": "string"
            }
          }
        }
      ]
    },
    "AwsVmInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["KubernetesDirect", "UseFromStage", "AwsVm"]
            },
            "spec": {
              "$ref": "#/definitions/AwsVmInfraYamlSpec"
            }
          }
        }
      ]
    },
    "AwsVmInfraYamlSpec": {
      "type": "object",
      "required": ["poolId"],
      "properties": {
        "poolId": {
          "type": "string"
        }
      }
    },
    "BarrierStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["barrierRef"],
          "properties": {
            "barrierRef": {
              "type": "string"
            }
          }
        }
      ]
    },
    "BranchBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["branch"],
          "properties": {
            "branch": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Build": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["branch", "tag", "PR"]
        },
        "spec": {
          "$ref": "#/definitions/BuildSpec"
        }
      }
    },
    "BuildJobEnvInfo": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["K8", "AWS_VM"]
        }
      }
    },
    "BuildSpec": {
      "type": "object"
    },
    "CIServiceInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/DependencySpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "image"],
          "properties": {
            "envVariables": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "entrypoint": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "args": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "image": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "privileged": {
              "type": "boolean"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": ["Always", "Never", "IfNotPresent"]
            }
          }
        }
      ]
    },
    "Clause": {
      "type": "object",
      "required": ["attribute", "id", "negate", "op", "values"],
      "properties": {
        "id": {
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "negate": {
          "type": "boolean"
        }
      }
    },
    "ClauseYamlSpec": {
      "type": "object",
      "required": ["op", "values"],
      "properties": {
        "attribute": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CleanupStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["infrastructure", "podName"],
          "properties": {
            "infrastructure": {
              "$ref": "#/definitions/Infrastructure"
            },
            "podName": {
              "type": "string"
            },
            "runAsUser": {
              "$ref": "#/definitions/ParameterFieldInteger"
            }
          }
        }
      ]
    },
    "CodeBase": {
      "type": "object",
      "required": ["build", "connectorRef"],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "build": {
          "$ref": "#/definitions/Build"
        },
        "depth": {
          "type": "integer",
          "format": "int32"
        },
        "sslVerify": {
          "type": "boolean"
        },
        "prCloneStrategy": {
          "type": "string",
          "enum": ["MergeCommit", "SourceBranch"]
        },
        "resources": {
          "$ref": "#/definitions/ContainerResource"
        }
      }
    },
    "Condition": {
      "type": "object",
      "required": ["key", "operator", "value"],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": ["equals", "not equals", "in", "not in"]
        }
      }
    },
    "ConnectorConversionInfo": {
      "type": "object",
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "envToSecretsMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ContainerDefinitionInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "containerImageDetails": {
          "$ref": "#/definitions/ContainerImageDetails"
        },
        "containerType": {
          "type": "string",
          "enum": ["STEP_EXECUTOR", "ADD_ON", "RUN", "PLUGIN", "SERVICE", "LITE_ENGINE", "TEST_INTELLIGENCE"]
        },
        "containerResourceParams": {
          "$ref": "#/definitions/ContainerResourceParams"
        },
        "stepIdentifier": {
          "type": "string"
        },
        "stepName": {
          "type": "string"
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "envVars": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "envVarsWithSecretRef": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "secretVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretNGVariable"
          }
        },
        "privileged": {
          "type": "boolean"
        },
        "runAsUser": {
          "type": "integer",
          "format": "int32"
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "harnessManagedImage": {
          "type": "boolean"
        },
        "mainLiteEngine": {
          "type": "boolean"
        }
      }
    },
    "ContainerImageDetails": {
      "type": "object",
      "properties": {
        "imageDetails": {
          "$ref": "#/definitions/ImageDetails"
        },
        "connectorIdentifier": {
          "type": "string"
        }
      }
    },
    "ContainerResource": {
      "type": "object",
      "required": ["limits"],
      "properties": {
        "limits": {
          "$ref": "#/definitions/Limits"
        }
      }
    },
    "ContainerResourceParams": {
      "type": "object",
      "properties": {
        "resourceRequestMemoryMiB": {
          "type": "integer",
          "format": "int32"
        },
        "resourceLimitMemoryMiB": {
          "type": "integer",
          "format": "int32"
        },
        "resourceRequestMilliCpu": {
          "type": "integer",
          "format": "int32"
        },
        "resourceLimitMilliCpu": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CriteriaSpec": {
      "type": "object",
      "discriminator": "type"
    },
    "CriteriaSpecWrapper": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["Jexl", "KeyValues"]
        },
        "spec": {
          "$ref": "#/definitions/CriteriaSpec"
        }
      }
    },
    "DependencyElement": {
      "type": "object",
      "required": ["identifier", "type"],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["Service"]
        },
        "spec": {
          "$ref": "#/definitions/DependencySpecType"
        }
      }
    },
    "DependencySpecType": {
      "type": "object",
      "discriminator": "type"
    },
    "Distribution": {
      "type": "object",
      "required": ["bucketBy", "variations"],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeightedVariation"
          }
        }
      }
    },
    "DistributionYamlSpec": {
      "type": "object",
      "required": ["bucketBy"],
      "properties": {
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationYamlSpec"
          }
        },
        "clauses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClauseYamlSpec"
          }
        }
      }
    },
    "DockerStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "repo", "tags"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "repo": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "buildArgs": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "optimize": {
              "type": "boolean"
            },
            "remoteCacheRepo": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ECRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["account", "connectorRef", "imageName", "region", "tags"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "account": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "imageName": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "buildArgs": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "optimize": {
              "type": "boolean"
            },
            "remoteCacheImage": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ExecutionElementConfig": {
      "type": "object",
      "required": ["steps"],
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "rollbackSteps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      }
    },
    "ExecutionTarget": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "connectorRef": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      }
    },
    "ExecutionWrapperConfig": {
      "type": "object",
      "properties": {
        "step": {
          "$ref": "#/definitions/StepElementConfig"
        },
        "parallel": {
          "$ref": "#/definitions/ParallelStepElementConfig"
        },
        "stepGroup": {
          "$ref": "#/definitions/StepGroupElementConfig"
        }
      }
    },
    "FailureStrategyActionConfig": {
      "type": "object",
      "required": ["type"],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Ignore",
            "Retry",
            "MarkAsSuccess",
            "Abort",
            "StageRollback",
            "StepGroupRollback",
            "ManualIntervention"
          ]
        }
      }
    },
    "FailureStrategyConfig": {
      "type": "object",
      "required": ["onFailure"],
      "properties": {
        "onFailure": {
          "$ref": "#/definitions/OnFailureConfig"
        }
      }
    },
    "FeatureFlagStageConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StageInfoConfig"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "FlagConfigurationStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["environment", "feature", "instructions"],
          "properties": {
            "feature": {
              "type": "string"
            },
            "environment": {
              "type": "string"
            },
            "instructions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatchInstruction"
              }
            }
          }
        }
      ]
    },
    "GCRStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "host", "imageName", "projectID", "tags"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "host": {
              "type": "string"
            },
            "projectID": {
              "type": "string"
            },
            "imageName": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "context": {
              "type": "string"
            },
            "dockerfile": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "buildArgs": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "optimize": {
              "type": "boolean"
            },
            "remoteCacheImage": {
              "type": "string"
            }
          }
        }
      ]
    },
    "HarnessApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["approvalMessage", "approvers", "includePipelineExecutionHistory"],
          "properties": {
            "approvalMessage": {
              "type": "string"
            },
            "includePipelineExecutionHistory": {
              "type": "boolean"
            },
            "approvers": {
              "$ref": "#/definitions/Approvers"
            },
            "approverInputs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApproverInputInfo"
              }
            }
          }
        }
      ]
    },
    "HoldingScope": {
      "type": "object",
      "required": ["nodeSetupId", "scope"],
      "properties": {
        "scope": {
          "type": "string"
        },
        "nodeSetupId": {
          "type": "string"
        }
      }
    },
    "HttpHeaderConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "HttpStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["method", "url"],
          "properties": {
            "url": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "requestBody": {
              "type": "string"
            },
            "assertion": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "headers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HttpHeaderConfig"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "IgnoreFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Ignore"]
            }
          }
        }
      ]
    },
    "ImageDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "sourceName": {
          "type": "string"
        },
        "registryUrl": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "usernameRef": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "domainName": {
          "type": "string"
        }
      }
    },
    "Infrastructure": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["KubernetesDirect", "UseFromStage", "AwsVm"]
        }
      }
    },
    "InitializeStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["accountId", "buildJobEnvInfo", "executionElementConfig", "infrastructure", "skipGitClone"],
          "properties": {
            "accountId": {
              "type": "string"
            },
            "timeout": {
              "type": "integer",
              "format": "int32"
            },
            "buildJobEnvInfo": {
              "$ref": "#/definitions/BuildJobEnvInfo"
            },
            "executionElementConfig": {
              "$ref": "#/definitions/ExecutionElementConfig"
            },
            "ciCodebase": {
              "$ref": "#/definitions/CodeBase"
            },
            "skipGitClone": {
              "type": "boolean"
            },
            "infrastructure": {
              "$ref": "#/definitions/Infrastructure"
            }
          }
        }
      ]
    },
    "InputSetValidator": {
      "type": "object",
      "properties": {
        "validatorType": {
          "type": "string",
          "enum": ["ALLOWED_VALUES", "REGEX"]
        },
        "parameters": {
          "type": "string"
        }
      }
    },
    "IntegrationStageConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/StageInfoConfig"
        },
        {
          "type": "object",
          "required": ["infrastructure"],
          "properties": {
            "sharedPaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "infrastructure": {
              "$ref": "#/definitions/Infrastructure"
            },
            "serviceDependencies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DependencyElement"
              }
            },
            "cloneCodebase": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "JUnitTestReport": {
      "allOf": [
        {
          "$ref": "#/definitions/UnitTestReportSpec"
        },
        {
          "type": "object",
          "properties": {
            "paths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "JexlCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CriteriaSpec"
        },
        {
          "type": "object",
          "required": ["expression"],
          "properties": {
            "expression": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JiraApprovalStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["approvalCriteria", "connectorRef", "issueKey"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "issueKey": {
              "type": "string"
            },
            "approvalCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "rejectionCriteria": {
              "$ref": "#/definitions/CriteriaSpecWrapper"
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "JiraCreateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "issueType", "projectKey"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "projectKey": {
              "type": "string"
            },
            "issueType": {
              "type": "string"
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JiraField"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "JiraField": {
      "type": "object",
      "required": ["value"],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "JiraUpdateStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "issueKey"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "issueKey": {
              "type": "string"
            },
            "transitionTo": {
              "$ref": "#/definitions/TransitionTo"
            },
            "fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JiraField"
              }
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "JsonNode": {
      "type": "object",
      "properties": {
        "float": {
          "type": "boolean"
        },
        "nodeType": {
          "type": "string",
          "enum": ["ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING"]
        },
        "number": {
          "type": "boolean"
        },
        "binary": {
          "type": "boolean"
        },
        "object": {
          "type": "boolean"
        },
        "valueNode": {
          "type": "boolean"
        },
        "containerNode": {
          "type": "boolean"
        },
        "missingNode": {
          "type": "boolean"
        },
        "pojo": {
          "type": "boolean"
        },
        "integralNumber": {
          "type": "boolean"
        },
        "floatingPointNumber": {
          "type": "boolean"
        },
        "short": {
          "type": "boolean"
        },
        "int": {
          "type": "boolean"
        },
        "long": {
          "type": "boolean"
        },
        "double": {
          "type": "boolean"
        },
        "bigDecimal": {
          "type": "boolean"
        },
        "bigInteger": {
          "type": "boolean"
        },
        "textual": {
          "type": "boolean"
        },
        "boolean": {
          "type": "boolean"
        },
        "array": {
          "type": "boolean"
        },
        "null": {
          "type": "boolean"
        }
      }
    },
    "K8BuildJobEnvInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildJobEnvInfo"
        },
        {
          "type": "object",
          "properties": {
            "podsSetupInfo": {
              "$ref": "#/definitions/PodsSetupInfo"
            },
            "workDir": {
              "type": "string"
            },
            "stepConnectorRefs": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ConnectorConversionInfo"
              }
            }
          }
        }
      ]
    },
    "K8sDirectInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["KubernetesDirect", "UseFromStage", "AwsVm"]
            },
            "spec": {
              "$ref": "#/definitions/K8sDirectInfraYamlSpec"
            }
          }
        }
      ]
    },
    "K8sDirectInfraYamlSpec": {
      "type": "object",
      "required": ["connectorRef", "namespace"],
      "properties": {
        "connectorRef": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "runAsUser": {
          "type": "integer",
          "format": "int32"
        },
        "serviceAccountName": {
          "type": "string"
        },
        "initTimeout": {
          "type": "string"
        }
      }
    },
    "KeyValuesCriteriaSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/CriteriaSpec"
        },
        {
          "type": "object",
          "required": ["conditions"],
          "properties": {
            "matchAnyCondition": {
              "type": "boolean"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Condition"
              }
            }
          }
        }
      ]
    },
    "Limits": {
      "type": "object",
      "properties": {
        "memory": {
          "type": "string",
          "pattern": "^(([0-9]*[.])?[0-9]+)([GM]i?)$"
        },
        "cpu": {
          "type": "string"
        }
      }
    },
    "ManualFailureSpecConfig": {
      "type": "object",
      "required": ["onTimeout", "timeout"],
      "properties": {
        "timeout": {
          "type": "string"
        },
        "onTimeout": {
          "$ref": "#/definitions/OnTimeoutConfig"
        }
      }
    },
    "ManualInterventionFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/ManualFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": ["ManualIntervention"]
            }
          }
        }
      ]
    },
    "MarkAsSuccessFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["MarkAsSuccess"]
            }
          }
        }
      ]
    },
    "NGVariable": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "description": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["String", "Number", "Secret"]
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "NumberNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": ["Number"]
            },
            "value": {
              "type": "number",
              "format": "double"
            },
            "default": {
              "type": "number",
              "format": "double"
            }
          }
        }
      ]
    },
    "OnFailureConfig": {
      "type": "object",
      "required": ["action", "errors"],
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unknown",
              "AllErrors",
              "Authentication",
              "Connectivity",
              "Timeout",
              "Authorization",
              "Verification",
              "DelegateProvisioning"
            ]
          }
        },
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OnRetryFailureConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OnTimeoutConfig": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        }
      }
    },
    "OutputNGVariable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "PRBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["number"],
          "properties": {
            "number": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PVCParams": {
      "type": "object",
      "properties": {
        "volumeName": {
          "type": "string"
        },
        "claimName": {
          "type": "string"
        },
        "storageClass": {
          "type": "string"
        },
        "sizeMib": {
          "type": "integer",
          "format": "int32"
        },
        "present": {
          "type": "boolean"
        }
      }
    },
    "ParallelStepElementConfig": {
      "type": "object",
      "required": ["sections"],
      "properties": {
        "sections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          }
        }
      }
    },
    "ParameterField": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "object"
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        }
      }
    },
    "ParameterFieldInteger": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        }
      }
    },
    "ParameterFieldMapStringJsonNode": {
      "type": "object",
      "properties": {
        "expressionValue": {
          "type": "string"
        },
        "expression": {
          "type": "boolean"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "typeString": {
          "type": "boolean"
        },
        "inputSetValidator": {
          "$ref": "#/definitions/InputSetValidator"
        },
        "jsonResponseField": {
          "type": "boolean"
        },
        "responseField": {
          "type": "string"
        }
      }
    },
    "PatchInstruction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "SetFeatureFlagState",
            "SetOnVariation",
            "SetOffVariation",
            "AddRule",
            "UpdateRule",
            "AddTargetsToVariationTargetMap",
            "RemoveTargetsToVariationTargetMap",
            "AddSegmentToVariationTargetMap",
            "RemoveSegmentsToVariationTargetMap"
          ]
        }
      }
    },
    "PluginStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "image"],
          "properties": {
            "settings": {
              "$ref": "#/definitions/ParameterFieldMapStringJsonNode"
            },
            "image": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "reports": {
              "$ref": "#/definitions/UnitTestReport"
            },
            "privileged": {
              "type": "boolean"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": ["Always", "Never", "IfNotPresent"]
            }
          }
        }
      ]
    },
    "PodSetupInfo": {
      "type": "object",
      "required": ["stageCpuRequest", "stageMemoryRequest", "volumeToMountPath"],
      "properties": {
        "podSetupParams": {
          "$ref": "#/definitions/PodSetupParams"
        },
        "pvcParamsList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PVCParams"
          }
        },
        "volumeToMountPath": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "stageMemoryRequest": {
          "type": "integer",
          "format": "int32"
        },
        "stageCpuRequest": {
          "type": "integer",
          "format": "int32"
        },
        "serviceIdList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceGrpcPortList": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "workDirPath": {
          "type": "string"
        }
      }
    },
    "PodSetupParams": {
      "type": "object",
      "properties": {
        "containerDefinitionInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerDefinitionInfo"
          }
        }
      }
    },
    "PodsSetupInfo": {
      "type": "object",
      "properties": {
        "podSetupInfoList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PodSetupInfo"
          }
        }
      }
    },
    "RemoveSegmentToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["RemoveSegmentToVariationTargetMap"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/RemoveSegmentToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "RemoveSegmentToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["segments", "variation"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "segments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RemoveTargetsToVariationTargetMapYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["RemoveTargetsToVariationTargetMap"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/RemoveTargetsToVariationTargetMapYamlSpec"
            }
          }
        }
      ]
    },
    "RemoveTargetsToVariationTargetMapYamlSpec": {
      "type": "object",
      "required": ["targets", "variation"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResourceConstraintStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["acquireMode", "holdingScope", "name", "permits", "resourceUnit"],
          "properties": {
            "name": {
              "type": "string"
            },
            "resourceUnit": {
              "type": "string"
            },
            "acquireMode": {
              "type": "string",
              "enum": ["ENSURE", "ACCUMULATE"]
            },
            "permits": {
              "type": "integer",
              "format": "int32"
            },
            "holdingScope": {
              "$ref": "#/definitions/HoldingScope"
            }
          }
        }
      ]
    },
    "ResponseStageElementConfig": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/StageElementConfig"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RestoreCacheGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "key"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "key": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "failIfKeyNotFound": {
              "type": "boolean"
            },
            "archiveFormat": {
              "type": "string",
              "enum": ["Tar", "Gzip"]
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "RestoreCacheS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "key"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "key": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "pathStyle": {
              "type": "boolean"
            },
            "failIfKeyNotFound": {
              "type": "boolean"
            },
            "archiveFormat": {
              "type": "string",
              "enum": ["Tar", "Gzip"]
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "RetryFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["spec", "type"],
          "properties": {
            "spec": {
              "readOnly": true,
              "$ref": "#/definitions/RetryFailureSpecConfig"
            },
            "type": {
              "type": "string",
              "enum": ["Retry"]
            }
          }
        }
      ]
    },
    "RetryFailureSpecConfig": {
      "type": "object",
      "required": ["onRetryFailure", "retryCount", "retryIntervals"],
      "properties": {
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "retryIntervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "onRetryFailure": {
          "$ref": "#/definitions/OnRetryFailureConfig"
        }
      }
    },
    "RunStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["command", "connectorRef", "image"],
          "properties": {
            "command": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OutputNGVariable"
              }
            },
            "reports": {
              "$ref": "#/definitions/UnitTestReport"
            },
            "envVariables": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "image": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "privileged": {
              "type": "boolean"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "shell": {
              "type": "string",
              "enum": ["Sh", "Bash"]
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": ["Always", "Never", "IfNotPresent"]
            }
          }
        }
      ]
    },
    "RunTestsStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["args", "buildTool", "connectorRef", "image", "language", "packages"],
          "properties": {
            "args": {
              "type": "string"
            },
            "language": {
              "type": "string",
              "enum": ["Java"]
            },
            "buildTool": {
              "type": "string",
              "enum": ["Maven", "Bazel", "Gradle"]
            },
            "image": {
              "type": "string"
            },
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "reports": {
              "$ref": "#/definitions/UnitTestReport"
            },
            "testAnnotations": {
              "type": "string"
            },
            "packages": {
              "type": "string"
            },
            "runOnlySelectedTests": {
              "type": "boolean"
            },
            "preCommand": {
              "type": "string"
            },
            "postCommand": {
              "type": "string"
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OutputNGVariable"
              }
            },
            "envVariables": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "privileged": {
              "type": "boolean"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            },
            "imagePullPolicy": {
              "type": "string",
              "enum": ["Always", "Never", "IfNotPresent"]
            }
          }
        }
      ]
    },
    "SaveCacheGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "key", "sourcePaths"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "key": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "sourcePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "override": {
              "type": "boolean"
            },
            "archiveFormat": {
              "type": "string",
              "enum": ["Tar", "Gzip"]
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "SaveCacheS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "key", "sourcePaths"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "key": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "sourcePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "region": {
              "type": "string"
            },
            "endpoint": {
              "type": "string"
            },
            "pathStyle": {
              "type": "boolean"
            },
            "override": {
              "type": "boolean"
            },
            "archiveFormat": {
              "type": "string",
              "enum": ["Tar", "Gzip"]
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "SecretNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": ["Secret"]
            },
            "value": {
              "type": "string"
            },
            "default": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Serve": {
      "type": "object",
      "properties": {
        "distribution": {
          "$ref": "#/definitions/Distribution"
        },
        "variation": {
          "type": "string"
        }
      }
    },
    "SetFeatureFlagStateYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["SetFeatureFlagState"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetFeatureFlagStateYamlSpec"
            }
          }
        }
      ]
    },
    "SetFeatureFlagStateYamlSpec": {
      "type": "object",
      "required": ["state"],
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "SetOffVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["SetOffVariation"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetOffVariationYamlSpec"
            }
          }
        }
      ]
    },
    "SetOffVariationYamlSpec": {
      "type": "object",
      "required": ["variation"],
      "properties": {
        "variation": {
          "type": "string"
        }
      }
    },
    "SetOnVariationYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["SetOnVariation"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/SetOnVariationYamlSpec"
            }
          }
        }
      ]
    },
    "SetOnVariationYamlSpec": {
      "type": "object",
      "required": ["variation"],
      "properties": {
        "variation": {
          "type": "string"
        }
      }
    },
    "ShellScriptBaseSource": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "ShellScriptInlineSource": {
      "allOf": [
        {
          "$ref": "#/definitions/ShellScriptBaseSource"
        },
        {
          "type": "object",
          "properties": {
            "script": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ShellScriptSourceWrapper": {
      "type": "object",
      "required": ["spec", "type"],
      "properties": {
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/ShellScriptBaseSource"
        }
      }
    },
    "ShellScriptStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["onDelegate", "shell", "source"],
          "properties": {
            "shell": {
              "type": "string",
              "enum": ["Bash", "PowerShell"]
            },
            "source": {
              "$ref": "#/definitions/ShellScriptSourceWrapper"
            },
            "executionTarget": {
              "$ref": "#/definitions/ExecutionTarget"
            },
            "onDelegate": {
              "type": "boolean"
            },
            "delegateSelectors": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "outputVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NGVariable"
              }
            },
            "metadata": {
              "type": "string"
            }
          }
        }
      ]
    },
    "StageElementConfig": {
      "type": "object",
      "required": ["identifier", "name", "type"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "description": {
          "type": "string"
        },
        "when": {
          "$ref": "#/definitions/StageWhenCondition"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NGVariable"
          }
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/StageInfoConfig"
        }
      }
    },
    "StageInfoConfig": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "execution": {
          "$ref": "#/definitions/ExecutionElementConfig"
        }
      }
    },
    "StageRollbackFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["StageRollback"]
            }
          }
        }
      ]
    },
    "StageWhenCondition": {
      "type": "object",
      "required": ["pipelineStatus"],
      "properties": {
        "pipelineStatus": {
          "type": "string",
          "enum": ["Success", "Failure", "All"]
        },
        "condition": {
          "type": "string"
        }
      }
    },
    "StepElementConfig": {
      "type": "object",
      "required": ["identifier", "name", "type"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "description": {
          "type": "string"
        },
        "timeout": {
          "type": "string",
          "pattern": "^(([1-9])+\\d+[s])|(((([1-9])+\\d*[mhwd])+([\\s]?\\d+[smhwd])*)|(<\\+input>.*)|(.*<\\+.*>.*))$"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        },
        "type": {
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/TemplateLinkConfig"
        },
        "spec": {
          "$ref": "#/definitions/StepSpecType"
        }
      }
    },
    "StepGroupElementConfig": {
      "type": "object",
      "required": ["identifier", "steps"],
      "properties": {
        "identifier": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z_][-0-9a-zA-Z_\\s]{0,63}$"
        },
        "when": {
          "$ref": "#/definitions/StepWhenCondition"
        },
        "failureStrategies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailureStrategyConfig"
          }
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionWrapperConfig"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      }
    },
    "StepGroupFailureActionConfig": {
      "allOf": [
        {
          "$ref": "#/definitions/FailureStrategyActionConfig"
        },
        {
          "type": "object",
          "required": ["type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["StepGroupRollback"]
            }
          }
        }
      ]
    },
    "StepSpecType": {
      "type": "object",
      "discriminator": "type"
    },
    "StepWhenCondition": {
      "type": "object",
      "required": ["stageStatus"],
      "properties": {
        "stageStatus": {
          "type": "string",
          "enum": ["Success", "Failure", "All"]
        },
        "condition": {
          "type": "string"
        }
      }
    },
    "StringNGVariable": {
      "allOf": [
        {
          "$ref": "#/definitions/NGVariable"
        },
        {
          "type": "object",
          "required": ["value"],
          "properties": {
            "name": {
              "type": "string",
              "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
            },
            "type": {
              "type": "string",
              "enum": ["String"]
            },
            "value": {
              "type": "string"
            },
            "default": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TagBuildSpec": {
      "allOf": [
        {
          "$ref": "#/definitions/BuildSpec"
        },
        {
          "type": "object",
          "required": ["tag"],
          "properties": {
            "tag": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TemplateLinkConfig": {
      "type": "object",
      "required": ["templateRef"],
      "properties": {
        "templateRef": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "versionLabel": {
          "type": "string",
          "pattern": "^[a-zA-Z_][0-9a-zA-Z_$]{0,63}$"
        },
        "templateInputs": {
          "$ref": "#/definitions/JsonNode"
        }
      }
    },
    "TransitionTo": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "status": {
          "type": "string"
        },
        "transitionName": {
          "type": "string"
        }
      }
    },
    "UnitTestReport": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["JUnit"]
        },
        "spec": {
          "$ref": "#/definitions/UnitTestReportSpec"
        }
      }
    },
    "UnitTestReportSpec": {
      "type": "object"
    },
    "UpdateRuleYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/PatchInstruction"
        },
        {
          "type": "object",
          "required": ["identifier", "spec", "type"],
          "properties": {
            "type": {
              "type": "string",
              "enum": ["UpdateRule"]
            },
            "identifier": {
              "type": "string"
            },
            "spec": {
              "$ref": "#/definitions/UpdateRuleYamlSpec"
            }
          }
        }
      ]
    },
    "UpdateRuleYamlSpec": {
      "type": "object",
      "required": ["bucketBy", "ruleID"],
      "properties": {
        "ruleID": {
          "type": "string"
        },
        "bucketBy": {
          "type": "string"
        },
        "variations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationYamlSpec"
          }
        },
        "serve": {
          "$ref": "#/definitions/Serve"
        }
      }
    },
    "UploadToArtifactoryStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["connectorRef", "sourcePath", "target"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "target": {
              "type": "string"
            },
            "sourcePath": {
              "type": "string"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "UploadToGCSStepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "sourcePath"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "bucket": {
              "type": "string"
            },
            "sourcePath": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "UploadToS3StepInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/StepSpecType"
        },
        {
          "type": "object",
          "required": ["bucket", "connectorRef", "sourcePath"],
          "properties": {
            "connectorRef": {
              "type": "string"
            },
            "resources": {
              "$ref": "#/definitions/ContainerResource"
            },
            "endpoint": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            },
            "sourcePath": {
              "type": "string"
            },
            "target": {
              "type": "string"
            },
            "runAsUser": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "UseFromStageInfraYaml": {
      "allOf": [
        {
          "$ref": "#/definitions/Infrastructure"
        },
        {
          "type": "object",
          "required": ["useFromStage"],
          "properties": {
            "useFromStage": {
              "type": "string"
            }
          }
        }
      ]
    },
    "VariationYamlSpec": {
      "type": "object",
      "required": ["variation", "weight"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WeightedVariation": {
      "type": "object",
      "required": ["variation", "weight"],
      "properties": {
        "variation": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResponseStepElementConfig": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/StepElementConfig"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "CIBuildAuthor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        }
      }
    },
    "CIBuildBranchHook": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIBuildCommit"
          }
        },
        "triggerCommits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIBuildCommit"
          }
        }
      }
    },
    "CIBuildCommit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ownerName": {
          "type": "string"
        },
        "ownerId": {
          "type": "string"
        },
        "ownerEmail": {
          "type": "string"
        },
        "timeStamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CIBuildPRHook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "link": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "sourceRepo": {
          "type": "string"
        },
        "sourceBranch": {
          "type": "string"
        },
        "targetBranch": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIBuildCommit"
          }
        },
        "triggerCommits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CIBuildCommit"
          }
        }
      }
    },
    "CIPipelineModuleInfo": {
      "type": "object",
      "properties": {
        "ciExecutionInfoDTO": {
          "$ref": "#/definitions/CIWebhookInfoDTO"
        },
        "branch": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "triggerRepoName": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "prNumber": {
          "type": "string"
        },
        "buildType": {
          "type": "string"
        },
        "isPrivateRepo": {
          "type": "boolean"
        }
      }
    },
    "CIWebhookInfoDTO": {
      "type": "object",
      "properties": {
        "event": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/CIBuildAuthor"
        },
        "branch": {
          "$ref": "#/definitions/CIBuildBranchHook"
        },
        "pullRequest": {
          "$ref": "#/definitions/CIBuildPRHook"
        }
      }
    },
    "ResponseCIPipelineModuleInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/CIPipelineModuleInfo"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "PartialSchemaDTO": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/JsonNode"
        },
        "nodeType": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "moduleType": {
          "type": "string",
          "enum": ["CD", "CI", "CV", "CF", "CE", "CORE", "PMS", "TEMPLATESERVICE"]
        }
      }
    },
    "ResponsePartialSchemaDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE", "ERROR"]
        },
        "data": {
          "$ref": "#/definitions/PartialSchemaDTO"
        },
        "metaData": {
          "type": "object"
        },
        "correlationId": {
          "type": "string"
        }
      }
    },
    "RestResponse": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "object"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    },
    "RestResponseString": {
      "type": "object",
      "properties": {
        "metaData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "resource": {
          "type": "string"
        },
        "responseMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseMessage"
          }
        }
      }
    }
  }
}
