---
global:
  harness: Harness # Name of the company
  featureFlagsText: Feature Flags
  projectsText: Projects
  deploymentText: Deployment
  cloudCostsText: Cloud Costs
  changeVerificationText: Change Verifications
  deploymentsText: Deployments
  executionText: Execution
  executionsText: Executions
  runPipelineText: Run Pipeline
  noSecretsFound: 'No Connectors Found'
  noDeploymentText: Your account does not have any deployments yet. Click the button below to run a pipeline.
  newConnector: 'New Connector'
  thisConnectorIsSavedAs: 'This Connector is saved as'
  pipelines: Pipelines
  status: Status
  submit: 'Submit'
  buildText: Build
  buildsText: Builds
  primaryArtifactText: Primary Artifact
  sidecarsText: Sidecars
  manifestsText: Manifest
  errorSummaryText: Error Summary
  na: N/A
  all: All
  passed: Passed
  failed: Failed
  todo: TODO - implement this
  identifier: 'Identifier'
  name: 'Name'
  add: Add
  edit: Edit
  delete: Delete
  select: Select
  save: Save
  back: Back
  next: Next
  cancel: Cancel
  loading: Loading...
  retry: Retry
  search: Search
  showAll: Show All
  categories: Categories
  noSearchResultsFoundPeriod: No results found.
  description: Description
  recentlyUsed: Recently Used
  stageDetails: Stage Details
  stageNameLabel: Stage Name
  tagsLabel: Tags
  keyLabel: Key
  valueLabel: Value
  typeLabel: Type
  variableLabel: 'Variable'
  variableNameLabel: Variable Name
  imageLabel: Image
  encryptedKeyLabel: Encrypted Key
  environment: 'Environment'
  addEnvironment: '+ Add Environment'
  entryPointsLabel: 'Entry Points'
  addEntryPoint: '+ Add Entry Point'
  argumentsLabel: 'Arguments'
  addArgument: '+ Add Argument'
  dependencyNameLabel: 'Dependency Name'
  skipGitCloneLabel: Skip Git Clone
  allowedValues: 'Allowed values'
  serviceAccount: Service Account
  saveAndContinue: 'Save and Continue'
  metricPacks: 'Metric Packs'
  review: 'review'
  selectProduct: 'Select Product'
  selectApplication: 'Select Application'
  mapApplications: 'Map Applications to Harness Services'
  adminSideNavLinks:
    resources: 'Resources'
    governance: 'Governance'
    generalSettings: 'General Settings'
    accessControl: 'Access Control'
    gitSync: 'Git Sync'
    templateLibrary: 'Template Library'
  collaborators:
    roleLabel: 'Role :'
  ssh:
    sshCredential: 'SSH Credential'
    createmessageSuccess: 'Execution Credential created successfully'
    editmessageSuccess: 'Execution Credential updated successfully'
  secret:
    titleCreateText: 'Add new Encrypted Text'
    titleCreateFile: 'Add new Encrypted File'
    titleEditText: 'Edit Encrypted Text'
    titleEditFile: 'Edit Encrypted File'
  execution:
    pipelineIdentifierText: '(Execution ID: {{deploymentId}})' # Text for Pipeline Identifier
    triggerType: # text for trigger types
      MANUAL: Manually
      WEBHOOK: Webhook
  pipeline-triggers:
    aboutTriggers: Triggers are used to automate the execution of pipelines based on some event like new artifact/manifest, or run on a schedule or an external webhook.
    addNewTrigger: Add New Trigger
    newTrigger: + New Trigger
    onWebhookLabel: 'On Webhook Event'
    onNewArtifactLabel: 'On New artifact'
    onScheduleLabel: 'On Schedule'
    triggerConfigurationLabel: 'Trigger Configuration'
    conditionsLabel: 'Conditions'
    pipelineInputLabel: 'Pipeline Input'
  repo-provider:
    bitbucketLabel: BitBucket
    customLabel: Custom
    githubLabel: GitHub
    gitlabLabel: GitLab
  executionStatus:
    Failed: FAILED
    Success: SUCCESS
    Aborted: ABORTED
    Error: ERROR
    Paused: PAUSED
    Pausing: PAUSING
    Waiting: WAITING
    Aborting: ABORTING
    Running: RUNNING
    Queued: QUEUED
    Skipped: SKIPPED
    Starting: STARTING
    Rejected: REJECTED
    Expired: EXPIRED
    Suspended: SUSPENDED
    NotStarted: NOT STARTED
  executionList:
    servicesDeployedText: 'Services Deployed ({{size}})'
  pipelineSteps:
    stepNameLabel: Step Name
    connectorLabel: 'Container Registry'
    registryLabel: 'Registry'
    cacheFromLabel: 'Cache From'
    autoTagLabel: 'Auto-Tag'
    autoTagSuffixLabel: 'Auto-Tag Suffix'
    settings: 'Settings'
    addSetting: '+ Add Setting'
    repoLabel: 'Repository'
    dockerfileLabel: 'Dockerfile'
    endpointLabel: 'Endpoint URL'
    contextLabel: 'Context'
    labelsLabel: 'Labels'
    addLabel: '+ Label'
    regionLabel: 'Region'
    buildArgsLabel: 'Build Arguments'

    addBuildArg: '+ Build Argument'
    bucketLabel: 'Bucket'
    targetLabel: 'Target'
    sourcePathLabel: 'Source Path'
    optionalConfiguration: 'OPTIONAL CONFIGURATIONS'
    pullLabel: 'Image Pull Policy'
    pullIfNotExistsLabel: 'If not exists'
    pullNeverLabel: 'Never'
    pullAlwaysLabel: 'Always'
    sourcePathsLabel: 'Source Paths'
    addSourcePath: '+ Add Source Path'
    pomFileLabel: 'POM File'
    setContainerResources: 'Set container Resources'
    setContainerResourcesTooltip: Resources limits allow setting maximum values for the resources the container is allowed to use at runtime
    limitMemoryLabel: 'Limit Memory'
    limitMemoryPlaceholder: '512'
    limitCPULabel: 'Limit CPU'
    limitCPUPlaceholder: '1'
    limitMemoryUnitMiLabel: 'Mi'
    limitMemoryUnitGiLabel: 'Gi'
    outputVariablesLabel: 'Output Variables'
    limitMemoryExample: 'Ex: 512 MiB, 1 GiB'
    limitCPUExample: 'Ex: 1'
    timeoutLabel: 'Timeout'
    awsConnectorLabel: Amazon Web Services Connector
    gcpConnectorLabel: Google Cloud Platform Connector
    gcr:
      title: 'Build and Upload to GCR'
    ecr:
      title: 'Build and Upload to ECR'
    saveCacheGCS:
      title: 'Save Cache to GCS'
    restoreCacheGCS:
      title: 'Restore Cache From GCS'
    saveCacheS3:
      title: 'Save Cache to S3'
    restoreCacheS3:
      title: 'Restore Cache From S3'
    dockerHub:
      title: 'Build and Upload to DockerHub'
    gcs:
      title: 'Upload to GCS'
    s3:
      title: 'Upload to S3'
    jFrogArtifactory:
      title: 'Upload Artifacts to JFrog Artifactory'
    build:
      create:
        aboutYourStage: 'About Your Stage'
        stageNameRequiredError: 'Stage Name is required'
        skipGitCloneHelperText: 'Text: how it matters?'
        skipGitCloneHelperTextDetails: 'Details'
        configureCodebase: 'Configure Codebase'
        configureCodebaseHelperText: 'Help text to tell the user this is only for the first time.'
        connectorLabel: 'Connector'
        connectorRequiredError: 'Connector is required'
        repositoryUrlLabel: 'Repository URL'
        repositoryUrlWrongUrlError: 'Please enter valid URL'
        repositoryUrlRequiredError: 'Repository URL is required'
        setupStage: 'Setup Stage'
      stageSpecifications:
        stageNamePlaceholder: 'Enter your stage name'
        addDescription: 'description'
        addTags: 'tags'
        removeLabel: 'remove'
        workspaceAndSharedPaths: 'Workspace and shared paths'
        workspace: 'Workspace'
        sharedPaths: 'Shared Paths'
        addSharedPath: '+ Path'
        variablesDetails: 'Variables'
        variablesCell: 'VARIABLES'
        valueCell: 'VALUE'
        addVariable: '+ Add Variable'
        addCustomVariableDialogTitle: 'Add Custom Variable'
        textType: 'Text'
        secretType: 'Secret'
      infraSpecifications:
        whereToRun: Where do you want the builds to run?
        propagate: 'Propagate from an existing stage'
        newConfiguration: 'New Configuration'
        newConfigurationConnectorLabel: 'Select a Kubernetes Cluster'
        propagateConnectorLabel: 'Kubernetes Cluster'
        namespace: 'Namespace'
    deploy:
      serviceSpecifications:
        deploymentTypes:
          artifacts: 'Artifacts'
          manifests: 'Manifests'

  validation:
    name: 'Name is a required field'
    identifier: 'Identifier is required'
    validIdRegex: 'Identifier can only contain alphanumerics, _ and $'
  connectors:
    delegateOutClusterInfo1: 'Specify credentials here'
    delegateOutClusterInfo2: 'Manually enter master url and credentials'
    delegateInClusterInfo: 'Specify cluster details and credentials in harness-delegate.yaml files on your Harness Delegates'
    stepOneName: 'Overview'
    stepThreeName: 'Test Connection'
    k8:
      stepTwoName: 'Cluster Details'
      masterUrlLabel: 'Master URL'
      authTitle: 'Authentication'
      username: 'Username'
      password: 'Password'
      serviceAccountToken: 'Service Account Token'
      skipDefaultValidation: 'Skip default namespace validation'
      OIDCUsername: 'OIDC Username'
      OIDCPassword: 'OIDC Password'
      OIDCClientId: 'OIDC Client ID'
      OIDCSecret: 'OIDC Secret'
      OIDCScopes: 'OIDC Scopes (Optional)'
      clientKey: 'Client Key'
      clientKeyPassphrase: 'Client Key passphrase'
      clientCertificate: 'Client Certificate'
      clientKeyAlgorithm: 'Client Key Algorithm (optional)'
      clientKeyCACertificate: 'CA Certificate (optional)'
      placeholder:
        masterUrl: '/url'
      validation:
        masterUrl: 'Master URL is required'
        username: 'Username is required'
        oidcUsername: 'OIDC username is required'
      authLabels:
        usernamePassword: 'Username and Password'
        OIDC: 'OpenID Connect'
        clientKeyCertificate: 'Client Key Certificate'
    GCP:
      stepTwoName: 'Google Cloud Provider Details'
  cv:
    continuous: 'CONTINUOUS'
    verification: 'VERIFICATION'
    navLinks:
      dataSource: 'Data Sources'
      activities: 'Activities'
      dashboard: 'Dashboard'
      services: 'Services'
      adminSideNavLinks:
        setup: 'Setup'
        activitySources: 'Activity Sources'
    admin:
      notifications:
        enabled: 'Enabled'
        name: 'Name of the rule'
        method: 'Notification Method'
        createSuccess: Notification rule created succesfully
        updateSuccess: 'Notification rule updated successfully'
        deleteSuccess: 'Notification rule deleted succesfully'
        create:
          type: Notification Type
          details: Detail
          method: Configure Method
          stepOne:
            heading: Notification Rule Details
            name: Give name to your notification rule
          stepThree:
            service: 'Service'
            verification: Verification
            risk: Risk
            headingOne: Select Condition for Notification
            headingTwo: 'Choose the services and their corresponding conditions you’d like to be notified on.'
            notifyVerification: Notify on completed verifications
            activityType: Activity Type
            verificationStatus: Verification Statuses
            notifyRisk: Notify on reaching service risk score threshold
            preDeployment: Pre-Deployment
            duringDeployment: During Deployment
            postDeployment: Post-Deployment
            infrastructureChange: Infrastructure Change
            configChange: Config Change
          validation:
            type: Select a notification type
      activitySources:
        searchBoxPlaceholder: 'Search by Activity Source name'
        noDataMessage: 'No Activity Sources onboarded'
        addActivitySource: '+ Add Activity Source(s)'
        dialogDeleteContent: 'Are you sure you want to delete Activity Source: '
        dialogDeleteTitle: 'Delete Activity Source'
        tableColumnNames:
          services: 'Number of Services'
          environments: 'Number of Environments'
          createdOn: 'Created on'
          lastUpdatedOn: 'Last Updated on'
    onboarding:
      progress:
        heading: 'Your Progress'
        mapServices: 'Map the above {{serviceLabel}} to a monitoring source.'
        serviceEnvCount: 'You have {{serviceCount}} {{serviceLabel}} and {{envCount}} {{environmentLabel}}.'
        servicesUsedInActivitySources: '{{serviceCount}} service is used in activity sources.'
        multiServicesUsedInActivitySources: '{{serviceCount}} services are used in activity sources.'
        serviceUsedInMonitoringSources: '{{serviceCount}} service is used in monitoring sources.'
        multiServiceUsedInMonitoringSources: '{{serviceCount}} services are used in monitoring sources.'
        servicesUndergoingHealthVerification: '{{serviceCount}} service has ongoing health verification.'
        multipleServicesUndergoingHealthVerification: '{{serviceCount}} services have ongoing health verifications.'
    newService: New Service
    selectCreateService: select or create an service
    monitoringSources:
      appD:
        newEnvironment: New Environment
        envType: Environment Type
        envDescription: An Environment is the representation of your production or non-production infrastructure.
        appDApplications: APPDYNAMICS APLICATIONS
        appDTier: APPDYNAMICS TIER
        harnessEnv: HARNESS ENVIRONMENT
        validationMsg: Services should be mapped uniquely to application services
        mapApplicationsToEnv: Map the AppDynamics Application to a Harness Environment
        mapTiersToServices: Map AppDynamics Application Tiers to Harness Services
        noTiersMsg: No tiers were found for selected application
        mapsTo: maps to
        metricPackValidation: METRIC PACK VALIDATION
        mappingToHarnessService: MAPPING TO HARNESS SERVICE
        mapToHarnessEnvironment: MAP TO HARNESS ENVIRONMENT
        harnessServices: HARNESS SERVICES
        status: STATUS
        validation: VALIDATION
        tiersMappedToServices: tiers mapped to services
        errorsFound: errors found
        verificationsInProgress: verifications in progress
        noData: no data
        validationsPassed: validations passed
        validationsFailed: validations failed
        infoPanel:
          mapDashboards: Map Dashboards to Harness Services
          mapDashboardsMsg: Define the Stackdriverdashboards you want to monitor. For example, here is a Workspace prod-setup. Harness will extract the widgets, metrics and queries within each dashboard. The metrics within the dashboard will create a service within Harness.
          applications: Applications
          applicationsDesc: Define the Stackdriverdashboards you want to monitor. For example, here is a Workspace “prod-setup.” Harness will extract the widgets, metrics and queries within each dashboard. The metrics within the dashboard will create a service within Harness.
          tiers: Tiers
    activitySources:
      name: 'Name your activity source'
      harnessCD:
        defaultName: 'My Harness CD'
        select: 'Select your activity source'
        selectActivitySource: 'Select Activity Source'
        selectApplication: 'Select Applications'
        selectEnvironment: 'Select Environments'
        selectService: 'Review Services'
        iconLabel: 'Harness CD 1.0'
        harnessApps: 'HARNESS CD 1.0 APPLICATION'
        application:
          noData: 'No applications were found'
          infoTextOne: 'Harness CV can verify change activities by automatically sourcing them from your Harness Continuous Deployment applications.'
          infoTextTwo: 'Select which applications and services you’d like to import over to your current project.'
          servicesToBeImported: 'HARNESS SERVICES (TO BE IMPORTED)'
        environment:
          noData: 'No environments were found'
          infoText: 'Select the CD 1.0 environments that you would be interested in. This ensures that all the activities about your services are indentified to belong to selected environments only.'
          harnessEnv: 'HARNESS CD 1.0 ENVIRONMENTS'
          env: 'ENVIRONMENTS'
        service:
          noData: 'No services were found'
          infoText: 'The following services will get added to the list of services tracked by Harness Continous Verification. To enable verification on the services, continue to the next step where you map a verification data source to your servcies.'
          harnessServices: 'HARNESS CD 1.0 SERVICES'
          services: 'HARNESS CV 2.0 SERVICES'
        validation:
          selectedApplication: 'Select atleast one application'
      kubernetes:
        tabNames:
          - 'Select your Activity Source'
          - 'Select Kubernetes Connector'
          - 'Select Kubernetes Namespace(s)'
          - 'Map Workloads to Services'
          - 'Review'
        mapWorkloadsToServices: Map Kubernetes Workloads to Harness Services and Environments
        noWorkloads: 'No workloads found.'
        workloadToServiceTableColumns:
          workload: 'Kubernetes Workload'
          mapToService: 'Map to Harness Service'
          mapToEnvironment: 'Map to Harness Environment'
        reviewPage:
          heading: '{{namespaceCount}} Namespaces, {{workloadCount}} Workloads will be sourced into Harness CV'
          reviewTableColumns:
            namespace: 'KUBERNETES NAMESPACE'
            workload: 'KUBERNETES WORKLOAD'
            service: 'HARNESS SERVICE'
  configureOptions:
    configureOptions: 'configure options'
    defaultValue: 'Default value'
    requiredDuringExecution: 'Required during execution'
    validation: 'Validation'
    none: 'None'
    regex: 'Regex'
    advanced: 'advanced'
    returnToBasic: 'return to basic'
    jexlLabel: 'Values (JEXL Expression)'
    jexlPlaceholder: 'Expression'
    values: 'Values'
    enterTags: 'Enter values'
    validationErrors:
      regExIsRequired: 'Regex value is required'
      regExNotValid: 'Regex value is not valid'
      jexlExpressionRequired: 'JEXL Expression is required'
      minOneAllowedValue: 'Minimum one allowed value'
    notValidExpression: 'Not a valid input Expression'
    advancedHelp: 'With the advanced option, <br> you can type in JEXL expressions to return a list of values. <br> <a target="_blank">More information</a> <br> E.g. ${env.type} == “prod” ? aws1, aws2 : aws3, aws4'
pipeline-execution-ci:
  execution:
    pipelineIdentifierText: '(Build ID: {{deploymentId}})' # Text for Pipeline Identifier
pipeline-execution-cd: {}

# !!! THIS NAMESPACE IS FOR TESTING PLEASE DO NOT REMOVE !!!
testing:
  harness: Harness (Testing)
