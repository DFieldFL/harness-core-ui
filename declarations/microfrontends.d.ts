/// <reference types="react" />
/// <reference types="qs" />
/// <reference types="lodash" />
declare module 'framework/utils/AppStorage' {
  function decode64(input: any): string
  export default class AppStorage {
    static set(name: any, value: any): void
    static get(name: any): any
    static getAll(): {}
    static has(name: any): boolean
    static remove(name: any): void
    static cleanupOnAccountSwitch(): void
    static clear(): void
    static decode64: typeof decode64
  }
}
declare module 'framework/utils/SessionToken' {
  const _default: {
    isAuthenticated: () => boolean
    getToken: () => any
    username: () => any
    accountId: () => any
    getLastTokenSetTime: () => any
  }
  export default _default
}
declare module 'services/config' {
  export const getConfig: (str: string) => string
  export interface GetUsingFetchProps<
    _TData = any,
    _TError = any,
    TQueryParams = {
      [key: string]: any
    },
    TPathParams = {
      [key: string]: any
    }
  > {
    queryParams?: TQueryParams
    pathParams?: TPathParams
    requestOptions?: RequestInit
    mock?: _TData
  }
  export const getUsingFetch: <
    TData = any,
    _TError = any,
    TQueryParams = {
      [key: string]: any
    },
    TPathParams = {
      [key: string]: any
    }
  >(
    base: string,
    path: string,
    props: {
      queryParams?: TQueryParams | undefined
      pathParams?: TPathParams | undefined
      requestOptions?: RequestInit | undefined
      mock?: TData | undefined
    },
    signal?: RequestInit['signal']
  ) => Promise<TData>
  export interface MutateUsingFetchProps<
    _TData = any,
    _TError = any,
    TQueryParams = {
      [key: string]: any
    },
    TRequestBody = any,
    TPathParams = {
      [key: string]: any
    }
  > {
    body: TRequestBody
    queryParams?: TQueryParams
    pathParams?: TPathParams
    requestOptions?: RequestInit
    mock?: _TData
  }
  export const mutateUsingFetch: <
    TData = any,
    _TError = any,
    TQueryParams = {
      [key: string]: any
    },
    TRequestBody = any,
    TPathParams = {
      [key: string]: any
    }
  >(
    method: string,
    base: string,
    path: string,
    props: {
      body: TRequestBody
      queryParams?: TQueryParams | undefined
      pathParams?: TPathParams | undefined
      requestOptions?: RequestInit | undefined
      mock?: TData | undefined
    },
    signal?: RequestInit['signal']
  ) => Promise<TData>
}
declare module 'services/rbac/index' {
  import { GetProps, UseGetProps, MutateProps, UseMutateProps } from 'restful-react'
  import { GetUsingFetchProps, MutateUsingFetchProps } from 'services/config'
  export interface AccessCheckResponse {
    principal?: Principal
    accessControlList?: AccessControl[]
  }
  export interface AccessControl {
    permission?: string
    resourceScope?: ResourceScope
    resourceType?: string
    resourceIdentifier?: string
    permitted?: boolean
  }
  export interface Principal {
    identifier: string
    type: 'USER' | 'USER_GROUP' | 'API_KEY' | 'SERVICE_ACCOUNT'
  }
  export interface ResourceScope {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface Response {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: {
      [key: string]: any
    }
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface ResponseAccessCheckResponse {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: AccessCheckResponse
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface Failure {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    code?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_KEY'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'INVALID_YAML_PAYLOAD'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
    message?: string
    correlationId?: string
    errors?: ValidationError[]
  }
  export interface ValidationError {
    fieldId?: string
    error?: string
  }
  export interface Error {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    code?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_KEY'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'INVALID_YAML_PAYLOAD'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
    message?: string
    correlationId?: string
    detailedMessage?: string
    responseMessages?: ResponseMessage[]
  }
  export interface ResponseMessage {
    code?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_KEY'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'INVALID_YAML_PAYLOAD'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
    level?: 'INFO' | 'ERROR'
    message?: string
    exception?: Throwable
    failureTypes?: (
      | 'EXPIRED'
      | 'DELEGATE_PROVISIONING'
      | 'CONNECTIVITY'
      | 'AUTHENTICATION'
      | 'VERIFICATION_FAILURE'
      | 'APPLICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'TIMEOUT_ERROR'
    )[]
  }
  export interface StackTraceElement {
    methodName?: string
    fileName?: string
    lineNumber?: number
    className?: string
    nativeMethod?: boolean
  }
  export interface Throwable {
    cause?: Throwable
    stackTrace?: StackTraceElement[]
    message?: string
    localizedMessage?: string
    suppressed?: Throwable[]
  }
  export interface AccessCheckRequest {
    permissions?: PermissionCheck[]
    principal?: Principal
  }
  export interface PermissionCheck {
    resourceScope: ResourceScope
    resourceType?: string
    resourceIdentifier?: string
    permission?: string
  }
  export interface Permission {
    identifier: string
    name: string
    status: 'EXPERIMENTAL' | 'ACTIVE' | 'DEPRECATED'
    allowedScopeLevels: ('organization' | 'project' | 'account')[]
    resourceType: string
    action: string
  }
  export interface PermissionResponse {
    permission: Permission
  }
  export interface ResponseListPermissionResponse {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: PermissionResponse[]
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface ResponseSetString {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: string[]
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface Page {
    totalPages?: number
    totalItems?: number
    pageItemCount?: number
    pageSize?: number
    content?: {
      [key: string]: any
    }[]
    pageIndex?: number
    empty?: boolean
  }
  export interface PageRoleAssignmentResponse {
    totalPages?: number
    totalItems?: number
    pageItemCount?: number
    pageSize?: number
    content?: RoleAssignmentResponse[]
    pageIndex?: number
    empty?: boolean
  }
  export interface ResponsePageRoleAssignmentResponse {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: PageRoleAssignmentResponse
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface RoleAssignment {
    identifier?: string
    resourceGroupIdentifier: string
    roleIdentifier: string
    principal: Principal
    disabled?: boolean
  }
  export interface RoleAssignmentResponse {
    roleAssignment: RoleAssignment
    scope: ScopeDTO
    createdAt?: number
    lastModifiedAt?: number
    harnessManaged?: boolean
  }
  export interface ScopeDTO {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface RoleAssignmentFilter {
    resourceGroupFilter?: string[]
    roleFilter?: string[]
    principalTypeFilter?: ('USER' | 'USER_GROUP' | 'API_KEY' | 'SERVICE')[]
    principalFilter?: Principal[]
    harnessManagedFilter?: boolean[]
    disabledFilter?: boolean[]
  }
  export interface ResponseRoleAssignmentResponse {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: RoleAssignmentResponse
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface ResponseListRoleAssignmentResponse {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: RoleAssignmentResponse[]
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface BatchRoleAssignmentCreateRequest {
    roleAssignments?: RoleAssignment[]
  }
  export interface ResponseRoleAssignmentValidationResponse {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: RoleAssignmentValidationResponse
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface RoleAssignmentValidationResponse {
    principalValidationResult?: ValidationResult
    roleValidationResult?: ValidationResult
    resourceGroupValidationResult?: ValidationResult
  }
  export interface ValidationResult {
    errorMessage?: string
    valid?: boolean
  }
  export interface RoleAssignmentValidationRequestDTO {
    roleAssignment: RoleAssignment
    validatePrincipal?: boolean
    validateRole?: boolean
    validateResourceGroup?: boolean
  }
  export interface ResourceGroupDTO {
    identifier?: string
    name?: string
  }
  export interface ResponseRoleAssignmentAggregateResponse {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: RoleAssignmentAggregateResponse
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface Role {
    identifier: string
    name: string
    permissions?: string[]
    allowedScopeLevels?: ('organization' | 'project' | 'account')[]
    description?: string
    tags?: {
      [key: string]: string
    }
  }
  export interface RoleAssignmentAggregateResponse {
    roleAssignments?: RoleAssignment[]
    scope?: ScopeDTO
    roles?: RoleResponse[]
    resourceGroups?: ResourceGroupDTO[]
  }
  export interface RoleResponse {
    role: Role
    scope: ScopeDTO
    harnessManaged?: boolean
    createdAt?: number
    lastModifiedAt?: number
  }
  export interface ResponseRoleResponse {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: RoleResponse
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface PageRoleResponse {
    totalPages?: number
    totalItems?: number
    pageItemCount?: number
    pageSize?: number
    content?: RoleResponse[]
    pageIndex?: number
    empty?: boolean
  }
  export interface ResponsePageRoleResponse {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: PageRoleResponse
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export interface ResponseString {
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
    data?: string
    metaData?: {
      [key: string]: any
    }
    correlationId?: string
  }
  export type RoleAssignmentFilterRequestBody = RoleAssignmentFilter
  export type RoleAssignmentRequestBody = RoleAssignment
  export type RoleRequestBody = Role
  export type GetAccessControlListProps = Omit<
    MutateProps<ResponseAccessCheckResponse, Failure | Error, void, AccessCheckRequest, void>,
    'path' | 'verb'
  >
  /**
   * Check for access to resources
   */
  export const GetAccessControlList: (props: GetAccessControlListProps) => JSX.Element
  export type UseGetAccessControlListProps = Omit<
    UseMutateProps<ResponseAccessCheckResponse, Failure | Error, void, AccessCheckRequest, void>,
    'path' | 'verb'
  >
  /**
   * Check for access to resources
   */
  export const useGetAccessControlList: (
    props: UseGetAccessControlListProps
  ) => import('restful-react').UseMutateReturn<
    ResponseAccessCheckResponse,
    Failure | Error,
    AccessCheckRequest,
    void,
    void
  >
  /**
   * Check for access to resources
   */
  export const getAccessControlListPromise: (
    props: MutateUsingFetchProps<ResponseAccessCheckResponse, Failure | Error, void, AccessCheckRequest, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseAccessCheckResponse>
  export interface GetPermissionListQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    scopeFilterDisabled?: boolean
  }
  export type GetPermissionListProps = Omit<
    GetProps<ResponseListPermissionResponse, Failure | Error, GetPermissionListQueryParams, void>,
    'path'
  >
  /**
   * Get All Permissions in a Scope
   */
  export const GetPermissionList: (props: GetPermissionListProps) => JSX.Element
  export type UseGetPermissionListProps = Omit<
    UseGetProps<ResponseListPermissionResponse, Failure | Error, GetPermissionListQueryParams, void>,
    'path'
  >
  /**
   * Get All Permissions in a Scope
   */
  export const useGetPermissionList: (
    props: UseGetPermissionListProps
  ) => import('restful-react').UseGetReturn<
    ResponseListPermissionResponse,
    Failure | Error,
    GetPermissionListQueryParams,
    unknown
  >
  /**
   * Get All Permissions in a Scope
   */
  export const getPermissionListPromise: (
    props: GetUsingFetchProps<ResponseListPermissionResponse, Failure | Error, GetPermissionListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListPermissionResponse>
  export interface GetPermissionResourceTypesListQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    scopeFilterDisabled?: boolean
  }
  export type GetPermissionResourceTypesListProps = Omit<
    GetProps<ResponseSetString, Failure | Error, GetPermissionResourceTypesListQueryParams, void>,
    'path'
  >
  /**
   * Get All Resource Types for Permissions in a Scope
   */
  export const GetPermissionResourceTypesList: (props: GetPermissionResourceTypesListProps) => JSX.Element
  export type UseGetPermissionResourceTypesListProps = Omit<
    UseGetProps<ResponseSetString, Failure | Error, GetPermissionResourceTypesListQueryParams, void>,
    'path'
  >
  /**
   * Get All Resource Types for Permissions in a Scope
   */
  export const useGetPermissionResourceTypesList: (
    props: UseGetPermissionResourceTypesListProps
  ) => import('restful-react').UseGetReturn<
    ResponseSetString,
    Failure | Error,
    GetPermissionResourceTypesListQueryParams,
    unknown
  >
  /**
   * Get All Resource Types for Permissions in a Scope
   */
  export const getPermissionResourceTypesListPromise: (
    props: GetUsingFetchProps<ResponseSetString, Failure | Error, GetPermissionResourceTypesListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseSetString>
  export interface GetRoleAssignmentListQueryParams {
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type GetRoleAssignmentListProps = Omit<
    GetProps<ResponsePageRoleAssignmentResponse, Failure | Error, GetRoleAssignmentListQueryParams, void>,
    'path'
  >
  /**
   * Get Role Assignments
   */
  export const GetRoleAssignmentList: (props: GetRoleAssignmentListProps) => JSX.Element
  export type UseGetRoleAssignmentListProps = Omit<
    UseGetProps<ResponsePageRoleAssignmentResponse, Failure | Error, GetRoleAssignmentListQueryParams, void>,
    'path'
  >
  /**
   * Get Role Assignments
   */
  export const useGetRoleAssignmentList: (
    props: UseGetRoleAssignmentListProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageRoleAssignmentResponse,
    Failure | Error,
    GetRoleAssignmentListQueryParams,
    unknown
  >
  /**
   * Get Role Assignments
   */
  export const getRoleAssignmentListPromise: (
    props: GetUsingFetchProps<
      ResponsePageRoleAssignmentResponse,
      Failure | Error,
      GetRoleAssignmentListQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageRoleAssignmentResponse>
  export interface CreateRoleAssignmentQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type CreateRoleAssignmentProps = Omit<
    MutateProps<
      ResponseRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentQueryParams,
      RoleAssignmentRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Role Assignment
   */
  export const CreateRoleAssignment: (props: CreateRoleAssignmentProps) => JSX.Element
  export type UseCreateRoleAssignmentProps = Omit<
    UseMutateProps<
      ResponseRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentQueryParams,
      RoleAssignmentRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Role Assignment
   */
  export const useCreateRoleAssignment: (
    props: UseCreateRoleAssignmentProps
  ) => import('restful-react').UseMutateReturn<
    ResponseRoleAssignmentResponse,
    Failure | Error,
    RoleAssignment,
    CreateRoleAssignmentQueryParams,
    void
  >
  /**
   * Create Role Assignment
   */
  export const createRoleAssignmentPromise: (
    props: MutateUsingFetchProps<
      ResponseRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentQueryParams,
      RoleAssignmentRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseRoleAssignmentResponse>
  export interface GetFilteredRoleAssignmentListQueryParams {
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type GetFilteredRoleAssignmentListProps = Omit<
    MutateProps<
      ResponsePageRoleAssignmentResponse,
      Failure | Error,
      GetFilteredRoleAssignmentListQueryParams,
      RoleAssignmentFilterRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Get Filtered Role Assignments
   */
  export const GetFilteredRoleAssignmentList: (props: GetFilteredRoleAssignmentListProps) => JSX.Element
  export type UseGetFilteredRoleAssignmentListProps = Omit<
    UseMutateProps<
      ResponsePageRoleAssignmentResponse,
      Failure | Error,
      GetFilteredRoleAssignmentListQueryParams,
      RoleAssignmentFilterRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Get Filtered Role Assignments
   */
  export const useGetFilteredRoleAssignmentList: (
    props: UseGetFilteredRoleAssignmentListProps
  ) => import('restful-react').UseMutateReturn<
    ResponsePageRoleAssignmentResponse,
    Failure | Error,
    RoleAssignmentFilter,
    GetFilteredRoleAssignmentListQueryParams,
    void
  >
  /**
   * Get Filtered Role Assignments
   */
  export const getFilteredRoleAssignmentListPromise: (
    props: MutateUsingFetchProps<
      ResponsePageRoleAssignmentResponse,
      Failure | Error,
      GetFilteredRoleAssignmentListQueryParams,
      RoleAssignmentFilterRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageRoleAssignmentResponse>
  export interface UpdateRoleAssignmentQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface UpdateRoleAssignmentPathParams {
    identifier: string
  }
  export type UpdateRoleAssignmentProps = Omit<
    MutateProps<
      ResponseRoleAssignmentResponse,
      Failure | Error,
      UpdateRoleAssignmentQueryParams,
      RoleAssignmentRequestBody,
      UpdateRoleAssignmentPathParams
    >,
    'path' | 'verb'
  > &
    UpdateRoleAssignmentPathParams
  /**
   * Update Role Assignment
   */
  export const UpdateRoleAssignment: ({ identifier, ...props }: UpdateRoleAssignmentProps) => JSX.Element
  export type UseUpdateRoleAssignmentProps = Omit<
    UseMutateProps<
      ResponseRoleAssignmentResponse,
      Failure | Error,
      UpdateRoleAssignmentQueryParams,
      RoleAssignmentRequestBody,
      UpdateRoleAssignmentPathParams
    >,
    'path' | 'verb'
  > &
    UpdateRoleAssignmentPathParams
  /**
   * Update Role Assignment
   */
  export const useUpdateRoleAssignment: ({
    identifier,
    ...props
  }: UseUpdateRoleAssignmentProps) => import('restful-react').UseMutateReturn<
    ResponseRoleAssignmentResponse,
    Failure | Error,
    RoleAssignment,
    UpdateRoleAssignmentQueryParams,
    UpdateRoleAssignmentPathParams
  >
  /**
   * Update Role Assignment
   */
  export const updateRoleAssignmentPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseRoleAssignmentResponse,
      Failure | Error,
      UpdateRoleAssignmentQueryParams,
      RoleAssignment,
      UpdateRoleAssignmentPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseRoleAssignmentResponse>
  export interface DeleteRoleAssignmentQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type DeleteRoleAssignmentProps = Omit<
    MutateProps<ResponseRoleAssignmentResponse, Failure | Error, DeleteRoleAssignmentQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete Role Assignment
   */
  export const DeleteRoleAssignment: (props: DeleteRoleAssignmentProps) => JSX.Element
  export type UseDeleteRoleAssignmentProps = Omit<
    UseMutateProps<ResponseRoleAssignmentResponse, Failure | Error, DeleteRoleAssignmentQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete Role Assignment
   */
  export const useDeleteRoleAssignment: (
    props: UseDeleteRoleAssignmentProps
  ) => import('restful-react').UseMutateReturn<
    ResponseRoleAssignmentResponse,
    Failure | Error,
    string,
    DeleteRoleAssignmentQueryParams,
    void
  >
  /**
   * Delete Role Assignment
   */
  export const deleteRoleAssignmentPromise: (
    props: MutateUsingFetchProps<
      ResponseRoleAssignmentResponse,
      Failure | Error,
      DeleteRoleAssignmentQueryParams,
      string,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseRoleAssignmentResponse>
  export interface CreateRoleAssignmentsQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type CreateRoleAssignmentsProps = Omit<
    MutateProps<
      ResponseListRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentsQueryParams,
      BatchRoleAssignmentCreateRequest,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Multiple Role Assignments
   */
  export const CreateRoleAssignments: (props: CreateRoleAssignmentsProps) => JSX.Element
  export type UseCreateRoleAssignmentsProps = Omit<
    UseMutateProps<
      ResponseListRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentsQueryParams,
      BatchRoleAssignmentCreateRequest,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Multiple Role Assignments
   */
  export const useCreateRoleAssignments: (
    props: UseCreateRoleAssignmentsProps
  ) => import('restful-react').UseMutateReturn<
    ResponseListRoleAssignmentResponse,
    Failure | Error,
    BatchRoleAssignmentCreateRequest,
    CreateRoleAssignmentsQueryParams,
    void
  >
  /**
   * Create Multiple Role Assignments
   */
  export const createRoleAssignmentsPromise: (
    props: MutateUsingFetchProps<
      ResponseListRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentsQueryParams,
      BatchRoleAssignmentCreateRequest,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListRoleAssignmentResponse>
  export interface ValidateRoleAssignmentQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type ValidateRoleAssignmentProps = Omit<
    MutateProps<
      ResponseRoleAssignmentValidationResponse,
      Failure | Error,
      ValidateRoleAssignmentQueryParams,
      RoleAssignmentValidationRequestDTO,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Validate Role Assignment
   */
  export const ValidateRoleAssignment: (props: ValidateRoleAssignmentProps) => JSX.Element
  export type UseValidateRoleAssignmentProps = Omit<
    UseMutateProps<
      ResponseRoleAssignmentValidationResponse,
      Failure | Error,
      ValidateRoleAssignmentQueryParams,
      RoleAssignmentValidationRequestDTO,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Validate Role Assignment
   */
  export const useValidateRoleAssignment: (
    props: UseValidateRoleAssignmentProps
  ) => import('restful-react').UseMutateReturn<
    ResponseRoleAssignmentValidationResponse,
    Failure | Error,
    RoleAssignmentValidationRequestDTO,
    ValidateRoleAssignmentQueryParams,
    void
  >
  /**
   * Validate Role Assignment
   */
  export const validateRoleAssignmentPromise: (
    props: MutateUsingFetchProps<
      ResponseRoleAssignmentValidationResponse,
      Failure | Error,
      ValidateRoleAssignmentQueryParams,
      RoleAssignmentValidationRequestDTO,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseRoleAssignmentValidationResponse>
  export interface GetRoleAssignmentsAggregateQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type GetRoleAssignmentsAggregateProps = Omit<
    MutateProps<
      ResponseRoleAssignmentAggregateResponse,
      Failure | Error,
      GetRoleAssignmentsAggregateQueryParams,
      RoleAssignmentFilterRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Get Role Assignments Aggregate
   */
  export const GetRoleAssignmentsAggregate: (props: GetRoleAssignmentsAggregateProps) => JSX.Element
  export type UseGetRoleAssignmentsAggregateProps = Omit<
    UseMutateProps<
      ResponseRoleAssignmentAggregateResponse,
      Failure | Error,
      GetRoleAssignmentsAggregateQueryParams,
      RoleAssignmentFilterRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Get Role Assignments Aggregate
   */
  export const useGetRoleAssignmentsAggregate: (
    props: UseGetRoleAssignmentsAggregateProps
  ) => import('restful-react').UseMutateReturn<
    ResponseRoleAssignmentAggregateResponse,
    Failure | Error,
    RoleAssignmentFilter,
    GetRoleAssignmentsAggregateQueryParams,
    void
  >
  /**
   * Get Role Assignments Aggregate
   */
  export const getRoleAssignmentsAggregatePromise: (
    props: MutateUsingFetchProps<
      ResponseRoleAssignmentAggregateResponse,
      Failure | Error,
      GetRoleAssignmentsAggregateQueryParams,
      RoleAssignmentFilterRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseRoleAssignmentAggregateResponse>
  export interface GetRoleQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    harnessManaged?: boolean
  }
  export interface GetRolePathParams {
    identifier: string
  }
  export type GetRoleProps = Omit<
    GetProps<ResponseRoleResponse, Failure | Error, GetRoleQueryParams, GetRolePathParams>,
    'path'
  > &
    GetRolePathParams
  /**
   * Get Role
   */
  export const GetRole: ({ identifier, ...props }: GetRoleProps) => JSX.Element
  export type UseGetRoleProps = Omit<
    UseGetProps<ResponseRoleResponse, Failure | Error, GetRoleQueryParams, GetRolePathParams>,
    'path'
  > &
    GetRolePathParams
  /**
   * Get Role
   */
  export const useGetRole: ({
    identifier,
    ...props
  }: UseGetRoleProps) => import('restful-react').UseGetReturn<
    ResponseRoleResponse,
    Failure | Error,
    GetRoleQueryParams,
    unknown
  >
  /**
   * Get Role
   */
  export const getRolePromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<ResponseRoleResponse, Failure | Error, GetRoleQueryParams, GetRolePathParams> & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseRoleResponse>
  export interface UpdateRoleQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface UpdateRolePathParams {
    identifier: string
  }
  export type UpdateRoleProps = Omit<
    MutateProps<ResponseRoleResponse, Failure | Error, UpdateRoleQueryParams, RoleRequestBody, UpdateRolePathParams>,
    'path' | 'verb'
  > &
    UpdateRolePathParams
  /**
   * Update Role
   */
  export const UpdateRole: ({ identifier, ...props }: UpdateRoleProps) => JSX.Element
  export type UseUpdateRoleProps = Omit<
    UseMutateProps<ResponseRoleResponse, Failure | Error, UpdateRoleQueryParams, RoleRequestBody, UpdateRolePathParams>,
    'path' | 'verb'
  > &
    UpdateRolePathParams
  /**
   * Update Role
   */
  export const useUpdateRole: ({
    identifier,
    ...props
  }: UseUpdateRoleProps) => import('restful-react').UseMutateReturn<
    ResponseRoleResponse,
    Failure | Error,
    Role,
    UpdateRoleQueryParams,
    UpdateRolePathParams
  >
  /**
   * Update Role
   */
  export const updateRolePromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseRoleResponse,
      Failure | Error,
      UpdateRoleQueryParams,
      Role,
      UpdateRolePathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseRoleResponse>
  export interface DeleteRoleQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type DeleteRoleProps = Omit<
    MutateProps<ResponseRoleResponse, Failure | Error, DeleteRoleQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete Role
   */
  export const DeleteRole: (props: DeleteRoleProps) => JSX.Element
  export type UseDeleteRoleProps = Omit<
    UseMutateProps<ResponseRoleResponse, Failure | Error, DeleteRoleQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete Role
   */
  export const useDeleteRole: (
    props: UseDeleteRoleProps
  ) => import('restful-react').UseMutateReturn<
    ResponseRoleResponse,
    Failure | Error,
    string,
    DeleteRoleQueryParams,
    void
  >
  /**
   * Delete Role
   */
  export const deleteRolePromise: (
    props: MutateUsingFetchProps<ResponseRoleResponse, Failure | Error, DeleteRoleQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseRoleResponse>
  export interface GetRoleListQueryParams {
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    searchTerm?: string
  }
  export type GetRoleListProps = Omit<
    GetProps<ResponsePageRoleResponse, Failure | Error, GetRoleListQueryParams, void>,
    'path'
  >
  /**
   * Get Roles
   */
  export const GetRoleList: (props: GetRoleListProps) => JSX.Element
  export type UseGetRoleListProps = Omit<
    UseGetProps<ResponsePageRoleResponse, Failure | Error, GetRoleListQueryParams, void>,
    'path'
  >
  /**
   * Get Roles
   */
  export const useGetRoleList: (
    props: UseGetRoleListProps
  ) => import('restful-react').UseGetReturn<ResponsePageRoleResponse, Failure | Error, GetRoleListQueryParams, unknown>
  /**
   * Get Roles
   */
  export const getRoleListPromise: (
    props: GetUsingFetchProps<ResponsePageRoleResponse, Failure | Error, GetRoleListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageRoleResponse>
  export interface CreateRoleQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type CreateRoleProps = Omit<
    MutateProps<ResponseRoleResponse, Failure | Error, CreateRoleQueryParams, RoleRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create Role
   */
  export const CreateRole: (props: CreateRoleProps) => JSX.Element
  export type UseCreateRoleProps = Omit<
    UseMutateProps<ResponseRoleResponse, Failure | Error, CreateRoleQueryParams, RoleRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create Role
   */
  export const useCreateRole: (
    props: UseCreateRoleProps
  ) => import('restful-react').UseMutateReturn<ResponseRoleResponse, Failure | Error, Role, CreateRoleQueryParams, void>
  /**
   * Create Role
   */
  export const createRolePromise: (
    props: MutateUsingFetchProps<ResponseRoleResponse, Failure | Error, CreateRoleQueryParams, RoleRequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseRoleResponse>
  export interface TestACLQueryParams {
    account?: string
    org?: string
    project?: string
    resourceIdentifier?: string
  }
  export type TestACLProps = Omit<GetProps<ResponseString, Failure | Error, TestACLQueryParams, void>, 'path'>
  /**
   * Test ACL
   */
  export const TestACL: (props: TestACLProps) => JSX.Element
  export type UseTestACLProps = Omit<UseGetProps<ResponseString, Failure | Error, TestACLQueryParams, void>, 'path'>
  /**
   * Test ACL
   */
  export const useTestACL: (
    props: UseTestACLProps
  ) => import('restful-react').UseGetReturn<ResponseString, Failure | Error, TestACLQueryParams, unknown>
  /**
   * Test ACL
   */
  export const testACLPromise: (
    props: GetUsingFetchProps<ResponseString, Failure | Error, TestACLQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
}
declare module 'framework/rbac/PermissionsContext' {
  import React from 'react'
  import { PermissionCheck } from 'services/rbac/index'
  type Permissions = Map<string, boolean>
  export interface PermissionRequestOptions {
    skipCache?: boolean
    skipCondition?: (permissionRequest: PermissionCheck) => boolean
  }
  export interface PermissionsContextProps {
    permissions: Permissions
    requestPermission: (permissionRequest?: PermissionCheck, options?: PermissionRequestOptions) => void
    checkPermission: (permissionRequest: PermissionCheck) => boolean
    cancelRequest: (permissionRequest: PermissionCheck) => void
  }
  export const PermissionsContext: React.Context<PermissionsContextProps>
  export function usePermissionsContext(): PermissionsContextProps
  interface PermissionsProviderProps {
    debounceWait?: number
  }
  export const keysToCompare: string[]
  export const getStringKeyFromObjectValues: (
    permissionRequest: PermissionCheck,
    keys: string[],
    glue?: string
  ) => string
  export function PermissionsProvider(props: React.PropsWithChildren<PermissionsProviderProps>): React.ReactElement
}
declare module 'services/cd-ng/index' {
  import { GetProps, UseGetProps, MutateProps, UseMutateProps } from 'restful-react'
  import { GetUsingFetchProps, MutateUsingFetchProps } from 'services/config'
  export const SPEC_VERSION = '2.0'
  export interface ACLAggregateFilter {
    resourceGroupIdentifiers?: string[]
    roleIdentifiers?: string[]
  }
  export type AbortFailureActionConfig = FailureStrategyActionConfig & {
    type: 'Abort'
  }
  export interface Account {
    accountEvents?: AccountEvent[]
    accountName: string
    accountPreferences?: AccountPreferences
    appId: string
    authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
    ceAutoCollectK8sEvents?: boolean
    ceLicenseInfo?: CeLicenseInfo
    cloudCostEnabled?: boolean
    companyName: string
    createdAt?: number
    createdBy?: EmbeddedUser
    createdFromNG?: boolean
    dataRetentionDurationMs?: number
    defaultExperience?: 'NG' | 'CG'
    defaults?: {
      [key: string]: string
    }
    delegateConfiguration?: DelegateConfiguration
    forImport?: boolean
    harnessSupportAccessAllowed?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    licenseId?: string
    licenseInfo?: LicenseInfo
    localEncryptionEnabled?: boolean
    migratedToClusterUrl?: string
    nextGenEnabled?: boolean
    oauthEnabled?: boolean
    povAccount?: boolean
    serviceAccountConfig?: ServiceAccountConfig
    serviceGuardLimit?: number
    subdomainUrl?: string
    techStacks?: TechStack[]
    trialSignupOptions?: TrialSignupOptions
    twoFactorAdminEnforced?: boolean
    uuid: string
    whitelistedDomains?: string[]
  }
  export interface AccountDTO {
    authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
    cluster?: string
    companyName?: string
    defaultExperience?: 'NG' | 'CG'
    identifier?: string
    name?: string
    nextGenEnabled?: boolean
    serviceAccountConfig?: ServiceAccountConfig
  }
  export interface AccountEvent {
    accountEventType?:
      | 'APP_CREATED'
      | 'SERVICE_CREATED'
      | 'ENV_CREATED'
      | 'WORKFLOW_CREATED'
      | 'WORKFLOW_DEPLOYED'
      | 'PIPELINE_DEPLOYED'
      | 'DELEGATE_INSTALLED'
      | 'CLOUD_PROVIDER_CREATED'
      | 'ARTIFACT_REPO_CREATED'
      | 'PIPELINE_CREATED'
      | 'ARTIFACT_STREAM_ADDED'
      | 'INFRA_MAPPING_ADDED'
      | 'INFRA_DEFINITION_ADDED'
      | 'CUSTOM'
    category?: string
    customMsg?: string
    properties?: {
      [key: string]: string
    }
  }
  export interface AccountLicenseDTO {
    accountId?: string
    allModuleLicenses?: {
      [key: string]: ModuleLicenseDTO[]
    }
    createdAt?: number
    lastUpdatedAt?: number
    moduleLicenses?: {
      [key: string]: ModuleLicenseDTO
    }
  }
  export interface AccountPermissions {
    permissions?: (
      | 'ACCOUNT'
      | 'LOGGED_IN'
      | 'DELEGATE'
      | 'NONE'
      | 'APP'
      | 'ALL_APP_ENTITIES'
      | 'ENV'
      | 'SERVICE'
      | 'WORKFLOW'
      | 'PIPELINE'
      | 'DEPLOYMENT'
      | 'APPLICATION_CREATE_DELETE'
      | 'USER_PERMISSION_MANAGEMENT'
      | 'ACCOUNT_MANAGEMENT'
      | 'PROVISIONER'
      | 'TEMPLATE_MANAGEMENT'
      | 'USER_PERMISSION_READ'
      | 'AUDIT_VIEWER'
      | 'TAG_MANAGEMENT'
      | 'CE_ADMIN'
      | 'CE_VIEWER'
      | 'MANAGE_CLOUD_PROVIDERS'
      | 'MANAGE_CONNECTORS'
      | 'MANAGE_APPLICATIONS'
      | 'MANAGE_APPLICATION_STACKS'
      | 'MANAGE_DELEGATES'
      | 'MANAGE_ALERT_NOTIFICATION_RULES'
      | 'MANAGE_DELEGATE_PROFILES'
      | 'MANAGE_CONFIG_AS_CODE'
      | 'MANAGE_SECRETS'
      | 'MANAGE_SECRET_MANAGERS'
      | 'MANAGE_SSH_AND_WINRM'
      | 'MANAGE_AUTHENTICATION_SETTINGS'
      | 'MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'VIEW_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'MANAGE_IP_WHITELIST'
      | 'MANAGE_IP_WHITELISTING'
      | 'MANAGE_DEPLOYMENT_FREEZES'
      | 'MANAGE_PIPELINE_GOVERNANCE_STANDARDS'
      | 'MANAGE_API_KEYS'
      | 'MANAGE_TAGS'
      | 'MANAGE_CUSTOM_DASHBOARDS'
      | 'CREATE_CUSTOM_DASHBOARDS'
      | 'MANAGE_RESTRICTED_ACCESS'
    )[]
  }
  export interface AccountPreferences {
    delegateSecretsCacheTTLInHours?: number
  }
  export interface AccountResourcesDTO {
    connectorsCount?: number
    delegatesCount?: number
    secretsCount?: number
    templatesCount?: number
  }
  export interface ActiveServiceInstanceSummary {
    changeRate?: number
    countDetails?: InstanceCountDetailsByEnvTypeBase
  }
  export interface Activity {
    accountIdentifier?: string
    activityStatus: 'SUCCESS' | 'FAILED'
    activityTime: number
    description?: string
    detail?: ActivityDetail
    referredEntity?: EntityDetail
    type: 'CONNECTIVITY_CHECK' | 'ENTITY_USAGE' | 'ENTITY_CREATION' | 'ENTITY_UPDATE'
  }
  export interface ActivityDetail {
    [key: string]: any
  }
  export interface ActivitySummary {
    endTime?: number
    failedActivitiesCount?: number
    get_id?: number
    heartBeatFailuresCount?: number
    startTime?: number
    successfulActivitiesCount?: number
  }
  export type AddSegmentToVariationTargetMapYaml = PatchInstruction & {
    identifier: string
    spec: AddSegmentToVariationTargetMapYamlSpec
    type: 'AddSegmentToVariationTargetMap'
  }
  export interface AddSegmentToVariationTargetMapYamlSpec {
    segments: string[]
    variation: string
  }
  export type AddTargetsToVariationTargetMapYaml = PatchInstruction & {
    identifier: string
    spec: AddTargetsToVariationTargetMapYamlSpec
    type: 'AddTargetsToVariationTargetMap'
  }
  export interface AddTargetsToVariationTargetMapYamlSpec {
    targets: string[]
    variation: string
  }
  export interface AggregateACLRequest {
    resourceGroupFilter?: string[]
    roleFilter?: string[]
    searchTerm?: string
  }
  export interface ApiKeyAggregateDTO {
    apiKey: ApiKeyDTO
    createdAt: number
    lastModifiedAt: number
    tokensCount?: number
  }
  export interface ApiKeyDTO {
    accountIdentifier: string
    apiKeyType: 'USER' | 'SERVICE_ACCOUNT'
    defaultTimeToExpireToken?: number
    description?: string
    identifier: string
    name: string
    orgIdentifier?: string
    parentIdentifier: string
    projectIdentifier?: string
    tags?: {
      [key: string]: string
    }
  }
  export type AppDynamicsConnectorDTO = ConnectorConfigDTO & {
    accountname: string
    authType?: 'UsernamePassword' | 'ApiClientToken'
    clientId?: string
    clientSecretRef?: string
    controllerUrl: string
    delegateSelectors?: string[]
    passwordRef?: string
    username?: string
  }
  export interface AppPermission {
    actions?: (
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    )[]
    appFilter?: GenericEntityFilter
    entityFilter?: Filter
    permissionType?:
      | 'ACCOUNT'
      | 'LOGGED_IN'
      | 'DELEGATE'
      | 'NONE'
      | 'APP'
      | 'ALL_APP_ENTITIES'
      | 'ENV'
      | 'SERVICE'
      | 'WORKFLOW'
      | 'PIPELINE'
      | 'DEPLOYMENT'
      | 'APPLICATION_CREATE_DELETE'
      | 'USER_PERMISSION_MANAGEMENT'
      | 'ACCOUNT_MANAGEMENT'
      | 'PROVISIONER'
      | 'TEMPLATE_MANAGEMENT'
      | 'USER_PERMISSION_READ'
      | 'AUDIT_VIEWER'
      | 'TAG_MANAGEMENT'
      | 'CE_ADMIN'
      | 'CE_VIEWER'
      | 'MANAGE_CLOUD_PROVIDERS'
      | 'MANAGE_CONNECTORS'
      | 'MANAGE_APPLICATIONS'
      | 'MANAGE_APPLICATION_STACKS'
      | 'MANAGE_DELEGATES'
      | 'MANAGE_ALERT_NOTIFICATION_RULES'
      | 'MANAGE_DELEGATE_PROFILES'
      | 'MANAGE_CONFIG_AS_CODE'
      | 'MANAGE_SECRETS'
      | 'MANAGE_SECRET_MANAGERS'
      | 'MANAGE_SSH_AND_WINRM'
      | 'MANAGE_AUTHENTICATION_SETTINGS'
      | 'MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'VIEW_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'MANAGE_IP_WHITELIST'
      | 'MANAGE_IP_WHITELISTING'
      | 'MANAGE_DEPLOYMENT_FREEZES'
      | 'MANAGE_PIPELINE_GOVERNANCE_STANDARDS'
      | 'MANAGE_API_KEYS'
      | 'MANAGE_TAGS'
      | 'MANAGE_CUSTOM_DASHBOARDS'
      | 'CREATE_CUSTOM_DASHBOARDS'
      | 'MANAGE_RESTRICTED_ACCESS'
  }
  export type ApprovalStageConfig = StageInfoConfig & {
    execution: ExecutionElementConfig
  }
  export interface ApproverInputInfo {
    defaultValue?: string
    name?: string
  }
  export interface Approvers {
    disallowPipelineExecutor: boolean
    minimumCount: number
    userGroups: string[]
  }
  export interface ArtifactConfig {
    [key: string]: any
  }
  export interface ArtifactListConfig {
    metadata?: string
    primary?: PrimaryArtifact
    sidecars?: SidecarArtifactWrapper[]
  }
  export interface ArtifactOverrideSetWrapper {
    overrideSet?: ArtifactOverrideSets
  }
  export interface ArtifactOverrideSets {
    artifacts?: ArtifactListConfig
    identifier?: string
  }
  export interface ArtifactSummary {
    displayName?: string
    type?: string
  }
  export interface ArtifactoryAuthCredentials {
    [key: string]: any
  }
  export interface ArtifactoryAuthentication {
    spec?: ArtifactoryAuthCredentials
    type: 'UsernamePassword' | 'Anonymous'
  }
  export type ArtifactoryConnector = ConnectorConfigDTO & {
    artifactoryServerUrl: string
    auth?: ArtifactoryAuthentication
    delegateSelectors?: string[]
  }
  export type ArtifactoryUsernamePasswordAuth = ArtifactoryAuthCredentials & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export interface ArtifactsSummary {
    primary?: ArtifactSummary
    sidecars?: ArtifactSummary[]
  }
  export type AuditFilterProperties = FilterProperties & {
    actions?: (
      | 'CREATE'
      | 'UPDATE'
      | 'RESTORE'
      | 'DELETE'
      | 'UPSERT'
      | 'INVITE'
      | 'RESEND_INVITE'
      | 'REVOKE_INVITE'
      | 'ADD_COLLABORATOR'
      | 'REMOVE_COLLABORATOR'
      | 'ADD_MEMBERSHIP'
      | 'REMOVE_MEMBERSHIP'
    )[]
    endTime?: number
    environments?: Environment[]
    modules?: ('CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE')[]
    principals?: Principal[]
    resources?: ResourceDTO[]
    scopes?: ResourceScopeDTO[]
    startTime?: number
  }
  export interface AuthenticationSettingsResponse {
    authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
    ngAuthSettings?: NGAuthSettings[]
    twoFactorEnabled?: boolean
    whitelistedDomains?: string[]
  }
  export interface AuthorInfo {
    name?: string
    url?: string
  }
  export interface AwsCodeCommitAuthenticationDTO {
    spec: AwsCodeCommitCredentialsDTO
    type: 'HTTPS'
  }
  export type AwsCodeCommitConnectorDTO = ConnectorConfigDTO & {
    authentication: AwsCodeCommitAuthenticationDTO
    delegateSelectors?: string[]
    type: 'Repo' | 'Region'
    url: string
  }
  export interface AwsCodeCommitCredentialsDTO {
    [key: string]: any
  }
  export type AwsCodeCommitHttpsCredentialsDTO = AwsCodeCommitCredentialsDTO & {
    spec: AwsCodeCommitHttpsCredentialsSpecDTO
    type: 'AWSCredentials'
  }
  export interface AwsCodeCommitHttpsCredentialsSpecDTO {
    [key: string]: any
  }
  export type AwsCodeCommitSCMDTO = SourceCodeManagerDTO & {
    authentication: AwsCodeCommitAuthenticationDTO
  }
  export type AwsCodeCommitSecretKeyAccessKeyDTO = AwsCodeCommitHttpsCredentialsSpecDTO & {
    accessKey?: string
    accessKeyRef?: string
    secretKeyRef: string
  }
  export type AwsConnector = ConnectorConfigDTO & {
    credential: AwsCredential
    delegateSelectors?: string[]
  }
  export interface AwsCredential {
    crossAccountAccess?: CrossAccountAccess
    spec?: AwsCredentialSpec
    type: 'InheritFromDelegate' | 'ManualConfig'
  }
  export interface AwsCredentialSpec {
    [key: string]: any
  }
  export interface AwsCurAttributes {
    region?: string
    reportName: string
    s3BucketName: string
    s3Prefix?: string
  }
  export interface AwsKmsConnectorCredential {
    spec?: AwsKmsCredentialSpec
    type: 'AssumeIAMRole' | 'AssumeSTSRole' | 'ManualConfig'
  }
  export type AwsKmsConnectorDTO = ConnectorConfigDTO & {
    credential?: AwsKmsConnectorCredential
    default?: boolean
    delegateSelectors?: string[]
    kmsArn: string
    region?: string
  }
  export interface AwsKmsCredentialSpec {
    [key: string]: any
  }
  export type AwsKmsCredentialSpecAssumeIAM = AwsKmsCredentialSpec & {
    delegateSelectors: string[]
  }
  export type AwsKmsCredentialSpecAssumeSTS = AwsKmsCredentialSpec & {
    assumeStsRoleDuration?: number
    delegateSelectors: string[]
    externalName?: string
    roleArn: string
  }
  export type AwsKmsCredentialSpecManualConfig = AwsKmsCredentialSpec & {
    accessKey: string
    secretKey: string
  }
  export type AwsManualConfigSpec = AwsCredentialSpec & {
    accessKey?: string
    accessKeyRef?: string
    secretKeyRef: string
  }
  export type AwsSMCredentialSpecAssumeIAM = AwsSecretManagerCredentialSpec & {
    [key: string]: any
  }
  export type AwsSMCredentialSpecAssumeSTS = AwsSecretManagerCredentialSpec & {
    assumeStsRoleDuration?: number
    externalId?: string
    roleArn: string
  }
  export type AwsSMCredentialSpecManualConfig = AwsSecretManagerCredentialSpec & {
    accessKey: string
    secretKey: string
  }
  export interface AwsSecretManagerCredential {
    spec?: AwsSecretManagerCredentialSpec
    type: 'AssumeIAMRole' | 'AssumeSTSRole' | 'ManualConfig'
  }
  export interface AwsSecretManagerCredentialSpec {
    [key: string]: any
  }
  export type AwsSecretManagerDTO = ConnectorConfigDTO & {
    credential: AwsSecretManagerCredential
    default?: boolean
    delegateSelectors?: string[]
    region: string
    secretNamePrefix?: string
  }
  export type AzureDevOpsSCMDTO = SourceCodeManagerDTO & {
    authentication?: GithubAuthentication
  }
  export type AzureKeyVaultConnectorDTO = ConnectorConfigDTO & {
    azureEnvironmentType?: 'AZURE' | 'AZURE_US_GOVERNMENT'
    clientId: string
    default?: boolean
    delegateSelectors?: string[]
    secretKey: string
    subscription: string
    tenantId: string
    vaultName: string
  }
  export type AzureKeyVaultMetadataRequestSpecDTO = SecretManagerMetadataRequestSpecDTO & {
    azureEnvironmentType?: 'AZURE' | 'AZURE_US_GOVERNMENT'
    clientId: string
    delegateSelectors?: string[]
    secretKey: string
    subscription: string
    tenantId: string
  }
  export type AzureKeyVaultMetadataSpecDTO = SecretManagerMetadataSpecDTO & {
    vaultNames?: string[]
  }
  export interface BarrierInfoConfig {
    identifier: string
    name: string
  }
  export type BarrierStepInfo = StepSpecType & {
    barrierRef: string
  }
  export interface BaseSSHSpecDTO {
    [key: string]: any
  }
  export interface BatchRoleAssignmentCreateRequest {
    roleAssignments?: RoleAssignment[]
  }
  export interface BillingExportSpec {
    containerName: string
    directoryName: string
    reportName: string
    storageAccountName: string
    subscriptionId: string
  }
  export interface BitbucketApiAccess {
    spec: BitbucketApiAccessSpecDTO
    type: 'UsernameToken'
  }
  export interface BitbucketApiAccessSpecDTO {
    [key: string]: any
  }
  export interface BitbucketAuthentication {
    spec: BitbucketCredentialsDTO
    type: 'Http' | 'Ssh'
  }
  export type BitbucketConnector = ConnectorConfigDTO & {
    apiAccess?: BitbucketApiAccess
    authentication: BitbucketAuthentication
    delegateSelectors?: string[]
    type: 'Account' | 'Repo'
    url: string
    validationRepo?: string
  }
  export interface BitbucketCredentialsDTO {
    [key: string]: any
  }
  export type BitbucketHttpCredentials = BitbucketCredentialsDTO & {
    spec: BitbucketHttpCredentialsSpecDTO
    type: 'UsernamePassword'
  }
  export interface BitbucketHttpCredentialsSpecDTO {
    [key: string]: any
  }
  export type BitbucketSCMDTO = SourceCodeManagerDTO & {
    authentication?: BitbucketAuthentication
  }
  export type BitbucketSshCredentials = BitbucketCredentialsDTO & {
    sshKeyRef: string
  }
  export type BitbucketStore = StoreConfig & {
    branch?: string
    commitId?: string
    connectorRef: string
    folderPath?: string
    gitFetchType: 'Branch' | 'Commit'
    metadata?: string
    paths?: string[]
    repoName?: string
  }
  export type BitbucketUsernamePassword = BitbucketHttpCredentialsSpecDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export type BitbucketUsernameTokenApiAccess = BitbucketApiAccessSpecDTO & {
    tokenRef: string
    username?: string
    usernameRef?: string
  }
  export type BranchBuildSpec = BuildSpec & {
    branch: string
  }
  export interface Build {
    spec: BuildSpec
    type: 'branch' | 'tag' | 'PR' | 'CommitSha'
  }
  export interface BuildIdAndInstanceCount {
    buildId?: string
    count?: number
  }
  export interface BuildSpec {
    [key: string]: any
  }
  export type CDLicenseSummaryDTO = LicensesWithSummaryDTO & {
    totalServiceInstances?: number
    totalWorkload?: number
  }
  export type CDModuleLicenseDTO = ModuleLicenseDTO & {
    cdLicenseType?: 'SERVICES' | 'SERVICE_INSTANCES'
    serviceInstances?: number
    workloads?: number
  }
  export interface CDPipelineModuleInfo {
    envIdentifiers?: string[]
    environmentTypes?: ('PreProduction' | 'Production')[]
    infrastructureTypes?: string[]
    serviceDefinitionTypes?: string[]
    serviceIdentifiers?: string[]
  }
  export interface CDStageModuleInfo {
    infraExecutionSummary?: InfraExecutionSummary
    nodeExecutionId?: string
    serviceInfo?: ServiceExecutionSummary
  }
  export type CEAwsConnector = ConnectorConfigDTO & {
    awsAccountId?: string
    crossAccountAccess: CrossAccountAccess
    curAttributes?: AwsCurAttributes
    featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  }
  export type CEAzureConnector = ConnectorConfigDTO & {
    billingExportSpec?: BillingExportSpec
    featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
    subscriptionId: string
    tenantId: string
  }
  export type CEKubernetesClusterConfig = ConnectorConfigDTO & {
    connectorRef: string
    featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  }
  export type CELicenseSummaryDTO = LicensesWithSummaryDTO & {
    totalSpendLimit?: number
  }
  export type CEModuleLicenseDTO = ModuleLicenseDTO & {
    spendLimit?: number
  }
  export type CFLicenseSummaryDTO = LicensesWithSummaryDTO & {
    totalClientMAUs?: number
    totalFeatureFlagUnits?: number
  }
  export type CFModuleLicenseDTO = ModuleLicenseDTO & {
    numberOfClientMAUs?: number
    numberOfUsers?: number
  }
  export type CILicenseSummaryDTO = LicensesWithSummaryDTO & {
    totalDevelopers?: number
  }
  export type CIModuleLicenseDTO = ModuleLicenseDTO & {
    numberOfCommitters?: number
  }
  export interface CIProperties {
    codebase?: CodeBase
  }
  export type CVLicenseSummaryDTO = LicensesWithSummaryDTO & {}
  export type CVModuleLicenseDTO = ModuleLicenseDTO & {}
  export interface CcmConnectorFilter {
    awsAccountId?: string
    azureSubscriptionId?: string
    azureTenantId?: string
    featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
    gcpProjectId?: string
    k8sConnectorRef?: string
  }
  export interface CeLicenseInfo {
    expiryTime?: number
    licenseType?: 'FULL_TRIAL' | 'LIMITED_TRIAL' | 'PAID'
  }
  export interface CodeBase {
    build: Build
    connectorRef: string
    depth?: number
    prCloneStrategy?: 'MergeCommit' | 'SourceBranch'
    repoName?: string
    resources?: ContainerResource
    sslVerify?: boolean
  }
  export type CommitShaBuildSpec = BuildSpec & {
    branchName?: string
    commitSha: string
  }
  export interface Condition {
    key: string
    operator: 'equals' | 'not equals' | 'in' | 'not in'
    value: string
  }
  export interface ConnectivityCheckSummary {
    endTime?: number
    failureCount?: number
    startTime?: number
    successCount?: number
  }
  export interface Connector {
    connector?: ConnectorInfoDTO
  }
  export interface ConnectorActivityDetails {
    lastActivityTime?: number
  }
  export interface ConnectorCatalogueItem {
    category?:
      | 'CLOUD_PROVIDER'
      | 'SECRET_MANAGER'
      | 'CLOUD_COST'
      | 'ARTIFACTORY'
      | 'CODE_REPO'
      | 'MONITORING'
      | 'TICKETING'
    connectors?: (
      | 'K8sCluster'
      | 'Git'
      | 'Splunk'
      | 'AppDynamics'
      | 'Prometheus'
      | 'Dynatrace'
      | 'Vault'
      | 'AzureKeyVault'
      | 'DockerRegistry'
      | 'Local'
      | 'AwsKms'
      | 'GcpKms'
      | 'AwsSecretManager'
      | 'Gcp'
      | 'Aws'
      | 'Artifactory'
      | 'Jira'
      | 'Nexus'
      | 'Github'
      | 'Gitlab'
      | 'Bitbucket'
      | 'Codecommit'
      | 'CEAws'
      | 'CEAzure'
      | 'GcpCloudCost'
      | 'CEK8sCluster'
      | 'HttpHelmRepo'
      | 'NewRelic'
      | 'Datadog'
      | 'SumoLogic'
    )[]
  }
  export interface ConnectorCatalogueResponse {
    catalogue?: ConnectorCatalogueItem[]
  }
  export interface ConnectorConfigDTO {
    [key: string]: any
  }
  export interface ConnectorConnectivityDetails {
    errorSummary?: string
    errors?: ErrorDetail[]
    lastConnectedAt?: number
    lastTestedAt?: number
    status?: 'SUCCESS' | 'FAILURE' | 'PARTIAL' | 'UNKNOWN'
    testedAt?: number
  }
  export type ConnectorFilterProperties = FilterProperties & {
    categories?: (
      | 'CLOUD_PROVIDER'
      | 'SECRET_MANAGER'
      | 'CLOUD_COST'
      | 'ARTIFACTORY'
      | 'CODE_REPO'
      | 'MONITORING'
      | 'TICKETING'
    )[]
    ccmConnectorFilter?: CcmConnectorFilter
    connectivityStatuses?: ('SUCCESS' | 'FAILURE' | 'PARTIAL' | 'UNKNOWN')[]
    connectorIdentifiers?: string[]
    connectorNames?: string[]
    description?: string
    inheritingCredentialsFromDelegate?: boolean
    types?: (
      | 'K8sCluster'
      | 'Git'
      | 'Splunk'
      | 'AppDynamics'
      | 'Prometheus'
      | 'Dynatrace'
      | 'Vault'
      | 'AzureKeyVault'
      | 'DockerRegistry'
      | 'Local'
      | 'AwsKms'
      | 'GcpKms'
      | 'AwsSecretManager'
      | 'Gcp'
      | 'Aws'
      | 'Artifactory'
      | 'Jira'
      | 'Nexus'
      | 'Github'
      | 'Gitlab'
      | 'Bitbucket'
      | 'Codecommit'
      | 'CEAws'
      | 'CEAzure'
      | 'GcpCloudCost'
      | 'CEK8sCluster'
      | 'HttpHelmRepo'
      | 'NewRelic'
      | 'Datadog'
      | 'SumoLogic'
    )[]
  }
  export interface ConnectorInfoDTO {
    description?: string
    identifier: string
    name: string
    orgIdentifier?: string
    projectIdentifier?: string
    spec: ConnectorConfigDTO
    tags?: {
      [key: string]: string
    }
    type:
      | 'K8sCluster'
      | 'Git'
      | 'Splunk'
      | 'AppDynamics'
      | 'Prometheus'
      | 'Dynatrace'
      | 'Vault'
      | 'AzureKeyVault'
      | 'DockerRegistry'
      | 'Local'
      | 'AwsKms'
      | 'GcpKms'
      | 'AwsSecretManager'
      | 'Gcp'
      | 'Aws'
      | 'Artifactory'
      | 'Jira'
      | 'Nexus'
      | 'Github'
      | 'Gitlab'
      | 'Bitbucket'
      | 'Codecommit'
      | 'CEAws'
      | 'CEAzure'
      | 'GcpCloudCost'
      | 'CEK8sCluster'
      | 'HttpHelmRepo'
      | 'NewRelic'
      | 'Datadog'
      | 'SumoLogic'
  }
  export interface ConnectorResponse {
    activityDetails?: ConnectorActivityDetails
    connector?: ConnectorInfoDTO
    createdAt?: number
    gitDetails?: EntityGitDetails
    harnessManaged?: boolean
    lastModifiedAt?: number
    status?: ConnectorConnectivityDetails
  }
  export interface ConnectorStatistics {
    statusStats?: ConnectorStatusStatistics[]
    typeStats?: ConnectorTypeStatistics[]
  }
  export interface ConnectorStatusStatistics {
    count?: number
    status?: 'SUCCESS' | 'FAILURE' | 'PARTIAL' | 'UNKNOWN'
  }
  export interface ConnectorTypeStatistics {
    count?: number
    type?:
      | 'K8sCluster'
      | 'Git'
      | 'Splunk'
      | 'AppDynamics'
      | 'Prometheus'
      | 'Dynatrace'
      | 'Vault'
      | 'AzureKeyVault'
      | 'DockerRegistry'
      | 'Local'
      | 'AwsKms'
      | 'GcpKms'
      | 'AwsSecretManager'
      | 'Gcp'
      | 'Aws'
      | 'Artifactory'
      | 'Jira'
      | 'Nexus'
      | 'Github'
      | 'Gitlab'
      | 'Bitbucket'
      | 'Codecommit'
      | 'CEAws'
      | 'CEAzure'
      | 'GcpCloudCost'
      | 'CEK8sCluster'
      | 'HttpHelmRepo'
      | 'NewRelic'
      | 'Datadog'
      | 'SumoLogic'
  }
  export interface ConnectorValidationResult {
    delegateId?: string
    errorSummary?: string
    errors?: ErrorDetail[]
    status?: 'SUCCESS' | 'FAILURE' | 'PARTIAL' | 'UNKNOWN'
    testedAt?: number
  }
  export interface ContainerResource {
    limits: Limits
  }
  export interface ContextElement {
    elementType?:
      | 'SERVICE'
      | 'INFRAMAPPING'
      | 'SERVICE_TEMPLATE'
      | 'TAG'
      | 'SHELL'
      | 'HOST'
      | 'INSTANCE'
      | 'STANDARD'
      | 'PARAM'
      | 'PARTITION'
      | 'OTHER'
      | 'FORK'
      | 'CONTAINER_SERVICE'
      | 'CLUSTER'
      | 'AWS_LAMBDA_FUNCTION'
      | 'AMI_SERVICE_SETUP'
      | 'AMI_SERVICE_DEPLOY'
      | 'ECS_SERVICE_SETUP'
      | 'AMI_SWITCH_ROUTES'
      | 'PCF_SERVICE_SETUP'
      | 'PCF_SERVICE_DEPLOY'
      | 'PCF_ROUTE_SWAP_ROLLBACK'
      | 'PCF_INSTANCE'
      | 'SPOTINST_SERVICE_SETUP'
      | 'SPOTINST_SERVICE_DEPLOY'
      | 'ARTIFACT'
      | 'ARTIFACT_VARIABLE'
      | 'HELM_DEPLOY'
      | 'CLOUD_FORMATION_PROVISION'
      | 'CLOUD_FORMATION_ROLLBACK'
      | 'CLOUD_FORMATION_DEPROVISION'
      | 'TERRAFORM_PROVISION'
      | 'SHELL_SCRIPT_PROVISION'
      | 'K8S'
      | 'TERRAFORM_INHERIT_PLAN'
      | 'TERRAGRUNT_INHERIT_PLAN'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_WEBAPP_SETUP'
      | 'HELM_CHART'
      | 'MANIFEST_VARIABLE'
    name?: string
    uuid?: string
  }
  export type CountInstanceSelection = InstanceSelectionBase & {
    count?: ParameterFieldString
  }
  export interface CreateInvite {
    inviteType: 'USER_INITIATED_INVITE' | 'ADMIN_INITIATED_INVITE'
    roleBindings: RoleBinding[]
    users: string[]
  }
  export interface CreatePRDTO {
    prNumber?: number
  }
  export interface CriteriaSpec {
    [key: string]: any
  }
  export interface CriteriaSpecWrapper {
    spec: CriteriaSpec
    type: 'Jexl' | 'KeyValues'
  }
  export interface CrossAccountAccess {
    crossAccountRoleArn: string
    externalId?: string
  }
  export interface DOMConfiguration {
    parameterNames?: DOMStringList
  }
  export interface DOMImplementation {
    [key: string]: any
  }
  export interface DOMStringList {
    length?: number
  }
  export interface DashboardExecutionStatusInfo {
    active?: ExecutionStatusInfo[]
    failure?: ExecutionStatusInfo[]
    pending?: ExecutionStatusInfo[]
  }
  export interface DashboardWorkloadDeployment {
    workloadDeploymentInfoList?: WorkloadDeploymentInfo[]
  }
  export type DatadogConnectorDTO = ConnectorConfigDTO & {
    apiKeyRef: string
    applicationKeyRef: string
    delegateSelectors?: string[]
    url: string
  }
  export interface DelegateConfiguration {
    action?: 'SELF_DESTRUCT'
    delegateVersions?: string[]
  }
  export type DelegateFilterProperties = FilterProperties & {
    delegateGroupIdentifier?: string
    delegateName?: string
    delegateType?: string
    description?: string
    hostName?: string
    status?: 'ENABLED' | 'WAITING_FOR_APPROVAL' | 'DISABLED' | 'DELETED'
  }
  export interface DelegateMetaInfo {
    hostName?: string
    id?: string
  }
  export interface DelegateProfileDetailsNg {
    accountId?: string
    approvalRequired?: boolean
    createdAt?: number
    createdBy?: EmbeddedUserDetails
    description?: string
    identifier?: string
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUserDetails
    name?: string
    numberOfDelegates?: number
    orgIdentifier?: string
    primary?: boolean
    projectIdentifier?: string
    scopingRules?: ScopingRuleDetailsNg[]
    selectors?: string[]
    startupScript?: string
    uuid?: string
  }
  export interface DelegateProfileFilterProperties {
    approvalRequired?: boolean
    description?: string
    filterType?:
      | 'Connector'
      | 'DelegateProfile'
      | 'Delegate'
      | 'PipelineSetup'
      | 'PipelineExecution'
      | 'Deployment'
      | 'Audit'
    identifier?: string
    name?: string
    selectors?: string[]
    tags?: {
      [key: string]: string
    }
  }
  export interface DelegateResponseData {
    [key: string]: any
  }
  export type DeleteManifestPathSpec = DeleteResourcesBaseSpec & {
    allManifestPaths?: boolean
    manifestPaths?: string[]
  }
  export type DeleteReleaseNameSpec = DeleteResourcesBaseSpec & {
    deleteNamespace?: boolean
  }
  export type DeleteResourceNameSpec = DeleteResourcesBaseSpec & {
    resourceNames?: string[]
  }
  export interface DeleteResourcesBaseSpec {
    [key: string]: any
  }
  export interface DeleteResourcesWrapper {
    spec?: DeleteResourcesBaseSpec
    type?: 'ResourceName' | 'ReleaseName' | 'ManifestPath'
  }
  export interface Deployment {
    count?: number
  }
  export interface DeploymentChangeRates {
    failureRate?: number
    failureRateChangeRate?: number
    frequency?: number
    frequencyChangeRate?: number
  }
  export interface DeploymentCount {
    failure?: number
    success?: number
    total?: number
  }
  export interface DeploymentDateAndCount {
    deployments?: Deployment
    time?: number
  }
  export interface DeploymentInfo {
    count?: number
    countList?: DeploymentDateAndCount[]
    rate?: number
  }
  export type DeploymentStageConfig = StageInfoConfig & {
    execution: ExecutionElementConfig
    infrastructure: PipelineInfrastructure
    serviceConfig: ServiceConfig
  }
  export interface DeploymentsInfo {
    deployments?: ExecutionStatusInfo[]
  }
  export interface DockerAuthCredentialsDTO {
    [key: string]: any
  }
  export interface DockerAuthenticationDTO {
    spec?: DockerAuthCredentialsDTO
    type: 'UsernamePassword' | 'Anonymous'
  }
  export interface DockerBuildDetailsDTO {
    buildUrl?: string
    imagePath?: string
    labels?: {
      [key: string]: string
    }
    metadata?: {
      [key: string]: string
    }
    tag?: string
  }
  export type DockerConnectorDTO = ConnectorConfigDTO & {
    auth?: DockerAuthenticationDTO
    delegateSelectors?: string[]
    dockerRegistryUrl: string
    providerType: 'DockerHub' | 'Harbor' | 'Quay' | 'Other'
  }
  export type DockerHubArtifactConfig = ArtifactConfig & {
    connectorRef: string
    imagePath: string
    metadata?: string
    tag?: string
    tagRegex?: string
  }
  export interface DockerRequestDTO {
    tag?: string
    tagRegex?: string
    tagsList?: string[]
  }
  export interface DockerResponseDTO {
    buildDetailsList?: DockerBuildDetailsDTO[]
  }
  export type DockerUserNamePasswordDTO = DockerAuthCredentialsDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export interface Document {
    attributes?: NamedNodeMap
    baseURI?: string
    childNodes?: NodeList
    doctype?: DocumentType
    documentElement?: Element
    documentURI?: string
    domConfig?: DOMConfiguration
    firstChild?: Node
    implementation?: DOMImplementation
    inputEncoding?: string
    lastChild?: Node
    localName?: string
    namespaceURI?: string
    nextSibling?: Node
    nodeName?: string
    nodeType?: number
    nodeValue?: string
    ownerDocument?: Document
    parentNode?: Node
    prefix?: string
    previousSibling?: Node
    strictErrorChecking?: boolean
    textContent?: string
    xmlEncoding?: string
    xmlStandalone?: boolean
    xmlVersion?: string
  }
  export interface DocumentType {
    attributes?: NamedNodeMap
    baseURI?: string
    childNodes?: NodeList
    entities?: NamedNodeMap
    firstChild?: Node
    internalSubset?: string
    lastChild?: Node
    localName?: string
    name?: string
    namespaceURI?: string
    nextSibling?: Node
    nodeName?: string
    nodeType?: number
    nodeValue?: string
    notations?: NamedNodeMap
    ownerDocument?: Document
    parentNode?: Node
    prefix?: string
    previousSibling?: Node
    publicId?: string
    systemId?: string
    textContent?: string
  }
  export type DynatraceConnectorDTO = ConnectorConfigDTO & {
    apiTokenRef: string
    delegateSelectors?: string[]
    url: string
  }
  export type EcrArtifactConfig = ArtifactConfig & {
    connectorRef: string
    imagePath: string
    metadata?: string
    region: string
    tag?: string
    tagRegex?: string
  }
  export interface EcrBuildDetailsDTO {
    buildUrl?: string
    imagePath?: string
    labels?: {
      [key: string]: string
    }
    metadata?: {
      [key: string]: string
    }
    tag?: string
  }
  export interface EcrListImagesDTO {
    images?: string[]
  }
  export interface EcrRequestDTO {
    region?: string
    tag?: string
    tagRegex?: string
    tagsList?: string[]
  }
  export interface EcrResponseDTO {
    buildDetailsList?: EcrBuildDetailsDTO[]
  }
  export interface Element {
    attributes?: NamedNodeMap
    baseURI?: string
    childNodes?: NodeList
    firstChild?: Node
    lastChild?: Node
    localName?: string
    namespaceURI?: string
    nextSibling?: Node
    nodeName?: string
    nodeType?: number
    nodeValue?: string
    ownerDocument?: Document
    parentNode?: Node
    prefix?: string
    previousSibling?: Node
    schemaTypeInfo?: TypeInfo
    tagName?: string
    textContent?: string
  }
  export type EmailConfig = NotificationSettingConfig & {
    groupEmail?: string
  }
  export type EmailConfigDTO = NotificationSettingConfigDTO & {
    groupEmail: string
  }
  export interface EmbeddedUser {
    email?: string
    name?: string
    uuid?: string
  }
  export interface EmbeddedUserDetails {
    email?: string
    name?: string
    uuid?: string
  }
  export interface EntityDetail {
    entityRef?: EntityReference
    name?: string
    type?:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
  }
  export interface EntityGitDetails {
    branch?: string
    filePath?: string
    objectId?: string
    repoIdentifier?: string
    rootFolder?: string
  }
  export interface EntityReference {
    accountIdentifier?: string
    branch?: string
    default?: boolean
    identifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    repoIdentifier?: string
  }
  export type EntityReferredByPipelineSetupUsageDetail = SetupUsageDetail & {
    identifier?: string
    referenceType?: string
  }
  export interface EntitySetupUsageDTO {
    accountIdentifier?: string
    createdAt?: number
    detail?: SetupUsageDetail
    referredByEntity: EntityDetail
    referredEntity?: EntityDetail
  }
  export interface EnvBuildIdAndInstanceCountInfo {
    buildIdAndInstanceCountList?: BuildIdAndInstanceCount[]
    envId?: string
    envName?: string
  }
  export interface EnvBuildIdAndInstanceCountInfoList {
    envBuildIdAndInstanceCountInfoList?: EnvBuildIdAndInstanceCountInfo[]
  }
  export type EnvFilter = Filter & {
    filterTypes?: string[]
  }
  export interface EnvIdCountPair {
    count?: number
    envId?: string
  }
  export interface Environment {
    identifier: string
    type: 'PreProduction' | 'Production'
  }
  export interface EnvironmentRequestDTO {
    color?: string
    description?: string
    identifier: string
    name?: string
    orgIdentifier: string
    projectIdentifier: string
    tags?: {
      [key: string]: string
    }
    type: 'PreProduction' | 'Production'
    version?: number
  }
  export interface EnvironmentResponse {
    createdAt?: number
    environment?: EnvironmentResponseDTO
    lastModifiedAt?: number
  }
  export interface EnvironmentResponseDTO {
    accountId?: string
    color?: string
    deleted?: boolean
    description?: string
    identifier?: string
    name?: string
    orgIdentifier?: string
    projectIdentifier?: string
    tags?: {
      [key: string]: string
    }
    type?: 'PreProduction' | 'Production'
    version?: number
  }
  export interface EnvironmentYaml {
    description?: string
    identifier: string
    name: string
    tags?: {
      [key: string]: string
    }
    type: 'PreProduction' | 'Production'
  }
  export interface Error {
    code?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'REVOKED_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_CREDENTIALS_THIRD_PARTY'
      | 'INVALID_KEY'
      | 'INVALID_CONNECTOR_TYPE'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'SCHEMA_VALIDATION_FAILED'
      | 'FILTER_CREATION_ERROR'
      | 'INVALID_YAML_ERROR'
      | 'PLAN_CREATION_ERROR'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'EXPIRE_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'IMAGE_NOT_FOUND'
      | 'ILLEGAL_ARGUMENT'
      | 'IMAGE_TAG_NOT_FOUND'
      | 'DELEGATE_NOT_AVAILABLE'
      | 'INVALID_YAML_PAYLOAD'
      | 'AUTHENTICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'SECRET_NOT_FOUND'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'FILE_NOT_FOUND_ERROR'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'DATA_COLLECTION_ERROR'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'TIMESCALE_NOT_AVAILABLE'
      | 'MIGRATION_EXCEPTION'
      | 'REQUEST_PROCESSING_INTERRUPTED'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
      | 'HTTP_RESPONSE_EXCEPTION'
      | 'SCM_NOT_FOUND_ERROR'
      | 'SCM_CONFLICT_ERROR'
      | 'SCM_UNPROCESSABLE_ENTITY'
      | 'PROCESS_EXECUTION_EXCEPTION'
      | 'SCM_UNAUTHORIZED'
      | 'DATA'
      | 'CONTEXT'
      | 'PR_CREATION_ERROR'
      | 'URL_NOT_REACHABLE'
      | 'URL_NOT_PROVIDED'
      | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
      | 'ENGINE_FUNCTOR_ERROR'
      | 'JIRA_CLIENT_ERROR'
      | 'SCM_NOT_MODIFIED'
      | 'JIRA_STEP_ERROR'
      | 'BUCKET_SERVER_ERROR'
    correlationId?: string
    detailedMessage?: string
    message?: string
    responseMessages?: ResponseMessage[]
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ErrorDetail {
    code?: number
    message?: string
    reason?: string
  }
  export interface ExecutionDataValue {
    displayName?: string
    value?: {
      [key: string]: any
    }
  }
  export interface ExecutionDeployment {
    deployments?: DeploymentCount
    time?: number
  }
  export interface ExecutionDeploymentInfo {
    executionDeploymentList?: ExecutionDeployment[]
  }
  export interface ExecutionElementConfig {
    rollbackSteps?: ExecutionWrapperConfig[]
    steps: ExecutionWrapperConfig[]
  }
  export interface ExecutionStatusInfo {
    author?: AuthorInfo
    endTs?: number
    gitInfo?: GitInfo
    pipelineIdentifier?: string
    pipelineName?: string
    planExecutionId?: string
    serviceInfoList?: ServiceDeploymentInfo[]
    startTs?: number
    status?: string
    triggerType?: string
  }
  export interface ExecutionTarget {
    connectorRef?: string
    host?: string
    workingDirectory?: string
  }
  export interface ExecutionWrapperConfig {
    parallel?: ParallelStepElementConfig
    step?: StepElementConfig
    stepGroup?: StepGroupElementConfig
  }
  export interface Failure {
    code?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'REVOKED_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_CREDENTIALS_THIRD_PARTY'
      | 'INVALID_KEY'
      | 'INVALID_CONNECTOR_TYPE'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'SCHEMA_VALIDATION_FAILED'
      | 'FILTER_CREATION_ERROR'
      | 'INVALID_YAML_ERROR'
      | 'PLAN_CREATION_ERROR'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'EXPIRE_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'IMAGE_NOT_FOUND'
      | 'ILLEGAL_ARGUMENT'
      | 'IMAGE_TAG_NOT_FOUND'
      | 'DELEGATE_NOT_AVAILABLE'
      | 'INVALID_YAML_PAYLOAD'
      | 'AUTHENTICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'SECRET_NOT_FOUND'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'FILE_NOT_FOUND_ERROR'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'DATA_COLLECTION_ERROR'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'TIMESCALE_NOT_AVAILABLE'
      | 'MIGRATION_EXCEPTION'
      | 'REQUEST_PROCESSING_INTERRUPTED'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
      | 'HTTP_RESPONSE_EXCEPTION'
      | 'SCM_NOT_FOUND_ERROR'
      | 'SCM_CONFLICT_ERROR'
      | 'SCM_UNPROCESSABLE_ENTITY'
      | 'PROCESS_EXECUTION_EXCEPTION'
      | 'SCM_UNAUTHORIZED'
      | 'DATA'
      | 'CONTEXT'
      | 'PR_CREATION_ERROR'
      | 'URL_NOT_REACHABLE'
      | 'URL_NOT_PROVIDED'
      | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
      | 'ENGINE_FUNCTOR_ERROR'
      | 'JIRA_CLIENT_ERROR'
      | 'SCM_NOT_MODIFIED'
      | 'JIRA_STEP_ERROR'
      | 'BUCKET_SERVER_ERROR'
    correlationId?: string
    errors?: ValidationError[]
    message?: string
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface FailureStrategyActionConfig {
    type: 'Ignore' | 'Retry' | 'MarkAsSuccess' | 'Abort' | 'StageRollback' | 'StepGroupRollback' | 'ManualIntervention'
  }
  export interface FailureStrategyConfig {
    onFailure: OnFailureConfig
  }
  export type FeatureFlagStageConfig = StageInfoConfig & {}
  export interface FeedbackFormDTO {
    accountId?: string
    email?: string
    moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
    score?: number
    suggestion?: string
  }
  export interface FieldValues {
    fieldValues?: {
      [key: string]: string[]
    }
  }
  export interface Filter {
    ids?: string[]
  }
  export interface FilterDTO {
    filterProperties: FilterProperties
    filterVisibility?: 'EveryOne' | 'OnlyCreator'
    identifier: string
    name: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface FilterProperties {
    filterType?:
      | 'Connector'
      | 'DelegateProfile'
      | 'Delegate'
      | 'PipelineSetup'
      | 'PipelineExecution'
      | 'Deployment'
      | 'Audit'
    tags?: {
      [key: string]: string
    }
  }
  export type FlagConfigurationStepInfo = StepSpecType & {
    environment: string
    feature: string
    instructions: PatchInstruction[]
  }
  export interface FlowControlConfig {
    barriers?: BarrierInfoConfig[]
  }
  export interface GatewayAccountRequestDTO {
    accountName?: string
    companyName?: string
    createdFromNG?: boolean
    defaultExperience?: 'NG' | 'CG'
    nextGenEnabled?: boolean
    uuid?: string
  }
  export interface GcpBillingExportSpec {
    datasetId: string
  }
  export type GcpCloudCostConnector = ConnectorConfigDTO & {
    billingExportSpec?: GcpBillingExportSpec
    featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
    projectId: string
    serviceAccountEmail: string
  }
  export type GcpConnector = ConnectorConfigDTO & {
    credential?: GcpConnectorCredential
    delegateSelectors?: string[]
  }
  export interface GcpConnectorCredential {
    spec?: GcpCredentialSpec
    type: 'InheritFromDelegate' | 'ManualConfig'
  }
  export interface GcpCredentialSpec {
    [key: string]: any
  }
  export type GcpKmsConnectorDTO = ConnectorConfigDTO & {
    credentials: string
    default?: boolean
    delegateSelectors?: string[]
    keyName?: string
    keyRing?: string
    projectId?: string
    region?: string
  }
  export type GcpManualDetails = GcpCredentialSpec & {
    secretKeyRef: string
  }
  export interface GcpResponseDTO {
    clusterNames?: string[]
  }
  export type GcrArtifactConfig = ArtifactConfig & {
    connectorRef: string
    imagePath: string
    metadata?: string
    registryHostname: string
    tag?: string
    tagRegex?: string
  }
  export interface GcrBuildDetailsDTO {
    buildUrl?: string
    imagePath?: string
    labels?: {
      [key: string]: string
    }
    metadata?: {
      [key: string]: string
    }
    tag?: string
  }
  export interface GcrRequestDTO {
    registryHostname?: string
    tag?: string
    tagRegex?: string
    tagsList?: string[]
  }
  export interface GcrResponseDTO {
    buildDetailsList?: GcrBuildDetailsDTO[]
  }
  export type GcsStoreConfig = StoreConfig & {
    bucketName?: string
    connectorRef?: string
    folderPath?: string
    metadata?: string
  }
  export type GenericEntityFilter = Filter & {
    filterType?: string
  }
  export interface GitAuthenticationDTO {
    [key: string]: any
  }
  export interface GitBranchDTO {
    branchName?: string
    branchSyncStatus?: 'SYNCED' | 'SYNCING' | 'UNSYNCED'
  }
  export interface GitBranchListDTO {
    branches?: PageGitBranchDTO
    defaultBranch?: GitBranchDTO
  }
  export type GitConfigDTO = ConnectorConfigDTO & {
    branchName?: string
    connectionType: 'Account' | 'Repo'
    delegateSelectors?: string[]
    spec: GitAuthenticationDTO
    type: 'Http' | 'Ssh'
    url: string
    validationRepo?: string
  }
  export interface GitEnabledDTO {
    connectivityMode?: 'MANAGER' | 'DELEGATE'
    gitSyncEnabled?: boolean
  }
  export interface GitEntityBranchFilterSummaryProperties {
    entityTypes?: (
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
    )[]
    moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
    searchTerm?: string
  }
  export interface GitEntityFilterProperties {
    entityTypes?: (
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
    )[]
    gitSyncConfigIdentifiers?: string[]
    moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
    searchTerm?: string
  }
  export interface GitFileContent {
    content?: string
    objectId?: string
  }
  export type GitHTTPAuthenticationDTO = GitAuthenticationDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export interface GitInfo {
    commit?: string
    commitID?: string
    eventType?: string
    repoName?: string
    sourceBranch?: string
    targetBranch?: string
  }
  export type GitLabStore = StoreConfig & {
    branch?: string
    commitId?: string
    connectorRef: string
    folderPath?: string
    gitFetchType: 'Branch' | 'Commit'
    metadata?: string
    paths?: string[]
    repoName?: string
  }
  export interface GitPRCreateRequest {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    sourceBranch: string
    targetBranch: string
    title: string
    useUserFromToken?: boolean
    yamlGitConfigRef: string
  }
  export type GitSSHAuthenticationDTO = GitAuthenticationDTO & {
    sshKeyRef: string
  }
  export type GitStore = StoreConfig & {
    branch?: string
    commitId?: string
    connectorRef: string
    folderPath?: string
    gitFetchType: 'Branch' | 'Commit'
    metadata?: string
    paths?: string[]
    repoName?: string
  }
  export interface GitSyncConfig {
    branch?: string
    gitConnectorRef?: string
    gitConnectorType: 'Github' | 'Gitlab' | 'Bitbucket'
    gitSyncFolderConfigDTOs?: GitSyncFolderConfigDTO[]
    identifier?: string
    name?: string
    orgIdentifier?: string
    projectIdentifier?: string
    repo?: string
  }
  export interface GitSyncEntityDTO {
    accountId?: string
    branch?: string
    entityGitPath?: string
    entityIdentifier?: string
    entityName?: string
    entityReference?: EntityReference
    entityType?:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
    folderPath?: string
    gitConnectorId?: string
    repoProviderType?: 'github' | 'gitlab' | 'bitbucket' | 'unknown'
    repoUrl?: string
  }
  export interface GitSyncEntityListDTO {
    count?: number
    entityType?:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
    gitSyncEntities?: GitSyncEntityDTO[]
  }
  export interface GitSyncFolderConfigDTO {
    enabled?: boolean
    identifier?: string
    isDefault?: boolean
    rootFolder?: string
  }
  export interface GitSyncRepoFiles {
    gitSyncConfigIdentifier?: string
    gitSyncEntityLists?: GitSyncEntityListDTO[]
  }
  export interface GitSyncRepoFilesList {
    gitSyncRepoFilesList?: GitSyncRepoFiles[]
    moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
  }
  export interface GitSyncSettingsDTO {
    accountIdentifier: string
    executeOnDelegate: boolean
    organizationIdentifier: string
    projectIdentifier: string
  }
  export interface GithubApiAccess {
    spec?: GithubApiAccessSpecDTO
    type: 'GithubApp' | 'Token'
  }
  export interface GithubApiAccessSpecDTO {
    [key: string]: any
  }
  export type GithubAppSpec = GithubApiAccessSpecDTO & {
    applicationId: string
    installationId: string
    privateKeyRef: string
  }
  export interface GithubAuthentication {
    spec: GithubCredentialsDTO
    type: 'Http' | 'Ssh'
  }
  export type GithubConnector = ConnectorConfigDTO & {
    apiAccess?: GithubApiAccess
    authentication: GithubAuthentication
    delegateSelectors?: string[]
    type: 'Account' | 'Repo'
    url: string
    validationRepo?: string
  }
  export interface GithubCredentialsDTO {
    [key: string]: any
  }
  export type GithubHttpCredentials = GithubCredentialsDTO & {
    spec: GithubHttpCredentialsSpecDTO
    type: 'UsernamePassword' | 'UsernameToken'
  }
  export interface GithubHttpCredentialsSpecDTO {
    [key: string]: any
  }
  export type GithubSCMDTO = SourceCodeManagerDTO & {
    authentication?: GithubAuthentication
  }
  export type GithubSshCredentials = GithubCredentialsDTO & {
    sshKeyRef: string
  }
  export type GithubStore = StoreConfig & {
    branch?: string
    commitId?: string
    connectorRef: string
    folderPath?: string
    gitFetchType: 'Branch' | 'Commit'
    metadata?: string
    paths?: string[]
    repoName?: string
  }
  export type GithubTokenSpec = GithubApiAccessSpecDTO & {
    tokenRef: string
  }
  export type GithubUsernamePassword = GithubHttpCredentialsSpecDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export type GithubUsernameToken = GithubHttpCredentialsSpecDTO & {
    tokenRef: string
    username?: string
    usernameRef?: string
  }
  export interface GitlabApiAccess {
    spec?: GitlabApiAccessSpecDTO
    type: 'Token'
  }
  export interface GitlabApiAccessSpecDTO {
    [key: string]: any
  }
  export interface GitlabAuthentication {
    spec: GitlabCredentialsDTO
    type: 'Http' | 'Ssh'
  }
  export type GitlabConnector = ConnectorConfigDTO & {
    apiAccess?: GitlabApiAccess
    authentication: GitlabAuthentication
    delegateSelectors?: string[]
    type: 'Account' | 'Repo'
    url: string
    validationRepo?: string
  }
  export interface GitlabCredentialsDTO {
    [key: string]: any
  }
  export type GitlabHttpCredentials = GitlabCredentialsDTO & {
    spec: GitlabHttpCredentialsSpecDTO
    type: 'UsernamePassword' | 'UsernameToken' | 'Kerberos'
  }
  export interface GitlabHttpCredentialsSpecDTO {
    [key: string]: any
  }
  export type GitlabKerberos = GitlabHttpCredentialsSpecDTO & {
    kerberosKeyRef: string
  }
  export type GitlabSCMDTO = SourceCodeManagerDTO & {
    authentication: GitlabAuthentication
  }
  export type GitlabSshCredentials = GitlabCredentialsDTO & {
    sshKeyRef: string
  }
  export type GitlabTokenSpec = GitlabApiAccessSpecDTO & {
    tokenRef: string
  }
  export type GitlabUsernamePassword = GitlabHttpCredentialsSpecDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export type GitlabUsernameToken = GitlabHttpCredentialsSpecDTO & {
    tokenRef: string
    username?: string
    usernameRef?: string
  }
  export type HarnessApprovalStepInfo = StepSpecType & {
    approvalMessage: string
    approverInputs?: ApproverInputInfo[]
    approvers: Approvers
    includePipelineExecutionHistory: boolean
  }
  export interface HealthDeploymentDashboard {
    healthDeploymentInfo?: HealthDeploymentInfo
  }
  export interface HealthDeploymentInfo {
    failure?: DeploymentInfo
    success?: DeploymentInfo
    total?: TotalDeploymentInfo
  }
  export type HelmChartManifest = ManifestAttributes & {
    chartName?: string
    chartVersion?: string
    commandFlags?: HelmManifestCommandFlag[]
    helmVersion?: 'V2' | 'V3'
    metadata?: string
    skipResourceVersioning?: boolean
    store?: StoreConfigWrapper
  }
  export interface HelmManifestCommandFlag {
    commandType: 'Fetch' | 'Version' | 'Template' | 'Pull'
    flag?: string
  }
  export interface HoldingScope {
    nodeSetupId: string
    scope: string
  }
  export interface HttpHeaderConfig {
    key?: string
    value?: string
  }
  export interface HttpHelmAuthCredentialsDTO {
    [key: string]: any
  }
  export interface HttpHelmAuthenticationDTO {
    spec?: HttpHelmAuthCredentialsDTO
    type: 'UsernamePassword' | 'Anonymous'
  }
  export type HttpHelmConnectorDTO = ConnectorConfigDTO & {
    auth?: HttpHelmAuthenticationDTO
    delegateSelectors?: string[]
    helmRepoUrl: string
  }
  export type HttpHelmUsernamePasswordDTO = HttpHelmAuthCredentialsDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export type HttpStateExecutionData = DelegateResponseData & {
    assertionStatement?: string
    assertionStatus?: string
    delegateMetaInfo?: DelegateMetaInfo
    document?: Document
    element?: ContextElement
    endTs?: number
    errorMsg?: string
    executionDetails?: {
      [key: string]: ExecutionDataValue
    }
    executionSummary?: {
      [key: string]: ExecutionDataValue
    }
    header?: string
    headers?: KeyValuePair[]
    httpMethod?: string
    httpResponseBody?: string
    httpResponseCode?: number
    httpUrl?: string
    startTs?: number
    stateName?: string
    stateParams?: {
      [key: string]: {
        [key: string]: any
      }
    }
    stateType?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    templateVariable?: {
      [key: string]: {
        [key: string]: any
      }
    }
    useProxy?: boolean
    waitInterval?: number
    warningMessage?: string
  }
  export type HttpStepInfo = StepSpecType & {
    assertion?: string
    delegateSelectors?: string[]
    headers?: HttpHeaderConfig[]
    method: string
    outputVariables?: NGVariable[]
    requestBody?: string
    url: string
  }
  export type HttpStoreConfig = StoreConfig & {
    connectorRef?: string
    metadata?: string
  }
  export type IdentifierRef = EntityReference & {
    isDefault?: boolean
    metadata?: {
      [key: string]: string
    }
    scope?: 'account' | 'org' | 'project' | 'unknown'
  }
  export type IgnoreFailureActionConfig = FailureStrategyActionConfig & {
    type: 'Ignore'
  }
  export interface InfraExecutionSummary {
    identifier?: string
    name?: string
    type?: string
  }
  export interface InfraOverrides {
    environment?: EnvironmentYaml
    infrastructureDefinition?: InfrastructureDef
  }
  export interface InfraUseFromStage {
    overrides?: InfraOverrides
    stage: string
  }
  export interface Infrastructure {
    [key: string]: any
  }
  export interface InfrastructureDef {
    provisioner?: ExecutionElementConfig
    spec: Infrastructure
    type: 'KubernetesDirect' | 'KubernetesGcp'
  }
  export interface InfrastructureDetails {
    [key: string]: any
  }
  export type InlineTerraformBackendConfigSpec = TerraformBackendConfigSpec & {
    content?: string
  }
  export type InlineTerraformVarFileSpec = TerraformVarFileSpec & {
    content?: string
  }
  export type InputSetReference = EntityReference & {
    isDefault?: boolean
    pipelineIdentifier?: string
  }
  export interface InputSetValidator {
    parameters?: string
    validatorType?: 'ALLOWED_VALUES' | 'REGEX'
  }
  export interface InstanceCountDetailsByEnvTypeAndServiceId {
    instanceCountDetailsByEnvTypeBaseMap?: {
      [key: string]: InstanceCountDetailsByEnvTypeBase
    }
  }
  export interface InstanceCountDetailsByEnvTypeBase {
    nonProdInstances?: number
    prodInstances?: number
    totalInstances?: number
  }
  export interface InstanceDetailsByBuildId {
    buildId?: string
    instances?: InstanceDetailsDTO[]
  }
  export interface InstanceDetailsDTO {
    artifactName?: string
    connectorRef?: string
    deployedAt?: number
    deployedById?: string
    deployedByName?: string
    infrastructureDetails?: InfrastructureDetails
    pipelineExecutionName?: string
    podName?: string
    terraformInstance?: string
  }
  export interface InstanceSelectionBase {
    [key: string]: any
  }
  export interface InstanceSelectionWrapper {
    spec?: InstanceSelectionBase
    type?: 'Count' | 'Percentage'
  }
  export interface InstancesByBuildIdList {
    instancesByBuildIdList?: InstanceDetailsByBuildId[]
  }
  export interface Invite {
    accountIdentifier: string
    approved?: boolean
    email: string
    id: string
    inviteType: 'USER_INITIATED_INVITE' | 'ADMIN_INITIATED_INVITE'
    name: string
    orgIdentifier?: string
    projectIdentifier?: string
    roleBindings: RoleBinding[]
  }
  export type JexlCriteriaSpec = CriteriaSpec & {
    expression: string
  }
  export type JiraApprovalStepInfo = StepSpecType & {
    approvalCriteria: CriteriaSpecWrapper
    connectorRef: string
    delegateSelectors?: string[]
    issueKey: string
    rejectionCriteria?: CriteriaSpecWrapper
  }
  export type JiraConnector = ConnectorConfigDTO & {
    delegateSelectors?: string[]
    jiraUrl: string
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export type JiraCreateStepInfo = StepSpecType & {
    connectorRef: string
    delegateSelectors?: string[]
    fields?: JiraField[]
    issueType: string
    projectKey: string
  }
  export interface JiraField {
    name?: string
    value: string
  }
  export interface JiraFieldAllowedValueNG {
    id?: string
    name?: string
    value?: string
  }
  export interface JiraFieldNG {
    allowedValues: JiraFieldAllowedValueNG[]
    custom?: boolean
    key: string
    name: string
    required?: boolean
    schema: JiraFieldSchemaNG
  }
  export interface JiraFieldSchemaNG {
    array?: boolean
    customType?: string
    type: 'string' | 'number' | 'date' | 'datetime' | 'timetracking' | 'option'
    typeStr: string
  }
  export interface JiraIssueCreateMetadataNG {
    projects?: {
      [key: string]: JiraProjectNG
    }
  }
  export interface JiraIssueTypeNG {
    description?: string
    fields: {
      [key: string]: JiraFieldNG
    }
    id: string
    name: string
    statuses: JiraStatusNG[]
    subTask?: boolean
  }
  export interface JiraIssueUpdateMetadataNG {
    fields: {
      [key: string]: JiraFieldNG
    }
  }
  export interface JiraProjectBasicNG {
    id: string
    key: string
    name: string
  }
  export interface JiraProjectNG {
    id: string
    issuetypes: {
      [key: string]: JiraIssueTypeNG
    }
    key: string
    name: string
  }
  export interface JiraStatusCategoryNG {
    id: number
    key: string
    name: string
  }
  export interface JiraStatusNG {
    id: string
    name: string
    statusCategory?: JiraStatusCategoryNG
  }
  export type JiraUpdateStepInfo = StepSpecType & {
    connectorRef: string
    delegateSelectors?: string[]
    fields?: JiraField[]
    issueKey: string
    transitionTo?: TransitionTo
  }
  export interface JsonNode {
    array?: boolean
    bigDecimal?: boolean
    bigInteger?: boolean
    binary?: boolean
    boolean?: boolean
    containerNode?: boolean
    double?: boolean
    float?: boolean
    floatingPointNumber?: boolean
    int?: boolean
    integralNumber?: boolean
    long?: boolean
    missingNode?: boolean
    nodeType?: 'ARRAY' | 'BINARY' | 'BOOLEAN' | 'MISSING' | 'NULL' | 'NUMBER' | 'OBJECT' | 'POJO' | 'STRING'
    null?: boolean
    number?: boolean
    object?: boolean
    pojo?: boolean
    short?: boolean
    textual?: boolean
    valueNode?: boolean
  }
  export type K8SDirectInfrastructure = Infrastructure & {
    connectorRef: string
    namespace: string
    releaseName: string
  }
  export type K8sApplyStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    filePaths?: string[]
    skipDryRun?: boolean
    skipSteadyStateCheck?: boolean
  }
  export type K8sBGSwapServicesStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    skipDryRun?: boolean
  }
  export type K8sBlueGreenStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    skipDryRun?: boolean
  }
  export type K8sCanaryDeleteStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    skipDryRun?: boolean
  }
  export type K8sCanaryStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    instanceSelection: InstanceSelectionWrapper
    skipDryRun?: boolean
  }
  export type K8sDeleteStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    deleteResources: DeleteResourcesWrapper
    skipDryRun?: boolean
  }
  export type K8sGcpInfrastructure = Infrastructure & {
    cluster: string
    connectorRef: string
    metadata?: string
    namespace: string
    releaseName: string
  }
  export type K8sInfrastructureDetails = InfrastructureDetails & {
    namespace?: string
    releaseName?: string
  }
  export type K8sManifest = ManifestAttributes & {
    metadata?: string
    skipResourceVersioning?: ParameterFieldBoolean
    store?: StoreConfigWrapper
  }
  export type K8sRollingRollbackStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    skipDryRun?: boolean
  }
  export type K8sRollingStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    skipDryRun?: boolean
  }
  export type K8sScaleStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    instanceSelection: InstanceSelectionWrapper
    skipDryRun?: boolean
    skipSteadyStateCheck?: boolean
    workload?: string
  }
  export type KerberosConfigDTO = BaseSSHSpecDTO & {
    principal: string
    realm: string
    spec?: TGTGenerationSpecDTO
    tgtGenerationMethod?: 'KeyTabFilePath' | 'Password'
  }
  export interface KeyValuePair {
    key?: string
    value?: string
  }
  export type KeyValuesCriteriaSpec = CriteriaSpec & {
    conditions: Condition[]
    matchAnyCondition?: boolean
  }
  export interface KubernetesAuthCredentialDTO {
    [key: string]: any
  }
  export interface KubernetesAuthDTO {
    spec: KubernetesAuthCredentialDTO
    type: 'UsernamePassword' | 'ClientKeyCert' | 'ServiceAccount' | 'OpenIdConnect'
  }
  export type KubernetesClientKeyCertDTO = KubernetesAuthCredentialDTO & {
    caCertRef?: string
    clientCertRef: string
    clientKeyAlgo?: string
    clientKeyPassphraseRef?: string
    clientKeyRef: string
  }
  export type KubernetesClusterConfigDTO = ConnectorConfigDTO & {
    credential: KubernetesCredentialDTO
    delegateSelectors?: string[]
  }
  export type KubernetesClusterDetailsDTO = KubernetesCredentialSpecDTO & {
    auth: KubernetesAuthDTO
    masterUrl: string
  }
  export interface KubernetesCredentialDTO {
    spec?: KubernetesCredentialSpecDTO
    type: 'InheritFromDelegate' | 'ManualConfig'
  }
  export interface KubernetesCredentialSpecDTO {
    [key: string]: any
  }
  export type KubernetesOpenIdConnectDTO = KubernetesAuthCredentialDTO & {
    oidcClientIdRef: string
    oidcIssuerUrl?: string
    oidcPasswordRef: string
    oidcScopes?: string
    oidcSecretRef?: string
    oidcUsername?: string
    oidcUsernameRef?: string
  }
  export type KubernetesServiceAccountDTO = KubernetesAuthCredentialDTO & {
    serviceAccountTokenRef: string
  }
  export type KubernetesServiceSpec = ServiceSpec & {
    metadata?: string
  }
  export type KubernetesUserNamePasswordDTO = KubernetesAuthCredentialDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export type KustomizeManifest = ManifestAttributes & {
    metadata?: string
    pluginPath?: string
    skipResourceVersioning?: ParameterFieldBoolean
    store?: StoreConfigWrapper
  }
  export type LDAPSettings = NGAuthSettings & {
    connectionSettings: LdapConnectionSettings
    groupSettingsList?: LdapGroupSettings[]
    identifier: string
    userSettingsList?: LdapUserSettings[]
  }
  export interface LastWorkloadInfo {
    deploymentType?: string
    endTime?: number
    startTime?: number
    status?: string
  }
  export interface LdapConnectionSettings {
    bindDN?: string
    bindPassword?: string
    connectTimeout?: number
    host: string
    maxReferralHops?: number
    port?: number
    referralsEnabled?: boolean
    responseTimeout?: number
    sslEnabled?: boolean
  }
  export interface LdapGroupSettings {
    baseDN?: string
    descriptionAttr?: string
    nameAttr?: string
    referencedUserAttr?: string
    searchFilter?: string
    userMembershipAttr?: string
  }
  export type LdapSettings = SSOSettings & {
    connectionSettings: LdapConnectionSettings
    groupSettings?: LdapGroupSettings
    groupSettingsList?: LdapGroupSettings[]
    userSettings?: LdapUserSettings
    userSettingsList?: LdapUserSettings[]
  }
  export interface LdapUserSettings {
    baseDN?: string
    displayNameAttr?: string
    emailAttr?: string
    groupMembershipAttr?: string
    searchFilter?: string
  }
  export interface LicenseInfo {
    accountStatus?: string
    accountType?: string
    expiryTime?: number
    licenseUnits?: number
  }
  export interface LicensesWithSummaryDTO {
    edition?: 'FREE' | 'TEAM' | 'ENTERPRISE'
    licenseType?: 'TRIAL' | 'PAID'
    maxExpiryTime?: number
    moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
  }
  export interface Limits {
    cpu?: string
    memory?: string
  }
  export type LocalConnectorDTO = ConnectorConfigDTO & {
    default?: boolean
  }
  export interface LoginSettings {
    accountId: string
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    passwordExpirationPolicy: PasswordExpirationPolicy
    passwordStrengthPolicy: PasswordStrengthPolicy
    userLockoutPolicy: UserLockoutPolicy
    uuid: string
  }
  export interface LoginTypeResponse {
    authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
    defaultExperience?: 'NG' | 'CG'
    oauthEnabled?: boolean
    showCaptcha?: boolean
    ssorequest?: SSORequest
  }
  export interface ManifestAttributes {
    [key: string]: any
  }
  export interface ManifestConfig {
    identifier: string
    spec: ManifestAttributes
    type: 'HelmChart' | 'K8sManifest' | 'Kustomize' | 'OpenshiftParam' | 'OpenshiftTemplate' | 'Values'
  }
  export interface ManifestConfigWrapper {
    manifest?: ManifestConfig
  }
  export interface ManifestOverrideSetWrapper {
    overrideSet?: ManifestOverrideSets
  }
  export interface ManifestOverrideSets {
    identifier?: string
    manifests?: ManifestConfigWrapper[]
  }
  export interface ManualFailureSpecConfig {
    onTimeout: OnTimeoutConfig
    timeout: string
  }
  export type ManualInterventionFailureActionConfig = FailureStrategyActionConfig & {
    spec: ManualFailureSpecConfig
    type: 'ManualIntervention'
  }
  export type MarkAsSuccessFailureActionConfig = FailureStrategyActionConfig & {
    type: 'MarkAsSuccess'
  }
  export type MicrosoftTeamsConfig = NotificationSettingConfig & {
    microsoftTeamsWebhookUrl?: string
  }
  export type MicrosoftTeamsConfigDTO = NotificationSettingConfigDTO & {
    microsoftTeamsWebhookUrl: string
  }
  export interface ModuleLicenseDTO {
    accountIdentifier?: string
    createdAt?: number
    edition?: 'FREE' | 'TEAM' | 'ENTERPRISE'
    expiryTime?: number
    id?: string
    lastModifiedAt?: number
    licenseType?: 'TRIAL' | 'PAID'
    moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
    startTime?: number
    status?: 'ACTIVE' | 'DELETED' | 'EXPIRED'
  }
  export interface NGAuthSettings {
    settingsType?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
  }
  export interface NGProperties {
    ci?: CIProperties
  }
  export interface NGTag {
    key: string
    value: string
  }
  export interface NGVariable {
    description?: string
    metadata?: string
    name?: string
    required?: boolean
    type?: 'String' | 'Number' | 'Secret'
  }
  export interface NGVariableOverrideSetWrapper {
    overrideSet?: NGVariableOverrideSets
  }
  export interface NGVariableOverrideSets {
    identifier?: string
    variables?: NGVariable[]
  }
  export interface NamedNodeMap {
    length?: number
  }
  export type NativeHelmServiceSpec = ServiceSpec & {
    metadata?: string
  }
  export type NewRelicConnectorDTO = ConnectorConfigDTO & {
    apiKeyRef: string
    delegateSelectors?: string[]
    newRelicAccountId: string
    url: string
  }
  export interface NexusAuthCredentials {
    [key: string]: any
  }
  export interface NexusAuthentication {
    spec?: NexusAuthCredentials
    type: 'UsernamePassword' | 'Anonymous'
  }
  export type NexusConnector = ConnectorConfigDTO & {
    auth?: NexusAuthentication
    delegateSelectors?: string[]
    nexusServerUrl: string
    version: string
  }
  export type NexusUsernamePasswordAuth = NexusAuthCredentials & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export interface Node {
    attributes?: NamedNodeMap
    baseURI?: string
    childNodes?: NodeList
    firstChild?: Node
    lastChild?: Node
    localName?: string
    namespaceURI?: string
    nextSibling?: Node
    nodeName?: string
    nodeType?: number
    nodeValue?: string
    ownerDocument?: Document
    parentNode?: Node
    prefix?: string
    previousSibling?: Node
    textContent?: string
  }
  export interface NodeList {
    length?: number
  }
  export interface NotificationChannelWrapper {
    spec?: PmsNotificationChannel
    type?: string
  }
  export interface NotificationRules {
    enabled?: boolean
    name?: string
    notificationMethod?: NotificationChannelWrapper
    pipelineEvents?: PipelineEvent[]
  }
  export interface NotificationSettingConfig {
    type: 'EMAIL' | 'SLACK' | 'PAGERDUTY' | 'MSTEAMS'
  }
  export interface NotificationSettingConfigDTO {
    type?: 'EMAIL' | 'SLACK' | 'PAGERDUTY' | 'MSTEAMS'
  }
  export interface NotificationSettings {
    emailAddresses: string[]
    microsoftTeamsWebhookUrl?: string
    pagerDutyIntegrationKey?: string
    sendMailToNewMembers?: boolean
    slackConfig: SlackNotificationSetting
    useIndividualEmails?: boolean
  }
  export type NumberNGVariable = NGVariable & {
    default?: number
    name?: string
    type?: 'Number'
    value: number
  }
  export interface OAuthSettings {
    allowedProviders?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
    filter?: string
    settingsType?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
  }
  export interface OAuthSignupDTO {
    email?: string
    name?: string
    utmInfo?: UtmInfo
  }
  export type OauthSettings = SSOSettings & {
    allowedProviders?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
    filter?: string
  }
  export interface OnFailureConfig {
    action: FailureStrategyActionConfig
    errors: (
      | 'Unknown'
      | 'AllErrors'
      | 'Authentication'
      | 'Connectivity'
      | 'Timeout'
      | 'Authorization'
      | 'Verification'
      | 'DelegateProvisioning'
    )[]
  }
  export interface OnRetryFailureConfig {
    action?: FailureStrategyActionConfig
  }
  export interface OnTimeoutConfig {
    action?: FailureStrategyActionConfig
  }
  export type OpenshiftManifest = ManifestAttributes & {
    metadata?: string
    skipResourceVersioning?: ParameterFieldBoolean
    store?: StoreConfigWrapper
  }
  export type OpenshiftParamManifest = ManifestAttributes & {
    metadata?: string
    store?: StoreConfigWrapper
  }
  export interface Organization {
    description?: string
    identifier: string
    name: string
    tags?: {
      [key: string]: string
    }
  }
  export interface OrganizationAggregateDTO {
    admins?: UserMetadataDTO[]
    collaborators?: UserMetadataDTO[]
    connectorsCount?: number
    delegatesCount?: number
    organizationResponse: OrganizationResponse
    projectsCount?: number
    secretsCount?: number
    templatesCount?: number
  }
  export interface OrganizationRequest {
    organization: Organization
  }
  export interface OrganizationResponse {
    createdAt?: number
    harnessManaged?: boolean
    lastModifiedAt?: number
    organization: Organization
  }
  export type PRBuildSpec = BuildSpec & {
    number: string
  }
  export interface Page {
    content?: {
      [key: string]: any
    }[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageActivity {
    content?: Activity[]
    empty?: boolean
    first?: boolean
    last?: boolean
    number?: number
    numberOfElements?: number
    pageable?: Pageable
    size?: number
    sort?: Sort
    totalElements?: number
    totalPages?: number
  }
  export interface PageActivitySummary {
    content?: ActivitySummary[]
    empty?: boolean
    first?: boolean
    last?: boolean
    number?: number
    numberOfElements?: number
    pageable?: Pageable
    size?: number
    sort?: Sort
    totalElements?: number
    totalPages?: number
  }
  export interface PageApiKeyAggregateDTO {
    content?: ApiKeyAggregateDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageConnectorResponse {
    content?: ConnectorResponse[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageEntitySetupUsageDTO {
    content?: EntitySetupUsageDTO[]
    empty?: boolean
    first?: boolean
    last?: boolean
    number?: number
    numberOfElements?: number
    pageable?: Pageable
    size?: number
    sort?: Sort
    totalElements?: number
    totalPages?: number
  }
  export interface PageEnvironmentResponse {
    content?: EnvironmentResponse[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageEnvironmentResponseDTO {
    content?: EnvironmentResponseDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageFilterDTO {
    content?: FilterDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageGitBranchDTO {
    content?: GitBranchDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageGitSyncEntityListDTO {
    content?: GitSyncEntityListDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageInvite {
    content?: Invite[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageOrganizationAggregateDTO {
    content?: OrganizationAggregateDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageOrganizationResponse {
    content?: OrganizationResponse[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageProject {
    content?: Project[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageProjectAggregateDTO {
    content?: ProjectAggregateDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageProjectResponse {
    content?: ProjectResponse[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageRoleAssignmentResponse {
    content?: RoleAssignmentResponse[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageSecretResponseWrapper {
    content?: SecretResponseWrapper[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageServiceAccountAggregateDTO {
    content?: ServiceAccountAggregateDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageServiceResponse {
    content?: ServiceResponse[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageServiceResponseDTO {
    content?: ServiceResponseDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageTokenAggregateDTO {
    content?: TokenAggregateDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageUserAggregate {
    content?: UserAggregate[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageUserGroupAggregateDTO {
    content?: UserGroupAggregateDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageUserGroupDTO {
    content?: UserGroupDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageUserMetadataDTO {
    content?: UserMetadataDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface Pageable {
    offset?: number
    pageNumber?: number
    pageSize?: number
    paged?: boolean
    sort?: Sort
    unpaged?: boolean
  }
  export type PagerDutyConfig = NotificationSettingConfig & {
    pagerDutyKey?: string
  }
  export type PagerDutyConfigDTO = NotificationSettingConfigDTO & {
    pagerDutyKey: string
  }
  export type ParallelStageElementConfig = StageElementWrapperConfig[]
  export type ParallelStepElementConfig = ExecutionWrapperConfig[]
  export interface ParameterField {
    expression?: boolean
    expressionValue?: string
    inputSetValidator?: InputSetValidator
    jsonResponseField?: boolean
    responseField?: string
    typeString?: boolean
    value?: {
      [key: string]: any
    }
  }
  export interface ParameterFieldBoolean {
    expression?: boolean
    expressionValue?: string
    inputSetValidator?: InputSetValidator
    jsonResponseField?: boolean
    responseField?: string
    typeString?: boolean
    value?: boolean
  }
  export interface ParameterFieldString {
    expression?: boolean
    expressionValue?: string
    inputSetValidator?: InputSetValidator
    jsonResponseField?: boolean
    responseField?: string
    typeString?: boolean
    value?: string
  }
  export interface PartialSchemaDTO {
    moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
    namespace?: string
    nodeName?: string
    nodeType?: string
    schema?: JsonNode
  }
  export interface PasswordChangeDTO {
    currentPassword?: string
    newPassword?: string
  }
  export interface PasswordExpirationPolicy {
    daysBeforePasswordExpires?: number
    daysBeforeUserNotifiedOfPasswordExpiration?: number
    enabled?: boolean
  }
  export interface PasswordStrengthPolicy {
    enabled?: boolean
    minNumberOfCharacters?: number
    minNumberOfDigits?: number
    minNumberOfLowercaseCharacters?: number
    minNumberOfSpecialCharacters?: number
    minNumberOfUppercaseCharacters?: number
  }
  export interface PatchInstruction {
    type?:
      | 'SetFeatureFlagState'
      | 'AddTargetsToVariationTargetMap'
      | 'RemoveTargetsToVariationTargetMap'
      | 'AddSegmentsToVariationTargetMap'
      | 'RemoveSegmentsToVariationTargetMap'
  }
  export type PercentageInstanceSelection = InstanceSelectionBase & {
    percentage?: ParameterFieldString
  }
  export interface PipelineConfig {
    pipeline?: PipelineInfoConfig
  }
  export interface PipelineEvent {
    forStages?: string[]
    type?:
      | 'AllEvents'
      | 'PipelineStart'
      | 'PipelineSuccess'
      | 'PipelineFailed'
      | 'PipelineEnd'
      | 'PipelinePaused'
      | 'StageSuccess'
      | 'StageFailed'
      | 'StageStart'
      | 'StepFailed'
  }
  export type PipelineFilterProperties = FilterProperties & {
    description?: string
    moduleProperties?: {
      [key: string]: {
        [key: string]: any
      }
    }
    name?: string
    pipelineIdentifiers?: string[]
    pipelineTags?: NGTag[]
  }
  export interface PipelineInfoConfig {
    description?: string
    flowControl?: FlowControlConfig
    identifier: string
    name: string
    notificationRules?: NotificationRules[]
    orgIdentifier?: string
    projectIdentifier?: string
    properties?: NGProperties
    stages?: StageElementWrapperConfig[]
    tags?: {
      [key: string]: string
    }
    timeout?: string
    variables?: NGVariable[]
  }
  export interface PipelineInfrastructure {
    allowSimultaneousDeployments?: boolean
    environment?: EnvironmentYaml
    environmentRef?: string
    infrastructureDefinition?: InfrastructureDef
    infrastructureKey?: string
    useFromStage?: InfraUseFromStage
  }
  export type PmsEmailChannel = PmsNotificationChannel & {
    recipients?: string[]
    userGroups?: string[]
  }
  export type PmsMSTeamChannel = PmsNotificationChannel & {
    msTeamKeys?: string[]
    userGroups?: string[]
  }
  export interface PmsNotificationChannel {
    [key: string]: any
  }
  export type PmsPagerDutyChannel = PmsNotificationChannel & {
    integrationKey?: string
    userGroups?: string[]
  }
  export type PmsSlackChannel = PmsNotificationChannel & {
    userGroups?: string[]
    webhookUrl?: string
  }
  export interface PrimaryArtifact {
    spec: ArtifactConfig
    type: 'DockerRegistry' | 'Gcr' | 'Ecr'
  }
  export interface Principal {
    identifier: string
    type: 'USER' | 'USER_GROUP' | 'SERVICE' | 'API_KEY' | 'SERVICE_ACCOUNT'
  }
  export interface Project {
    color?: string
    description?: string
    identifier: string
    modules?: ('CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE')[]
    name: string
    orgIdentifier?: string
    tags?: {
      [key: string]: string
    }
  }
  export interface ProjectAggregateDTO {
    admins?: UserMetadataDTO[]
    collaborators?: UserMetadataDTO[]
    harnessManagedOrg?: boolean
    organization?: Organization
    projectResponse: ProjectResponse
  }
  export interface ProjectRequest {
    project: Project
  }
  export interface ProjectResponse {
    createdAt?: number
    lastModifiedAt?: number
    project: Project
  }
  export type PrometheusConnectorDTO = ConnectorConfigDTO & {
    delegateSelectors?: string[]
    url: string
  }
  export type RemoteTerraformVarFileSpec = TerraformVarFileSpec & {
    store: StoreConfigWrapper
  }
  export type RemoveSegmentToVariationTargetMapYaml = PatchInstruction & {
    identifier: string
    spec: RemoveSegmentToVariationTargetMapYamlSpec
    type: 'RemoveSegmentToVariationTargetMap'
  }
  export interface RemoveSegmentToVariationTargetMapYamlSpec {
    segments: string[]
    variation: string
  }
  export type RemoveTargetsToVariationTargetMapYaml = PatchInstruction & {
    identifier: string
    spec: RemoveTargetsToVariationTargetMapYamlSpec
    type: 'RemoveTargetsToVariationTargetMap'
  }
  export interface RemoveTargetsToVariationTargetMapYamlSpec {
    targets: string[]
    variation: string
  }
  export type ResourceConstraintStepInfo = StepSpecType & {
    acquireMode: 'ENSURE' | 'ACCUMULATE'
    holdingScope: HoldingScope
    name: string
    permits: number
    resourceUnit: string
  }
  export interface ResourceDTO {
    identifier: string
    labels?: {
      [key: string]: string
    }
    type: string
  }
  export interface ResourceScopeDTO {
    accountIdentifier: string
    labels?: {
      [key: string]: string
    }
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface Response {
    correlationId?: string
    data?: {
      [key: string]: any
    }
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseAccountDTO {
    correlationId?: string
    data?: AccountDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseAccountLicenseDTO {
    correlationId?: string
    data?: AccountLicenseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseAccountResourcesDTO {
    correlationId?: string
    data?: AccountResourcesDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseActiveServiceInstanceSummary {
    correlationId?: string
    data?: ActiveServiceInstanceSummary
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseActivity {
    correlationId?: string
    data?: Activity
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseApiKeyAggregateDTO {
    correlationId?: string
    data?: ApiKeyAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseApiKeyDTO {
    correlationId?: string
    data?: ApiKeyDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseBoolean {
    correlationId?: string
    data?: boolean
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseCDPipelineModuleInfo {
    correlationId?: string
    data?: CDPipelineModuleInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseCDStageModuleInfo {
    correlationId?: string
    data?: CDStageModuleInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseConnectivityCheckSummary {
    correlationId?: string
    data?: ConnectivityCheckSummary
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseConnectorCatalogueResponse {
    correlationId?: string
    data?: ConnectorCatalogueResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseConnectorResponse {
    correlationId?: string
    data?: ConnectorResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseConnectorStatistics {
    correlationId?: string
    data?: ConnectorStatistics
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseConnectorValidationResult {
    correlationId?: string
    data?: ConnectorValidationResult
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseCreatePRDTO {
    correlationId?: string
    data?: CreatePRDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseDashboardExecutionStatusInfo {
    correlationId?: string
    data?: DashboardExecutionStatusInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseDashboardWorkloadDeployment {
    correlationId?: string
    data?: DashboardWorkloadDeployment
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseDeploymentsInfo {
    correlationId?: string
    data?: DeploymentsInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseDockerBuildDetailsDTO {
    correlationId?: string
    data?: DockerBuildDetailsDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseDockerResponseDTO {
    correlationId?: string
    data?: DockerResponseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseEcrBuildDetailsDTO {
    correlationId?: string
    data?: EcrBuildDetailsDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseEcrListImagesDTO {
    correlationId?: string
    data?: EcrListImagesDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseEcrResponseDTO {
    correlationId?: string
    data?: EcrResponseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseEnvBuildIdAndInstanceCountInfoList {
    correlationId?: string
    data?: EnvBuildIdAndInstanceCountInfoList
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseEnvironmentResponse {
    correlationId?: string
    data?: EnvironmentResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseEnvironmentResponseDTO {
    correlationId?: string
    data?: EnvironmentResponseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseExecutionDeploymentInfo {
    correlationId?: string
    data?: ExecutionDeploymentInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseFieldValues {
    correlationId?: string
    data?: FieldValues
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseFilterDTO {
    correlationId?: string
    data?: FilterDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseGcpResponseDTO {
    correlationId?: string
    data?: GcpResponseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseGcrBuildDetailsDTO {
    correlationId?: string
    data?: GcrBuildDetailsDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseGcrResponseDTO {
    correlationId?: string
    data?: GcrResponseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseGitBranchListDTO {
    correlationId?: string
    data?: GitBranchListDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseGitFileContent {
    correlationId?: string
    data?: GitFileContent
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseGitSyncRepoFilesList {
    correlationId?: string
    data?: GitSyncRepoFilesList
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseGitSyncSettingsDTO {
    correlationId?: string
    data?: GitSyncSettingsDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseHealthDeploymentDashboard {
    correlationId?: string
    data?: HealthDeploymentDashboard
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseInstanceCountDetailsByEnvTypeAndServiceId {
    correlationId?: string
    data?: InstanceCountDetailsByEnvTypeAndServiceId
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseInstancesByBuildIdList {
    correlationId?: string
    data?: InstancesByBuildIdList
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseInvite {
    correlationId?: string
    data?: Invite
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseJiraIssueCreateMetadataNG {
    correlationId?: string
    data?: JiraIssueCreateMetadataNG
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseJiraIssueUpdateMetadataNG {
    correlationId?: string
    data?: JiraIssueUpdateMetadataNG
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseJsonNode {
    correlationId?: string
    data?: JsonNode
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseLicensesWithSummaryDTO {
    correlationId?: string
    data?: LicensesWithSummaryDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListApiKeyDTO {
    correlationId?: string
    data?: ApiKeyDTO[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListConnectorResponse {
    correlationId?: string
    data?: ConnectorResponse[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListEnvironmentResponse {
    correlationId?: string
    data?: EnvironmentResponse[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListExecutionStatus {
    correlationId?: string
    data?: (
      | 'Running'
      | 'AsyncWaiting'
      | 'TaskWaiting'
      | 'TimedWaiting'
      | 'Failed'
      | 'Errored'
      | 'IgnoreFailed'
      | 'NotStarted'
      | 'Expired'
      | 'Aborted'
      | 'Discontinuing'
      | 'Queued'
      | 'Paused'
      | 'ResourceWaiting'
      | 'InterventionWaiting'
      | 'ApprovalWaiting'
      | 'Success'
      | 'Suspended'
      | 'Skipped'
      | 'Pausing'
      | 'ApprovalRejected'
      | 'NOT_STARTED'
      | 'INTERVENTION_WAITING'
      | 'APPROVAL_WAITING'
      | 'APPROVAL_REJECTED'
      | 'WAITING'
    )[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListGitSyncEntityListDTO {
    correlationId?: string
    data?: GitSyncEntityListDTO[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListInviteOperationResponse {
    correlationId?: string
    data?: (
      | 'ACCOUNT_INVITE_ACCEPTED_NEED_PASSWORD'
      | 'ACCOUNT_INVITE_ACCEPTED'
      | 'USER_INVITED_SUCCESSFULLY'
      | 'USER_ALREADY_ADDED'
      | 'USER_ALREADY_INVITED'
      | 'FAIL'
      | 'INVITE_EXPIRED'
      | 'INVITE_INVALID'
    )[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListJiraProjectBasicNG {
    correlationId?: string
    data?: JiraProjectBasicNG[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListJiraStatusNG {
    correlationId?: string
    data?: JiraStatusNG[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListModuleLicenseDTO {
    correlationId?: string
    data?: ModuleLicenseDTO[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListRoleAssignmentResponse {
    correlationId?: string
    data?: RoleAssignmentResponse[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListServiceAccountDTO {
    correlationId?: string
    data?: ServiceAccountDTO[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListServiceDefinitionType {
    correlationId?: string
    data?: 'Kubernetes'[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListServiceResponse {
    correlationId?: string
    data?: ServiceResponse[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListSourceCodeManagerDTO {
    correlationId?: string
    data?: SourceCodeManagerDTO[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListString {
    correlationId?: string
    data?: string[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListUserGroupAggregateDTO {
    correlationId?: string
    data?: UserGroupAggregateDTO[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListUserGroupDTO {
    correlationId?: string
    data?: UserGroupDTO[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseMapServiceDefinitionTypeListExecutionStrategyType {
    correlationId?: string
    data?: {
      [key: string]: ('Basic' | 'Canary' | 'BlueGreen' | 'Rolling' | 'Default')[]
    }
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseMapStringString {
    correlationId?: string
    data?: {
      [key: string]: string
    }
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseMessage {
    code?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'REVOKED_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_CREDENTIALS_THIRD_PARTY'
      | 'INVALID_KEY'
      | 'INVALID_CONNECTOR_TYPE'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'SCHEMA_VALIDATION_FAILED'
      | 'FILTER_CREATION_ERROR'
      | 'INVALID_YAML_ERROR'
      | 'PLAN_CREATION_ERROR'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'EXPIRE_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'IMAGE_NOT_FOUND'
      | 'ILLEGAL_ARGUMENT'
      | 'IMAGE_TAG_NOT_FOUND'
      | 'DELEGATE_NOT_AVAILABLE'
      | 'INVALID_YAML_PAYLOAD'
      | 'AUTHENTICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'SECRET_NOT_FOUND'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'FILE_NOT_FOUND_ERROR'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'DATA_COLLECTION_ERROR'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'TIMESCALE_NOT_AVAILABLE'
      | 'MIGRATION_EXCEPTION'
      | 'REQUEST_PROCESSING_INTERRUPTED'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
      | 'HTTP_RESPONSE_EXCEPTION'
      | 'SCM_NOT_FOUND_ERROR'
      | 'SCM_CONFLICT_ERROR'
      | 'SCM_UNPROCESSABLE_ENTITY'
      | 'PROCESS_EXECUTION_EXCEPTION'
      | 'SCM_UNAUTHORIZED'
      | 'DATA'
      | 'CONTEXT'
      | 'PR_CREATION_ERROR'
      | 'URL_NOT_REACHABLE'
      | 'URL_NOT_PROVIDED'
      | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
      | 'ENGINE_FUNCTOR_ERROR'
      | 'JIRA_CLIENT_ERROR'
      | 'SCM_NOT_MODIFIED'
      | 'JIRA_STEP_ERROR'
      | 'BUCKET_SERVER_ERROR'
    exception?: Throwable
    failureTypes?: (
      | 'EXPIRED'
      | 'DELEGATE_PROVISIONING'
      | 'CONNECTIVITY'
      | 'AUTHENTICATION'
      | 'VERIFICATION_FAILURE'
      | 'APPLICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'TIMEOUT_ERROR'
    )[]
    level?: 'INFO' | 'ERROR'
    message?: string
  }
  export interface ResponseModuleLicenseDTO {
    correlationId?: string
    data?: ModuleLicenseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseOptionalInvite {
    correlationId?: string
    data?: Invite
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseOrganizationAggregateDTO {
    correlationId?: string
    data?: OrganizationAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseOrganizationResponse {
    correlationId?: string
    data?: OrganizationResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageActivity {
    correlationId?: string
    data?: PageActivity
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageActivitySummary {
    correlationId?: string
    data?: PageActivitySummary
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageApiKeyAggregateDTO {
    correlationId?: string
    data?: PageApiKeyAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageConnectorResponse {
    correlationId?: string
    data?: PageConnectorResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageEntitySetupUsageDTO {
    correlationId?: string
    data?: PageEntitySetupUsageDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageEnvironmentResponse {
    correlationId?: string
    data?: PageEnvironmentResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageEnvironmentResponseDTO {
    correlationId?: string
    data?: PageEnvironmentResponseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageFilterDTO {
    correlationId?: string
    data?: PageFilterDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageGitSyncEntityListDTO {
    correlationId?: string
    data?: PageGitSyncEntityListDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageInvite {
    correlationId?: string
    data?: PageInvite
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageOrganizationAggregateDTO {
    correlationId?: string
    data?: PageOrganizationAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageOrganizationResponse {
    correlationId?: string
    data?: PageOrganizationResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageProject {
    correlationId?: string
    data?: PageProject
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageProjectAggregateDTO {
    correlationId?: string
    data?: PageProjectAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageProjectResponse {
    correlationId?: string
    data?: PageProjectResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageRoleAssignmentResponse {
    correlationId?: string
    data?: PageRoleAssignmentResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageSecretResponseWrapper {
    correlationId?: string
    data?: PageSecretResponseWrapper
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageServiceAccountAggregateDTO {
    correlationId?: string
    data?: PageServiceAccountAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageServiceResponse {
    correlationId?: string
    data?: PageServiceResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageServiceResponseDTO {
    correlationId?: string
    data?: PageServiceResponseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageTokenAggregateDTO {
    correlationId?: string
    data?: PageTokenAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageUserAggregate {
    correlationId?: string
    data?: PageUserAggregate
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageUserGroupAggregateDTO {
    correlationId?: string
    data?: PageUserGroupAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageUserGroupDTO {
    correlationId?: string
    data?: PageUserGroupDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageUserMetadataDTO {
    correlationId?: string
    data?: PageUserMetadataDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePartialSchemaDTO {
    correlationId?: string
    data?: PartialSchemaDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePasswordChangeResponse {
    correlationId?: string
    data?: 'PASSWORD_CHANGED' | 'INCORRECT_CURRENT_PASSWORD' | 'PASSWORD_STRENGTH_VIOLATED'
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePipelineConfig {
    correlationId?: string
    data?: PipelineConfig
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseProjectAggregateDTO {
    correlationId?: string
    data?: ProjectAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseProjectResponse {
    correlationId?: string
    data?: ProjectResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseRoleAssignmentResponse {
    correlationId?: string
    data?: RoleAssignmentResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseSaasGitDTO {
    correlationId?: string
    data?: SaasGitDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseSecretManagerMetadataDTO {
    correlationId?: string
    data?: SecretManagerMetadataDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseSecretResponseWrapper {
    correlationId?: string
    data?: SecretResponseWrapper
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseSecretValidationResultDTO {
    correlationId?: string
    data?: SecretValidationResultDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseServiceAccountAggregateDTO {
    correlationId?: string
    data?: ServiceAccountAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseServiceAccountDTO {
    correlationId?: string
    data?: ServiceAccountDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseServiceDeploymentInfoDTO {
    correlationId?: string
    data?: ServiceDeploymentInfoDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseServiceDeploymentListInfo {
    correlationId?: string
    data?: ServiceDeploymentListInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseServiceDetailsInfoDTO {
    correlationId?: string
    data?: ServiceDetailsInfoDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseServiceResponse {
    correlationId?: string
    data?: ServiceResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseServiceResponseDTO {
    correlationId?: string
    data?: ServiceResponseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseSourceCodeManagerDTO {
    correlationId?: string
    data?: SourceCodeManagerDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseStepCategory {
    correlationId?: string
    data?: StepCategory
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseString {
    correlationId?: string
    data?: string
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseTimeValuePairListDTOEnvIdCountPair {
    correlationId?: string
    data?: TimeValuePairListDTOEnvIdCountPair
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseTimeValuePairListDTOInteger {
    correlationId?: string
    data?: TimeValuePairListDTOInteger
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseTokenDTO {
    correlationId?: string
    data?: TokenDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseTwoFactorAuthSettingsInfo {
    correlationId?: string
    data?: TwoFactorAuthSettingsInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseUserAggregate {
    correlationId?: string
    data?: UserAggregate
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseUserGroupAggregateDTO {
    correlationId?: string
    data?: UserGroupAggregateDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseUserGroupDTO {
    correlationId?: string
    data?: UserGroupDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseUserInfo {
    correlationId?: string
    data?: UserInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseYamlSnippets {
    correlationId?: string
    data?: YamlSnippets
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface RestResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: any
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAuthenticationSettingsResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AuthenticationSettingsResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseBoolean {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: boolean
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateProfileDetailsNg {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateProfileDetailsNg
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLoginSettings {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LoginSettings
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLoginTypeResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LoginTypeResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseDelegateProfileDetailsNg {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateProfileDetailsNg[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePasswordStrengthPolicy {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: PasswordStrengthPolicy
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSSOConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SSOConfig
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseUserGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UserGroup
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseUserInfo {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UserInfo
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseVerifyTokenResponseDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: VerifyTokenResponseDTO
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseVoid {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Void
    responseMessages?: ResponseMessage[]
  }
  export type RetryFailureActionConfig = FailureStrategyActionConfig & {
    spec: RetryFailureSpecConfig
    type: 'Retry'
  }
  export interface RetryFailureSpecConfig {
    onRetryFailure: OnRetryFailureConfig
    retryCount: number
    retryIntervals: string[]
  }
  export interface RoleAssignment {
    disabled?: boolean
    identifier?: string
    managed?: boolean
    principal: Principal
    resourceGroupIdentifier: string
    roleIdentifier: string
  }
  export interface RoleAssignmentFilter {
    disabledFilter?: boolean[]
    harnessManagedFilter?: boolean[]
    principalFilter?: Principal[]
    principalTypeFilter?: ('USER' | 'USER_GROUP' | 'SERVICE' | 'API_KEY' | 'SERVICE_ACCOUNT')[]
    resourceGroupFilter?: string[]
    roleFilter?: string[]
  }
  export interface RoleAssignmentMetadataDTO {
    identifier: string
    managedRole: boolean
    managedRoleAssignment: boolean
    resourceGroupIdentifier: string
    resourceGroupName: string
    roleIdentifier: string
    roleName: string
  }
  export interface RoleAssignmentResponse {
    createdAt?: number
    harnessManaged?: boolean
    lastModifiedAt?: number
    roleAssignment: RoleAssignment
    scope: ScopeDTO
  }
  export interface RoleBinding {
    managedRole: boolean
    resourceGroupIdentifier?: string
    resourceGroupName?: string
    roleIdentifier: string
    roleName: string
  }
  export type S3StoreConfig = StoreConfig & {
    bucketName?: string
    connectorRef?: string
    folderPath?: string
    metadata?: string
    region?: string
  }
  export type SAMLSettings = NGAuthSettings & {
    authorizationEnabled?: boolean
    displayName?: string
    groupMembershipAttr?: string
    identifier: string
    logoutUrl?: string
    origin: string
  }
  export interface SSHAuthDTO {
    spec: BaseSSHSpecDTO
    type: 'SSH' | 'Kerberos'
  }
  export type SSHConfigDTO = BaseSSHSpecDTO & {
    credentialType: 'Password' | 'KeyPath' | 'KeyReference'
    spec: SSHCredentialSpecDTO
  }
  export interface SSHCredentialSpecDTO {
    [key: string]: any
  }
  export type SSHKeyPathCredentialDTO = SSHCredentialSpecDTO & {
    encryptedPassphrase?: string
    keyPath: string
    userName: string
  }
  export type SSHKeyReferenceCredentialDTO = SSHCredentialSpecDTO & {
    encryptedPassphrase?: string
    key?: string
    userName: string
  }
  export type SSHKeySpecDTO = SecretSpecDTO & {
    auth: SSHAuthDTO
    port?: number
  }
  export type SSHKeyValidationMetadata = SecretValidationMetaData & {
    host: string
  }
  export type SSHPasswordCredentialDTO = SSHCredentialSpecDTO & {
    password: string
    userName: string
  }
  export interface SSOConfig {
    accountId?: string
    authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
    ssoSettings?: SSOSettings[]
  }
  export interface SSORequest {
    idpRedirectUrl?: string
    oauthProviderType?: 'AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN'
    oauthProviderTypes?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
  }
  export interface SSOSettings {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    displayName?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    nextIteration?: number
    type: 'SAML' | 'LDAP' | 'OAUTH'
    url?: string
    uuid: string
  }
  export interface SaasGitDTO {
    saasGit?: boolean
  }
  export interface SamlLinkGroupRequest {
    samlGroupName?: string
  }
  export type SamlSettings = SSOSettings & {
    accountId: string
    authorizationEnabled?: boolean
    groupMembershipAttr?: string
    logoutUrl?: string
    origin: string
  }
  export interface ScopeDTO {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface ScopingRuleDetailsNg {
    description?: string
    environmentIds?: string[]
    environmentTypeId?: string
  }
  export type ScriptStateExecutionData = DelegateResponseData & {
    activityId?: string
    delegateMetaInfo?: DelegateMetaInfo
    element?: ContextElement
    endTs?: number
    errorMsg?: string
    executionDetails?: {
      [key: string]: ExecutionDataValue
    }
    executionSummary?: {
      [key: string]: ExecutionDataValue
    }
    name?: string
    secretOutputVars?: string[]
    startTs?: number
    stateName?: string
    stateParams?: {
      [key: string]: {
        [key: string]: any
      }
    }
    stateType?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    sweepingOutputEnvVariables?: {
      [key: string]: string
    }
    templateVariable?: {
      [key: string]: {
        [key: string]: any
      }
    }
    waitInterval?: number
  }
  export interface SecretDTOV2 {
    description?: string
    identifier: string
    name: string
    orgIdentifier?: string
    projectIdentifier?: string
    spec: SecretSpecDTO
    tags?: {
      [key: string]: string
    }
    type: 'SecretFile' | 'SecretText' | 'SSHKey'
  }
  export type SecretFileSpecDTO = SecretSpecDTO & {
    secretManagerIdentifier: string
  }
  export interface SecretManagerMetadataDTO {
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    spec?: SecretManagerMetadataSpecDTO
  }
  export interface SecretManagerMetadataRequestDTO {
    encryptionType:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    identifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    spec: SecretManagerMetadataRequestSpecDTO
  }
  export interface SecretManagerMetadataRequestSpecDTO {
    [key: string]: any
  }
  export interface SecretManagerMetadataSpecDTO {
    [key: string]: any
  }
  export type SecretNGVariable = NGVariable & {
    default?: string
    name?: string
    type?: 'Secret'
    value: string
  }
  export type SecretReferredByConnectorSetupUsageDetail = SetupUsageDetail & {
    fieldName?: string
  }
  export interface SecretRequestWrapper {
    secret: SecretDTOV2
  }
  export interface SecretResponseWrapper {
    createdAt?: number
    draft?: boolean
    secret: SecretDTOV2
    updatedAt?: number
  }
  export interface SecretSpecDTO {
    errorMessageForInvalidYaml?: string
  }
  export type SecretTextSpecDTO = SecretSpecDTO & {
    secretManagerIdentifier: string
    value?: string
    valueType: 'Inline' | 'Reference'
  }
  export interface SecretValidationMetaData {
    type: 'SecretFile' | 'SecretText' | 'SSHKey'
  }
  export interface SecretValidationResultDTO {
    message?: string
    success?: boolean
  }
  export interface ServiceAccountAggregateDTO {
    createdAt: number
    lastModifiedAt: number
    roleAssignmentsMetadataDTO?: RoleAssignmentMetadataDTO[]
    serviceAccount: ServiceAccountDTO
    tokensCount?: number
  }
  export interface ServiceAccountConfig {
    apiKeyLimit?: number
    tokenLimit?: number
  }
  export interface ServiceAccountDTO {
    accountIdentifier: string
    description?: string
    email: string
    identifier: string
    name: string
    orgIdentifier?: string
    projectIdentifier?: string
    tags?: {
      [key: string]: string
    }
  }
  export interface ServiceConfig {
    service?: ServiceYaml
    serviceDefinition?: ServiceDefinition
    serviceRef?: string
    stageOverrides?: StageOverridesConfig
    useFromStage?: ServiceUseFromStage
  }
  export interface ServiceDefinition {
    spec: ServiceSpec
    type: 'Kubernetes'
  }
  export interface ServiceDeployment {
    deployments?: DeploymentCount
    rate?: DeploymentChangeRates
    time?: number
  }
  export interface ServiceDeploymentInfo {
    serviceName?: string
    serviceTag?: string
  }
  export interface ServiceDeploymentInfoDTO {
    serviceDeploymentList?: ServiceDeployment[]
  }
  export interface ServiceDeploymentListInfo {
    endTime?: number
    failureRate?: number
    failureRateChangeRate?: number
    frequency?: number
    frequencyChangeRate?: number
    serviceDeploymentList?: ServiceDeployment[]
    startTime?: number
    totalDeployments?: number
    totalDeploymentsChangeRate?: number
  }
  export interface ServiceDetailsDTO {
    deploymentTypeList?: string[]
    failureRate?: number
    failureRateChangeRate?: number
    frequency?: number
    frequencyChangeRate?: number
    instanceCountDetails?: InstanceCountDetailsByEnvTypeBase
    lastPipelineExecuted?: ServicePipelineInfo
    serviceIdentifier?: string
    serviceName?: string
    successRate?: number
    successRateChangeRate?: number
    totalDeploymentChangeRate?: number
    totalDeployments?: number
  }
  export interface ServiceDetailsInfoDTO {
    serviceDeploymentDetailsList?: ServiceDetailsDTO[]
  }
  export interface ServiceExecutionSummary {
    artifacts?: ArtifactsSummary
    deploymentType?: string
    displayName?: string
    identifier?: string
  }
  export interface ServiceOverrides {
    description?: string
    name?: string
  }
  export interface ServicePipelineInfo {
    identifier?: string
    lastExecutedAt?: number
    name?: string
    pipelineExecutionId?: string
    status?: string
  }
  export interface ServiceRequestDTO {
    description?: string
    identifier: string
    name?: string
    orgIdentifier: string
    projectIdentifier: string
    tags?: {
      [key: string]: string
    }
    version?: number
  }
  export interface ServiceResponse {
    createdAt?: number
    lastModifiedAt?: number
    service?: ServiceResponseDTO
  }
  export interface ServiceResponseDTO {
    accountId?: string
    deleted?: boolean
    description?: string
    identifier?: string
    name?: string
    orgIdentifier?: string
    projectIdentifier?: string
    tags?: {
      [key: string]: string
    }
    version?: number
  }
  export interface ServiceSpec {
    artifactOverrideSets?: ArtifactOverrideSetWrapper[]
    artifacts?: ArtifactListConfig
    manifestOverrideSets?: ManifestOverrideSetWrapper[]
    manifests?: ManifestConfigWrapper[]
    variableOverrideSets?: NGVariableOverrideSetWrapper[]
    variables?: NGVariable[]
  }
  export interface ServiceUseFromStage {
    metadata?: string
    overrides?: ServiceOverrides
    stage: string
  }
  export interface ServiceYaml {
    description?: string
    identifier: string
    name: string
    tags?: {
      [key: string]: string
    }
  }
  export type SetFeatureFlagStateYaml = PatchInstruction & {
    identifier: string
    spec: SetFeatureFlagStateYamlSpec
    type: 'SetFeatureFlagState'
  }
  export interface SetFeatureFlagStateYamlSpec {
    state: string
  }
  export interface SetupUsageDetail {
    [key: string]: any
  }
  export interface ShellScriptBaseSource {
    type?: string
  }
  export type ShellScriptInlineSource = ShellScriptBaseSource & {
    script?: string
  }
  export interface ShellScriptSourceWrapper {
    spec: ShellScriptBaseSource
    type: string
  }
  export type ShellScriptStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    environmentVariables?: NGVariable[]
    executionTarget?: ExecutionTarget
    metadata?: string
    onDelegate: boolean
    outputVariables?: NGVariable[]
    shell: 'Bash' | 'PowerShell'
    source: ShellScriptSourceWrapper
  }
  export interface SidecarArtifact {
    identifier: string
    spec: ArtifactConfig
    type: 'DockerRegistry' | 'Gcr' | 'Ecr'
  }
  export interface SidecarArtifactWrapper {
    sidecar?: SidecarArtifact
  }
  export interface SignupDTO {
    email?: string
    intent?: string
    password?: string
    utmInfo?: UtmInfo
  }
  export type SlackConfig = NotificationSettingConfig & {
    slackWebhookUrl?: string
  }
  export type SlackConfigDTO = NotificationSettingConfigDTO & {
    slackWebhookUrl: string
  }
  export interface SlackNotificationSetting {
    name?: string
    outgoingWebhookUrl: string
  }
  export interface Sort {
    empty?: boolean
    sorted?: boolean
    unsorted?: boolean
  }
  export interface SourceCodeManagerAuthentication {
    [key: string]: any
  }
  export interface SourceCodeManagerDTO {
    authentication?: SourceCodeManagerAuthentication
    createdAt?: number
    id?: string
    lastModifiedAt?: number
    name: string
    type?: 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'AWS_CODE_COMMIT' | 'AZURE_DEV_OPS'
    userIdentifier?: string
  }
  export type SplunkConnectorDTO = ConnectorConfigDTO & {
    accountId: string
    delegateSelectors?: string[]
    passwordRef: string
    splunkUrl: string
    username?: string
  }
  export interface StackTraceElement {
    className?: string
    fileName?: string
    lineNumber?: number
    methodName?: string
    nativeMethod?: boolean
  }
  export interface StageElementConfig {
    description?: string
    failureStrategies?: FailureStrategyConfig[]
    identifier: string
    name: string
    spec?: StageInfoConfig
    tags?: {
      [key: string]: string
    }
    type: string
    variables?: NGVariable[]
    when?: StageWhenCondition
  }
  export interface StageElementWrapperConfig {
    parallel?: ParallelStageElementConfig
    stage?: StageElementConfig
  }
  export interface StageInfoConfig {
    execution?: ExecutionElementConfig
  }
  export interface StageOverridesConfig {
    artifacts?: ArtifactListConfig
    manifests?: ManifestConfigWrapper[]
    useArtifactOverrideSets?: string[]
    useManifestOverrideSets?: string[]
    useVariableOverrideSets?: string[]
    variables?: NGVariable[]
  }
  export type StageRollbackFailureActionConfig = FailureStrategyActionConfig & {
    type: 'StageRollback'
  }
  export interface StageWhenCondition {
    condition?: string
    pipelineStatus: 'Success' | 'Failure' | 'All'
  }
  export interface StartTrialDTO {
    moduleType: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
  }
  export interface StepCategory {
    name?: string
    stepCategories?: StepCategory[]
    stepsData?: StepData[]
  }
  export interface StepData {
    name?: string
    type?:
      | 'Placeholder'
      | 'Placeholder'
      | 'Placeholder'
      | 'K8sRollingDeploy'
      | 'K8sRollingRollback'
      | 'K8sBGSwapServices'
      | 'K8sDelete'
      | 'K8sCanaryDelete'
      | 'K8sCanaryDeploy'
      | 'TerraformApply'
      | 'TerraformPlan'
      | 'TerraformDestroy'
      | 'TerraformRollback'
      | 'Placeholder'
      | 'Placeholder'
      | 'Placeholder'
      | 'Placeholder'
      | 'Placeholder'
      | 'Placeholder'
      | 'Placeholder'
      | 'ShellScript'
      | 'Placeholder'
      | 'Placeholder'
  }
  export interface StepElementConfig {
    description?: string
    failureStrategies?: FailureStrategyConfig[]
    identifier: string
    name: string
    spec?: StepSpecType
    timeout?: string
    type: string
    when?: StepWhenCondition
  }
  export interface StepGroupElementConfig {
    failureStrategies?: FailureStrategyConfig[]
    identifier: string
    name?: string
    rollbackSteps?: ExecutionWrapperConfig[]
    steps: ExecutionWrapperConfig[]
    when?: StepWhenCondition
  }
  export type StepGroupFailureActionConfig = FailureStrategyActionConfig & {
    type: 'StepGroupRollback'
  }
  export interface StepSpecType {
    [key: string]: any
  }
  export interface StepWhenCondition {
    condition?: string
    stageStatus: 'Success' | 'Failure' | 'All'
  }
  export interface StoreConfig {
    [key: string]: any
  }
  export interface StoreConfigWrapper {
    metadata?: string
    spec: StoreConfig
    type: 'Git' | 'Github' | 'Bitbucket' | 'GitLab' | 'Http' | 'S3' | 'Gcs'
  }
  export type StringNGVariable = NGVariable & {
    default?: string
    name?: string
    type?: 'String'
    value: string
  }
  export type SumoLogicConnectorDTO = ConnectorConfigDTO & {
    accessIdRef: string
    accessKeyRef: string
    delegateSelectors?: string[]
    url: string
  }
  export interface TGTGenerationSpecDTO {
    [key: string]: any
  }
  export type TGTKeyTabFilePathSpecDTO = TGTGenerationSpecDTO & {
    keyPath?: string
  }
  export type TGTPasswordSpecDTO = TGTGenerationSpecDTO & {
    password?: string
  }
  export type TagBuildSpec = BuildSpec & {
    tag: string
  }
  export interface TechStack {
    category?: string
    technology?: string
  }
  export type TerraformApplyStepInfo = StepSpecType & {
    configuration: TerraformStepConfiguration
    delegateSelectors?: string[]
    metadata?: string
    provisionerIdentifier: string
  }
  export interface TerraformBackendConfig {
    spec?: TerraformBackendConfigSpec
    type?: string
  }
  export interface TerraformBackendConfigSpec {
    [key: string]: any
  }
  export interface TerraformConfigFilesWrapper {
    store: StoreConfigWrapper
  }
  export type TerraformDestroyStepInfo = StepSpecType & {
    configuration: TerraformStepConfiguration
    delegateSelectors?: string[]
    metadata?: string
    provisionerIdentifier: string
  }
  export interface TerraformExecutionData {
    backendConfig?: TerraformBackendConfig
    configFiles: TerraformConfigFilesWrapper
    environmentVariables?: NGVariable[]
    targets?: string[]
    varFiles?: TerraformVarFileWrapper[]
    workspace?: string
  }
  export interface TerraformPlanExecutionData {
    backendConfig?: TerraformBackendConfig
    command: 'Apply' | 'Destroy'
    configFiles: TerraformConfigFilesWrapper
    environmentVariables?: NGVariable[]
    secretManagerRef: string
    targets?: string[]
    varFiles?: TerraformVarFileWrapper[]
    workspace?: string
  }
  export type TerraformPlanStepInfo = StepSpecType & {
    configuration: TerraformPlanExecutionData
    delegateSelectors?: string[]
    provisionerIdentifier: string
  }
  export type TerraformRollbackStepInfo = StepSpecType & {
    delegateSelectors?: string[]
    provisionerIdentifier: string
  }
  export interface TerraformStepConfiguration {
    spec?: TerraformExecutionData
    type: 'Inline' | 'InheritFromPlan' | 'InheritFromApply'
  }
  export interface TerraformVarFile {
    identifier: string
    spec: TerraformVarFileSpec
    type: string
  }
  export interface TerraformVarFileSpec {
    type?: string
  }
  export interface TerraformVarFileWrapper {
    varFile: TerraformVarFile
  }
  export interface Throwable {
    cause?: Throwable
    localizedMessage?: string
    message?: string
    stackTrace?: StackTraceElement[]
    suppressed?: Throwable[]
  }
  export interface TimeValuePair {
    timestamp?: number
    value?: {
      [key: string]: any
    }
  }
  export interface TimeValuePairEnvIdCountPair {
    timestamp?: number
    value?: EnvIdCountPair
  }
  export interface TimeValuePairInteger {
    timestamp?: number
    value?: number
  }
  export interface TimeValuePairListDTO {
    timeValuePairList?: TimeValuePairObject[]
  }
  export interface TimeValuePairListDTOEnvIdCountPair {
    timeValuePairList?: TimeValuePairEnvIdCountPair[]
  }
  export interface TimeValuePairListDTOInteger {
    timeValuePairList?: TimeValuePairInteger[]
  }
  export interface TimeValuePairObject {
    timestamp?: number
    value?: {
      [key: string]: any
    }
  }
  export interface TokenAggregateDTO {
    createdAt: number
    expiryAt: number
    lastModifiedAt: number
    token: TokenDTO
  }
  export interface TokenDTO {
    accountIdentifier: string
    apiKeyIdentifier: string
    apiKeyType: 'USER' | 'SERVICE_ACCOUNT'
    description?: string
    email?: string
    encodedPassword?: string
    identifier: string
    name: string
    orgIdentifier?: string
    parentIdentifier: string
    projectIdentifier?: string
    scheduledExpireTime?: number
    tags?: {
      [key: string]: string
    }
    username?: string
    valid?: boolean
    validFrom?: number
    validTo?: number
  }
  export interface TotalDeploymentInfo {
    count?: number
    countList?: DeploymentDateAndCount[]
    nonProduction?: number
    production?: number
  }
  export interface TransitionTo {
    status: string
    transitionName?: string
  }
  export interface TrialSignupOptions {
    assistedOption?: boolean
    productsSelected?: ('CD' | 'CE' | 'CI')[]
  }
  export interface TwoFactorAdminOverrideSettings {
    adminOverrideTwoFactorEnabled?: boolean
  }
  export interface TwoFactorAuthSettingsInfo {
    email?: string
    mechanism?: 'TOTP'
    totpSecretKey?: string
    totpqrurl?: string
    twoFactorAuthenticationEnabled?: boolean
    userId?: string
  }
  export interface TypeInfo {
    typeName?: string
    typeNamespace?: string
  }
  export interface User {
    accountIds?: string[]
    accountName?: string
    accounts?: Account[]
    appId: string
    companyName?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    defaultAccountId?: string
    disabled?: boolean
    email?: string
    emailVerified?: boolean
    familyName?: string
    firstLogin?: boolean
    givenName?: string
    imported?: boolean
    lastAccountId?: string
    lastAppId?: string
    lastLogin?: number
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    oauthProvider?: string
    password?: string[]
    passwordExpired?: boolean
    pendingAccounts?: Account[]
    reportedSegmentTracks?: string[]
    statsFetchedOn?: number
    supportAccounts?: Account[]
    token?: string
    twoFactorAuthenticationEnabled?: boolean
    twoFactorAuthenticationMechanism?: 'TOTP'
    twoFactorJwtToken?: string
    userGroups?: UserGroup[]
    userLocked?: boolean
    userLockoutInfo?: UserLockoutInfo
    utmInfo?: UtmInfo
    uuid: string
  }
  export interface UserAggregate {
    roleAssignmentMetadata: RoleAssignmentMetadataDTO[]
    user: UserMetadataDTO
  }
  export interface UserFilter {
    identifiers?: string[]
    searchTerm?: string
  }
  export interface UserGroup {
    accountIdentifier: string
    createdAt?: number
    deleted?: boolean
    description: string
    harnessManaged?: boolean
    id?: string
    identifier?: string
    isSsoLinked?: boolean
    lastModifiedAt?: number
    linkedSsoDisplayName?: string
    linkedSsoId?: string
    linkedSsoType?: 'SAML' | 'LDAP' | 'OAUTH'
    name?: string
    notificationConfigs: NotificationSettingConfig[]
    orgIdentifier?: string
    projectIdentifier?: string
    ssoGroupId?: string
    ssoGroupName?: string
    tags: NGTag[]
    users: string[]
    version?: number
  }
  export interface UserGroupAggregateDTO {
    lastModifiedAt?: number
    roleAssignmentsMetadataDTO?: RoleAssignmentMetadataDTO[]
    userGroupDTO: UserGroupDTO
    users?: UserMetadataDTO[]
  }
  export interface UserGroupDTO {
    accountIdentifier?: string
    description?: string
    identifier: string
    linkedSsoDisplayName?: string
    linkedSsoId?: string
    name: string
    notificationConfigs?: NotificationSettingConfigDTO[]
    orgIdentifier?: string
    projectIdentifier?: string
    ssoGroupId?: string
    ssoGroupName?: string
    ssoLinked?: boolean
    tags?: {
      [key: string]: string
    }
    users?: string[]
  }
  export interface UserGroupFilterDTO {
    accountIdentifier?: string
    databaseIdFilter?: string[]
    identifierFilter?: string[]
    orgIdentifier?: string
    projectIdentifier?: string
    userIdentifierFilter?: string[]
  }
  export interface UserInfo {
    accounts?: GatewayAccountRequestDTO[]
    admin?: boolean
    defaultAccountId?: string
    email?: string
    emailVerified?: boolean
    intent?: string
    locked?: boolean
    name?: string
    token?: string
    twoFactorAuthenticationEnabled?: boolean
    uuid?: string
  }
  export interface UserLockoutInfo {
    numberOfFailedLoginAttempts?: number
    userLockedAt?: number
  }
  export interface UserLockoutPolicy {
    enableLockoutPolicy?: boolean
    lockOutPeriod?: number
    notifyUser?: boolean
    numberOfFailedAttemptsBeforeLockout?: number
    userGroupsToNotify?: UserGroup[]
  }
  export interface UserMetadataDTO {
    email: string
    locked?: boolean
    name?: string
    uuid: string
  }
  export type UsernamePasswordSettings = NGAuthSettings & {
    loginSettings: LoginSettings
  }
  export interface UtmInfo {
    utmCampaign?: string
    utmContent?: string
    utmMedium?: string
    utmSource?: string
    utmTerm?: string
  }
  export interface ValidationError {
    error?: string
    fieldId?: string
  }
  export type ValuesManifest = ManifestAttributes & {
    metadata?: string
    store?: StoreConfigWrapper
  }
  export type VaultAppRoleCredentialDTO = VaultCredentialDTO & {
    appRoleId?: string
    secretId?: string
  }
  export type VaultAuthTokenCredentialDTO = VaultCredentialDTO & {
    authToken?: string
  }
  export type VaultConnectorDTO = ConnectorConfigDTO & {
    accessType?: 'APP_ROLE' | 'TOKEN'
    appRoleId?: string
    authToken?: string
    basePath?: string
    default?: boolean
    delegateSelectors?: string[]
    readOnly?: boolean
    renewalIntervalMinutes?: number
    secretEngineManuallyConfigured?: boolean
    secretEngineName?: string
    secretEngineVersion?: number
    secretId?: string
    vaultUrl?: string
  }
  export interface VaultCredentialDTO {
    [key: string]: any
  }
  export type VaultMetadataRequestSpecDTO = SecretManagerMetadataRequestSpecDTO & {
    accessType: 'APP_ROLE' | 'TOKEN'
    delegateSelectors?: string[]
    spec?: VaultCredentialDTO
    url: string
  }
  export type VaultMetadataSpecDTO = SecretManagerMetadataSpecDTO & {
    secretEngines?: VaultSecretEngineDTO[]
  }
  export interface VaultSecretEngineDTO {
    description?: string
    name?: string
    type?: string
    version?: number
  }
  export interface VerifyTokenResponseDTO {
    accountIdentifier?: string
  }
  export interface Void {
    [key: string]: any
  }
  export type WorkflowFilter = Filter & {
    filterTypes?: string[]
  }
  export interface WorkloadCountInfo {
    count?: number
  }
  export interface WorkloadDateCountInfo {
    date?: number
    execution?: WorkloadCountInfo
  }
  export interface WorkloadDeploymentInfo {
    deploymentTypeList?: string[]
    failureRate?: number
    failureRateChangeRate?: number
    frequency?: number
    frequencyChangeRate?: number
    lastExecuted?: LastWorkloadInfo
    lastPipelineExecutionId?: string
    percentSuccess?: number
    rateSuccess?: number
    serviceId?: string
    serviceName?: string
    totalDeploymentChangeRate?: number
    totalDeployments?: number
    workload?: WorkloadDateCountInfo[]
  }
  export interface YamlSnippetMetaData {
    description?: string
    iconTag?: string
    identifier?: string
    name?: string
    tags?: string[]
    version?: string
  }
  export interface YamlSnippets {
    yamlSnippets?: YamlSnippetMetaData[]
  }
  export type AccountDTORequestBody = AccountDTO
  export type ApiKeyDTORequestBody = ApiKeyDTO
  export type ConnectorRequestBody = Connector
  export type DelegateProfileDetailsNgRequestBody = DelegateProfileDetailsNg
  export type DockerRequestDTORequestBody = DockerRequestDTO
  export type EcrRequestDTORequestBody = EcrRequestDTO
  export type EnvironmentRequestDTORequestBody = EnvironmentRequestDTO
  export type FilterDTORequestBody = FilterDTO
  export type GcrRequestDTORequestBody = GcrRequestDTO
  export type GitSyncConfigRequestBody = GitSyncConfig
  export type GitSyncSettingsDTORequestBody = GitSyncSettingsDTO
  export type OrganizationRequestRequestBody = OrganizationRequest
  export type ProjectRequestRequestBody = ProjectRequest
  export type ScopingRuleDetailsNgArrayRequestBody = ScopingRuleDetailsNg[]
  export type SecretRequestWrapperRequestBody = SecretRequestWrapper
  export type SecretRequestWrapper2RequestBody = void
  export type ServiceAccountDTORequestBody = ServiceAccountDTO
  export type ServiceRequestDTORequestBody = ServiceRequestDTO
  export type ServiceRequestDTOArrayRequestBody = ServiceRequestDTO[]
  export type SourceCodeManagerDTORequestBody = SourceCodeManagerDTO
  export type StartTrialDTORequestBody = StartTrialDTO
  export type TokenDTORequestBody = TokenDTO
  export type UserFilterRequestBody = UserFilter
  export type UserGroupDTORequestBody = UserGroupDTO
  export type UnsubscribeBodyRequestBody = string[]
  export type UpdateWhitelistedDomainsBodyRequestBody = string[]
  export type UploadSamlMetaDataRequestBody = void
  export type WebhookCatcherBodyRequestBody = string
  export interface GetAccountNGPathParams {
    accountIdentifier: string
  }
  export type GetAccountNGProps = Omit<
    GetProps<ResponseAccountDTO, Failure | Error, void, GetAccountNGPathParams>,
    'path'
  > &
    GetAccountNGPathParams
  /**
   * Get Account
   */
  export const GetAccountNG: ({ accountIdentifier, ...props }: GetAccountNGProps) => JSX.Element
  export type UseGetAccountNGProps = Omit<
    UseGetProps<ResponseAccountDTO, Failure | Error, void, GetAccountNGPathParams>,
    'path'
  > &
    GetAccountNGPathParams
  /**
   * Get Account
   */
  export const useGetAccountNG: ({
    accountIdentifier,
    ...props
  }: UseGetAccountNGProps) => import('restful-react').UseGetReturn<ResponseAccountDTO, Error | Failure, void, unknown>
  /**
   * Get Account
   */
  export const getAccountNGPromise: (
    {
      accountIdentifier,
      ...props
    }: GetUsingFetchProps<ResponseAccountDTO, Error | Failure, void, GetAccountNGPathParams> & {
      accountIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseAccountDTO>
  export interface UpdateAccountDefaultExperienceNGPathParams {
    accountIdentifier: string
  }
  export type UpdateAccountDefaultExperienceNGProps = Omit<
    MutateProps<
      ResponseAccountDTO,
      Failure | Error,
      void,
      AccountDTORequestBody,
      UpdateAccountDefaultExperienceNGPathParams
    >,
    'path' | 'verb'
  > &
    UpdateAccountDefaultExperienceNGPathParams
  /**
   * Update Default Experience
   */
  export const UpdateAccountDefaultExperienceNG: ({
    accountIdentifier,
    ...props
  }: UpdateAccountDefaultExperienceNGProps) => JSX.Element
  export type UseUpdateAccountDefaultExperienceNGProps = Omit<
    UseMutateProps<
      ResponseAccountDTO,
      Failure | Error,
      void,
      AccountDTORequestBody,
      UpdateAccountDefaultExperienceNGPathParams
    >,
    'path' | 'verb'
  > &
    UpdateAccountDefaultExperienceNGPathParams
  /**
   * Update Default Experience
   */
  export const useUpdateAccountDefaultExperienceNG: ({
    accountIdentifier,
    ...props
  }: UseUpdateAccountDefaultExperienceNGProps) => import('restful-react').UseMutateReturn<
    ResponseAccountDTO,
    Error | Failure,
    AccountDTO,
    void,
    UpdateAccountDefaultExperienceNGPathParams
  >
  /**
   * Update Default Experience
   */
  export const updateAccountDefaultExperienceNGPromise: (
    {
      accountIdentifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseAccountDTO,
      Error | Failure,
      void,
      AccountDTO,
      UpdateAccountDefaultExperienceNGPathParams
    > & {
      accountIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseAccountDTO>
  export interface UpdateAccountNameNGPathParams {
    accountIdentifier: string
  }
  export type UpdateAccountNameNGProps = Omit<
    MutateProps<ResponseAccountDTO, Failure | Error, void, AccountDTORequestBody, UpdateAccountNameNGPathParams>,
    'path' | 'verb'
  > &
    UpdateAccountNameNGPathParams
  /**
   * Update Account Name
   */
  export const UpdateAccountNameNG: ({ accountIdentifier, ...props }: UpdateAccountNameNGProps) => JSX.Element
  export type UseUpdateAccountNameNGProps = Omit<
    UseMutateProps<ResponseAccountDTO, Failure | Error, void, AccountDTORequestBody, UpdateAccountNameNGPathParams>,
    'path' | 'verb'
  > &
    UpdateAccountNameNGPathParams
  /**
   * Update Account Name
   */
  export const useUpdateAccountNameNG: ({
    accountIdentifier,
    ...props
  }: UseUpdateAccountNameNGProps) => import('restful-react').UseMutateReturn<
    ResponseAccountDTO,
    Error | Failure,
    AccountDTO,
    void,
    UpdateAccountNameNGPathParams
  >
  /**
   * Update Account Name
   */
  export const updateAccountNameNGPromise: (
    {
      accountIdentifier,
      ...props
    }: MutateUsingFetchProps<ResponseAccountDTO, Error | Failure, void, AccountDTO, UpdateAccountNameNGPathParams> & {
      accountIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseAccountDTO>
  export interface ListActivitiesQueryParams {
    pageIndex?: number
    pageSize?: number
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    identifier?: string
    startTime: number
    endTime: number
    status?: 'SUCCESS' | 'FAILED'
    referredEntityType:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
    referredByEntityType?:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
  }
  export type ListActivitiesProps = Omit<
    GetProps<ResponsePageActivity, unknown, ListActivitiesQueryParams, void>,
    'path'
  >
  /**
   * Get Activities where this resource was used
   */
  export const ListActivities: (props: ListActivitiesProps) => JSX.Element
  export type UseListActivitiesProps = Omit<
    UseGetProps<ResponsePageActivity, unknown, ListActivitiesQueryParams, void>,
    'path'
  >
  /**
   * Get Activities where this resource was used
   */
  export const useListActivities: (
    props: UseListActivitiesProps
  ) => import('restful-react').UseGetReturn<ResponsePageActivity, unknown, ListActivitiesQueryParams, unknown>
  /**
   * Get Activities where this resource was used
   */
  export const listActivitiesPromise: (
    props: GetUsingFetchProps<ResponsePageActivity, unknown, ListActivitiesQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageActivity>
  export type PostActivityProps = Omit<MutateProps<ResponseActivity, unknown, void, Activity, void>, 'path' | 'verb'>
  /**
   * Saves the activity
   */
  export const PostActivity: (props: PostActivityProps) => JSX.Element
  export type UsePostActivityProps = Omit<
    UseMutateProps<ResponseActivity, unknown, void, Activity, void>,
    'path' | 'verb'
  >
  /**
   * Saves the activity
   */
  export const usePostActivity: (
    props: UsePostActivityProps
  ) => import('restful-react').UseMutateReturn<ResponseActivity, unknown, Activity, void, void>
  /**
   * Saves the activity
   */
  export const postActivityPromise: (
    props: MutateUsingFetchProps<ResponseActivity, unknown, void, Activity, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseActivity>
  export interface GetConnectivitySummaryQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    identifier?: string
    startTime: number
    endTime: number
  }
  export type GetConnectivitySummaryProps = Omit<
    GetProps<ResponseConnectivityCheckSummary, unknown, GetConnectivitySummaryQueryParams, void>,
    'path'
  >
  /**
   * Get ConnectivityCheck Summary
   */
  export const GetConnectivitySummary: (props: GetConnectivitySummaryProps) => JSX.Element
  export type UseGetConnectivitySummaryProps = Omit<
    UseGetProps<ResponseConnectivityCheckSummary, unknown, GetConnectivitySummaryQueryParams, void>,
    'path'
  >
  /**
   * Get ConnectivityCheck Summary
   */
  export const useGetConnectivitySummary: (
    props: UseGetConnectivitySummaryProps
  ) => import('restful-react').UseGetReturn<
    ResponseConnectivityCheckSummary,
    unknown,
    GetConnectivitySummaryQueryParams,
    unknown
  >
  /**
   * Get ConnectivityCheck Summary
   */
  export const getConnectivitySummaryPromise: (
    props: GetUsingFetchProps<ResponseConnectivityCheckSummary, unknown, GetConnectivitySummaryQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseConnectivityCheckSummary>
  export interface GetActivitiesSummaryQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    identifier?: string
    startTime: number
    endTime: number
    timeGroupType: 'HOUR' | 'DAY' | 'WEEK'
    referredEntityType:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
    referredByEntityType?:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
  }
  export type GetActivitiesSummaryProps = Omit<
    GetProps<ResponsePageActivitySummary, unknown, GetActivitiesSummaryQueryParams, void>,
    'path'
  >
  /**
   * Get Activities Summary
   */
  export const GetActivitiesSummary: (props: GetActivitiesSummaryProps) => JSX.Element
  export type UseGetActivitiesSummaryProps = Omit<
    UseGetProps<ResponsePageActivitySummary, unknown, GetActivitiesSummaryQueryParams, void>,
    'path'
  >
  /**
   * Get Activities Summary
   */
  export const useGetActivitiesSummary: (
    props: UseGetActivitiesSummaryProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageActivitySummary,
    unknown,
    GetActivitiesSummaryQueryParams,
    unknown
  >
  /**
   * Get Activities Summary
   */
  export const getActivitiesSummaryPromise: (
    props: GetUsingFetchProps<ResponsePageActivitySummary, unknown, GetActivitiesSummaryQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageActivitySummary>
  export interface GetAccountResourcesCountQueryParams {
    accountIdentifier: string
  }
  export type GetAccountResourcesCountProps = Omit<
    GetProps<ResponseAccountResourcesDTO, Failure | Error, GetAccountResourcesCountQueryParams, void>,
    'path'
  >
  /**
   * Gets count of account resources
   */
  export const GetAccountResourcesCount: (props: GetAccountResourcesCountProps) => JSX.Element
  export type UseGetAccountResourcesCountProps = Omit<
    UseGetProps<ResponseAccountResourcesDTO, Failure | Error, GetAccountResourcesCountQueryParams, void>,
    'path'
  >
  /**
   * Gets count of account resources
   */
  export const useGetAccountResourcesCount: (
    props: UseGetAccountResourcesCountProps
  ) => import('restful-react').UseGetReturn<
    ResponseAccountResourcesDTO,
    Error | Failure,
    GetAccountResourcesCountQueryParams,
    unknown
  >
  /**
   * Gets count of account resources
   */
  export const getAccountResourcesCountPromise: (
    props: GetUsingFetchProps<ResponseAccountResourcesDTO, Failure | Error, GetAccountResourcesCountQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseAccountResourcesDTO>
  export interface GetUserGroupAggregateListQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
    searchTerm?: string
    userSize?: number
  }
  export type GetUserGroupAggregateListProps = Omit<
    GetProps<ResponsePageUserGroupAggregateDTO, Failure | Error, GetUserGroupAggregateListQueryParams, void>,
    'path'
  >
  /**
   * Get Aggregated User Group list
   */
  export const GetUserGroupAggregateList: (props: GetUserGroupAggregateListProps) => JSX.Element
  export type UseGetUserGroupAggregateListProps = Omit<
    UseGetProps<ResponsePageUserGroupAggregateDTO, Failure | Error, GetUserGroupAggregateListQueryParams, void>,
    'path'
  >
  /**
   * Get Aggregated User Group list
   */
  export const useGetUserGroupAggregateList: (
    props: UseGetUserGroupAggregateListProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageUserGroupAggregateDTO,
    Error | Failure,
    GetUserGroupAggregateListQueryParams,
    unknown
  >
  /**
   * Get Aggregated User Group list
   */
  export const getUserGroupAggregateListPromise: (
    props: GetUsingFetchProps<
      ResponsePageUserGroupAggregateDTO,
      Failure | Error,
      GetUserGroupAggregateListQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageUserGroupAggregateDTO>
  export interface GetUserGroupAggregateListsWithFilterQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type GetUserGroupAggregateListsWithFilterProps = Omit<
    MutateProps<
      ResponseListUserGroupAggregateDTO,
      Failure | Error,
      GetUserGroupAggregateListsWithFilterQueryParams,
      AggregateACLRequest,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Get Aggregated User Group list with filter
   */
  export const GetUserGroupAggregateListsWithFilter: (props: GetUserGroupAggregateListsWithFilterProps) => JSX.Element
  export type UseGetUserGroupAggregateListsWithFilterProps = Omit<
    UseMutateProps<
      ResponseListUserGroupAggregateDTO,
      Failure | Error,
      GetUserGroupAggregateListsWithFilterQueryParams,
      AggregateACLRequest,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Get Aggregated User Group list with filter
   */
  export const useGetUserGroupAggregateListsWithFilter: (
    props: UseGetUserGroupAggregateListsWithFilterProps
  ) => import('restful-react').UseMutateReturn<
    ResponseListUserGroupAggregateDTO,
    Error | Failure,
    AggregateACLRequest,
    GetUserGroupAggregateListsWithFilterQueryParams,
    void
  >
  /**
   * Get Aggregated User Group list with filter
   */
  export const getUserGroupAggregateListsWithFilterPromise: (
    props: MutateUsingFetchProps<
      ResponseListUserGroupAggregateDTO,
      Failure | Error,
      GetUserGroupAggregateListsWithFilterQueryParams,
      AggregateACLRequest,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListUserGroupAggregateDTO>
  export interface GetUserGroupAggregateQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface GetUserGroupAggregatePathParams {
    identifier: string
  }
  export type GetUserGroupAggregateProps = Omit<
    GetProps<
      ResponseUserGroupAggregateDTO,
      Failure | Error,
      GetUserGroupAggregateQueryParams,
      GetUserGroupAggregatePathParams
    >,
    'path'
  > &
    GetUserGroupAggregatePathParams
  /**
   * Get Aggregated User Group
   */
  export const GetUserGroupAggregate: ({ identifier, ...props }: GetUserGroupAggregateProps) => JSX.Element
  export type UseGetUserGroupAggregateProps = Omit<
    UseGetProps<
      ResponseUserGroupAggregateDTO,
      Failure | Error,
      GetUserGroupAggregateQueryParams,
      GetUserGroupAggregatePathParams
    >,
    'path'
  > &
    GetUserGroupAggregatePathParams
  /**
   * Get Aggregated User Group
   */
  export const useGetUserGroupAggregate: ({
    identifier,
    ...props
  }: UseGetUserGroupAggregateProps) => import('restful-react').UseGetReturn<
    ResponseUserGroupAggregateDTO,
    Error | Failure,
    GetUserGroupAggregateQueryParams,
    unknown
  >
  /**
   * Get Aggregated User Group
   */
  export const getUserGroupAggregatePromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<
      ResponseUserGroupAggregateDTO,
      Error | Failure,
      GetUserGroupAggregateQueryParams,
      GetUserGroupAggregatePathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserGroupAggregateDTO>
  export interface GetOrganizationAggregateDTOListQueryParams {
    accountIdentifier: string
    searchTerm?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetOrganizationAggregateDTOListProps = Omit<
    GetProps<ResponsePageOrganizationAggregateDTO, Failure | Error, GetOrganizationAggregateDTOListQueryParams, void>,
    'path'
  >
  /**
   * Get OrganizationAggregateDTO list
   */
  export const GetOrganizationAggregateDTOList: (props: GetOrganizationAggregateDTOListProps) => JSX.Element
  export type UseGetOrganizationAggregateDTOListProps = Omit<
    UseGetProps<
      ResponsePageOrganizationAggregateDTO,
      Failure | Error,
      GetOrganizationAggregateDTOListQueryParams,
      void
    >,
    'path'
  >
  /**
   * Get OrganizationAggregateDTO list
   */
  export const useGetOrganizationAggregateDTOList: (
    props: UseGetOrganizationAggregateDTOListProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageOrganizationAggregateDTO,
    Error | Failure,
    GetOrganizationAggregateDTOListQueryParams,
    unknown
  >
  /**
   * Get OrganizationAggregateDTO list
   */
  export const getOrganizationAggregateDTOListPromise: (
    props: GetUsingFetchProps<
      ResponsePageOrganizationAggregateDTO,
      Failure | Error,
      GetOrganizationAggregateDTOListQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageOrganizationAggregateDTO>
  export interface GetOrganizationAggregateDTOQueryParams {
    accountIdentifier: string
  }
  export interface GetOrganizationAggregateDTOPathParams {
    identifier: string
  }
  export type GetOrganizationAggregateDTOProps = Omit<
    GetProps<
      ResponseOrganizationAggregateDTO,
      Failure | Error,
      GetOrganizationAggregateDTOQueryParams,
      GetOrganizationAggregateDTOPathParams
    >,
    'path'
  > &
    GetOrganizationAggregateDTOPathParams
  /**
   * Gets an OrganizationAggregateDTO by identifier
   */
  export const GetOrganizationAggregateDTO: ({ identifier, ...props }: GetOrganizationAggregateDTOProps) => JSX.Element
  export type UseGetOrganizationAggregateDTOProps = Omit<
    UseGetProps<
      ResponseOrganizationAggregateDTO,
      Failure | Error,
      GetOrganizationAggregateDTOQueryParams,
      GetOrganizationAggregateDTOPathParams
    >,
    'path'
  > &
    GetOrganizationAggregateDTOPathParams
  /**
   * Gets an OrganizationAggregateDTO by identifier
   */
  export const useGetOrganizationAggregateDTO: ({
    identifier,
    ...props
  }: UseGetOrganizationAggregateDTOProps) => import('restful-react').UseGetReturn<
    ResponseOrganizationAggregateDTO,
    Error | Failure,
    GetOrganizationAggregateDTOQueryParams,
    unknown
  >
  /**
   * Gets an OrganizationAggregateDTO by identifier
   */
  export const getOrganizationAggregateDTOPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<
      ResponseOrganizationAggregateDTO,
      Error | Failure,
      GetOrganizationAggregateDTOQueryParams,
      GetOrganizationAggregateDTOPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseOrganizationAggregateDTO>
  export interface GetProjectAggregateDTOListQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    hasModule?: boolean
    moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
    searchTerm?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetProjectAggregateDTOListProps = Omit<
    GetProps<ResponsePageProjectAggregateDTO, Failure | Error, GetProjectAggregateDTOListQueryParams, void>,
    'path'
  >
  /**
   * Get ProjectAggregateDTO list
   */
  export const GetProjectAggregateDTOList: (props: GetProjectAggregateDTOListProps) => JSX.Element
  export type UseGetProjectAggregateDTOListProps = Omit<
    UseGetProps<ResponsePageProjectAggregateDTO, Failure | Error, GetProjectAggregateDTOListQueryParams, void>,
    'path'
  >
  /**
   * Get ProjectAggregateDTO list
   */
  export const useGetProjectAggregateDTOList: (
    props: UseGetProjectAggregateDTOListProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageProjectAggregateDTO,
    Error | Failure,
    GetProjectAggregateDTOListQueryParams,
    unknown
  >
  /**
   * Get ProjectAggregateDTO list
   */
  export const getProjectAggregateDTOListPromise: (
    props: GetUsingFetchProps<
      ResponsePageProjectAggregateDTO,
      Failure | Error,
      GetProjectAggregateDTOListQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageProjectAggregateDTO>
  export interface GetProjectAggregateDTOQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
  }
  export interface GetProjectAggregateDTOPathParams {
    identifier: string
  }
  export type GetProjectAggregateDTOProps = Omit<
    GetProps<
      ResponseProjectAggregateDTO,
      Failure | Error,
      GetProjectAggregateDTOQueryParams,
      GetProjectAggregateDTOPathParams
    >,
    'path'
  > &
    GetProjectAggregateDTOPathParams
  /**
   * Gets a ProjectAggregateDTO by identifier
   */
  export const GetProjectAggregateDTO: ({ identifier, ...props }: GetProjectAggregateDTOProps) => JSX.Element
  export type UseGetProjectAggregateDTOProps = Omit<
    UseGetProps<
      ResponseProjectAggregateDTO,
      Failure | Error,
      GetProjectAggregateDTOQueryParams,
      GetProjectAggregateDTOPathParams
    >,
    'path'
  > &
    GetProjectAggregateDTOPathParams
  /**
   * Gets a ProjectAggregateDTO by identifier
   */
  export const useGetProjectAggregateDTO: ({
    identifier,
    ...props
  }: UseGetProjectAggregateDTOProps) => import('restful-react').UseGetReturn<
    ResponseProjectAggregateDTO,
    Error | Failure,
    GetProjectAggregateDTOQueryParams,
    unknown
  >
  /**
   * Gets a ProjectAggregateDTO by identifier
   */
  export const getProjectAggregateDTOPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<
      ResponseProjectAggregateDTO,
      Error | Failure,
      GetProjectAggregateDTOQueryParams,
      GetProjectAggregateDTOPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseProjectAggregateDTO>
  export interface ListApiKeysQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    apiKeyType: 'USER' | 'SERVICE_ACCOUNT'
    parentIdentifier: string
    identifiers?: string[]
  }
  export type ListApiKeysProps = Omit<
    GetProps<ResponseListApiKeyDTO, Failure | Error, ListApiKeysQueryParams, void>,
    'path'
  >
  /**
   * List api keys
   */
  export const ListApiKeys: (props: ListApiKeysProps) => JSX.Element
  export type UseListApiKeysProps = Omit<
    UseGetProps<ResponseListApiKeyDTO, Failure | Error, ListApiKeysQueryParams, void>,
    'path'
  >
  /**
   * List api keys
   */
  export const useListApiKeys: (
    props: UseListApiKeysProps
  ) => import('restful-react').UseGetReturn<ResponseListApiKeyDTO, Error | Failure, ListApiKeysQueryParams, unknown>
  /**
   * List api keys
   */
  export const listApiKeysPromise: (
    props: GetUsingFetchProps<ResponseListApiKeyDTO, Failure | Error, ListApiKeysQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListApiKeyDTO>
  export type CreateApiKeyProps = Omit<
    MutateProps<ResponseApiKeyDTO, Failure | Error, void, ApiKeyDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create api key
   */
  export const CreateApiKey: (props: CreateApiKeyProps) => JSX.Element
  export type UseCreateApiKeyProps = Omit<
    UseMutateProps<ResponseApiKeyDTO, Failure | Error, void, ApiKeyDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create api key
   */
  export const useCreateApiKey: (
    props: UseCreateApiKeyProps
  ) => import('restful-react').UseMutateReturn<ResponseApiKeyDTO, Error | Failure, ApiKeyDTO, void, void>
  /**
   * Create api key
   */
  export const createApiKeyPromise: (
    props: MutateUsingFetchProps<ResponseApiKeyDTO, Failure | Error, void, ApiKeyDTORequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseApiKeyDTO>
  export interface ListAggregatedApiKeysQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    apiKeyType: 'USER' | 'SERVICE_ACCOUNT'
    parentIdentifier: string
    identifiers?: string[]
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
    searchTerm?: string
  }
  export type ListAggregatedApiKeysProps = Omit<
    GetProps<ResponsePageApiKeyAggregateDTO, Failure | Error, ListAggregatedApiKeysQueryParams, void>,
    'path'
  >
  /**
   * List api key
   */
  export const ListAggregatedApiKeys: (props: ListAggregatedApiKeysProps) => JSX.Element
  export type UseListAggregatedApiKeysProps = Omit<
    UseGetProps<ResponsePageApiKeyAggregateDTO, Failure | Error, ListAggregatedApiKeysQueryParams, void>,
    'path'
  >
  /**
   * List api key
   */
  export const useListAggregatedApiKeys: (
    props: UseListAggregatedApiKeysProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageApiKeyAggregateDTO,
    Error | Failure,
    ListAggregatedApiKeysQueryParams,
    unknown
  >
  /**
   * List api key
   */
  export const listAggregatedApiKeysPromise: (
    props: GetUsingFetchProps<ResponsePageApiKeyAggregateDTO, Failure | Error, ListAggregatedApiKeysQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageApiKeyAggregateDTO>
  export interface GetAggregatedApiKeyQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    apiKeyType: 'USER' | 'SERVICE_ACCOUNT'
    parentIdentifier: string
  }
  export interface GetAggregatedApiKeyPathParams {
    identifier: string
  }
  export type GetAggregatedApiKeyProps = Omit<
    GetProps<
      ResponseApiKeyAggregateDTO,
      Failure | Error,
      GetAggregatedApiKeyQueryParams,
      GetAggregatedApiKeyPathParams
    >,
    'path'
  > &
    GetAggregatedApiKeyPathParams
  /**
   * Get api key
   */
  export const GetAggregatedApiKey: ({ identifier, ...props }: GetAggregatedApiKeyProps) => JSX.Element
  export type UseGetAggregatedApiKeyProps = Omit<
    UseGetProps<
      ResponseApiKeyAggregateDTO,
      Failure | Error,
      GetAggregatedApiKeyQueryParams,
      GetAggregatedApiKeyPathParams
    >,
    'path'
  > &
    GetAggregatedApiKeyPathParams
  /**
   * Get api key
   */
  export const useGetAggregatedApiKey: ({
    identifier,
    ...props
  }: UseGetAggregatedApiKeyProps) => import('restful-react').UseGetReturn<
    ResponseApiKeyAggregateDTO,
    Error | Failure,
    GetAggregatedApiKeyQueryParams,
    unknown
  >
  /**
   * Get api key
   */
  export const getAggregatedApiKeyPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<
      ResponseApiKeyAggregateDTO,
      Error | Failure,
      GetAggregatedApiKeyQueryParams,
      GetAggregatedApiKeyPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseApiKeyAggregateDTO>
  export interface DeleteApiKeyQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    apiKeyType: 'USER' | 'SERVICE_ACCOUNT'
    parentIdentifier: string
  }
  export type DeleteApiKeyProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteApiKeyQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete api key
   */
  export const DeleteApiKey: (props: DeleteApiKeyProps) => JSX.Element
  export type UseDeleteApiKeyProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteApiKeyQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete api key
   */
  export const useDeleteApiKey: (
    props: UseDeleteApiKeyProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, Error | Failure, string, DeleteApiKeyQueryParams, void>
  /**
   * Delete api key
   */
  export const deleteApiKeyPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteApiKeyQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface UpdateApiKeyPathParams {
    identifier: string
  }
  export type UpdateApiKeyProps = Omit<
    MutateProps<ResponseApiKeyDTO, Failure | Error, void, ApiKeyDTORequestBody, UpdateApiKeyPathParams>,
    'path' | 'verb'
  > &
    UpdateApiKeyPathParams
  /**
   * Update api key
   */
  export const UpdateApiKey: ({ identifier, ...props }: UpdateApiKeyProps) => JSX.Element
  export type UseUpdateApiKeyProps = Omit<
    UseMutateProps<ResponseApiKeyDTO, Failure | Error, void, ApiKeyDTORequestBody, UpdateApiKeyPathParams>,
    'path' | 'verb'
  > &
    UpdateApiKeyPathParams
  /**
   * Update api key
   */
  export const useUpdateApiKey: ({
    identifier,
    ...props
  }: UseUpdateApiKeyProps) => import('restful-react').UseMutateReturn<
    ResponseApiKeyDTO,
    Error | Failure,
    ApiKeyDTO,
    void,
    UpdateApiKeyPathParams
  >
  /**
   * Update api key
   */
  export const updateApiKeyPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<ResponseApiKeyDTO, Error | Failure, void, ApiKeyDTO, UpdateApiKeyPathParams> & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseApiKeyDTO>
  export interface GetBuildDetailsForDockerQueryParams {
    imagePath?: string
    connectorRef?: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetBuildDetailsForDockerProps = Omit<
    GetProps<ResponseDockerResponseDTO, Failure | Error, GetBuildDetailsForDockerQueryParams, void>,
    'path'
  >
  /**
   * Gets docker build details
   */
  export const GetBuildDetailsForDocker: (props: GetBuildDetailsForDockerProps) => JSX.Element
  export type UseGetBuildDetailsForDockerProps = Omit<
    UseGetProps<ResponseDockerResponseDTO, Failure | Error, GetBuildDetailsForDockerQueryParams, void>,
    'path'
  >
  /**
   * Gets docker build details
   */
  export const useGetBuildDetailsForDocker: (
    props: UseGetBuildDetailsForDockerProps
  ) => import('restful-react').UseGetReturn<
    ResponseDockerResponseDTO,
    Error | Failure,
    GetBuildDetailsForDockerQueryParams,
    unknown
  >
  /**
   * Gets docker build details
   */
  export const getBuildDetailsForDockerPromise: (
    props: GetUsingFetchProps<ResponseDockerResponseDTO, Failure | Error, GetBuildDetailsForDockerQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseDockerResponseDTO>
  export interface GetBuildDetailsForDockerWithYamlQueryParams {
    imagePath?: string
    connectorRef?: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    fqnPath: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetBuildDetailsForDockerWithYamlProps = Omit<
    MutateProps<ResponseDockerResponseDTO, Failure | Error, GetBuildDetailsForDockerWithYamlQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Gets docker build details with yaml input for expression resolution
   */
  export const GetBuildDetailsForDockerWithYaml: (props: GetBuildDetailsForDockerWithYamlProps) => JSX.Element
  export type UseGetBuildDetailsForDockerWithYamlProps = Omit<
    UseMutateProps<
      ResponseDockerResponseDTO,
      Failure | Error,
      GetBuildDetailsForDockerWithYamlQueryParams,
      string,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets docker build details with yaml input for expression resolution
   */
  export const useGetBuildDetailsForDockerWithYaml: (
    props: UseGetBuildDetailsForDockerWithYamlProps
  ) => import('restful-react').UseMutateReturn<
    ResponseDockerResponseDTO,
    Error | Failure,
    string,
    GetBuildDetailsForDockerWithYamlQueryParams,
    void
  >
  /**
   * Gets docker build details with yaml input for expression resolution
   */
  export const getBuildDetailsForDockerWithYamlPromise: (
    props: MutateUsingFetchProps<
      ResponseDockerResponseDTO,
      Failure | Error,
      GetBuildDetailsForDockerWithYamlQueryParams,
      string,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseDockerResponseDTO>
  export interface GetLabelsForDockerQueryParams {
    imagePath?: string
    connectorRef?: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type GetLabelsForDockerProps = Omit<
    MutateProps<
      ResponseDockerResponseDTO,
      Failure | Error,
      GetLabelsForDockerQueryParams,
      DockerRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets docker labels
   */
  export const GetLabelsForDocker: (props: GetLabelsForDockerProps) => JSX.Element
  export type UseGetLabelsForDockerProps = Omit<
    UseMutateProps<
      ResponseDockerResponseDTO,
      Failure | Error,
      GetLabelsForDockerQueryParams,
      DockerRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets docker labels
   */
  export const useGetLabelsForDocker: (
    props: UseGetLabelsForDockerProps
  ) => import('restful-react').UseMutateReturn<
    ResponseDockerResponseDTO,
    Error | Failure,
    DockerRequestDTO,
    GetLabelsForDockerQueryParams,
    void
  >
  /**
   * Gets docker labels
   */
  export const getLabelsForDockerPromise: (
    props: MutateUsingFetchProps<
      ResponseDockerResponseDTO,
      Failure | Error,
      GetLabelsForDockerQueryParams,
      DockerRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseDockerResponseDTO>
  export interface GetLastSuccessfulBuildForDockerQueryParams {
    imagePath?: string
    connectorRef?: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type GetLastSuccessfulBuildForDockerProps = Omit<
    MutateProps<
      ResponseDockerBuildDetailsDTO,
      Failure | Error,
      GetLastSuccessfulBuildForDockerQueryParams,
      DockerRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets docker last successful build
   */
  export const GetLastSuccessfulBuildForDocker: (props: GetLastSuccessfulBuildForDockerProps) => JSX.Element
  export type UseGetLastSuccessfulBuildForDockerProps = Omit<
    UseMutateProps<
      ResponseDockerBuildDetailsDTO,
      Failure | Error,
      GetLastSuccessfulBuildForDockerQueryParams,
      DockerRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets docker last successful build
   */
  export const useGetLastSuccessfulBuildForDocker: (
    props: UseGetLastSuccessfulBuildForDockerProps
  ) => import('restful-react').UseMutateReturn<
    ResponseDockerBuildDetailsDTO,
    Error | Failure,
    DockerRequestDTO,
    GetLastSuccessfulBuildForDockerQueryParams,
    void
  >
  /**
   * Gets docker last successful build
   */
  export const getLastSuccessfulBuildForDockerPromise: (
    props: MutateUsingFetchProps<
      ResponseDockerBuildDetailsDTO,
      Failure | Error,
      GetLastSuccessfulBuildForDockerQueryParams,
      DockerRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseDockerBuildDetailsDTO>
  export interface ValidateArtifactForDockerQueryParams {
    imagePath?: string
    connectorRef?: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type ValidateArtifactForDockerProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateArtifactForDockerQueryParams, void>,
    'path'
  >
  /**
   * Validate docker artifact with tag/tagregx if given
   */
  export const ValidateArtifactForDocker: (props: ValidateArtifactForDockerProps) => JSX.Element
  export type UseValidateArtifactForDockerProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateArtifactForDockerQueryParams, void>,
    'path'
  >
  /**
   * Validate docker artifact with tag/tagregx if given
   */
  export const useValidateArtifactForDocker: (
    props: UseValidateArtifactForDockerProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateArtifactForDockerQueryParams,
    unknown
  >
  /**
   * Validate docker artifact with tag/tagregx if given
   */
  export const validateArtifactForDockerPromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateArtifactForDockerQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface ValidateArtifactServerForDockerQueryParams {
    connectorRef?: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type ValidateArtifactServerForDockerProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateArtifactServerForDockerQueryParams, void>,
    'path'
  >
  /**
   * Validate docker artifact server
   */
  export const ValidateArtifactServerForDocker: (props: ValidateArtifactServerForDockerProps) => JSX.Element
  export type UseValidateArtifactServerForDockerProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateArtifactServerForDockerQueryParams, void>,
    'path'
  >
  /**
   * Validate docker artifact server
   */
  export const useValidateArtifactServerForDocker: (
    props: UseValidateArtifactServerForDockerProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateArtifactServerForDockerQueryParams,
    unknown
  >
  /**
   * Validate docker artifact server
   */
  export const validateArtifactServerForDockerPromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateArtifactServerForDockerQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface ValidateArtifactImageForDockerQueryParams {
    imagePath?: string
    connectorRef?: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type ValidateArtifactImageForDockerProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateArtifactImageForDockerQueryParams, void>,
    'path'
  >
  /**
   * Validate docker image
   */
  export const ValidateArtifactImageForDocker: (props: ValidateArtifactImageForDockerProps) => JSX.Element
  export type UseValidateArtifactImageForDockerProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateArtifactImageForDockerQueryParams, void>,
    'path'
  >
  /**
   * Validate docker image
   */
  export const useValidateArtifactImageForDocker: (
    props: UseValidateArtifactImageForDockerProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateArtifactImageForDockerQueryParams,
    unknown
  >
  /**
   * Validate docker image
   */
  export const validateArtifactImageForDockerPromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateArtifactImageForDockerQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetBuildDetailsForEcrQueryParams {
    imagePath: string
    region: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetBuildDetailsForEcrProps = Omit<
    GetProps<ResponseEcrResponseDTO, Failure | Error, GetBuildDetailsForEcrQueryParams, void>,
    'path'
  >
  /**
   * Gets ecr build details
   */
  export const GetBuildDetailsForEcr: (props: GetBuildDetailsForEcrProps) => JSX.Element
  export type UseGetBuildDetailsForEcrProps = Omit<
    UseGetProps<ResponseEcrResponseDTO, Failure | Error, GetBuildDetailsForEcrQueryParams, void>,
    'path'
  >
  /**
   * Gets ecr build details
   */
  export const useGetBuildDetailsForEcr: (
    props: UseGetBuildDetailsForEcrProps
  ) => import('restful-react').UseGetReturn<
    ResponseEcrResponseDTO,
    Error | Failure,
    GetBuildDetailsForEcrQueryParams,
    unknown
  >
  /**
   * Gets ecr build details
   */
  export const getBuildDetailsForEcrPromise: (
    props: GetUsingFetchProps<ResponseEcrResponseDTO, Failure | Error, GetBuildDetailsForEcrQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEcrResponseDTO>
  export interface GetBuildDetailsForEcrWithYamlQueryParams {
    imagePath: string
    region: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    fqnPath: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetBuildDetailsForEcrWithYamlProps = Omit<
    MutateProps<
      ResponseEcrResponseDTO,
      Failure | Error,
      GetBuildDetailsForEcrWithYamlQueryParams,
      WebhookCatcherBodyRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets ecr build details with yaml expression
   */
  export const GetBuildDetailsForEcrWithYaml: (props: GetBuildDetailsForEcrWithYamlProps) => JSX.Element
  export type UseGetBuildDetailsForEcrWithYamlProps = Omit<
    UseMutateProps<
      ResponseEcrResponseDTO,
      Failure | Error,
      GetBuildDetailsForEcrWithYamlQueryParams,
      WebhookCatcherBodyRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets ecr build details with yaml expression
   */
  export const useGetBuildDetailsForEcrWithYaml: (
    props: UseGetBuildDetailsForEcrWithYamlProps
  ) => import('restful-react').UseMutateReturn<
    ResponseEcrResponseDTO,
    Error | Failure,
    string,
    GetBuildDetailsForEcrWithYamlQueryParams,
    void
  >
  /**
   * Gets ecr build details with yaml expression
   */
  export const getBuildDetailsForEcrWithYamlPromise: (
    props: MutateUsingFetchProps<
      ResponseEcrResponseDTO,
      Failure | Error,
      GetBuildDetailsForEcrWithYamlQueryParams,
      WebhookCatcherBodyRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEcrResponseDTO>
  export interface GetImagesListForEcrQueryParams {
    region: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type GetImagesListForEcrProps = Omit<
    GetProps<ResponseEcrListImagesDTO, Failure | Error, GetImagesListForEcrQueryParams, void>,
    'path'
  >
  /**
   * Gets ecr images
   */
  export const GetImagesListForEcr: (props: GetImagesListForEcrProps) => JSX.Element
  export type UseGetImagesListForEcrProps = Omit<
    UseGetProps<ResponseEcrListImagesDTO, Failure | Error, GetImagesListForEcrQueryParams, void>,
    'path'
  >
  /**
   * Gets ecr images
   */
  export const useGetImagesListForEcr: (
    props: UseGetImagesListForEcrProps
  ) => import('restful-react').UseGetReturn<
    ResponseEcrListImagesDTO,
    Error | Failure,
    GetImagesListForEcrQueryParams,
    unknown
  >
  /**
   * Gets ecr images
   */
  export const getImagesListForEcrPromise: (
    props: GetUsingFetchProps<ResponseEcrListImagesDTO, Failure | Error, GetImagesListForEcrQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEcrListImagesDTO>
  export interface GetLastSuccessfulBuildForEcrQueryParams {
    imagePath: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type GetLastSuccessfulBuildForEcrProps = Omit<
    MutateProps<
      ResponseEcrBuildDetailsDTO,
      Failure | Error,
      GetLastSuccessfulBuildForEcrQueryParams,
      EcrRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets ecr last successful build
   */
  export const GetLastSuccessfulBuildForEcr: (props: GetLastSuccessfulBuildForEcrProps) => JSX.Element
  export type UseGetLastSuccessfulBuildForEcrProps = Omit<
    UseMutateProps<
      ResponseEcrBuildDetailsDTO,
      Failure | Error,
      GetLastSuccessfulBuildForEcrQueryParams,
      EcrRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets ecr last successful build
   */
  export const useGetLastSuccessfulBuildForEcr: (
    props: UseGetLastSuccessfulBuildForEcrProps
  ) => import('restful-react').UseMutateReturn<
    ResponseEcrBuildDetailsDTO,
    Error | Failure,
    EcrRequestDTO,
    GetLastSuccessfulBuildForEcrQueryParams,
    void
  >
  /**
   * Gets ecr last successful build
   */
  export const getLastSuccessfulBuildForEcrPromise: (
    props: MutateUsingFetchProps<
      ResponseEcrBuildDetailsDTO,
      Failure | Error,
      GetLastSuccessfulBuildForEcrQueryParams,
      EcrRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEcrBuildDetailsDTO>
  export interface ValidateArtifactForEcrQueryParams {
    imagePath: string
    region: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type ValidateArtifactForEcrProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateArtifactForEcrQueryParams, void>,
    'path'
  >
  /**
   * Validate Ecr Artifact
   */
  export const ValidateArtifactForEcr: (props: ValidateArtifactForEcrProps) => JSX.Element
  export type UseValidateArtifactForEcrProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateArtifactForEcrQueryParams, void>,
    'path'
  >
  /**
   * Validate Ecr Artifact
   */
  export const useValidateArtifactForEcr: (
    props: UseValidateArtifactForEcrProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateArtifactForEcrQueryParams,
    unknown
  >
  /**
   * Validate Ecr Artifact
   */
  export const validateArtifactForEcrPromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateArtifactForEcrQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface ValidateArtifactServerForEcrQueryParams {
    imagePath: string
    connectorRef: string
    region: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type ValidateArtifactServerForEcrProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateArtifactServerForEcrQueryParams, void>,
    'path'
  >
  /**
   * Validate ecr artifact server
   */
  export const ValidateArtifactServerForEcr: (props: ValidateArtifactServerForEcrProps) => JSX.Element
  export type UseValidateArtifactServerForEcrProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateArtifactServerForEcrQueryParams, void>,
    'path'
  >
  /**
   * Validate ecr artifact server
   */
  export const useValidateArtifactServerForEcr: (
    props: UseValidateArtifactServerForEcrProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateArtifactServerForEcrQueryParams,
    unknown
  >
  /**
   * Validate ecr artifact server
   */
  export const validateArtifactServerForEcrPromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateArtifactServerForEcrQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface ValidateArtifactImageForEcrQueryParams {
    imagePath: string
    region: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type ValidateArtifactImageForEcrProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateArtifactImageForEcrQueryParams, void>,
    'path'
  >
  /**
   * Validate Ecr image
   */
  export const ValidateArtifactImageForEcr: (props: ValidateArtifactImageForEcrProps) => JSX.Element
  export type UseValidateArtifactImageForEcrProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateArtifactImageForEcrQueryParams, void>,
    'path'
  >
  /**
   * Validate Ecr image
   */
  export const useValidateArtifactImageForEcr: (
    props: UseValidateArtifactImageForEcrProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateArtifactImageForEcrQueryParams,
    unknown
  >
  /**
   * Validate Ecr image
   */
  export const validateArtifactImageForEcrPromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateArtifactImageForEcrQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetBuildDetailsForGcrQueryParams {
    imagePath: string
    registryHostname: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetBuildDetailsForGcrProps = Omit<
    GetProps<ResponseGcrResponseDTO, Failure | Error, GetBuildDetailsForGcrQueryParams, void>,
    'path'
  >
  /**
   * Gets gcr build details
   */
  export const GetBuildDetailsForGcr: (props: GetBuildDetailsForGcrProps) => JSX.Element
  export type UseGetBuildDetailsForGcrProps = Omit<
    UseGetProps<ResponseGcrResponseDTO, Failure | Error, GetBuildDetailsForGcrQueryParams, void>,
    'path'
  >
  /**
   * Gets gcr build details
   */
  export const useGetBuildDetailsForGcr: (
    props: UseGetBuildDetailsForGcrProps
  ) => import('restful-react').UseGetReturn<
    ResponseGcrResponseDTO,
    Error | Failure,
    GetBuildDetailsForGcrQueryParams,
    unknown
  >
  /**
   * Gets gcr build details
   */
  export const getBuildDetailsForGcrPromise: (
    props: GetUsingFetchProps<ResponseGcrResponseDTO, Failure | Error, GetBuildDetailsForGcrQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseGcrResponseDTO>
  export interface GetBuildDetailsForGcrWithYamlQueryParams {
    imagePath: string
    registryHostname: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    fqnPath: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetBuildDetailsForGcrWithYamlProps = Omit<
    MutateProps<
      ResponseGcrResponseDTO,
      Failure | Error,
      GetBuildDetailsForGcrWithYamlQueryParams,
      WebhookCatcherBodyRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets gcr build details with Yaml expression
   */
  export const GetBuildDetailsForGcrWithYaml: (props: GetBuildDetailsForGcrWithYamlProps) => JSX.Element
  export type UseGetBuildDetailsForGcrWithYamlProps = Omit<
    UseMutateProps<
      ResponseGcrResponseDTO,
      Failure | Error,
      GetBuildDetailsForGcrWithYamlQueryParams,
      WebhookCatcherBodyRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets gcr build details with Yaml expression
   */
  export const useGetBuildDetailsForGcrWithYaml: (
    props: UseGetBuildDetailsForGcrWithYamlProps
  ) => import('restful-react').UseMutateReturn<
    ResponseGcrResponseDTO,
    Error | Failure,
    string,
    GetBuildDetailsForGcrWithYamlQueryParams,
    void
  >
  /**
   * Gets gcr build details with Yaml expression
   */
  export const getBuildDetailsForGcrWithYamlPromise: (
    props: MutateUsingFetchProps<
      ResponseGcrResponseDTO,
      Failure | Error,
      GetBuildDetailsForGcrWithYamlQueryParams,
      WebhookCatcherBodyRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseGcrResponseDTO>
  export interface GetLastSuccessfulBuildForGcrQueryParams {
    imagePath: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type GetLastSuccessfulBuildForGcrProps = Omit<
    MutateProps<
      ResponseGcrBuildDetailsDTO,
      Failure | Error,
      GetLastSuccessfulBuildForGcrQueryParams,
      GcrRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets gcr last successful build
   */
  export const GetLastSuccessfulBuildForGcr: (props: GetLastSuccessfulBuildForGcrProps) => JSX.Element
  export type UseGetLastSuccessfulBuildForGcrProps = Omit<
    UseMutateProps<
      ResponseGcrBuildDetailsDTO,
      Failure | Error,
      GetLastSuccessfulBuildForGcrQueryParams,
      GcrRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets gcr last successful build
   */
  export const useGetLastSuccessfulBuildForGcr: (
    props: UseGetLastSuccessfulBuildForGcrProps
  ) => import('restful-react').UseMutateReturn<
    ResponseGcrBuildDetailsDTO,
    Error | Failure,
    GcrRequestDTO,
    GetLastSuccessfulBuildForGcrQueryParams,
    void
  >
  /**
   * Gets gcr last successful build
   */
  export const getLastSuccessfulBuildForGcrPromise: (
    props: MutateUsingFetchProps<
      ResponseGcrBuildDetailsDTO,
      Failure | Error,
      GetLastSuccessfulBuildForGcrQueryParams,
      GcrRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseGcrBuildDetailsDTO>
  export interface ValidateArtifactForGcrQueryParams {
    imagePath: string
    registryHostname: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type ValidateArtifactForGcrProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateArtifactForGcrQueryParams, void>,
    'path'
  >
  /**
   * Validate Gcr Artifact
   */
  export const ValidateArtifactForGcr: (props: ValidateArtifactForGcrProps) => JSX.Element
  export type UseValidateArtifactForGcrProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateArtifactForGcrQueryParams, void>,
    'path'
  >
  /**
   * Validate Gcr Artifact
   */
  export const useValidateArtifactForGcr: (
    props: UseValidateArtifactForGcrProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateArtifactForGcrQueryParams,
    unknown
  >
  /**
   * Validate Gcr Artifact
   */
  export const validateArtifactForGcrPromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateArtifactForGcrQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface ValidateArtifactServerForGcrQueryParams {
    imagePath: string
    connectorRef: string
    registryHostname: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type ValidateArtifactServerForGcrProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateArtifactServerForGcrQueryParams, void>,
    'path'
  >
  /**
   * Validate gcr artifact server
   */
  export const ValidateArtifactServerForGcr: (props: ValidateArtifactServerForGcrProps) => JSX.Element
  export type UseValidateArtifactServerForGcrProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateArtifactServerForGcrQueryParams, void>,
    'path'
  >
  /**
   * Validate gcr artifact server
   */
  export const useValidateArtifactServerForGcr: (
    props: UseValidateArtifactServerForGcrProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateArtifactServerForGcrQueryParams,
    unknown
  >
  /**
   * Validate gcr artifact server
   */
  export const validateArtifactServerForGcrPromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateArtifactServerForGcrQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface ValidateArtifactImageForGcrQueryParams {
    imagePath: string
    registryHostname: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type ValidateArtifactImageForGcrProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateArtifactImageForGcrQueryParams, void>,
    'path'
  >
  /**
   * Validate Gcr image
   */
  export const ValidateArtifactImageForGcr: (props: ValidateArtifactImageForGcrProps) => JSX.Element
  export type UseValidateArtifactImageForGcrProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateArtifactImageForGcrQueryParams, void>,
    'path'
  >
  /**
   * Validate Gcr image
   */
  export const useValidateArtifactImageForGcr: (
    props: UseValidateArtifactImageForGcrProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateArtifactImageForGcrQueryParams,
    unknown
  >
  /**
   * Validate Gcr image
   */
  export const validateArtifactImageForGcrPromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateArtifactImageForGcrQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetAuthenticationSettingsQueryParams {
    accountIdentifier?: string
  }
  export type GetAuthenticationSettingsProps = Omit<
    GetProps<RestResponseAuthenticationSettingsResponse, unknown, GetAuthenticationSettingsQueryParams, void>,
    'path'
  >
  /**
   * Get authentication settings for an account
   */
  export const GetAuthenticationSettings: (props: GetAuthenticationSettingsProps) => JSX.Element
  export type UseGetAuthenticationSettingsProps = Omit<
    UseGetProps<RestResponseAuthenticationSettingsResponse, unknown, GetAuthenticationSettingsQueryParams, void>,
    'path'
  >
  /**
   * Get authentication settings for an account
   */
  export const useGetAuthenticationSettings: (
    props: UseGetAuthenticationSettingsProps
  ) => import('restful-react').UseGetReturn<
    RestResponseAuthenticationSettingsResponse,
    unknown,
    GetAuthenticationSettingsQueryParams,
    unknown
  >
  /**
   * Get authentication settings for an account
   */
  export const getAuthenticationSettingsPromise: (
    props: GetUsingFetchProps<
      RestResponseAuthenticationSettingsResponse,
      unknown,
      GetAuthenticationSettingsQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseAuthenticationSettingsResponse>
  export interface DeleteSamlMetaDataQueryParams {
    accountIdentifier?: string
  }
  export type DeleteSamlMetaDataProps = Omit<
    MutateProps<RestResponseSSOConfig, unknown, DeleteSamlMetaDataQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Delete SAML Config
   */
  export const DeleteSamlMetaData: (props: DeleteSamlMetaDataProps) => JSX.Element
  export type UseDeleteSamlMetaDataProps = Omit<
    UseMutateProps<RestResponseSSOConfig, unknown, DeleteSamlMetaDataQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Delete SAML Config
   */
  export const useDeleteSamlMetaData: (
    props: UseDeleteSamlMetaDataProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseSSOConfig,
    unknown,
    void,
    DeleteSamlMetaDataQueryParams,
    void
  >
  /**
   * Delete SAML Config
   */
  export const deleteSamlMetaDataPromise: (
    props: MutateUsingFetchProps<RestResponseSSOConfig, unknown, DeleteSamlMetaDataQueryParams, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseSSOConfig>
  export interface GetPasswordStrengthSettingsQueryParams {
    accountIdentifier?: string
  }
  export type GetPasswordStrengthSettingsProps = Omit<
    GetProps<RestResponsePasswordStrengthPolicy, unknown, GetPasswordStrengthSettingsQueryParams, void>,
    'path'
  >
  /**
   * Get Password strength settings
   */
  export const GetPasswordStrengthSettings: (props: GetPasswordStrengthSettingsProps) => JSX.Element
  export type UseGetPasswordStrengthSettingsProps = Omit<
    UseGetProps<RestResponsePasswordStrengthPolicy, unknown, GetPasswordStrengthSettingsQueryParams, void>,
    'path'
  >
  /**
   * Get Password strength settings
   */
  export const useGetPasswordStrengthSettings: (
    props: UseGetPasswordStrengthSettingsProps
  ) => import('restful-react').UseGetReturn<
    RestResponsePasswordStrengthPolicy,
    unknown,
    GetPasswordStrengthSettingsQueryParams,
    unknown
  >
  /**
   * Get Password strength settings
   */
  export const getPasswordStrengthSettingsPromise: (
    props: GetUsingFetchProps<
      RestResponsePasswordStrengthPolicy,
      unknown,
      GetPasswordStrengthSettingsQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<RestResponsePasswordStrengthPolicy>
  export interface PutLoginSettingsQueryParams {
    accountIdentifier?: string
  }
  export interface PutLoginSettingsPathParams {
    loginSettingsId: string
  }
  export type PutLoginSettingsProps = Omit<
    MutateProps<
      RestResponseLoginSettings,
      unknown,
      PutLoginSettingsQueryParams,
      LoginSettings,
      PutLoginSettingsPathParams
    >,
    'path' | 'verb'
  > &
    PutLoginSettingsPathParams
  /**
   * Update login settings - lockout, expiration, strength
   */
  export const PutLoginSettings: ({ loginSettingsId, ...props }: PutLoginSettingsProps) => JSX.Element
  export type UsePutLoginSettingsProps = Omit<
    UseMutateProps<
      RestResponseLoginSettings,
      unknown,
      PutLoginSettingsQueryParams,
      LoginSettings,
      PutLoginSettingsPathParams
    >,
    'path' | 'verb'
  > &
    PutLoginSettingsPathParams
  /**
   * Update login settings - lockout, expiration, strength
   */
  export const usePutLoginSettings: ({
    loginSettingsId,
    ...props
  }: UsePutLoginSettingsProps) => import('restful-react').UseMutateReturn<
    RestResponseLoginSettings,
    unknown,
    LoginSettings,
    PutLoginSettingsQueryParams,
    PutLoginSettingsPathParams
  >
  /**
   * Update login settings - lockout, expiration, strength
   */
  export const putLoginSettingsPromise: (
    {
      loginSettingsId,
      ...props
    }: MutateUsingFetchProps<
      RestResponseLoginSettings,
      unknown,
      PutLoginSettingsQueryParams,
      LoginSettings,
      PutLoginSettingsPathParams
    > & {
      loginSettingsId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseLoginSettings>
  export interface RemoveOauthMechanismQueryParams {
    accountIdentifier?: string
  }
  export type RemoveOauthMechanismProps = Omit<
    MutateProps<RestResponseBoolean, unknown, RemoveOauthMechanismQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Remove Oauth mechanism for an account
   */
  export const RemoveOauthMechanism: (props: RemoveOauthMechanismProps) => JSX.Element
  export type UseRemoveOauthMechanismProps = Omit<
    UseMutateProps<RestResponseBoolean, unknown, RemoveOauthMechanismQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Remove Oauth mechanism for an account
   */
  export const useRemoveOauthMechanism: (
    props: UseRemoveOauthMechanismProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseBoolean,
    unknown,
    void,
    RemoveOauthMechanismQueryParams,
    void
  >
  /**
   * Remove Oauth mechanism for an account
   */
  export const removeOauthMechanismPromise: (
    props: MutateUsingFetchProps<RestResponseBoolean, unknown, RemoveOauthMechanismQueryParams, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseBoolean>
  export interface UpdateOauthProvidersQueryParams {
    accountIdentifier?: string
  }
  export type UpdateOauthProvidersProps = Omit<
    MutateProps<RestResponseBoolean, unknown, UpdateOauthProvidersQueryParams, OAuthSettings, void>,
    'path' | 'verb'
  >
  /**
   * Update Oauth providers for an account
   */
  export const UpdateOauthProviders: (props: UpdateOauthProvidersProps) => JSX.Element
  export type UseUpdateOauthProvidersProps = Omit<
    UseMutateProps<RestResponseBoolean, unknown, UpdateOauthProvidersQueryParams, OAuthSettings, void>,
    'path' | 'verb'
  >
  /**
   * Update Oauth providers for an account
   */
  export const useUpdateOauthProviders: (
    props: UseUpdateOauthProvidersProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseBoolean,
    unknown,
    OAuthSettings,
    UpdateOauthProvidersQueryParams,
    void
  >
  /**
   * Update Oauth providers for an account
   */
  export const updateOauthProvidersPromise: (
    props: MutateUsingFetchProps<RestResponseBoolean, unknown, UpdateOauthProvidersQueryParams, OAuthSettings, void>,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseBoolean>
  export interface GetSamlLoginTestQueryParams {
    accountId?: string
  }
  export type GetSamlLoginTestProps = Omit<
    GetProps<RestResponseLoginTypeResponse, unknown, GetSamlLoginTestQueryParams, void>,
    'path'
  >
  /**
   * Get SAML Login Test
   */
  export const GetSamlLoginTest: (props: GetSamlLoginTestProps) => JSX.Element
  export type UseGetSamlLoginTestProps = Omit<
    UseGetProps<RestResponseLoginTypeResponse, unknown, GetSamlLoginTestQueryParams, void>,
    'path'
  >
  /**
   * Get SAML Login Test
   */
  export const useGetSamlLoginTest: (
    props: UseGetSamlLoginTestProps
  ) => import('restful-react').UseGetReturn<
    RestResponseLoginTypeResponse,
    unknown,
    GetSamlLoginTestQueryParams,
    unknown
  >
  /**
   * Get SAML Login Test
   */
  export const getSamlLoginTestPromise: (
    props: GetUsingFetchProps<RestResponseLoginTypeResponse, unknown, GetSamlLoginTestQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseLoginTypeResponse>
  export interface UploadSamlMetaDataQueryParams {
    accountId?: string
  }
  export type UploadSamlMetaDataProps = Omit<
    MutateProps<RestResponseSSOConfig, unknown, UploadSamlMetaDataQueryParams, UploadSamlMetaDataRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create SAML Config
   */
  export const UploadSamlMetaData: (props: UploadSamlMetaDataProps) => JSX.Element
  export type UseUploadSamlMetaDataProps = Omit<
    UseMutateProps<RestResponseSSOConfig, unknown, UploadSamlMetaDataQueryParams, UploadSamlMetaDataRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create SAML Config
   */
  export const useUploadSamlMetaData: (
    props: UseUploadSamlMetaDataProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseSSOConfig,
    unknown,
    void,
    UploadSamlMetaDataQueryParams,
    void
  >
  /**
   * Create SAML Config
   */
  export const uploadSamlMetaDataPromise: (
    props: MutateUsingFetchProps<
      RestResponseSSOConfig,
      unknown,
      UploadSamlMetaDataQueryParams,
      UploadSamlMetaDataRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseSSOConfig>
  export interface UpdateSamlMetaDataQueryParams {
    accountId?: string
  }
  export type UpdateSamlMetaDataProps = Omit<
    MutateProps<RestResponseSSOConfig, unknown, UpdateSamlMetaDataQueryParams, UploadSamlMetaDataRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Edit SAML Config
   */
  export const UpdateSamlMetaData: (props: UpdateSamlMetaDataProps) => JSX.Element
  export type UseUpdateSamlMetaDataProps = Omit<
    UseMutateProps<RestResponseSSOConfig, unknown, UpdateSamlMetaDataQueryParams, UploadSamlMetaDataRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Edit SAML Config
   */
  export const useUpdateSamlMetaData: (
    props: UseUpdateSamlMetaDataProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseSSOConfig,
    unknown,
    void,
    UpdateSamlMetaDataQueryParams,
    void
  >
  /**
   * Edit SAML Config
   */
  export const updateSamlMetaDataPromise: (
    props: MutateUsingFetchProps<
      RestResponseSSOConfig,
      unknown,
      UpdateSamlMetaDataQueryParams,
      UploadSamlMetaDataRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseSSOConfig>
  export interface SetTwoFactorAuthAtAccountLevelQueryParams {
    accountIdentifier?: string
  }
  export type SetTwoFactorAuthAtAccountLevelProps = Omit<
    MutateProps<
      RestResponseBoolean,
      unknown,
      SetTwoFactorAuthAtAccountLevelQueryParams,
      TwoFactorAdminOverrideSettings,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Set account level two factor auth setting
   */
  export const SetTwoFactorAuthAtAccountLevel: (props: SetTwoFactorAuthAtAccountLevelProps) => JSX.Element
  export type UseSetTwoFactorAuthAtAccountLevelProps = Omit<
    UseMutateProps<
      RestResponseBoolean,
      unknown,
      SetTwoFactorAuthAtAccountLevelQueryParams,
      TwoFactorAdminOverrideSettings,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Set account level two factor auth setting
   */
  export const useSetTwoFactorAuthAtAccountLevel: (
    props: UseSetTwoFactorAuthAtAccountLevelProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseBoolean,
    unknown,
    TwoFactorAdminOverrideSettings,
    SetTwoFactorAuthAtAccountLevelQueryParams,
    void
  >
  /**
   * Set account level two factor auth setting
   */
  export const setTwoFactorAuthAtAccountLevelPromise: (
    props: MutateUsingFetchProps<
      RestResponseBoolean,
      unknown,
      SetTwoFactorAuthAtAccountLevelQueryParams,
      TwoFactorAdminOverrideSettings,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseBoolean>
  export interface UpdateAuthMechanismQueryParams {
    accountIdentifier?: string
    authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
  }
  export type UpdateAuthMechanismProps = Omit<
    MutateProps<RestResponseBoolean, unknown, UpdateAuthMechanismQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Update Auth mechanism for an account
   */
  export const UpdateAuthMechanism: (props: UpdateAuthMechanismProps) => JSX.Element
  export type UseUpdateAuthMechanismProps = Omit<
    UseMutateProps<RestResponseBoolean, unknown, UpdateAuthMechanismQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Update Auth mechanism for an account
   */
  export const useUpdateAuthMechanism: (
    props: UseUpdateAuthMechanismProps
  ) => import('restful-react').UseMutateReturn<RestResponseBoolean, unknown, void, UpdateAuthMechanismQueryParams, void>
  /**
   * Update Auth mechanism for an account
   */
  export const updateAuthMechanismPromise: (
    props: MutateUsingFetchProps<RestResponseBoolean, unknown, UpdateAuthMechanismQueryParams, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseBoolean>
  export interface UpdateWhitelistedDomainsQueryParams {
    accountIdentifier?: string
  }
  export type UpdateWhitelistedDomainsProps = Omit<
    MutateProps<
      RestResponseBoolean,
      unknown,
      UpdateWhitelistedDomainsQueryParams,
      UpdateWhitelistedDomainsBodyRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Update Whitelisted domains for an account
   */
  export const UpdateWhitelistedDomains: (props: UpdateWhitelistedDomainsProps) => JSX.Element
  export type UseUpdateWhitelistedDomainsProps = Omit<
    UseMutateProps<
      RestResponseBoolean,
      unknown,
      UpdateWhitelistedDomainsQueryParams,
      UpdateWhitelistedDomainsBodyRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Update Whitelisted domains for an account
   */
  export const useUpdateWhitelistedDomains: (
    props: UseUpdateWhitelistedDomainsProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseBoolean,
    unknown,
    UpdateWhitelistedDomainsBodyRequestBody,
    UpdateWhitelistedDomainsQueryParams,
    void
  >
  /**
   * Update Whitelisted domains for an account
   */
  export const updateWhitelistedDomainsPromise: (
    props: MutateUsingFetchProps<
      RestResponseBoolean,
      unknown,
      UpdateWhitelistedDomainsQueryParams,
      UpdateWhitelistedDomainsBodyRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseBoolean>
  export interface GetGCSBucketListQueryParams {
    connectorRef?: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type GetGCSBucketListProps = Omit<
    GetProps<ResponseMapStringString, Failure | Error, GetGCSBucketListQueryParams, void>,
    'path'
  >
  /**
   * Gets GCS buckets list
   */
  export const GetGCSBucketList: (props: GetGCSBucketListProps) => JSX.Element
  export type UseGetGCSBucketListProps = Omit<
    UseGetProps<ResponseMapStringString, Failure | Error, GetGCSBucketListQueryParams, void>,
    'path'
  >
  /**
   * Gets GCS buckets list
   */
  export const useGetGCSBucketList: (
    props: UseGetGCSBucketListProps
  ) => import('restful-react').UseGetReturn<
    ResponseMapStringString,
    Error | Failure,
    GetGCSBucketListQueryParams,
    unknown
  >
  /**
   * Gets GCS buckets list
   */
  export const getGCSBucketListPromise: (
    props: GetUsingFetchProps<ResponseMapStringString, Failure | Error, GetGCSBucketListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseMapStringString>
  export interface GetBucketListForS3QueryParams {
    region: string
    connectorRef: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type GetBucketListForS3Props = Omit<
    GetProps<ResponseMapStringString, Failure | Error, GetBucketListForS3QueryParams, void>,
    'path'
  >
  /**
   * Gets s3 buckets
   */
  export const GetBucketListForS3: (props: GetBucketListForS3Props) => JSX.Element
  export type UseGetBucketListForS3Props = Omit<
    UseGetProps<ResponseMapStringString, Failure | Error, GetBucketListForS3QueryParams, void>,
    'path'
  >
  /**
   * Gets s3 buckets
   */
  export const useGetBucketListForS3: (
    props: UseGetBucketListForS3Props
  ) => import('restful-react').UseGetReturn<
    ResponseMapStringString,
    Error | Failure,
    GetBucketListForS3QueryParams,
    unknown
  >
  /**
   * Gets s3 buckets
   */
  export const getBucketListForS3Promise: (
    props: GetUsingFetchProps<ResponseMapStringString, Failure | Error, GetBucketListForS3QueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseMapStringString>
  export interface GetConnectorListQueryParams {
    pageIndex?: number
    pageSize?: number
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    searchTerm?: string
    type?:
      | 'K8sCluster'
      | 'Git'
      | 'Splunk'
      | 'AppDynamics'
      | 'Prometheus'
      | 'Dynatrace'
      | 'Vault'
      | 'AzureKeyVault'
      | 'DockerRegistry'
      | 'Local'
      | 'AwsKms'
      | 'GcpKms'
      | 'AwsSecretManager'
      | 'Gcp'
      | 'Aws'
      | 'Artifactory'
      | 'Jira'
      | 'Nexus'
      | 'Github'
      | 'Gitlab'
      | 'Bitbucket'
      | 'Codecommit'
      | 'CEAws'
      | 'CEAzure'
      | 'GcpCloudCost'
      | 'CEK8sCluster'
      | 'HttpHelmRepo'
      | 'NewRelic'
      | 'Datadog'
      | 'SumoLogic'
    category?:
      | 'CLOUD_PROVIDER'
      | 'SECRET_MANAGER'
      | 'CLOUD_COST'
      | 'ARTIFACTORY'
      | 'CODE_REPO'
      | 'MONITORING'
      | 'TICKETING'
    source_category?:
      | 'CLOUD_PROVIDER'
      | 'SECRET_MANAGER'
      | 'CLOUD_COST'
      | 'ARTIFACTORY'
      | 'CODE_REPO'
      | 'MONITORING'
      | 'TICKETING'
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetConnectorListProps = Omit<
    GetProps<ResponsePageConnectorResponse, Failure | Error, GetConnectorListQueryParams, void>,
    'path'
  >
  /**
   * Gets Connector list
   */
  export const GetConnectorList: (props: GetConnectorListProps) => JSX.Element
  export type UseGetConnectorListProps = Omit<
    UseGetProps<ResponsePageConnectorResponse, Failure | Error, GetConnectorListQueryParams, void>,
    'path'
  >
  /**
   * Gets Connector list
   */
  export const useGetConnectorList: (
    props: UseGetConnectorListProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageConnectorResponse,
    Error | Failure,
    GetConnectorListQueryParams,
    unknown
  >
  /**
   * Gets Connector list
   */
  export const getConnectorListPromise: (
    props: GetUsingFetchProps<ResponsePageConnectorResponse, Failure | Error, GetConnectorListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageConnectorResponse>
  export interface CreateConnectorQueryParams {
    accountIdentifier?: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    baseBranch?: string
  }
  export type CreateConnectorProps = Omit<
    MutateProps<ResponseConnectorResponse, Failure | Error, CreateConnectorQueryParams, ConnectorRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Creates a Connector
   */
  export const CreateConnector: (props: CreateConnectorProps) => JSX.Element
  export type UseCreateConnectorProps = Omit<
    UseMutateProps<ResponseConnectorResponse, Failure | Error, CreateConnectorQueryParams, ConnectorRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Creates a Connector
   */
  export const useCreateConnector: (
    props: UseCreateConnectorProps
  ) => import('restful-react').UseMutateReturn<
    ResponseConnectorResponse,
    Error | Failure,
    Connector,
    CreateConnectorQueryParams,
    void
  >
  /**
   * Creates a Connector
   */
  export const createConnectorPromise: (
    props: MutateUsingFetchProps<
      ResponseConnectorResponse,
      Failure | Error,
      CreateConnectorQueryParams,
      ConnectorRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseConnectorResponse>
  export interface UpdateConnectorQueryParams {
    accountIdentifier?: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    lastObjectId?: string
    baseBranch?: string
  }
  export type UpdateConnectorProps = Omit<
    MutateProps<ResponseConnectorResponse, Failure | Error, UpdateConnectorQueryParams, ConnectorRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Updates a Connector
   */
  export const UpdateConnector: (props: UpdateConnectorProps) => JSX.Element
  export type UseUpdateConnectorProps = Omit<
    UseMutateProps<ResponseConnectorResponse, Failure | Error, UpdateConnectorQueryParams, ConnectorRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Updates a Connector
   */
  export const useUpdateConnector: (
    props: UseUpdateConnectorProps
  ) => import('restful-react').UseMutateReturn<
    ResponseConnectorResponse,
    Error | Failure,
    Connector,
    UpdateConnectorQueryParams,
    void
  >
  /**
   * Updates a Connector
   */
  export const updateConnectorPromise: (
    props: MutateUsingFetchProps<
      ResponseConnectorResponse,
      Failure | Error,
      UpdateConnectorQueryParams,
      ConnectorRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseConnectorResponse>
  export interface GetConnectorCatalogueQueryParams {
    accountIdentifier?: string
  }
  export type GetConnectorCatalogueProps = Omit<
    GetProps<ResponseConnectorCatalogueResponse, Failure | Error, GetConnectorCatalogueQueryParams, void>,
    'path'
  >
  /**
   * Get Connector Catalogue
   */
  export const GetConnectorCatalogue: (props: GetConnectorCatalogueProps) => JSX.Element
  export type UseGetConnectorCatalogueProps = Omit<
    UseGetProps<ResponseConnectorCatalogueResponse, Failure | Error, GetConnectorCatalogueQueryParams, void>,
    'path'
  >
  /**
   * Get Connector Catalogue
   */
  export const useGetConnectorCatalogue: (
    props: UseGetConnectorCatalogueProps
  ) => import('restful-react').UseGetReturn<
    ResponseConnectorCatalogueResponse,
    Error | Failure,
    GetConnectorCatalogueQueryParams,
    unknown
  >
  /**
   * Get Connector Catalogue
   */
  export const getConnectorCataloguePromise: (
    props: GetUsingFetchProps<
      ResponseConnectorCatalogueResponse,
      Failure | Error,
      GetConnectorCatalogueQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseConnectorCatalogueResponse>
  export interface GetAllAllowedFieldValuesQueryParams {
    connectorType:
      | 'K8sCluster'
      | 'Git'
      | 'Splunk'
      | 'AppDynamics'
      | 'Prometheus'
      | 'Dynatrace'
      | 'Vault'
      | 'AzureKeyVault'
      | 'DockerRegistry'
      | 'Local'
      | 'AwsKms'
      | 'GcpKms'
      | 'AwsSecretManager'
      | 'Gcp'
      | 'Aws'
      | 'Artifactory'
      | 'Jira'
      | 'Nexus'
      | 'Github'
      | 'Gitlab'
      | 'Bitbucket'
      | 'Codecommit'
      | 'CEAws'
      | 'CEAzure'
      | 'GcpCloudCost'
      | 'CEK8sCluster'
      | 'HttpHelmRepo'
      | 'NewRelic'
      | 'Datadog'
      | 'SumoLogic'
  }
  export type GetAllAllowedFieldValuesProps = Omit<
    GetProps<ResponseFieldValues, Failure | Error, GetAllAllowedFieldValuesQueryParams, void>,
    'path'
  >
  /**
   * Get All Allowed field values for Connector Type
   */
  export const GetAllAllowedFieldValues: (props: GetAllAllowedFieldValuesProps) => JSX.Element
  export type UseGetAllAllowedFieldValuesProps = Omit<
    UseGetProps<ResponseFieldValues, Failure | Error, GetAllAllowedFieldValuesQueryParams, void>,
    'path'
  >
  /**
   * Get All Allowed field values for Connector Type
   */
  export const useGetAllAllowedFieldValues: (
    props: UseGetAllAllowedFieldValuesProps
  ) => import('restful-react').UseGetReturn<
    ResponseFieldValues,
    Error | Failure,
    GetAllAllowedFieldValuesQueryParams,
    unknown
  >
  /**
   * Get All Allowed field values for Connector Type
   */
  export const getAllAllowedFieldValuesPromise: (
    props: GetUsingFetchProps<ResponseFieldValues, Failure | Error, GetAllAllowedFieldValuesQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseFieldValues>
  export interface GetCEAwsTemplateQueryParams {
    eventsEnabled?: boolean
    curEnabled?: boolean
    optimizationEnabled?: boolean
  }
  export type GetCEAwsTemplateProps = Omit<
    MutateProps<ResponseString, Failure | Error, GetCEAwsTemplateQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Get CE Aws Connector Template URL Environment Wise
   */
  export const GetCEAwsTemplate: (props: GetCEAwsTemplateProps) => JSX.Element
  export type UseGetCEAwsTemplateProps = Omit<
    UseMutateProps<ResponseString, Failure | Error, GetCEAwsTemplateQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Get CE Aws Connector Template URL Environment Wise
   */
  export const useGetCEAwsTemplate: (
    props: UseGetCEAwsTemplateProps
  ) => import('restful-react').UseMutateReturn<ResponseString, Error | Failure, void, GetCEAwsTemplateQueryParams, void>
  /**
   * Get CE Aws Connector Template URL Environment Wise
   */
  export const getCEAwsTemplatePromise: (
    props: MutateUsingFetchProps<ResponseString, Failure | Error, GetCEAwsTemplateQueryParams, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface GetConnectorListV2QueryParams {
    pageIndex?: number
    pageSize?: number
    accountIdentifier?: string
    searchTerm?: string
    orgIdentifier?: string
    projectIdentifier?: string
    filterIdentifier?: string
    includeAllConnectorsAvailableAtScope?: boolean
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
    getDistinctFromBranches?: boolean
  }
  export type GetConnectorListV2Props = Omit<
    MutateProps<
      ResponsePageConnectorResponse,
      Failure | Error,
      GetConnectorListV2QueryParams,
      ConnectorFilterProperties,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets Connector list
   */
  export const GetConnectorListV2: (props: GetConnectorListV2Props) => JSX.Element
  export type UseGetConnectorListV2Props = Omit<
    UseMutateProps<
      ResponsePageConnectorResponse,
      Failure | Error,
      GetConnectorListV2QueryParams,
      ConnectorFilterProperties,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets Connector list
   */
  export const useGetConnectorListV2: (
    props: UseGetConnectorListV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponsePageConnectorResponse,
    Error | Failure,
    ConnectorFilterProperties,
    GetConnectorListV2QueryParams,
    void
  >
  /**
   * Gets Connector list
   */
  export const getConnectorListV2Promise: (
    props: MutateUsingFetchProps<
      ResponsePageConnectorResponse,
      Failure | Error,
      GetConnectorListV2QueryParams,
      ConnectorFilterProperties,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageConnectorResponse>
  export interface ListConnectorByFQNQueryParams {
    accountIdentifier?: string
  }
  export type ListConnectorByFQNProps = Omit<
    MutateProps<ResponseListConnectorResponse, Failure | Error, ListConnectorByFQNQueryParams, string[], void>,
    'path' | 'verb'
  >
  /**
   * Gets Connector list
   */
  export const ListConnectorByFQN: (props: ListConnectorByFQNProps) => JSX.Element
  export type UseListConnectorByFQNProps = Omit<
    UseMutateProps<ResponseListConnectorResponse, Failure | Error, ListConnectorByFQNQueryParams, string[], void>,
    'path' | 'verb'
  >
  /**
   * Gets Connector list
   */
  export const useListConnectorByFQN: (
    props: UseListConnectorByFQNProps
  ) => import('restful-react').UseMutateReturn<
    ResponseListConnectorResponse,
    Error | Failure,
    string[],
    ListConnectorByFQNQueryParams,
    void
  >
  /**
   * Gets Connector list
   */
  export const listConnectorByFQNPromise: (
    props: MutateUsingFetchProps<
      ResponseListConnectorResponse,
      Failure | Error,
      ListConnectorByFQNQueryParams,
      string[],
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListConnectorResponse>
  export interface GetConnectorStatisticsQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetConnectorStatisticsProps = Omit<
    GetProps<ResponseConnectorStatistics, Failure | Error, GetConnectorStatisticsQueryParams, void>,
    'path'
  >
  /**
   * Get Connectors statistics
   */
  export const GetConnectorStatistics: (props: GetConnectorStatisticsProps) => JSX.Element
  export type UseGetConnectorStatisticsProps = Omit<
    UseGetProps<ResponseConnectorStatistics, Failure | Error, GetConnectorStatisticsQueryParams, void>,
    'path'
  >
  /**
   * Get Connectors statistics
   */
  export const useGetConnectorStatistics: (
    props: UseGetConnectorStatisticsProps
  ) => import('restful-react').UseGetReturn<
    ResponseConnectorStatistics,
    Error | Failure,
    GetConnectorStatisticsQueryParams,
    unknown
  >
  /**
   * Get Connectors statistics
   */
  export const getConnectorStatisticsPromise: (
    props: GetUsingFetchProps<ResponseConnectorStatistics, Failure | Error, GetConnectorStatisticsQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseConnectorStatistics>
  export interface GetTestConnectionResultQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export interface GetTestConnectionResultPathParams {
    identifier: string
  }
  export type GetTestConnectionResultProps = Omit<
    MutateProps<
      ResponseConnectorValidationResult,
      Failure | Error,
      GetTestConnectionResultQueryParams,
      void,
      GetTestConnectionResultPathParams
    >,
    'path' | 'verb'
  > &
    GetTestConnectionResultPathParams
  /**
   * Test the connection
   */
  export const GetTestConnectionResult: ({ identifier, ...props }: GetTestConnectionResultProps) => JSX.Element
  export type UseGetTestConnectionResultProps = Omit<
    UseMutateProps<
      ResponseConnectorValidationResult,
      Failure | Error,
      GetTestConnectionResultQueryParams,
      void,
      GetTestConnectionResultPathParams
    >,
    'path' | 'verb'
  > &
    GetTestConnectionResultPathParams
  /**
   * Test the connection
   */
  export const useGetTestConnectionResult: ({
    identifier,
    ...props
  }: UseGetTestConnectionResultProps) => import('restful-react').UseMutateReturn<
    ResponseConnectorValidationResult,
    Error | Failure,
    void,
    GetTestConnectionResultQueryParams,
    GetTestConnectionResultPathParams
  >
  /**
   * Test the connection
   */
  export const getTestConnectionResultPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseConnectorValidationResult,
      Error | Failure,
      GetTestConnectionResultQueryParams,
      void,
      GetTestConnectionResultPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseConnectorValidationResult>
  export interface GetTestGitRepoConnectionResultQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    repoURL?: string
  }
  export interface GetTestGitRepoConnectionResultPathParams {
    identifier: string
  }
  export type GetTestGitRepoConnectionResultProps = Omit<
    MutateProps<
      ResponseConnectorValidationResult,
      Failure | Error,
      GetTestGitRepoConnectionResultQueryParams,
      void,
      GetTestGitRepoConnectionResultPathParams
    >,
    'path' | 'verb'
  > &
    GetTestGitRepoConnectionResultPathParams
  /**
   * Test the connection
   */
  export const GetTestGitRepoConnectionResult: ({
    identifier,
    ...props
  }: GetTestGitRepoConnectionResultProps) => JSX.Element
  export type UseGetTestGitRepoConnectionResultProps = Omit<
    UseMutateProps<
      ResponseConnectorValidationResult,
      Failure | Error,
      GetTestGitRepoConnectionResultQueryParams,
      void,
      GetTestGitRepoConnectionResultPathParams
    >,
    'path' | 'verb'
  > &
    GetTestGitRepoConnectionResultPathParams
  /**
   * Test the connection
   */
  export const useGetTestGitRepoConnectionResult: ({
    identifier,
    ...props
  }: UseGetTestGitRepoConnectionResultProps) => import('restful-react').UseMutateReturn<
    ResponseConnectorValidationResult,
    Error | Failure,
    void,
    GetTestGitRepoConnectionResultQueryParams,
    GetTestGitRepoConnectionResultPathParams
  >
  /**
   * Test the connection
   */
  export const getTestGitRepoConnectionResultPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseConnectorValidationResult,
      Error | Failure,
      GetTestGitRepoConnectionResultQueryParams,
      void,
      GetTestGitRepoConnectionResultPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseConnectorValidationResult>
  export interface ValidateTheIdentifierIsUniqueQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    identifier?: string
  }
  export type ValidateTheIdentifierIsUniqueProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateTheIdentifierIsUniqueQueryParams, void>,
    'path'
  >
  /**
   * Validate Identifier is unique
   */
  export const ValidateTheIdentifierIsUnique: (props: ValidateTheIdentifierIsUniqueProps) => JSX.Element
  export type UseValidateTheIdentifierIsUniqueProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateTheIdentifierIsUniqueQueryParams, void>,
    'path'
  >
  /**
   * Validate Identifier is unique
   */
  export const useValidateTheIdentifierIsUnique: (
    props: UseValidateTheIdentifierIsUniqueProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateTheIdentifierIsUniqueQueryParams,
    unknown
  >
  /**
   * Validate Identifier is unique
   */
  export const validateTheIdentifierIsUniquePromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateTheIdentifierIsUniqueQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface DeleteConnectorQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    lastObjectId?: string
  }
  export type DeleteConnectorProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteConnectorQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a connector by identifier
   */
  export const DeleteConnector: (props: DeleteConnectorProps) => JSX.Element
  export type UseDeleteConnectorProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteConnectorQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a connector by identifier
   */
  export const useDeleteConnector: (
    props: UseDeleteConnectorProps
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    string,
    DeleteConnectorQueryParams,
    void
  >
  /**
   * Delete a connector by identifier
   */
  export const deleteConnectorPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteConnectorQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetConnectorQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export interface GetConnectorPathParams {
    identifier: string
  }
  export type GetConnectorProps = Omit<
    GetProps<ResponseConnectorResponse, Failure | Error, GetConnectorQueryParams, GetConnectorPathParams>,
    'path'
  > &
    GetConnectorPathParams
  /**
   * Get Connector
   */
  export const GetConnector: ({ identifier, ...props }: GetConnectorProps) => JSX.Element
  export type UseGetConnectorProps = Omit<
    UseGetProps<ResponseConnectorResponse, Failure | Error, GetConnectorQueryParams, GetConnectorPathParams>,
    'path'
  > &
    GetConnectorPathParams
  /**
   * Get Connector
   */
  export const useGetConnector: ({
    identifier,
    ...props
  }: UseGetConnectorProps) => import('restful-react').UseGetReturn<
    ResponseConnectorResponse,
    Error | Failure,
    GetConnectorQueryParams,
    unknown
  >
  /**
   * Get Connector
   */
  export const getConnectorPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<
      ResponseConnectorResponse,
      Error | Failure,
      GetConnectorQueryParams,
      GetConnectorPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseConnectorResponse>
  export interface GetDeploymentExecutionQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    startTime: number
    endTime: number
  }
  export type GetDeploymentExecutionProps = Omit<
    GetProps<ResponseExecutionDeploymentInfo, Failure | Error, GetDeploymentExecutionQueryParams, void>,
    'path'
  >
  /**
   * Get deployment execution
   */
  export const GetDeploymentExecution: (props: GetDeploymentExecutionProps) => JSX.Element
  export type UseGetDeploymentExecutionProps = Omit<
    UseGetProps<ResponseExecutionDeploymentInfo, Failure | Error, GetDeploymentExecutionQueryParams, void>,
    'path'
  >
  /**
   * Get deployment execution
   */
  export const useGetDeploymentExecution: (
    props: UseGetDeploymentExecutionProps
  ) => import('restful-react').UseGetReturn<
    ResponseExecutionDeploymentInfo,
    Error | Failure,
    GetDeploymentExecutionQueryParams,
    unknown
  >
  /**
   * Get deployment execution
   */
  export const getDeploymentExecutionPromise: (
    props: GetUsingFetchProps<
      ResponseExecutionDeploymentInfo,
      Failure | Error,
      GetDeploymentExecutionQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseExecutionDeploymentInfo>
  export interface GetDeploymentHealthQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    startTime: number
    endTime: number
  }
  export type GetDeploymentHealthProps = Omit<
    GetProps<ResponseHealthDeploymentDashboard, Failure | Error, GetDeploymentHealthQueryParams, void>,
    'path'
  >
  /**
   * Get deployment health
   */
  export const GetDeploymentHealth: (props: GetDeploymentHealthProps) => JSX.Element
  export type UseGetDeploymentHealthProps = Omit<
    UseGetProps<ResponseHealthDeploymentDashboard, Failure | Error, GetDeploymentHealthQueryParams, void>,
    'path'
  >
  /**
   * Get deployment health
   */
  export const useGetDeploymentHealth: (
    props: UseGetDeploymentHealthProps
  ) => import('restful-react').UseGetReturn<
    ResponseHealthDeploymentDashboard,
    Error | Failure,
    GetDeploymentHealthQueryParams,
    unknown
  >
  /**
   * Get deployment health
   */
  export const getDeploymentHealthPromise: (
    props: GetUsingFetchProps<ResponseHealthDeploymentDashboard, Failure | Error, GetDeploymentHealthQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseHealthDeploymentDashboard>
  export interface GetActiveServiceInstanceSummaryQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    serviceId: string
    timestamp: number
  }
  export type GetActiveServiceInstanceSummaryProps = Omit<
    GetProps<ResponseActiveServiceInstanceSummary, Failure | Error, GetActiveServiceInstanceSummaryQueryParams, void>,
    'path'
  >
  /**
   * Get active service instance summary
   */
  export const GetActiveServiceInstanceSummary: (props: GetActiveServiceInstanceSummaryProps) => JSX.Element
  export type UseGetActiveServiceInstanceSummaryProps = Omit<
    UseGetProps<
      ResponseActiveServiceInstanceSummary,
      Failure | Error,
      GetActiveServiceInstanceSummaryQueryParams,
      void
    >,
    'path'
  >
  /**
   * Get active service instance summary
   */
  export const useGetActiveServiceInstanceSummary: (
    props: UseGetActiveServiceInstanceSummaryProps
  ) => import('restful-react').UseGetReturn<
    ResponseActiveServiceInstanceSummary,
    Error | Failure,
    GetActiveServiceInstanceSummaryQueryParams,
    unknown
  >
  /**
   * Get active service instance summary
   */
  export const getActiveServiceInstanceSummaryPromise: (
    props: GetUsingFetchProps<
      ResponseActiveServiceInstanceSummary,
      Failure | Error,
      GetActiveServiceInstanceSummaryQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseActiveServiceInstanceSummary>
  export interface GetDeploymentsQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    top?: number
  }
  export type GetDeploymentsProps = Omit<
    GetProps<ResponseDashboardExecutionStatusInfo, Failure | Error, GetDeploymentsQueryParams, void>,
    'path'
  >
  /**
   * Get deployments
   */
  export const GetDeployments: (props: GetDeploymentsProps) => JSX.Element
  export type UseGetDeploymentsProps = Omit<
    UseGetProps<ResponseDashboardExecutionStatusInfo, Failure | Error, GetDeploymentsQueryParams, void>,
    'path'
  >
  /**
   * Get deployments
   */
  export const useGetDeployments: (
    props: UseGetDeploymentsProps
  ) => import('restful-react').UseGetReturn<
    ResponseDashboardExecutionStatusInfo,
    Error | Failure,
    GetDeploymentsQueryParams,
    unknown
  >
  /**
   * Get deployments
   */
  export const getDeploymentsPromise: (
    props: GetUsingFetchProps<ResponseDashboardExecutionStatusInfo, Failure | Error, GetDeploymentsQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseDashboardExecutionStatusInfo>
  export interface GetDeploymentsByServiceIdQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    serviceId: string
    startTime: number
    endTime: number
  }
  export type GetDeploymentsByServiceIdProps = Omit<
    GetProps<ResponseDeploymentsInfo, Failure | Error, GetDeploymentsByServiceIdQueryParams, void>,
    'path'
  >
  /**
   * Get deployments by serviceId
   */
  export const GetDeploymentsByServiceId: (props: GetDeploymentsByServiceIdProps) => JSX.Element
  export type UseGetDeploymentsByServiceIdProps = Omit<
    UseGetProps<ResponseDeploymentsInfo, Failure | Error, GetDeploymentsByServiceIdQueryParams, void>,
    'path'
  >
  /**
   * Get deployments by serviceId
   */
  export const useGetDeploymentsByServiceId: (
    props: UseGetDeploymentsByServiceIdProps
  ) => import('restful-react').UseGetReturn<
    ResponseDeploymentsInfo,
    Error | Failure,
    GetDeploymentsByServiceIdQueryParams,
    unknown
  >
  /**
   * Get deployments by serviceId
   */
  export const getDeploymentsByServiceIdPromise: (
    props: GetUsingFetchProps<ResponseDeploymentsInfo, Failure | Error, GetDeploymentsByServiceIdQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseDeploymentsInfo>
  export interface GetEnvBuildInstanceCountQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    serviceId: string
  }
  export type GetEnvBuildInstanceCountProps = Omit<
    GetProps<ResponseEnvBuildIdAndInstanceCountInfoList, Failure | Error, GetEnvBuildInstanceCountQueryParams, void>,
    'path'
  >
  /**
   * Get list of unique environment and build ids with instance count
   */
  export const GetEnvBuildInstanceCount: (props: GetEnvBuildInstanceCountProps) => JSX.Element
  export type UseGetEnvBuildInstanceCountProps = Omit<
    UseGetProps<ResponseEnvBuildIdAndInstanceCountInfoList, Failure | Error, GetEnvBuildInstanceCountQueryParams, void>,
    'path'
  >
  /**
   * Get list of unique environment and build ids with instance count
   */
  export const useGetEnvBuildInstanceCount: (
    props: UseGetEnvBuildInstanceCountProps
  ) => import('restful-react').UseGetReturn<
    ResponseEnvBuildIdAndInstanceCountInfoList,
    Error | Failure,
    GetEnvBuildInstanceCountQueryParams,
    unknown
  >
  /**
   * Get list of unique environment and build ids with instance count
   */
  export const getEnvBuildInstanceCountPromise: (
    props: GetUsingFetchProps<
      ResponseEnvBuildIdAndInstanceCountInfoList,
      Failure | Error,
      GetEnvBuildInstanceCountQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEnvBuildIdAndInstanceCountInfoList>
  export interface GetActiveServiceInstanceCountBreakdownQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    serviceId: string[]
  }
  export type GetActiveServiceInstanceCountBreakdownProps = Omit<
    GetProps<
      ResponseInstanceCountDetailsByEnvTypeAndServiceId,
      Failure | Error,
      GetActiveServiceInstanceCountBreakdownQueryParams,
      void
    >,
    'path'
  >
  /**
   * Get active service instance count breakdown by env type
   */
  export const GetActiveServiceInstanceCountBreakdown: (
    props: GetActiveServiceInstanceCountBreakdownProps
  ) => JSX.Element
  export type UseGetActiveServiceInstanceCountBreakdownProps = Omit<
    UseGetProps<
      ResponseInstanceCountDetailsByEnvTypeAndServiceId,
      Failure | Error,
      GetActiveServiceInstanceCountBreakdownQueryParams,
      void
    >,
    'path'
  >
  /**
   * Get active service instance count breakdown by env type
   */
  export const useGetActiveServiceInstanceCountBreakdown: (
    props: UseGetActiveServiceInstanceCountBreakdownProps
  ) => import('restful-react').UseGetReturn<
    ResponseInstanceCountDetailsByEnvTypeAndServiceId,
    Error | Failure,
    GetActiveServiceInstanceCountBreakdownQueryParams,
    unknown
  >
  /**
   * Get active service instance count breakdown by env type
   */
  export const getActiveServiceInstanceCountBreakdownPromise: (
    props: GetUsingFetchProps<
      ResponseInstanceCountDetailsByEnvTypeAndServiceId,
      Failure | Error,
      GetActiveServiceInstanceCountBreakdownQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseInstanceCountDetailsByEnvTypeAndServiceId>
  export interface GetInstanceCountHistoryQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    serviceId: string
    startTime: number
    endTime: number
  }
  export type GetInstanceCountHistoryProps = Omit<
    GetProps<ResponseTimeValuePairListDTOEnvIdCountPair, Failure | Error, GetInstanceCountHistoryQueryParams, void>,
    'path'
  >
  /**
   * Get instance count history
   */
  export const GetInstanceCountHistory: (props: GetInstanceCountHistoryProps) => JSX.Element
  export type UseGetInstanceCountHistoryProps = Omit<
    UseGetProps<ResponseTimeValuePairListDTOEnvIdCountPair, Failure | Error, GetInstanceCountHistoryQueryParams, void>,
    'path'
  >
  /**
   * Get instance count history
   */
  export const useGetInstanceCountHistory: (
    props: UseGetInstanceCountHistoryProps
  ) => import('restful-react').UseGetReturn<
    ResponseTimeValuePairListDTOEnvIdCountPair,
    Error | Failure,
    GetInstanceCountHistoryQueryParams,
    unknown
  >
  /**
   * Get instance count history
   */
  export const getInstanceCountHistoryPromise: (
    props: GetUsingFetchProps<
      ResponseTimeValuePairListDTOEnvIdCountPair,
      Failure | Error,
      GetInstanceCountHistoryQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseTimeValuePairListDTOEnvIdCountPair>
  export interface GetInstanceGrowthTrendQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    serviceId: string
    startTime: number
    endTime: number
  }
  export type GetInstanceGrowthTrendProps = Omit<
    GetProps<ResponseTimeValuePairListDTOInteger, Failure | Error, GetInstanceGrowthTrendQueryParams, void>,
    'path'
  >
  /**
   * Get instance growth trend
   */
  export const GetInstanceGrowthTrend: (props: GetInstanceGrowthTrendProps) => JSX.Element
  export type UseGetInstanceGrowthTrendProps = Omit<
    UseGetProps<ResponseTimeValuePairListDTOInteger, Failure | Error, GetInstanceGrowthTrendQueryParams, void>,
    'path'
  >
  /**
   * Get instance growth trend
   */
  export const useGetInstanceGrowthTrend: (
    props: UseGetInstanceGrowthTrendProps
  ) => import('restful-react').UseGetReturn<
    ResponseTimeValuePairListDTOInteger,
    Error | Failure,
    GetInstanceGrowthTrendQueryParams,
    unknown
  >
  /**
   * Get instance growth trend
   */
  export const getInstanceGrowthTrendPromise: (
    props: GetUsingFetchProps<
      ResponseTimeValuePairListDTOInteger,
      Failure | Error,
      GetInstanceGrowthTrendQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseTimeValuePairListDTOInteger>
  export interface GetActiveInstancesByServiceIdEnvIdAndBuildIdsQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    serviceId: string
    envId: string
    buildIds: string[]
  }
  export type GetActiveInstancesByServiceIdEnvIdAndBuildIdsProps = Omit<
    GetProps<
      ResponseInstancesByBuildIdList,
      Failure | Error,
      GetActiveInstancesByServiceIdEnvIdAndBuildIdsQueryParams,
      void
    >,
    'path'
  >
  /**
   * Get list of buildId and instances
   */
  export const GetActiveInstancesByServiceIdEnvIdAndBuildIds: (
    props: GetActiveInstancesByServiceIdEnvIdAndBuildIdsProps
  ) => JSX.Element
  export type UseGetActiveInstancesByServiceIdEnvIdAndBuildIdsProps = Omit<
    UseGetProps<
      ResponseInstancesByBuildIdList,
      Failure | Error,
      GetActiveInstancesByServiceIdEnvIdAndBuildIdsQueryParams,
      void
    >,
    'path'
  >
  /**
   * Get list of buildId and instances
   */
  export const useGetActiveInstancesByServiceIdEnvIdAndBuildIds: (
    props: UseGetActiveInstancesByServiceIdEnvIdAndBuildIdsProps
  ) => import('restful-react').UseGetReturn<
    ResponseInstancesByBuildIdList,
    Error | Failure,
    GetActiveInstancesByServiceIdEnvIdAndBuildIdsQueryParams,
    unknown
  >
  /**
   * Get list of buildId and instances
   */
  export const getActiveInstancesByServiceIdEnvIdAndBuildIdsPromise: (
    props: GetUsingFetchProps<
      ResponseInstancesByBuildIdList,
      Failure | Error,
      GetActiveInstancesByServiceIdEnvIdAndBuildIdsQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseInstancesByBuildIdList>
  export interface GetServicesGrowthTrendQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    startTime: number
    endTime: number
    timeGroupByType: 'HOUR' | 'DAY' | 'WEEK'
  }
  export type GetServicesGrowthTrendProps = Omit<
    GetProps<ResponseTimeValuePairListDTOInteger, Failure | Error, GetServicesGrowthTrendQueryParams, void>,
    'path'
  >
  /**
   * Get service growth trend
   */
  export const GetServicesGrowthTrend: (props: GetServicesGrowthTrendProps) => JSX.Element
  export type UseGetServicesGrowthTrendProps = Omit<
    UseGetProps<ResponseTimeValuePairListDTOInteger, Failure | Error, GetServicesGrowthTrendQueryParams, void>,
    'path'
  >
  /**
   * Get service growth trend
   */
  export const useGetServicesGrowthTrend: (
    props: UseGetServicesGrowthTrendProps
  ) => import('restful-react').UseGetReturn<
    ResponseTimeValuePairListDTOInteger,
    Error | Failure,
    GetServicesGrowthTrendQueryParams,
    unknown
  >
  /**
   * Get service growth trend
   */
  export const getServicesGrowthTrendPromise: (
    props: GetUsingFetchProps<
      ResponseTimeValuePairListDTOInteger,
      Failure | Error,
      GetServicesGrowthTrendQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseTimeValuePairListDTOInteger>
  export interface GetWorkloadsQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    startTime: number
    endTime: number
    environmentType?: 'PreProduction' | 'Production'
  }
  export type GetWorkloadsProps = Omit<
    GetProps<ResponseDashboardWorkloadDeployment, Failure | Error, GetWorkloadsQueryParams, void>,
    'path'
  >
  /**
   * Get workloads
   */
  export const GetWorkloads: (props: GetWorkloadsProps) => JSX.Element
  export type UseGetWorkloadsProps = Omit<
    UseGetProps<ResponseDashboardWorkloadDeployment, Failure | Error, GetWorkloadsQueryParams, void>,
    'path'
  >
  /**
   * Get workloads
   */
  export const useGetWorkloads: (
    props: UseGetWorkloadsProps
  ) => import('restful-react').UseGetReturn<
    ResponseDashboardWorkloadDeployment,
    Error | Failure,
    GetWorkloadsQueryParams,
    unknown
  >
  /**
   * Get workloads
   */
  export const getWorkloadsPromise: (
    props: GetUsingFetchProps<ResponseDashboardWorkloadDeployment, Failure | Error, GetWorkloadsQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseDashboardWorkloadDeployment>
  export interface GetServiceDeploymentsQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    startTime: number
    endTime: number
    serviceId?: string
    bucketSizeInDays?: number
  }
  export type GetServiceDeploymentsProps = Omit<
    GetProps<ResponseServiceDeploymentInfoDTO, Failure | Error, GetServiceDeploymentsQueryParams, void>,
    'path'
  >
  /**
   * Get service deployment
   */
  export const GetServiceDeployments: (props: GetServiceDeploymentsProps) => JSX.Element
  export type UseGetServiceDeploymentsProps = Omit<
    UseGetProps<ResponseServiceDeploymentInfoDTO, Failure | Error, GetServiceDeploymentsQueryParams, void>,
    'path'
  >
  /**
   * Get service deployment
   */
  export const useGetServiceDeployments: (
    props: UseGetServiceDeploymentsProps
  ) => import('restful-react').UseGetReturn<
    ResponseServiceDeploymentInfoDTO,
    Error | Failure,
    GetServiceDeploymentsQueryParams,
    unknown
  >
  /**
   * Get service deployment
   */
  export const getServiceDeploymentsPromise: (
    props: GetUsingFetchProps<
      ResponseServiceDeploymentInfoDTO,
      Failure | Error,
      GetServiceDeploymentsQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceDeploymentInfoDTO>
  export interface GetServiceDeploymentsInfoQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    startTime: number
    endTime: number
    serviceId?: string
    bucketSizeInDays?: number
  }
  export type GetServiceDeploymentsInfoProps = Omit<
    GetProps<ResponseServiceDeploymentListInfo, Failure | Error, GetServiceDeploymentsInfoQueryParams, void>,
    'path'
  >
  /**
   * Get service deployments info
   */
  export const GetServiceDeploymentsInfo: (props: GetServiceDeploymentsInfoProps) => JSX.Element
  export type UseGetServiceDeploymentsInfoProps = Omit<
    UseGetProps<ResponseServiceDeploymentListInfo, Failure | Error, GetServiceDeploymentsInfoQueryParams, void>,
    'path'
  >
  /**
   * Get service deployments info
   */
  export const useGetServiceDeploymentsInfo: (
    props: UseGetServiceDeploymentsInfoProps
  ) => import('restful-react').UseGetReturn<
    ResponseServiceDeploymentListInfo,
    Error | Failure,
    GetServiceDeploymentsInfoQueryParams,
    unknown
  >
  /**
   * Get service deployments info
   */
  export const getServiceDeploymentsInfoPromise: (
    props: GetUsingFetchProps<
      ResponseServiceDeploymentListInfo,
      Failure | Error,
      GetServiceDeploymentsInfoQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceDeploymentListInfo>
  export interface GetServiceDetailsQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    startTime: number
    endTime: number
  }
  export type GetServiceDetailsProps = Omit<
    GetProps<ResponseServiceDetailsInfoDTO, Failure | Error, GetServiceDetailsQueryParams, void>,
    'path'
  >
  /**
   * Get service details list
   */
  export const GetServiceDetails: (props: GetServiceDetailsProps) => JSX.Element
  export type UseGetServiceDetailsProps = Omit<
    UseGetProps<ResponseServiceDetailsInfoDTO, Failure | Error, GetServiceDetailsQueryParams, void>,
    'path'
  >
  /**
   * Get service details list
   */
  export const useGetServiceDetails: (
    props: UseGetServiceDetailsProps
  ) => import('restful-react').UseGetReturn<
    ResponseServiceDetailsInfoDTO,
    Error | Failure,
    GetServiceDetailsQueryParams,
    unknown
  >
  /**
   * Get service details list
   */
  export const getServiceDetailsPromise: (
    props: GetUsingFetchProps<ResponseServiceDetailsInfoDTO, Failure | Error, GetServiceDetailsQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceDetailsInfoDTO>
  export interface ListDelegateProfilesNgQueryParams {
    offset?: string
    limit?: string
    fieldsIncluded?: string[]
    fieldsExcluded?: string[]
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type ListDelegateProfilesNgProps = Omit<
    GetProps<RestResponsePageResponseDelegateProfileDetailsNg, unknown, ListDelegateProfilesNgQueryParams, void>,
    'path'
  >
  /**
   * Lists the delegate profiles
   */
  export const ListDelegateProfilesNg: (props: ListDelegateProfilesNgProps) => JSX.Element
  export type UseListDelegateProfilesNgProps = Omit<
    UseGetProps<RestResponsePageResponseDelegateProfileDetailsNg, unknown, ListDelegateProfilesNgQueryParams, void>,
    'path'
  >
  /**
   * Lists the delegate profiles
   */
  export const useListDelegateProfilesNg: (
    props: UseListDelegateProfilesNgProps
  ) => import('restful-react').UseGetReturn<
    RestResponsePageResponseDelegateProfileDetailsNg,
    unknown,
    ListDelegateProfilesNgQueryParams,
    unknown
  >
  /**
   * Lists the delegate profiles
   */
  export const listDelegateProfilesNgPromise: (
    props: GetUsingFetchProps<
      RestResponsePageResponseDelegateProfileDetailsNg,
      unknown,
      ListDelegateProfilesNgQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<RestResponsePageResponseDelegateProfileDetailsNg>
  export interface AddDelegateProfileNgQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type AddDelegateProfileNgProps = Omit<
    MutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      AddDelegateProfileNgQueryParams,
      DelegateProfileDetailsNgRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Adds a delegate profile
   */
  export const AddDelegateProfileNg: (props: AddDelegateProfileNgProps) => JSX.Element
  export type UseAddDelegateProfileNgProps = Omit<
    UseMutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      AddDelegateProfileNgQueryParams,
      DelegateProfileDetailsNgRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Adds a delegate profile
   */
  export const useAddDelegateProfileNg: (
    props: UseAddDelegateProfileNgProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    DelegateProfileDetailsNg,
    AddDelegateProfileNgQueryParams,
    void
  >
  /**
   * Adds a delegate profile
   */
  export const addDelegateProfileNgPromise: (
    props: MutateUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      AddDelegateProfileNgQueryParams,
      DelegateProfileDetailsNgRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export interface DeleteDelegateProfileNgQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type DeleteDelegateProfileNgProps = Omit<
    MutateProps<RestResponseVoid, unknown, DeleteDelegateProfileNgQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Deletes a delegate profile
   */
  export const DeleteDelegateProfileNg: (props: DeleteDelegateProfileNgProps) => JSX.Element
  export type UseDeleteDelegateProfileNgProps = Omit<
    UseMutateProps<RestResponseVoid, unknown, DeleteDelegateProfileNgQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Deletes a delegate profile
   */
  export const useDeleteDelegateProfileNg: (
    props: UseDeleteDelegateProfileNgProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseVoid,
    unknown,
    string,
    DeleteDelegateProfileNgQueryParams,
    void
  >
  /**
   * Deletes a delegate profile
   */
  export const deleteDelegateProfileNgPromise: (
    props: MutateUsingFetchProps<RestResponseVoid, unknown, DeleteDelegateProfileNgQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseVoid>
  export interface GetDelegateProfileNgQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export interface GetDelegateProfileNgPathParams {
    delegateProfileId: string
  }
  export type GetDelegateProfileNgProps = Omit<
    GetProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      GetDelegateProfileNgQueryParams,
      GetDelegateProfileNgPathParams
    >,
    'path'
  > &
    GetDelegateProfileNgPathParams
  /**
   * Gets delegate profile
   */
  export const GetDelegateProfileNg: ({ delegateProfileId, ...props }: GetDelegateProfileNgProps) => JSX.Element
  export type UseGetDelegateProfileNgProps = Omit<
    UseGetProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      GetDelegateProfileNgQueryParams,
      GetDelegateProfileNgPathParams
    >,
    'path'
  > &
    GetDelegateProfileNgPathParams
  /**
   * Gets delegate profile
   */
  export const useGetDelegateProfileNg: ({
    delegateProfileId,
    ...props
  }: UseGetDelegateProfileNgProps) => import('restful-react').UseGetReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    GetDelegateProfileNgQueryParams,
    unknown
  >
  /**
   * Gets delegate profile
   */
  export const getDelegateProfileNgPromise: (
    {
      delegateProfileId,
      ...props
    }: GetUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      GetDelegateProfileNgQueryParams,
      GetDelegateProfileNgPathParams
    > & {
      delegateProfileId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export interface UpdateDelegateProfileNgQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export interface UpdateDelegateProfileNgPathParams {
    delegateProfileId: string
  }
  export type UpdateDelegateProfileNgProps = Omit<
    MutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateDelegateProfileNgQueryParams,
      DelegateProfileDetailsNgRequestBody,
      UpdateDelegateProfileNgPathParams
    >,
    'path' | 'verb'
  > &
    UpdateDelegateProfileNgPathParams
  /**
   * Updates a delegate profile
   */
  export const UpdateDelegateProfileNg: ({ delegateProfileId, ...props }: UpdateDelegateProfileNgProps) => JSX.Element
  export type UseUpdateDelegateProfileNgProps = Omit<
    UseMutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateDelegateProfileNgQueryParams,
      DelegateProfileDetailsNgRequestBody,
      UpdateDelegateProfileNgPathParams
    >,
    'path' | 'verb'
  > &
    UpdateDelegateProfileNgPathParams
  /**
   * Updates a delegate profile
   */
  export const useUpdateDelegateProfileNg: ({
    delegateProfileId,
    ...props
  }: UseUpdateDelegateProfileNgProps) => import('restful-react').UseMutateReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    DelegateProfileDetailsNg,
    UpdateDelegateProfileNgQueryParams,
    UpdateDelegateProfileNgPathParams
  >
  /**
   * Updates a delegate profile
   */
  export const updateDelegateProfileNgPromise: (
    {
      delegateProfileId,
      ...props
    }: MutateUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateDelegateProfileNgQueryParams,
      DelegateProfileDetailsNg,
      UpdateDelegateProfileNgPathParams
    > & {
      delegateProfileId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export interface UpdateScopingRulesNgQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export interface UpdateScopingRulesNgPathParams {
    delegateProfileId: string
  }
  export type UpdateScopingRulesNgProps = Omit<
    MutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateScopingRulesNgQueryParams,
      ScopingRuleDetailsNgArrayRequestBody,
      UpdateScopingRulesNgPathParams
    >,
    'path' | 'verb'
  > &
    UpdateScopingRulesNgPathParams
  /**
   * Updates the scoping rules inside the delegate profile
   */
  export const UpdateScopingRulesNg: ({ delegateProfileId, ...props }: UpdateScopingRulesNgProps) => JSX.Element
  export type UseUpdateScopingRulesNgProps = Omit<
    UseMutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateScopingRulesNgQueryParams,
      ScopingRuleDetailsNgArrayRequestBody,
      UpdateScopingRulesNgPathParams
    >,
    'path' | 'verb'
  > &
    UpdateScopingRulesNgPathParams
  /**
   * Updates the scoping rules inside the delegate profile
   */
  export const useUpdateScopingRulesNg: ({
    delegateProfileId,
    ...props
  }: UseUpdateScopingRulesNgProps) => import('restful-react').UseMutateReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    ScopingRuleDetailsNgArrayRequestBody,
    UpdateScopingRulesNgQueryParams,
    UpdateScopingRulesNgPathParams
  >
  /**
   * Updates the scoping rules inside the delegate profile
   */
  export const updateScopingRulesNgPromise: (
    {
      delegateProfileId,
      ...props
    }: MutateUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateScopingRulesNgQueryParams,
      ScopingRuleDetailsNgArrayRequestBody,
      UpdateScopingRulesNgPathParams
    > & {
      delegateProfileId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export interface UpdateSelectorsNgQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export interface UpdateSelectorsNgPathParams {
    delegateProfileId: string
  }
  export type UpdateSelectorsNgProps = Omit<
    MutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateSelectorsNgQueryParams,
      UpdateWhitelistedDomainsBodyRequestBody,
      UpdateSelectorsNgPathParams
    >,
    'path' | 'verb'
  > &
    UpdateSelectorsNgPathParams
  /**
   * Updates the selectors inside the delegate profile
   */
  export const UpdateSelectorsNg: ({ delegateProfileId, ...props }: UpdateSelectorsNgProps) => JSX.Element
  export type UseUpdateSelectorsNgProps = Omit<
    UseMutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateSelectorsNgQueryParams,
      UpdateWhitelistedDomainsBodyRequestBody,
      UpdateSelectorsNgPathParams
    >,
    'path' | 'verb'
  > &
    UpdateSelectorsNgPathParams
  /**
   * Updates the selectors inside the delegate profile
   */
  export const useUpdateSelectorsNg: ({
    delegateProfileId,
    ...props
  }: UseUpdateSelectorsNgProps) => import('restful-react').UseMutateReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    UpdateWhitelistedDomainsBodyRequestBody,
    UpdateSelectorsNgQueryParams,
    UpdateSelectorsNgPathParams
  >
  /**
   * Updates the selectors inside the delegate profile
   */
  export const updateSelectorsNgPromise: (
    {
      delegateProfileId,
      ...props
    }: MutateUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateSelectorsNgQueryParams,
      UpdateWhitelistedDomainsBodyRequestBody,
      UpdateSelectorsNgPathParams
    > & {
      delegateProfileId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export interface ListReferredByEntitiesQueryParams {
    pageIndex?: number
    pageSize?: number
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    identifier?: string
    referredEntityType?:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
    searchTerm?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type ListReferredByEntitiesProps = Omit<
    GetProps<ResponsePageEntitySetupUsageDTO, unknown, ListReferredByEntitiesQueryParams, void>,
    'path'
  >
  /**
   * Get Entities referring this resource
   */
  export const ListReferredByEntities: (props: ListReferredByEntitiesProps) => JSX.Element
  export type UseListReferredByEntitiesProps = Omit<
    UseGetProps<ResponsePageEntitySetupUsageDTO, unknown, ListReferredByEntitiesQueryParams, void>,
    'path'
  >
  /**
   * Get Entities referring this resource
   */
  export const useListReferredByEntities: (
    props: UseListReferredByEntitiesProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageEntitySetupUsageDTO,
    unknown,
    ListReferredByEntitiesQueryParams,
    unknown
  >
  /**
   * Get Entities referring this resource
   */
  export const listReferredByEntitiesPromise: (
    props: GetUsingFetchProps<ResponsePageEntitySetupUsageDTO, unknown, ListReferredByEntitiesQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageEntitySetupUsageDTO>
  export interface GetEnvironmentListForProjectQueryParams {
    page?: number
    size?: number
    accountId?: string
    orgIdentifier?: string
    projectIdentifier?: string
    envIdentifiers?: string[]
    sort?: string[]
  }
  export type GetEnvironmentListForProjectProps = Omit<
    GetProps<ResponsePageEnvironmentResponseDTO, Failure | Error, GetEnvironmentListForProjectQueryParams, void>,
    'path'
  >
  /**
   * Gets environment list for a project
   */
  export const GetEnvironmentListForProject: (props: GetEnvironmentListForProjectProps) => JSX.Element
  export type UseGetEnvironmentListForProjectProps = Omit<
    UseGetProps<ResponsePageEnvironmentResponseDTO, Failure | Error, GetEnvironmentListForProjectQueryParams, void>,
    'path'
  >
  /**
   * Gets environment list for a project
   */
  export const useGetEnvironmentListForProject: (
    props: UseGetEnvironmentListForProjectProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageEnvironmentResponseDTO,
    Error | Failure,
    GetEnvironmentListForProjectQueryParams,
    unknown
  >
  /**
   * Gets environment list for a project
   */
  export const getEnvironmentListForProjectPromise: (
    props: GetUsingFetchProps<
      ResponsePageEnvironmentResponseDTO,
      Failure | Error,
      GetEnvironmentListForProjectQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageEnvironmentResponseDTO>
  export interface CreateEnvironmentQueryParams {
    accountId?: string
  }
  export type CreateEnvironmentProps = Omit<
    MutateProps<
      ResponseEnvironmentResponseDTO,
      Failure | Error,
      CreateEnvironmentQueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create an Environment
   */
  export const CreateEnvironment: (props: CreateEnvironmentProps) => JSX.Element
  export type UseCreateEnvironmentProps = Omit<
    UseMutateProps<
      ResponseEnvironmentResponseDTO,
      Failure | Error,
      CreateEnvironmentQueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create an Environment
   */
  export const useCreateEnvironment: (
    props: UseCreateEnvironmentProps
  ) => import('restful-react').UseMutateReturn<
    ResponseEnvironmentResponseDTO,
    Error | Failure,
    EnvironmentRequestDTO,
    CreateEnvironmentQueryParams,
    void
  >
  /**
   * Create an Environment
   */
  export const createEnvironmentPromise: (
    props: MutateUsingFetchProps<
      ResponseEnvironmentResponseDTO,
      Failure | Error,
      CreateEnvironmentQueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEnvironmentResponseDTO>
  export interface UpdateEnvironmentQueryParams {
    accountId?: string
  }
  export type UpdateEnvironmentProps = Omit<
    MutateProps<
      ResponseEnvironmentResponseDTO,
      Failure | Error,
      UpdateEnvironmentQueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Update an environment by identifier
   */
  export const UpdateEnvironment: (props: UpdateEnvironmentProps) => JSX.Element
  export type UseUpdateEnvironmentProps = Omit<
    UseMutateProps<
      ResponseEnvironmentResponseDTO,
      Failure | Error,
      UpdateEnvironmentQueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Update an environment by identifier
   */
  export const useUpdateEnvironment: (
    props: UseUpdateEnvironmentProps
  ) => import('restful-react').UseMutateReturn<
    ResponseEnvironmentResponseDTO,
    Error | Failure,
    EnvironmentRequestDTO,
    UpdateEnvironmentQueryParams,
    void
  >
  /**
   * Update an environment by identifier
   */
  export const updateEnvironmentPromise: (
    props: MutateUsingFetchProps<
      ResponseEnvironmentResponseDTO,
      Failure | Error,
      UpdateEnvironmentQueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEnvironmentResponseDTO>
  export interface UpsertEnvironmentQueryParams {
    accountId?: string
  }
  export type UpsertEnvironmentProps = Omit<
    MutateProps<
      ResponseEnvironmentResponseDTO,
      Failure | Error,
      UpsertEnvironmentQueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Upsert an environment by identifier
   */
  export const UpsertEnvironment: (props: UpsertEnvironmentProps) => JSX.Element
  export type UseUpsertEnvironmentProps = Omit<
    UseMutateProps<
      ResponseEnvironmentResponseDTO,
      Failure | Error,
      UpsertEnvironmentQueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Upsert an environment by identifier
   */
  export const useUpsertEnvironment: (
    props: UseUpsertEnvironmentProps
  ) => import('restful-react').UseMutateReturn<
    ResponseEnvironmentResponseDTO,
    Error | Failure,
    EnvironmentRequestDTO,
    UpsertEnvironmentQueryParams,
    void
  >
  /**
   * Upsert an environment by identifier
   */
  export const upsertEnvironmentPromise: (
    props: MutateUsingFetchProps<
      ResponseEnvironmentResponseDTO,
      Failure | Error,
      UpsertEnvironmentQueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEnvironmentResponseDTO>
  export interface DeleteEnvironmentQueryParams {
    accountId?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type DeleteEnvironmentProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteEnvironmentQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete en environment by identifier
   */
  export const DeleteEnvironment: (props: DeleteEnvironmentProps) => JSX.Element
  export type UseDeleteEnvironmentProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteEnvironmentQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete en environment by identifier
   */
  export const useDeleteEnvironment: (
    props: UseDeleteEnvironmentProps
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    string,
    DeleteEnvironmentQueryParams,
    void
  >
  /**
   * Delete en environment by identifier
   */
  export const deleteEnvironmentPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteEnvironmentQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetEnvironmentQueryParams {
    accountId?: string
    orgIdentifier?: string
    projectIdentifier?: string
    deleted?: boolean
  }
  export interface GetEnvironmentPathParams {
    environmentIdentifier: string
  }
  export type GetEnvironmentProps = Omit<
    GetProps<ResponseEnvironmentResponseDTO, Failure | Error, GetEnvironmentQueryParams, GetEnvironmentPathParams>,
    'path'
  > &
    GetEnvironmentPathParams
  /**
   * Gets a Environment by identifier
   */
  export const GetEnvironment: ({ environmentIdentifier, ...props }: GetEnvironmentProps) => JSX.Element
  export type UseGetEnvironmentProps = Omit<
    UseGetProps<ResponseEnvironmentResponseDTO, Failure | Error, GetEnvironmentQueryParams, GetEnvironmentPathParams>,
    'path'
  > &
    GetEnvironmentPathParams
  /**
   * Gets a Environment by identifier
   */
  export const useGetEnvironment: ({
    environmentIdentifier,
    ...props
  }: UseGetEnvironmentProps) => import('restful-react').UseGetReturn<
    ResponseEnvironmentResponseDTO,
    Error | Failure,
    GetEnvironmentQueryParams,
    unknown
  >
  /**
   * Gets a Environment by identifier
   */
  export const getEnvironmentPromise: (
    {
      environmentIdentifier,
      ...props
    }: GetUsingFetchProps<
      ResponseEnvironmentResponseDTO,
      Error | Failure,
      GetEnvironmentQueryParams,
      GetEnvironmentPathParams
    > & {
      environmentIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseEnvironmentResponseDTO>
  export interface GetEnvironmentListQueryParams {
    page?: number
    size?: number
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    searchTerm?: string
    envIdentifiers?: string[]
    sort?: string[]
  }
  export type GetEnvironmentListProps = Omit<
    GetProps<ResponsePageEnvironmentResponse, Failure | Error, GetEnvironmentListQueryParams, void>,
    'path'
  >
  /**
   * Gets environment list
   */
  export const GetEnvironmentList: (props: GetEnvironmentListProps) => JSX.Element
  export type UseGetEnvironmentListProps = Omit<
    UseGetProps<ResponsePageEnvironmentResponse, Failure | Error, GetEnvironmentListQueryParams, void>,
    'path'
  >
  /**
   * Gets environment list
   */
  export const useGetEnvironmentList: (
    props: UseGetEnvironmentListProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageEnvironmentResponse,
    Error | Failure,
    GetEnvironmentListQueryParams,
    unknown
  >
  /**
   * Gets environment list
   */
  export const getEnvironmentListPromise: (
    props: GetUsingFetchProps<ResponsePageEnvironmentResponse, Failure | Error, GetEnvironmentListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageEnvironmentResponse>
  export interface CreateEnvironmentV2QueryParams {
    accountIdentifier?: string
  }
  export type CreateEnvironmentV2Props = Omit<
    MutateProps<
      ResponseEnvironmentResponse,
      Failure | Error,
      CreateEnvironmentV2QueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create an Environment
   */
  export const CreateEnvironmentV2: (props: CreateEnvironmentV2Props) => JSX.Element
  export type UseCreateEnvironmentV2Props = Omit<
    UseMutateProps<
      ResponseEnvironmentResponse,
      Failure | Error,
      CreateEnvironmentV2QueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create an Environment
   */
  export const useCreateEnvironmentV2: (
    props: UseCreateEnvironmentV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponseEnvironmentResponse,
    Error | Failure,
    EnvironmentRequestDTO,
    CreateEnvironmentV2QueryParams,
    void
  >
  /**
   * Create an Environment
   */
  export const createEnvironmentV2Promise: (
    props: MutateUsingFetchProps<
      ResponseEnvironmentResponse,
      Failure | Error,
      CreateEnvironmentV2QueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEnvironmentResponse>
  export interface UpdateEnvironmentV2QueryParams {
    accountIdentifier?: string
  }
  export type UpdateEnvironmentV2Props = Omit<
    MutateProps<
      ResponseEnvironmentResponse,
      Failure | Error,
      UpdateEnvironmentV2QueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Update an environment by identifier
   */
  export const UpdateEnvironmentV2: (props: UpdateEnvironmentV2Props) => JSX.Element
  export type UseUpdateEnvironmentV2Props = Omit<
    UseMutateProps<
      ResponseEnvironmentResponse,
      Failure | Error,
      UpdateEnvironmentV2QueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Update an environment by identifier
   */
  export const useUpdateEnvironmentV2: (
    props: UseUpdateEnvironmentV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponseEnvironmentResponse,
    Error | Failure,
    EnvironmentRequestDTO,
    UpdateEnvironmentV2QueryParams,
    void
  >
  /**
   * Update an environment by identifier
   */
  export const updateEnvironmentV2Promise: (
    props: MutateUsingFetchProps<
      ResponseEnvironmentResponse,
      Failure | Error,
      UpdateEnvironmentV2QueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEnvironmentResponse>
  export interface GetEnvironmentAccessListQueryParams {
    page?: number
    size?: number
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    searchTerm?: string
    envIdentifiers?: string[]
    sort?: string[]
  }
  export type GetEnvironmentAccessListProps = Omit<
    GetProps<ResponseListEnvironmentResponse, Failure | Error, GetEnvironmentAccessListQueryParams, void>,
    'path'
  >
  /**
   * Gets environment access list
   */
  export const GetEnvironmentAccessList: (props: GetEnvironmentAccessListProps) => JSX.Element
  export type UseGetEnvironmentAccessListProps = Omit<
    UseGetProps<ResponseListEnvironmentResponse, Failure | Error, GetEnvironmentAccessListQueryParams, void>,
    'path'
  >
  /**
   * Gets environment access list
   */
  export const useGetEnvironmentAccessList: (
    props: UseGetEnvironmentAccessListProps
  ) => import('restful-react').UseGetReturn<
    ResponseListEnvironmentResponse,
    Error | Failure,
    GetEnvironmentAccessListQueryParams,
    unknown
  >
  /**
   * Gets environment access list
   */
  export const getEnvironmentAccessListPromise: (
    props: GetUsingFetchProps<
      ResponseListEnvironmentResponse,
      Failure | Error,
      GetEnvironmentAccessListQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListEnvironmentResponse>
  export interface UpsertEnvironmentV2QueryParams {
    accountIdentifier?: string
  }
  export type UpsertEnvironmentV2Props = Omit<
    MutateProps<
      ResponseEnvironmentResponse,
      Failure | Error,
      UpsertEnvironmentV2QueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Upsert an environment by identifier
   */
  export const UpsertEnvironmentV2: (props: UpsertEnvironmentV2Props) => JSX.Element
  export type UseUpsertEnvironmentV2Props = Omit<
    UseMutateProps<
      ResponseEnvironmentResponse,
      Failure | Error,
      UpsertEnvironmentV2QueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Upsert an environment by identifier
   */
  export const useUpsertEnvironmentV2: (
    props: UseUpsertEnvironmentV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponseEnvironmentResponse,
    Error | Failure,
    EnvironmentRequestDTO,
    UpsertEnvironmentV2QueryParams,
    void
  >
  /**
   * Upsert an environment by identifier
   */
  export const upsertEnvironmentV2Promise: (
    props: MutateUsingFetchProps<
      ResponseEnvironmentResponse,
      Failure | Error,
      UpsertEnvironmentV2QueryParams,
      EnvironmentRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseEnvironmentResponse>
  export interface DeleteEnvironmentV2QueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type DeleteEnvironmentV2Props = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteEnvironmentV2QueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete en environment by identifier
   */
  export const DeleteEnvironmentV2: (props: DeleteEnvironmentV2Props) => JSX.Element
  export type UseDeleteEnvironmentV2Props = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteEnvironmentV2QueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete en environment by identifier
   */
  export const useDeleteEnvironmentV2: (
    props: UseDeleteEnvironmentV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    string,
    DeleteEnvironmentV2QueryParams,
    void
  >
  /**
   * Delete en environment by identifier
   */
  export const deleteEnvironmentV2Promise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteEnvironmentV2QueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetEnvironmentV2QueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    deleted?: boolean
  }
  export interface GetEnvironmentV2PathParams {
    environmentIdentifier: string
  }
  export type GetEnvironmentV2Props = Omit<
    GetProps<ResponseEnvironmentResponse, Failure | Error, GetEnvironmentV2QueryParams, GetEnvironmentV2PathParams>,
    'path'
  > &
    GetEnvironmentV2PathParams
  /**
   * Gets a Environment by identifier
   */
  export const GetEnvironmentV2: ({ environmentIdentifier, ...props }: GetEnvironmentV2Props) => JSX.Element
  export type UseGetEnvironmentV2Props = Omit<
    UseGetProps<ResponseEnvironmentResponse, Failure | Error, GetEnvironmentV2QueryParams, GetEnvironmentV2PathParams>,
    'path'
  > &
    GetEnvironmentV2PathParams
  /**
   * Gets a Environment by identifier
   */
  export const useGetEnvironmentV2: ({
    environmentIdentifier,
    ...props
  }: UseGetEnvironmentV2Props) => import('restful-react').UseGetReturn<
    ResponseEnvironmentResponse,
    Error | Failure,
    GetEnvironmentV2QueryParams,
    unknown
  >
  /**
   * Gets a Environment by identifier
   */
  export const getEnvironmentV2Promise: (
    {
      environmentIdentifier,
      ...props
    }: GetUsingFetchProps<
      ResponseEnvironmentResponse,
      Error | Failure,
      GetEnvironmentV2QueryParams,
      GetEnvironmentV2PathParams
    > & {
      environmentIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseEnvironmentResponse>
  export type DummyApiForSwaggerSchemaCheckProps = Omit<
    GetProps<ResponsePipelineConfig, Failure | Error, void, void>,
    'path'
  >
  /**
   * dummy api for checking pms schema
   */
  export const DummyApiForSwaggerSchemaCheck: (props: DummyApiForSwaggerSchemaCheckProps) => JSX.Element
  export type UseDummyApiForSwaggerSchemaCheckProps = Omit<
    UseGetProps<ResponsePipelineConfig, Failure | Error, void, void>,
    'path'
  >
  /**
   * dummy api for checking pms schema
   */
  export const useDummyApiForSwaggerSchemaCheck: (
    props: UseDummyApiForSwaggerSchemaCheckProps
  ) => import('restful-react').UseGetReturn<ResponsePipelineConfig, Error | Failure, void, unknown>
  /**
   * dummy api for checking pms schema
   */
  export const dummyApiForSwaggerSchemaCheckPromise: (
    props: GetUsingFetchProps<ResponsePipelineConfig, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePipelineConfig>
  export type GetDummyCDPipelineModuleInfoProps = Omit<
    GetProps<ResponseCDPipelineModuleInfo, Failure | Error, void, void>,
    'path'
  >
  /**
   * dummy api
   */
  export const GetDummyCDPipelineModuleInfo: (props: GetDummyCDPipelineModuleInfoProps) => JSX.Element
  export type UseGetDummyCDPipelineModuleInfoProps = Omit<
    UseGetProps<ResponseCDPipelineModuleInfo, Failure | Error, void, void>,
    'path'
  >
  /**
   * dummy api
   */
  export const useGetDummyCDPipelineModuleInfo: (
    props: UseGetDummyCDPipelineModuleInfoProps
  ) => import('restful-react').UseGetReturn<ResponseCDPipelineModuleInfo, Error | Failure, void, unknown>
  /**
   * dummy api
   */
  export const getDummyCDPipelineModuleInfoPromise: (
    props: GetUsingFetchProps<ResponseCDPipelineModuleInfo, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseCDPipelineModuleInfo>
  export type GetDummyCDStageModuleInfoProps = Omit<
    GetProps<ResponseCDStageModuleInfo, Failure | Error, void, void>,
    'path'
  >
  /**
   * dummy api
   */
  export const GetDummyCDStageModuleInfo: (props: GetDummyCDStageModuleInfoProps) => JSX.Element
  export type UseGetDummyCDStageModuleInfoProps = Omit<
    UseGetProps<ResponseCDStageModuleInfo, Failure | Error, void, void>,
    'path'
  >
  /**
   * dummy api
   */
  export const useGetDummyCDStageModuleInfo: (
    props: UseGetDummyCDStageModuleInfoProps
  ) => import('restful-react').UseGetReturn<ResponseCDStageModuleInfo, Error | Failure, void, unknown>
  /**
   * dummy api
   */
  export const getDummyCDStageModuleInfoPromise: (
    props: GetUsingFetchProps<ResponseCDStageModuleInfo, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseCDStageModuleInfo>
  export type GetExecutionStatusesProps = Omit<
    GetProps<ResponseListExecutionStatus, Failure | Error, void, void>,
    'path'
  >
  /**
   * Gets Execution Status list
   */
  export const GetExecutionStatuses: (props: GetExecutionStatusesProps) => JSX.Element
  export type UseGetExecutionStatusesProps = Omit<
    UseGetProps<ResponseListExecutionStatus, Failure | Error, void, void>,
    'path'
  >
  /**
   * Gets Execution Status list
   */
  export const useGetExecutionStatuses: (
    props: UseGetExecutionStatusesProps
  ) => import('restful-react').UseGetReturn<ResponseListExecutionStatus, Error | Failure, void, unknown>
  /**
   * Gets Execution Status list
   */
  export const getExecutionStatusesPromise: (
    props: GetUsingFetchProps<ResponseListExecutionStatus, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListExecutionStatus>
  export interface SaveFeedbackQueryParams {
    accountIdentifier?: string
  }
  export type SaveFeedbackProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, SaveFeedbackQueryParams, FeedbackFormDTO, void>,
    'path' | 'verb'
  >
  /**
   * Saves Feedback
   */
  export const SaveFeedback: (props: SaveFeedbackProps) => JSX.Element
  export type UseSaveFeedbackProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, SaveFeedbackQueryParams, FeedbackFormDTO, void>,
    'path' | 'verb'
  >
  /**
   * Saves Feedback
   */
  export const useSaveFeedback: (
    props: UseSaveFeedbackProps
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    FeedbackFormDTO,
    SaveFeedbackQueryParams,
    void
  >
  /**
   * Saves Feedback
   */
  export const saveFeedbackPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, SaveFeedbackQueryParams, FeedbackFormDTO, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetFilterListQueryParams {
    pageIndex?: number
    pageSize?: number
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    type: 'Connector' | 'DelegateProfile' | 'Delegate' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
  }
  export type GetFilterListProps = Omit<
    GetProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
    'path'
  >
  /**
   * Get Filter
   */
  export const GetFilterList: (props: GetFilterListProps) => JSX.Element
  export type UseGetFilterListProps = Omit<
    UseGetProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
    'path'
  >
  /**
   * Get Filter
   */
  export const useGetFilterList: (
    props: UseGetFilterListProps
  ) => import('restful-react').UseGetReturn<ResponsePageFilterDTO, Error | Failure, GetFilterListQueryParams, unknown>
  /**
   * Get Filter
   */
  export const getFilterListPromise: (
    props: GetUsingFetchProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageFilterDTO>
  export interface PostFilterQueryParams {
    accountIdentifier: string
  }
  export type PostFilterProps = Omit<
    MutateProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a Filter
   */
  export const PostFilter: (props: PostFilterProps) => JSX.Element
  export type UsePostFilterProps = Omit<
    UseMutateProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a Filter
   */
  export const usePostFilter: (
    props: UsePostFilterProps
  ) => import('restful-react').UseMutateReturn<
    ResponseFilterDTO,
    Error | Failure,
    FilterDTO,
    PostFilterQueryParams,
    void
  >
  /**
   * Create a Filter
   */
  export const postFilterPromise: (
    props: MutateUsingFetchProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseFilterDTO>
  export interface UpdateFilterQueryParams {
    accountIdentifier?: string
  }
  export type UpdateFilterProps = Omit<
    MutateProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Update a Filter
   */
  export const UpdateFilter: (props: UpdateFilterProps) => JSX.Element
  export type UseUpdateFilterProps = Omit<
    UseMutateProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Update a Filter
   */
  export const useUpdateFilter: (
    props: UseUpdateFilterProps
  ) => import('restful-react').UseMutateReturn<
    ResponseFilterDTO,
    Error | Failure,
    FilterDTO,
    UpdateFilterQueryParams,
    void
  >
  /**
   * Update a Filter
   */
  export const updateFilterPromise: (
    props: MutateUsingFetchProps<
      ResponseFilterDTO,
      Failure | Error,
      UpdateFilterQueryParams,
      FilterDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseFilterDTO>
  export interface DeleteFilterQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    type: 'Connector' | 'DelegateProfile' | 'Delegate' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
  }
  export type DeleteFilterProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a filter
   */
  export const DeleteFilter: (props: DeleteFilterProps) => JSX.Element
  export type UseDeleteFilterProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a filter
   */
  export const useDeleteFilter: (
    props: UseDeleteFilterProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, Error | Failure, string, DeleteFilterQueryParams, void>
  /**
   * Delete a filter
   */
  export const deleteFilterPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetFilterQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    type: 'Connector' | 'DelegateProfile' | 'Delegate' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
  }
  export interface GetFilterPathParams {
    identifier: string
  }
  export type GetFilterProps = Omit<
    GetProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>,
    'path'
  > &
    GetFilterPathParams
  /**
   * Get Filter
   */
  export const GetFilter: ({ identifier, ...props }: GetFilterProps) => JSX.Element
  export type UseGetFilterProps = Omit<
    UseGetProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>,
    'path'
  > &
    GetFilterPathParams
  /**
   * Get Filter
   */
  export const useGetFilter: ({
    identifier,
    ...props
  }: UseGetFilterProps) => import('restful-react').UseGetReturn<
    ResponseFilterDTO,
    Error | Failure,
    GetFilterQueryParams,
    unknown
  >
  /**
   * Get Filter
   */
  export const getFilterPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<ResponseFilterDTO, Error | Failure, GetFilterQueryParams, GetFilterPathParams> & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseFilterDTO>
  export interface GetClusterNamesForGcpQueryParams {
    connectorRef?: string
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type GetClusterNamesForGcpProps = Omit<
    GetProps<ResponseGcpResponseDTO, Failure | Error, GetClusterNamesForGcpQueryParams, void>,
    'path'
  >
  /**
   * Gets gcp cluster names
   */
  export const GetClusterNamesForGcp: (props: GetClusterNamesForGcpProps) => JSX.Element
  export type UseGetClusterNamesForGcpProps = Omit<
    UseGetProps<ResponseGcpResponseDTO, Failure | Error, GetClusterNamesForGcpQueryParams, void>,
    'path'
  >
  /**
   * Gets gcp cluster names
   */
  export const useGetClusterNamesForGcp: (
    props: UseGetClusterNamesForGcpProps
  ) => import('restful-react').UseGetReturn<
    ResponseGcpResponseDTO,
    Error | Failure,
    GetClusterNamesForGcpQueryParams,
    unknown
  >
  /**
   * Gets gcp cluster names
   */
  export const getClusterNamesForGcpPromise: (
    props: GetUsingFetchProps<ResponseGcpResponseDTO, Failure | Error, GetClusterNamesForGcpQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseGcpResponseDTO>
  export interface ListGitSyncQueryParams {
    projectIdentifier?: string
    orgIdentifier?: string
    accountIdentifier?: string
  }
  export type ListGitSyncProps = Omit<GetProps<GitSyncConfig[], unknown, ListGitSyncQueryParams, void>, 'path'>
  /**
   * List Git Sync
   */
  export const ListGitSync: (props: ListGitSyncProps) => JSX.Element
  export type UseListGitSyncProps = Omit<UseGetProps<GitSyncConfig[], unknown, ListGitSyncQueryParams, void>, 'path'>
  /**
   * List Git Sync
   */
  export const useListGitSync: (
    props: UseListGitSyncProps
  ) => import('restful-react').UseGetReturn<GitSyncConfig[], unknown, ListGitSyncQueryParams, unknown>
  /**
   * List Git Sync
   */
  export const listGitSyncPromise: (
    props: GetUsingFetchProps<GitSyncConfig[], unknown, ListGitSyncQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<GitSyncConfig[]>
  export interface PostGitSyncQueryParams {
    accountIdentifier?: string
  }
  export type PostGitSyncProps = Omit<
    MutateProps<GitSyncConfig, unknown, PostGitSyncQueryParams, GitSyncConfigRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a Git Sync
   */
  export const PostGitSync: (props: PostGitSyncProps) => JSX.Element
  export type UsePostGitSyncProps = Omit<
    UseMutateProps<GitSyncConfig, unknown, PostGitSyncQueryParams, GitSyncConfigRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a Git Sync
   */
  export const usePostGitSync: (
    props: UsePostGitSyncProps
  ) => import('restful-react').UseMutateReturn<GitSyncConfig, unknown, GitSyncConfig, PostGitSyncQueryParams, void>
  /**
   * Create a Git Sync
   */
  export const postGitSyncPromise: (
    props: MutateUsingFetchProps<GitSyncConfig, unknown, PostGitSyncQueryParams, GitSyncConfigRequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<GitSyncConfig>
  export interface PutGitSyncQueryParams {
    accountIdentifier?: string
  }
  export type PutGitSyncProps = Omit<
    MutateProps<GitSyncConfig, unknown, PutGitSyncQueryParams, GitSyncConfigRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Update Git Sync by id
   */
  export const PutGitSync: (props: PutGitSyncProps) => JSX.Element
  export type UsePutGitSyncProps = Omit<
    UseMutateProps<GitSyncConfig, unknown, PutGitSyncQueryParams, GitSyncConfigRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Update Git Sync by id
   */
  export const usePutGitSync: (
    props: UsePutGitSyncProps
  ) => import('restful-react').UseMutateReturn<GitSyncConfig, unknown, GitSyncConfig, PutGitSyncQueryParams, void>
  /**
   * Update Git Sync by id
   */
  export const putGitSyncPromise: (
    props: MutateUsingFetchProps<GitSyncConfig, unknown, PutGitSyncQueryParams, GitSyncConfigRequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<GitSyncConfig>
  export interface GetListOfBranchesWithStatusQueryParams {
    yamlGitConfigIdentifier?: string
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    page?: number
    size?: number
    searchTerm?: string
    branchSyncStatus?: 'SYNCED' | 'SYNCING' | 'UNSYNCED'
  }
  export type GetListOfBranchesWithStatusProps = Omit<
    GetProps<ResponseGitBranchListDTO, Failure | Error, GetListOfBranchesWithStatusQueryParams, void>,
    'path'
  >
  /**
   * Gets list of branches with their status by Git Config Identifier
   */
  export const GetListOfBranchesWithStatus: (props: GetListOfBranchesWithStatusProps) => JSX.Element
  export type UseGetListOfBranchesWithStatusProps = Omit<
    UseGetProps<ResponseGitBranchListDTO, Failure | Error, GetListOfBranchesWithStatusQueryParams, void>,
    'path'
  >
  /**
   * Gets list of branches with their status by Git Config Identifier
   */
  export const useGetListOfBranchesWithStatus: (
    props: UseGetListOfBranchesWithStatusProps
  ) => import('restful-react').UseGetReturn<
    ResponseGitBranchListDTO,
    Error | Failure,
    GetListOfBranchesWithStatusQueryParams,
    unknown
  >
  /**
   * Gets list of branches with their status by Git Config Identifier
   */
  export const getListOfBranchesWithStatusPromise: (
    props: GetUsingFetchProps<ResponseGitBranchListDTO, Failure | Error, GetListOfBranchesWithStatusQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseGitBranchListDTO>
  export interface SyncGitBranchQueryParams {
    repoIdentifier?: string
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    branch?: string
  }
  export type SyncGitBranchProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, SyncGitBranchQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Sync the new branch into harness
   */
  export const SyncGitBranch: (props: SyncGitBranchProps) => JSX.Element
  export type UseSyncGitBranchProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, SyncGitBranchQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Sync the new branch into harness
   */
  export const useSyncGitBranch: (
    props: UseSyncGitBranchProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, Error | Failure, void, SyncGitBranchQueryParams, void>
  /**
   * Sync the new branch into harness
   */
  export const syncGitBranchPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, SyncGitBranchQueryParams, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface ListGitSyncEntitiesSummaryForRepoAndBranchQueryParams {
    projectIdentifier?: string
    orgIdentifier?: string
    accountIdentifier?: string
    size?: number
    gitSyncConfigId?: string
  }
  export interface ListGitSyncEntitiesSummaryForRepoAndBranchPathParams {
    branch: string
  }
  export type ListGitSyncEntitiesSummaryForRepoAndBranchProps = Omit<
    MutateProps<
      ResponseListGitSyncEntityListDTO,
      unknown,
      ListGitSyncEntitiesSummaryForRepoAndBranchQueryParams,
      GitEntityBranchFilterSummaryProperties,
      ListGitSyncEntitiesSummaryForRepoAndBranchPathParams
    >,
    'path' | 'verb'
  > &
    ListGitSyncEntitiesSummaryForRepoAndBranchPathParams
  /**
   * List Git Sync Entity by product for Repo and Branch and List of Entities
   */
  export const ListGitSyncEntitiesSummaryForRepoAndBranch: ({
    branch,
    ...props
  }: ListGitSyncEntitiesSummaryForRepoAndBranchProps) => JSX.Element
  export type UseListGitSyncEntitiesSummaryForRepoAndBranchProps = Omit<
    UseMutateProps<
      ResponseListGitSyncEntityListDTO,
      unknown,
      ListGitSyncEntitiesSummaryForRepoAndBranchQueryParams,
      GitEntityBranchFilterSummaryProperties,
      ListGitSyncEntitiesSummaryForRepoAndBranchPathParams
    >,
    'path' | 'verb'
  > &
    ListGitSyncEntitiesSummaryForRepoAndBranchPathParams
  /**
   * List Git Sync Entity by product for Repo and Branch and List of Entities
   */
  export const useListGitSyncEntitiesSummaryForRepoAndBranch: ({
    branch,
    ...props
  }: UseListGitSyncEntitiesSummaryForRepoAndBranchProps) => import('restful-react').UseMutateReturn<
    ResponseListGitSyncEntityListDTO,
    unknown,
    GitEntityBranchFilterSummaryProperties,
    ListGitSyncEntitiesSummaryForRepoAndBranchQueryParams,
    ListGitSyncEntitiesSummaryForRepoAndBranchPathParams
  >
  /**
   * List Git Sync Entity by product for Repo and Branch and List of Entities
   */
  export const listGitSyncEntitiesSummaryForRepoAndBranchPromise: (
    {
      branch,
      ...props
    }: MutateUsingFetchProps<
      ResponseListGitSyncEntityListDTO,
      unknown,
      ListGitSyncEntitiesSummaryForRepoAndBranchQueryParams,
      GitEntityBranchFilterSummaryProperties,
      ListGitSyncEntitiesSummaryForRepoAndBranchPathParams
    > & {
      branch: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseListGitSyncEntityListDTO>
  export interface ListGitSyncEntitiesSummaryForRepoAndTypesQueryParams {
    projectIdentifier?: string
    orgIdentifier?: string
    accountIdentifier?: string
    size?: number
  }
  export type ListGitSyncEntitiesSummaryForRepoAndTypesProps = Omit<
    MutateProps<
      ResponseGitSyncRepoFilesList,
      unknown,
      ListGitSyncEntitiesSummaryForRepoAndTypesQueryParams,
      GitEntityFilterProperties,
      void
    >,
    'path' | 'verb'
  >
  /**
   * List Git Sync Entity by product for List of Repos and Entities
   */
  export const ListGitSyncEntitiesSummaryForRepoAndTypes: (
    props: ListGitSyncEntitiesSummaryForRepoAndTypesProps
  ) => JSX.Element
  export type UseListGitSyncEntitiesSummaryForRepoAndTypesProps = Omit<
    UseMutateProps<
      ResponseGitSyncRepoFilesList,
      unknown,
      ListGitSyncEntitiesSummaryForRepoAndTypesQueryParams,
      GitEntityFilterProperties,
      void
    >,
    'path' | 'verb'
  >
  /**
   * List Git Sync Entity by product for List of Repos and Entities
   */
  export const useListGitSyncEntitiesSummaryForRepoAndTypes: (
    props: UseListGitSyncEntitiesSummaryForRepoAndTypesProps
  ) => import('restful-react').UseMutateReturn<
    ResponseGitSyncRepoFilesList,
    unknown,
    GitEntityFilterProperties,
    ListGitSyncEntitiesSummaryForRepoAndTypesQueryParams,
    void
  >
  /**
   * List Git Sync Entity by product for List of Repos and Entities
   */
  export const listGitSyncEntitiesSummaryForRepoAndTypesPromise: (
    props: MutateUsingFetchProps<
      ResponseGitSyncRepoFilesList,
      unknown,
      ListGitSyncEntitiesSummaryForRepoAndTypesQueryParams,
      GitEntityFilterProperties,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseGitSyncRepoFilesList>
  export interface ListGitSyncEntitiesByTypeQueryParams {
    projectIdentifier?: string
    orgIdentifier?: string
    accountIdentifier?: string
    gitSyncConfigId?: string
    branch?: string
    page?: number
    size?: number
    moduleType?: string
  }
  export interface ListGitSyncEntitiesByTypePathParams {
    entityType:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
  }
  export type ListGitSyncEntitiesByTypeProps = Omit<
    GetProps<
      ResponsePageGitSyncEntityListDTO,
      unknown,
      ListGitSyncEntitiesByTypeQueryParams,
      ListGitSyncEntitiesByTypePathParams
    >,
    'path'
  > &
    ListGitSyncEntitiesByTypePathParams
  /**
   * Get Git Sync Entity By Type
   */
  export const ListGitSyncEntitiesByType: ({ entityType, ...props }: ListGitSyncEntitiesByTypeProps) => JSX.Element
  export type UseListGitSyncEntitiesByTypeProps = Omit<
    UseGetProps<
      ResponsePageGitSyncEntityListDTO,
      unknown,
      ListGitSyncEntitiesByTypeQueryParams,
      ListGitSyncEntitiesByTypePathParams
    >,
    'path'
  > &
    ListGitSyncEntitiesByTypePathParams
  /**
   * Get Git Sync Entity By Type
   */
  export const useListGitSyncEntitiesByType: ({
    entityType,
    ...props
  }: UseListGitSyncEntitiesByTypeProps) => import('restful-react').UseGetReturn<
    ResponsePageGitSyncEntityListDTO,
    unknown,
    ListGitSyncEntitiesByTypeQueryParams,
    unknown
  >
  /**
   * Get Git Sync Entity By Type
   */
  export const listGitSyncEntitiesByTypePromise: (
    {
      entityType,
      ...props
    }: GetUsingFetchProps<
      ResponsePageGitSyncEntityListDTO,
      unknown,
      ListGitSyncEntitiesByTypeQueryParams,
      ListGitSyncEntitiesByTypePathParams
    > & {
      entityType:
        | 'Projects'
        | 'Pipelines'
        | 'PipelineSteps'
        | 'Connectors'
        | 'Secrets'
        | 'Service'
        | 'Environment'
        | 'InputSets'
        | 'CvConfig'
        | 'Delegates'
        | 'DelegateConfigurations'
        | 'CvVerificationJob'
        | 'IntegrationStage'
        | 'IntegrationSteps'
        | 'CvKubernetesActivitySource'
        | 'DeploymentSteps'
        | 'DeploymentStage'
        | 'ApprovalStage'
        | 'FeatureFlagStage'
        | 'Triggers'
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageGitSyncEntityListDTO>
  export interface GetGitSyncSettingsQueryParams {
    projectIdentifier?: string
    orgIdentifier?: string
    accountIdentifier?: string
  }
  export type GetGitSyncSettingsProps = Omit<
    GetProps<ResponseGitSyncSettingsDTO, unknown, GetGitSyncSettingsQueryParams, void>,
    'path'
  >
  /**
   * Get git sync settings
   */
  export const GetGitSyncSettings: (props: GetGitSyncSettingsProps) => JSX.Element
  export type UseGetGitSyncSettingsProps = Omit<
    UseGetProps<ResponseGitSyncSettingsDTO, unknown, GetGitSyncSettingsQueryParams, void>,
    'path'
  >
  /**
   * Get git sync settings
   */
  export const useGetGitSyncSettings: (
    props: UseGetGitSyncSettingsProps
  ) => import('restful-react').UseGetReturn<ResponseGitSyncSettingsDTO, unknown, GetGitSyncSettingsQueryParams, unknown>
  /**
   * Get git sync settings
   */
  export const getGitSyncSettingsPromise: (
    props: GetUsingFetchProps<ResponseGitSyncSettingsDTO, unknown, GetGitSyncSettingsQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseGitSyncSettingsDTO>
  export type PostGitSyncSettingProps = Omit<
    MutateProps<ResponseGitSyncSettingsDTO, unknown, void, GitSyncSettingsDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a Git Sync Setting
   */
  export const PostGitSyncSetting: (props: PostGitSyncSettingProps) => JSX.Element
  export type UsePostGitSyncSettingProps = Omit<
    UseMutateProps<ResponseGitSyncSettingsDTO, unknown, void, GitSyncSettingsDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a Git Sync Setting
   */
  export const usePostGitSyncSetting: (
    props: UsePostGitSyncSettingProps
  ) => import('restful-react').UseMutateReturn<ResponseGitSyncSettingsDTO, unknown, GitSyncSettingsDTO, void, void>
  /**
   * Create a Git Sync Setting
   */
  export const postGitSyncSettingPromise: (
    props: MutateUsingFetchProps<ResponseGitSyncSettingsDTO, unknown, void, GitSyncSettingsDTORequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseGitSyncSettingsDTO>
  export type UpdateGitSyncSettingProps = Omit<
    MutateProps<ResponseGitSyncSettingsDTO, unknown, void, GitSyncSettingsDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Update a Git Sync Setting
   */
  export const UpdateGitSyncSetting: (props: UpdateGitSyncSettingProps) => JSX.Element
  export type UseUpdateGitSyncSettingProps = Omit<
    UseMutateProps<ResponseGitSyncSettingsDTO, unknown, void, GitSyncSettingsDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Update a Git Sync Setting
   */
  export const useUpdateGitSyncSetting: (
    props: UseUpdateGitSyncSettingProps
  ) => import('restful-react').UseMutateReturn<ResponseGitSyncSettingsDTO, unknown, GitSyncSettingsDTO, void, void>
  /**
   * Update a Git Sync Setting
   */
  export const updateGitSyncSettingPromise: (
    props: MutateUsingFetchProps<ResponseGitSyncSettingsDTO, unknown, void, GitSyncSettingsDTORequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseGitSyncSettingsDTO>
  export interface WebhookCatcherQueryParams {
    accountId?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface WebhookCatcherPathParams {
    entityToken: string
  }
  export type WebhookCatcherProps = Omit<
    MutateProps<
      RestResponse,
      unknown,
      WebhookCatcherQueryParams,
      WebhookCatcherBodyRequestBody,
      WebhookCatcherPathParams
    >,
    'path' | 'verb'
  > &
    WebhookCatcherPathParams
  export const WebhookCatcher: ({ entityToken, ...props }: WebhookCatcherProps) => JSX.Element
  export type UseWebhookCatcherProps = Omit<
    UseMutateProps<
      RestResponse,
      unknown,
      WebhookCatcherQueryParams,
      WebhookCatcherBodyRequestBody,
      WebhookCatcherPathParams
    >,
    'path' | 'verb'
  > &
    WebhookCatcherPathParams
  export const useWebhookCatcher: ({
    entityToken,
    ...props
  }: UseWebhookCatcherProps) => import('restful-react').UseMutateReturn<
    RestResponse,
    unknown,
    string,
    WebhookCatcherQueryParams,
    WebhookCatcherPathParams
  >
  export const webhookCatcherPromise: (
    {
      entityToken,
      ...props
    }: MutateUsingFetchProps<RestResponse, unknown, WebhookCatcherQueryParams, string, WebhookCatcherPathParams> & {
      entityToken: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponse>
  export interface IsGitSyncEnabledQueryParams {
    accountIdentifier?: string
    projectIdentifier?: string
    orgIdentifier?: string
  }
  export type IsGitSyncEnabledProps = Omit<GetProps<GitEnabledDTO, unknown, IsGitSyncEnabledQueryParams, void>, 'path'>
  /**
   * Is Git Sync EnabledForProject
   */
  export const IsGitSyncEnabled: (props: IsGitSyncEnabledProps) => JSX.Element
  export type UseIsGitSyncEnabledProps = Omit<
    UseGetProps<GitEnabledDTO, unknown, IsGitSyncEnabledQueryParams, void>,
    'path'
  >
  /**
   * Is Git Sync EnabledForProject
   */
  export const useIsGitSyncEnabled: (
    props: UseIsGitSyncEnabledProps
  ) => import('restful-react').UseGetReturn<GitEnabledDTO, unknown, IsGitSyncEnabledQueryParams, unknown>
  /**
   * Is Git Sync EnabledForProject
   */
  export const isGitSyncEnabledPromise: (
    props: GetUsingFetchProps<GitEnabledDTO, unknown, IsGitSyncEnabledQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<GitEnabledDTO>
  export interface PutGitSyncDefaultQueryParams {
    projectId?: string
    organizationId?: string
    accountId?: string
  }
  export interface PutGitSyncDefaultPathParams {
    identifier: string
    folderIdentifier: string
  }
  export type PutGitSyncDefaultProps = Omit<
    MutateProps<GitSyncConfig, unknown, PutGitSyncDefaultQueryParams, void, PutGitSyncDefaultPathParams>,
    'path' | 'verb'
  > &
    PutGitSyncDefaultPathParams
  /**
   * Update Git Sync default by id
   */
  export const PutGitSyncDefault: ({ identifier, folderIdentifier, ...props }: PutGitSyncDefaultProps) => JSX.Element
  export type UsePutGitSyncDefaultProps = Omit<
    UseMutateProps<GitSyncConfig, unknown, PutGitSyncDefaultQueryParams, void, PutGitSyncDefaultPathParams>,
    'path' | 'verb'
  > &
    PutGitSyncDefaultPathParams
  /**
   * Update Git Sync default by id
   */
  export const usePutGitSyncDefault: ({
    identifier,
    folderIdentifier,
    ...props
  }: UsePutGitSyncDefaultProps) => import('restful-react').UseMutateReturn<
    GitSyncConfig,
    unknown,
    void,
    PutGitSyncDefaultQueryParams,
    PutGitSyncDefaultPathParams
  >
  /**
   * Update Git Sync default by id
   */
  export const putGitSyncDefaultPromise: (
    {
      identifier,
      folderIdentifier,
      ...props
    }: MutateUsingFetchProps<
      GitSyncConfig,
      unknown,
      PutGitSyncDefaultQueryParams,
      void,
      PutGitSyncDefaultPathParams
    > & {
      identifier: string
      folderIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<GitSyncConfig>
  export type GetNGManagerHealthStatusProps = Omit<GetProps<ResponseString, unknown, void, void>, 'path'>
  /**
   * get health for NGManager service
   */
  export const GetNGManagerHealthStatus: (props: GetNGManagerHealthStatusProps) => JSX.Element
  export type UseGetNGManagerHealthStatusProps = Omit<UseGetProps<ResponseString, unknown, void, void>, 'path'>
  /**
   * get health for NGManager service
   */
  export const useGetNGManagerHealthStatus: (
    props: UseGetNGManagerHealthStatusProps
  ) => import('restful-react').UseGetReturn<ResponseString, unknown, void, unknown>
  /**
   * get health for NGManager service
   */
  export const getNGManagerHealthStatusPromise: (
    props: GetUsingFetchProps<ResponseString, unknown, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface GetInvitesQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetInvitesProps = Omit<GetProps<ResponsePageInvite, Failure | Error, GetInvitesQueryParams, void>, 'path'>
  /**
   * Get all invites for the queried project/organization
   */
  export const GetInvites: (props: GetInvitesProps) => JSX.Element
  export type UseGetInvitesProps = Omit<
    UseGetProps<ResponsePageInvite, Failure | Error, GetInvitesQueryParams, void>,
    'path'
  >
  /**
   * Get all invites for the queried project/organization
   */
  export const useGetInvites: (
    props: UseGetInvitesProps
  ) => import('restful-react').UseGetReturn<ResponsePageInvite, Error | Failure, GetInvitesQueryParams, unknown>
  /**
   * Get all invites for the queried project/organization
   */
  export const getInvitesPromise: (
    props: GetUsingFetchProps<ResponsePageInvite, Failure | Error, GetInvitesQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageInvite>
  export interface SendInviteQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type SendInviteProps = Omit<
    MutateProps<ResponseListInviteOperationResponse, Failure | Error, SendInviteQueryParams, CreateInvite, void>,
    'path' | 'verb'
  >
  /**
   * Add a new invite for the specified project/organization
   */
  export const SendInvite: (props: SendInviteProps) => JSX.Element
  export type UseSendInviteProps = Omit<
    UseMutateProps<ResponseListInviteOperationResponse, Failure | Error, SendInviteQueryParams, CreateInvite, void>,
    'path' | 'verb'
  >
  /**
   * Add a new invite for the specified project/organization
   */
  export const useSendInvite: (
    props: UseSendInviteProps
  ) => import('restful-react').UseMutateReturn<
    ResponseListInviteOperationResponse,
    Error | Failure,
    CreateInvite,
    SendInviteQueryParams,
    void
  >
  /**
   * Add a new invite for the specified project/organization
   */
  export const sendInvitePromise: (
    props: MutateUsingFetchProps<
      ResponseListInviteOperationResponse,
      Failure | Error,
      SendInviteQueryParams,
      CreateInvite,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListInviteOperationResponse>
  export interface GetPendingUsersAggregatedQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    searchTerm?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetPendingUsersAggregatedProps = Omit<
    MutateProps<ResponsePageInvite, Failure | Error, GetPendingUsersAggregatedQueryParams, ACLAggregateFilter, void>,
    'path' | 'verb'
  >
  /**
   * Get a page of pending users for access control
   */
  export const GetPendingUsersAggregated: (props: GetPendingUsersAggregatedProps) => JSX.Element
  export type UseGetPendingUsersAggregatedProps = Omit<
    UseMutateProps<ResponsePageInvite, Failure | Error, GetPendingUsersAggregatedQueryParams, ACLAggregateFilter, void>,
    'path' | 'verb'
  >
  /**
   * Get a page of pending users for access control
   */
  export const useGetPendingUsersAggregated: (
    props: UseGetPendingUsersAggregatedProps
  ) => import('restful-react').UseMutateReturn<
    ResponsePageInvite,
    Error | Failure,
    ACLAggregateFilter,
    GetPendingUsersAggregatedQueryParams,
    void
  >
  /**
   * Get a page of pending users for access control
   */
  export const getPendingUsersAggregatedPromise: (
    props: MutateUsingFetchProps<
      ResponsePageInvite,
      Failure | Error,
      GetPendingUsersAggregatedQueryParams,
      ACLAggregateFilter,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageInvite>
  export interface GetInviteQueryParams {
    inviteId?: string
    jwttoken?: string
  }
  export type GetInviteProps = Omit<GetProps<ResponseInvite, Failure | Error, GetInviteQueryParams, void>, 'path'>
  /**
   * Get invite
   */
  export const GetInvite: (props: GetInviteProps) => JSX.Element
  export type UseGetInviteProps = Omit<UseGetProps<ResponseInvite, Failure | Error, GetInviteQueryParams, void>, 'path'>
  /**
   * Get invite
   */
  export const useGetInvite: (
    props: UseGetInviteProps
  ) => import('restful-react').UseGetReturn<ResponseInvite, Error | Failure, GetInviteQueryParams, unknown>
  /**
   * Get invite
   */
  export const getInvitePromise: (
    props: GetUsingFetchProps<ResponseInvite, Failure | Error, GetInviteQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseInvite>
  export type DeleteInviteProps = Omit<
    MutateProps<ResponseOptionalInvite, Failure | Error, void, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a invite for the specified project/organization
   */
  export const DeleteInvite: (props: DeleteInviteProps) => JSX.Element
  export type UseDeleteInviteProps = Omit<
    UseMutateProps<ResponseOptionalInvite, Failure | Error, void, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a invite for the specified project/organization
   */
  export const useDeleteInvite: (
    props: UseDeleteInviteProps
  ) => import('restful-react').UseMutateReturn<ResponseOptionalInvite, Error | Failure, string, void, void>
  /**
   * Delete a invite for the specified project/organization
   */
  export const deleteInvitePromise: (
    props: MutateUsingFetchProps<ResponseOptionalInvite, Failure | Error, void, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseOptionalInvite>
  export interface UpdateInviteQueryParams {
    accountIdentifier?: string
  }
  export interface UpdateInvitePathParams {
    inviteId: string
  }
  export type UpdateInviteProps = Omit<
    MutateProps<ResponseOptionalInvite, Failure | Error, UpdateInviteQueryParams, Invite, UpdateInvitePathParams>,
    'path' | 'verb'
  > &
    UpdateInvitePathParams
  /**
   * Resend invite mail
   */
  export const UpdateInvite: ({ inviteId, ...props }: UpdateInviteProps) => JSX.Element
  export type UseUpdateInviteProps = Omit<
    UseMutateProps<ResponseOptionalInvite, Failure | Error, UpdateInviteQueryParams, Invite, UpdateInvitePathParams>,
    'path' | 'verb'
  > &
    UpdateInvitePathParams
  /**
   * Resend invite mail
   */
  export const useUpdateInvite: ({
    inviteId,
    ...props
  }: UseUpdateInviteProps) => import('restful-react').UseMutateReturn<
    ResponseOptionalInvite,
    Error | Failure,
    Invite,
    UpdateInviteQueryParams,
    UpdateInvitePathParams
  >
  /**
   * Resend invite mail
   */
  export const updateInvitePromise: (
    {
      inviteId,
      ...props
    }: MutateUsingFetchProps<
      ResponseOptionalInvite,
      Error | Failure,
      UpdateInviteQueryParams,
      Invite,
      UpdateInvitePathParams
    > & {
      inviteId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseOptionalInvite>
  export interface GetJiraIssueCreateMetadataQueryParams {
    connectorRef: string
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    projectKey?: string
    issueType?: string
    expand?: string
    fetchStatus?: boolean
    ignoreComment?: boolean
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetJiraIssueCreateMetadataProps = Omit<
    GetProps<ResponseJiraIssueCreateMetadataNG, Failure | Error, GetJiraIssueCreateMetadataQueryParams, void>,
    'path'
  >
  /**
   * Get jira issue create metadata
   */
  export const GetJiraIssueCreateMetadata: (props: GetJiraIssueCreateMetadataProps) => JSX.Element
  export type UseGetJiraIssueCreateMetadataProps = Omit<
    UseGetProps<ResponseJiraIssueCreateMetadataNG, Failure | Error, GetJiraIssueCreateMetadataQueryParams, void>,
    'path'
  >
  /**
   * Get jira issue create metadata
   */
  export const useGetJiraIssueCreateMetadata: (
    props: UseGetJiraIssueCreateMetadataProps
  ) => import('restful-react').UseGetReturn<
    ResponseJiraIssueCreateMetadataNG,
    Error | Failure,
    GetJiraIssueCreateMetadataQueryParams,
    unknown
  >
  /**
   * Get jira issue create metadata
   */
  export const getJiraIssueCreateMetadataPromise: (
    props: GetUsingFetchProps<
      ResponseJiraIssueCreateMetadataNG,
      Failure | Error,
      GetJiraIssueCreateMetadataQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseJiraIssueCreateMetadataNG>
  export interface GetJiraProjectsQueryParams {
    connectorRef: string
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetJiraProjectsProps = Omit<
    GetProps<ResponseListJiraProjectBasicNG, Failure | Error, GetJiraProjectsQueryParams, void>,
    'path'
  >
  /**
   * Get jira projects
   */
  export const GetJiraProjects: (props: GetJiraProjectsProps) => JSX.Element
  export type UseGetJiraProjectsProps = Omit<
    UseGetProps<ResponseListJiraProjectBasicNG, Failure | Error, GetJiraProjectsQueryParams, void>,
    'path'
  >
  /**
   * Get jira projects
   */
  export const useGetJiraProjects: (
    props: UseGetJiraProjectsProps
  ) => import('restful-react').UseGetReturn<
    ResponseListJiraProjectBasicNG,
    Error | Failure,
    GetJiraProjectsQueryParams,
    unknown
  >
  /**
   * Get jira projects
   */
  export const getJiraProjectsPromise: (
    props: GetUsingFetchProps<ResponseListJiraProjectBasicNG, Failure | Error, GetJiraProjectsQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListJiraProjectBasicNG>
  export interface GetJiraStatusesQueryParams {
    connectorRef: string
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    projectKey?: string
    issueType?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetJiraStatusesProps = Omit<
    GetProps<ResponseListJiraStatusNG, Failure | Error, GetJiraStatusesQueryParams, void>,
    'path'
  >
  /**
   * Get jira statuses
   */
  export const GetJiraStatuses: (props: GetJiraStatusesProps) => JSX.Element
  export type UseGetJiraStatusesProps = Omit<
    UseGetProps<ResponseListJiraStatusNG, Failure | Error, GetJiraStatusesQueryParams, void>,
    'path'
  >
  /**
   * Get jira statuses
   */
  export const useGetJiraStatuses: (
    props: UseGetJiraStatusesProps
  ) => import('restful-react').UseGetReturn<
    ResponseListJiraStatusNG,
    Error | Failure,
    GetJiraStatusesQueryParams,
    unknown
  >
  /**
   * Get jira statuses
   */
  export const getJiraStatusesPromise: (
    props: GetUsingFetchProps<ResponseListJiraStatusNG, Failure | Error, GetJiraStatusesQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListJiraStatusNG>
  export interface GetJiraIssueUpdateMetadataQueryParams {
    connectorRef: string
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    issueKey?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetJiraIssueUpdateMetadataProps = Omit<
    GetProps<ResponseJiraIssueUpdateMetadataNG, Failure | Error, GetJiraIssueUpdateMetadataQueryParams, void>,
    'path'
  >
  /**
   * Get jira issue update metadata
   */
  export const GetJiraIssueUpdateMetadata: (props: GetJiraIssueUpdateMetadataProps) => JSX.Element
  export type UseGetJiraIssueUpdateMetadataProps = Omit<
    UseGetProps<ResponseJiraIssueUpdateMetadataNG, Failure | Error, GetJiraIssueUpdateMetadataQueryParams, void>,
    'path'
  >
  /**
   * Get jira issue update metadata
   */
  export const useGetJiraIssueUpdateMetadata: (
    props: UseGetJiraIssueUpdateMetadataProps
  ) => import('restful-react').UseGetReturn<
    ResponseJiraIssueUpdateMetadataNG,
    Error | Failure,
    GetJiraIssueUpdateMetadataQueryParams,
    unknown
  >
  /**
   * Get jira issue update metadata
   */
  export const getJiraIssueUpdateMetadataPromise: (
    props: GetUsingFetchProps<
      ResponseJiraIssueUpdateMetadataNG,
      Failure | Error,
      GetJiraIssueUpdateMetadataQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseJiraIssueUpdateMetadataNG>
  export interface ValidateJiraCredentialsQueryParams {
    connectorRef: string
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type ValidateJiraCredentialsProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, ValidateJiraCredentialsQueryParams, void>,
    'path'
  >
  /**
   * Validate jira credentials
   */
  export const ValidateJiraCredentials: (props: ValidateJiraCredentialsProps) => JSX.Element
  export type UseValidateJiraCredentialsProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, ValidateJiraCredentialsQueryParams, void>,
    'path'
  >
  /**
   * Validate jira credentials
   */
  export const useValidateJiraCredentials: (
    props: UseValidateJiraCredentialsProps
  ) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateJiraCredentialsQueryParams,
    unknown
  >
  /**
   * Validate jira credentials
   */
  export const validateJiraCredentialsPromise: (
    props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateJiraCredentialsQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetModuleLicenseByAccountAndModuleTypeQueryParams {
    accountIdentifier: string
    moduleType: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
  }
  export type GetModuleLicenseByAccountAndModuleTypeProps = Omit<
    GetProps<ResponseModuleLicenseDTO, Failure | Error, GetModuleLicenseByAccountAndModuleTypeQueryParams, void>,
    'path'
  >
  /**
   * Gets Module License By Account And ModuleType
   */
  export const GetModuleLicenseByAccountAndModuleType: (
    props: GetModuleLicenseByAccountAndModuleTypeProps
  ) => JSX.Element
  export type UseGetModuleLicenseByAccountAndModuleTypeProps = Omit<
    UseGetProps<ResponseModuleLicenseDTO, Failure | Error, GetModuleLicenseByAccountAndModuleTypeQueryParams, void>,
    'path'
  >
  /**
   * Gets Module License By Account And ModuleType
   */
  export const useGetModuleLicenseByAccountAndModuleType: (
    props: UseGetModuleLicenseByAccountAndModuleTypeProps
  ) => import('restful-react').UseGetReturn<
    ResponseModuleLicenseDTO,
    Error | Failure,
    GetModuleLicenseByAccountAndModuleTypeQueryParams,
    unknown
  >
  /**
   * Gets Module License By Account And ModuleType
   */
  export const getModuleLicenseByAccountAndModuleTypePromise: (
    props: GetUsingFetchProps<
      ResponseModuleLicenseDTO,
      Failure | Error,
      GetModuleLicenseByAccountAndModuleTypeQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseModuleLicenseDTO>
  export interface GetAccountLicensesQueryParams {
    accountIdentifier?: string
  }
  export type GetAccountLicensesProps = Omit<
    GetProps<ResponseAccountLicenseDTO, Failure | Error, GetAccountLicensesQueryParams, void>,
    'path'
  >
  /**
   * Gets All Module License Information in Account
   */
  export const GetAccountLicenses: (props: GetAccountLicensesProps) => JSX.Element
  export type UseGetAccountLicensesProps = Omit<
    UseGetProps<ResponseAccountLicenseDTO, Failure | Error, GetAccountLicensesQueryParams, void>,
    'path'
  >
  /**
   * Gets All Module License Information in Account
   */
  export const useGetAccountLicenses: (
    props: UseGetAccountLicensesProps
  ) => import('restful-react').UseGetReturn<
    ResponseAccountLicenseDTO,
    Error | Failure,
    GetAccountLicensesQueryParams,
    unknown
  >
  /**
   * Gets All Module License Information in Account
   */
  export const getAccountLicensesPromise: (
    props: GetUsingFetchProps<ResponseAccountLicenseDTO, Failure | Error, GetAccountLicensesQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseAccountLicenseDTO>
  export interface ExtendTrialLicenseQueryParams {
    accountIdentifier: string
  }
  export type ExtendTrialLicenseProps = Omit<
    MutateProps<
      ResponseModuleLicenseDTO,
      Failure | Error,
      ExtendTrialLicenseQueryParams,
      StartTrialDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Extends Trail License For A Module
   */
  export const ExtendTrialLicense: (props: ExtendTrialLicenseProps) => JSX.Element
  export type UseExtendTrialLicenseProps = Omit<
    UseMutateProps<
      ResponseModuleLicenseDTO,
      Failure | Error,
      ExtendTrialLicenseQueryParams,
      StartTrialDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Extends Trail License For A Module
   */
  export const useExtendTrialLicense: (
    props: UseExtendTrialLicenseProps
  ) => import('restful-react').UseMutateReturn<
    ResponseModuleLicenseDTO,
    Error | Failure,
    StartTrialDTO,
    ExtendTrialLicenseQueryParams,
    void
  >
  /**
   * Extends Trail License For A Module
   */
  export const extendTrialLicensePromise: (
    props: MutateUsingFetchProps<
      ResponseModuleLicenseDTO,
      Failure | Error,
      ExtendTrialLicenseQueryParams,
      StartTrialDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseModuleLicenseDTO>
  export interface GetModuleLicensesByAccountAndModuleTypeQueryParams {
    moduleType: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
  }
  export interface GetModuleLicensesByAccountAndModuleTypePathParams {
    accountIdentifier: string
  }
  export type GetModuleLicensesByAccountAndModuleTypeProps = Omit<
    GetProps<
      ResponseListModuleLicenseDTO,
      Failure | Error,
      GetModuleLicensesByAccountAndModuleTypeQueryParams,
      GetModuleLicensesByAccountAndModuleTypePathParams
    >,
    'path'
  > &
    GetModuleLicensesByAccountAndModuleTypePathParams
  /**
   * Gets Module Licenses By Account And ModuleType
   */
  export const GetModuleLicensesByAccountAndModuleType: ({
    accountIdentifier,
    ...props
  }: GetModuleLicensesByAccountAndModuleTypeProps) => JSX.Element
  export type UseGetModuleLicensesByAccountAndModuleTypeProps = Omit<
    UseGetProps<
      ResponseListModuleLicenseDTO,
      Failure | Error,
      GetModuleLicensesByAccountAndModuleTypeQueryParams,
      GetModuleLicensesByAccountAndModuleTypePathParams
    >,
    'path'
  > &
    GetModuleLicensesByAccountAndModuleTypePathParams
  /**
   * Gets Module Licenses By Account And ModuleType
   */
  export const useGetModuleLicensesByAccountAndModuleType: ({
    accountIdentifier,
    ...props
  }: UseGetModuleLicensesByAccountAndModuleTypeProps) => import('restful-react').UseGetReturn<
    ResponseListModuleLicenseDTO,
    Error | Failure,
    GetModuleLicensesByAccountAndModuleTypeQueryParams,
    unknown
  >
  /**
   * Gets Module Licenses By Account And ModuleType
   */
  export const getModuleLicensesByAccountAndModuleTypePromise: (
    {
      accountIdentifier,
      ...props
    }: GetUsingFetchProps<
      ResponseListModuleLicenseDTO,
      Error | Failure,
      GetModuleLicensesByAccountAndModuleTypeQueryParams,
      GetModuleLicensesByAccountAndModuleTypePathParams
    > & {
      accountIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseListModuleLicenseDTO>
  export interface StartTrialLicenseQueryParams {
    accountIdentifier: string
  }
  export type StartTrialLicenseProps = Omit<
    MutateProps<
      ResponseModuleLicenseDTO,
      Failure | Error,
      StartTrialLicenseQueryParams,
      StartTrialDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Starts Trail License For A Module
   */
  export const StartTrialLicense: (props: StartTrialLicenseProps) => JSX.Element
  export type UseStartTrialLicenseProps = Omit<
    UseMutateProps<
      ResponseModuleLicenseDTO,
      Failure | Error,
      StartTrialLicenseQueryParams,
      StartTrialDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Starts Trail License For A Module
   */
  export const useStartTrialLicense: (
    props: UseStartTrialLicenseProps
  ) => import('restful-react').UseMutateReturn<
    ResponseModuleLicenseDTO,
    Error | Failure,
    StartTrialDTO,
    StartTrialLicenseQueryParams,
    void
  >
  /**
   * Starts Trail License For A Module
   */
  export const startTrialLicensePromise: (
    props: MutateUsingFetchProps<
      ResponseModuleLicenseDTO,
      Failure | Error,
      StartTrialLicenseQueryParams,
      StartTrialDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseModuleLicenseDTO>
  export interface GetLicensesAndSummaryQueryParams {
    moduleType: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
  }
  export interface GetLicensesAndSummaryPathParams {
    accountIdentifier: string
  }
  export type GetLicensesAndSummaryProps = Omit<
    GetProps<
      ResponseLicensesWithSummaryDTO,
      Failure | Error,
      GetLicensesAndSummaryQueryParams,
      GetLicensesAndSummaryPathParams
    >,
    'path'
  > &
    GetLicensesAndSummaryPathParams
  /**
   * Gets Module Licenses With Summary By Account And ModuleType
   */
  export const GetLicensesAndSummary: ({ accountIdentifier, ...props }: GetLicensesAndSummaryProps) => JSX.Element
  export type UseGetLicensesAndSummaryProps = Omit<
    UseGetProps<
      ResponseLicensesWithSummaryDTO,
      Failure | Error,
      GetLicensesAndSummaryQueryParams,
      GetLicensesAndSummaryPathParams
    >,
    'path'
  > &
    GetLicensesAndSummaryPathParams
  /**
   * Gets Module Licenses With Summary By Account And ModuleType
   */
  export const useGetLicensesAndSummary: ({
    accountIdentifier,
    ...props
  }: UseGetLicensesAndSummaryProps) => import('restful-react').UseGetReturn<
    ResponseLicensesWithSummaryDTO,
    Error | Failure,
    GetLicensesAndSummaryQueryParams,
    unknown
  >
  /**
   * Gets Module Licenses With Summary By Account And ModuleType
   */
  export const getLicensesAndSummaryPromise: (
    {
      accountIdentifier,
      ...props
    }: GetUsingFetchProps<
      ResponseLicensesWithSummaryDTO,
      Error | Failure,
      GetLicensesAndSummaryQueryParams,
      GetLicensesAndSummaryPathParams
    > & {
      accountIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseLicensesWithSummaryDTO>
  export interface GetModuleLicenseByIdQueryParams {
    accountIdentifier: string
  }
  export interface GetModuleLicenseByIdPathParams {
    identifier: string
  }
  export type GetModuleLicenseByIdProps = Omit<
    GetProps<
      ResponseModuleLicenseDTO,
      Failure | Error,
      GetModuleLicenseByIdQueryParams,
      GetModuleLicenseByIdPathParams
    >,
    'path'
  > &
    GetModuleLicenseByIdPathParams
  /**
   * Gets Module License
   */
  export const GetModuleLicenseById: ({ identifier, ...props }: GetModuleLicenseByIdProps) => JSX.Element
  export type UseGetModuleLicenseByIdProps = Omit<
    UseGetProps<
      ResponseModuleLicenseDTO,
      Failure | Error,
      GetModuleLicenseByIdQueryParams,
      GetModuleLicenseByIdPathParams
    >,
    'path'
  > &
    GetModuleLicenseByIdPathParams
  /**
   * Gets Module License
   */
  export const useGetModuleLicenseById: ({
    identifier,
    ...props
  }: UseGetModuleLicenseByIdProps) => import('restful-react').UseGetReturn<
    ResponseModuleLicenseDTO,
    Error | Failure,
    GetModuleLicenseByIdQueryParams,
    unknown
  >
  /**
   * Gets Module License
   */
  export const getModuleLicenseByIdPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<
      ResponseModuleLicenseDTO,
      Error | Failure,
      GetModuleLicenseByIdQueryParams,
      GetModuleLicenseByIdPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseModuleLicenseDTO>
  export interface GetOrganizationListQueryParams {
    accountIdentifier: string
    identifiers?: string[]
    searchTerm?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetOrganizationListProps = Omit<
    GetProps<ResponsePageOrganizationResponse, Failure | Error, GetOrganizationListQueryParams, void>,
    'path'
  >
  /**
   * Get Organization list
   */
  export const GetOrganizationList: (props: GetOrganizationListProps) => JSX.Element
  export type UseGetOrganizationListProps = Omit<
    UseGetProps<ResponsePageOrganizationResponse, Failure | Error, GetOrganizationListQueryParams, void>,
    'path'
  >
  /**
   * Get Organization list
   */
  export const useGetOrganizationList: (
    props: UseGetOrganizationListProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageOrganizationResponse,
    Error | Failure,
    GetOrganizationListQueryParams,
    unknown
  >
  /**
   * Get Organization list
   */
  export const getOrganizationListPromise: (
    props: GetUsingFetchProps<ResponsePageOrganizationResponse, Failure | Error, GetOrganizationListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageOrganizationResponse>
  export interface PostOrganizationQueryParams {
    accountIdentifier: string
  }
  export type PostOrganizationProps = Omit<
    MutateProps<
      ResponseOrganizationResponse,
      Failure | Error,
      PostOrganizationQueryParams,
      OrganizationRequestRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create an Organization
   */
  export const PostOrganization: (props: PostOrganizationProps) => JSX.Element
  export type UsePostOrganizationProps = Omit<
    UseMutateProps<
      ResponseOrganizationResponse,
      Failure | Error,
      PostOrganizationQueryParams,
      OrganizationRequestRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create an Organization
   */
  export const usePostOrganization: (
    props: UsePostOrganizationProps
  ) => import('restful-react').UseMutateReturn<
    ResponseOrganizationResponse,
    Error | Failure,
    OrganizationRequest,
    PostOrganizationQueryParams,
    void
  >
  /**
   * Create an Organization
   */
  export const postOrganizationPromise: (
    props: MutateUsingFetchProps<
      ResponseOrganizationResponse,
      Failure | Error,
      PostOrganizationQueryParams,
      OrganizationRequestRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseOrganizationResponse>
  export interface DeleteOrganizationQueryParams {
    accountIdentifier: string
  }
  export type DeleteOrganizationProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteOrganizationQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete an Organization by identifier
   */
  export const DeleteOrganization: (props: DeleteOrganizationProps) => JSX.Element
  export type UseDeleteOrganizationProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteOrganizationQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete an Organization by identifier
   */
  export const useDeleteOrganization: (
    props: UseDeleteOrganizationProps
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    string,
    DeleteOrganizationQueryParams,
    void
  >
  /**
   * Delete an Organization by identifier
   */
  export const deleteOrganizationPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteOrganizationQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetOrganizationQueryParams {
    accountIdentifier: string
  }
  export interface GetOrganizationPathParams {
    identifier: string
  }
  export type GetOrganizationProps = Omit<
    GetProps<ResponseOrganizationResponse, Failure | Error, GetOrganizationQueryParams, GetOrganizationPathParams>,
    'path'
  > &
    GetOrganizationPathParams
  /**
   * Get an Organization by identifier
   */
  export const GetOrganization: ({ identifier, ...props }: GetOrganizationProps) => JSX.Element
  export type UseGetOrganizationProps = Omit<
    UseGetProps<ResponseOrganizationResponse, Failure | Error, GetOrganizationQueryParams, GetOrganizationPathParams>,
    'path'
  > &
    GetOrganizationPathParams
  /**
   * Get an Organization by identifier
   */
  export const useGetOrganization: ({
    identifier,
    ...props
  }: UseGetOrganizationProps) => import('restful-react').UseGetReturn<
    ResponseOrganizationResponse,
    Error | Failure,
    GetOrganizationQueryParams,
    unknown
  >
  /**
   * Get an Organization by identifier
   */
  export const getOrganizationPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<
      ResponseOrganizationResponse,
      Error | Failure,
      GetOrganizationQueryParams,
      GetOrganizationPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseOrganizationResponse>
  export interface PutOrganizationQueryParams {
    accountIdentifier: string
  }
  export interface PutOrganizationPathParams {
    identifier: string
  }
  export type PutOrganizationProps = Omit<
    MutateProps<
      ResponseOrganizationResponse,
      Failure | Error,
      PutOrganizationQueryParams,
      OrganizationRequestRequestBody,
      PutOrganizationPathParams
    >,
    'path' | 'verb'
  > &
    PutOrganizationPathParams
  /**
   * Update an Organization by identifier
   */
  export const PutOrganization: ({ identifier, ...props }: PutOrganizationProps) => JSX.Element
  export type UsePutOrganizationProps = Omit<
    UseMutateProps<
      ResponseOrganizationResponse,
      Failure | Error,
      PutOrganizationQueryParams,
      OrganizationRequestRequestBody,
      PutOrganizationPathParams
    >,
    'path' | 'verb'
  > &
    PutOrganizationPathParams
  /**
   * Update an Organization by identifier
   */
  export const usePutOrganization: ({
    identifier,
    ...props
  }: UsePutOrganizationProps) => import('restful-react').UseMutateReturn<
    ResponseOrganizationResponse,
    Error | Failure,
    OrganizationRequest,
    PutOrganizationQueryParams,
    PutOrganizationPathParams
  >
  /**
   * Update an Organization by identifier
   */
  export const putOrganizationPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseOrganizationResponse,
      Error | Failure,
      PutOrganizationQueryParams,
      OrganizationRequest,
      PutOrganizationPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseOrganizationResponse>
  export interface GetPartialYamlSchemaQueryParams {
    projectIdentifier?: string
    orgIdentifier?: string
    scope?: 'account' | 'org' | 'project' | 'unknown'
  }
  export type GetPartialYamlSchemaProps = Omit<
    GetProps<ResponsePartialSchemaDTO, Failure | Error, GetPartialYamlSchemaQueryParams, void>,
    'path'
  >
  /**
   * Get Partial Yaml Schema
   */
  export const GetPartialYamlSchema: (props: GetPartialYamlSchemaProps) => JSX.Element
  export type UseGetPartialYamlSchemaProps = Omit<
    UseGetProps<ResponsePartialSchemaDTO, Failure | Error, GetPartialYamlSchemaQueryParams, void>,
    'path'
  >
  /**
   * Get Partial Yaml Schema
   */
  export const useGetPartialYamlSchema: (
    props: UseGetPartialYamlSchemaProps
  ) => import('restful-react').UseGetReturn<
    ResponsePartialSchemaDTO,
    Error | Failure,
    GetPartialYamlSchemaQueryParams,
    unknown
  >
  /**
   * Get Partial Yaml Schema
   */
  export const getPartialYamlSchemaPromise: (
    props: GetUsingFetchProps<ResponsePartialSchemaDTO, Failure | Error, GetPartialYamlSchemaQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePartialSchemaDTO>
  export type GetProvisionerStepsProps = Omit<GetProps<ResponseStepCategory, Failure | Error, void, void>, 'path'>
  /**
   * get provisioner steps
   */
  export const GetProvisionerSteps: (props: GetProvisionerStepsProps) => JSX.Element
  export type UseGetProvisionerStepsProps = Omit<UseGetProps<ResponseStepCategory, Failure | Error, void, void>, 'path'>
  /**
   * get provisioner steps
   */
  export const useGetProvisionerSteps: (
    props: UseGetProvisionerStepsProps
  ) => import('restful-react').UseGetReturn<ResponseStepCategory, Error | Failure, void, unknown>
  /**
   * get provisioner steps
   */
  export const getProvisionerStepsPromise: (
    props: GetUsingFetchProps<ResponseStepCategory, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseStepCategory>
  export type GetServiceDefinitionTypesProps = Omit<
    GetProps<ResponseListServiceDefinitionType, Failure | Error, void, void>,
    'path'
  >
  /**
   * Git list of service definition types
   */
  export const GetServiceDefinitionTypes: (props: GetServiceDefinitionTypesProps) => JSX.Element
  export type UseGetServiceDefinitionTypesProps = Omit<
    UseGetProps<ResponseListServiceDefinitionType, Failure | Error, void, void>,
    'path'
  >
  /**
   * Git list of service definition types
   */
  export const useGetServiceDefinitionTypes: (
    props: UseGetServiceDefinitionTypesProps
  ) => import('restful-react').UseGetReturn<ResponseListServiceDefinitionType, Error | Failure, void, unknown>
  /**
   * Git list of service definition types
   */
  export const getServiceDefinitionTypesPromise: (
    props: GetUsingFetchProps<ResponseListServiceDefinitionType, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListServiceDefinitionType>
  export interface GetStepsQueryParams {
    serviceDefinitionType: 'Kubernetes'
  }
  export type GetStepsProps = Omit<GetProps<ResponseStepCategory, Failure | Error, GetStepsQueryParams, void>, 'path'>
  /**
   * get steps for given service definition type
   */
  export const GetSteps: (props: GetStepsProps) => JSX.Element
  export type UseGetStepsProps = Omit<
    UseGetProps<ResponseStepCategory, Failure | Error, GetStepsQueryParams, void>,
    'path'
  >
  /**
   * get steps for given service definition type
   */
  export const useGetSteps: (
    props: UseGetStepsProps
  ) => import('restful-react').UseGetReturn<ResponseStepCategory, Error | Failure, GetStepsQueryParams, unknown>
  /**
   * get steps for given service definition type
   */
  export const getStepsPromise: (
    props: GetUsingFetchProps<ResponseStepCategory, Failure | Error, GetStepsQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseStepCategory>
  export type GetExecutionStrategyListProps = Omit<
    GetProps<ResponseMapServiceDefinitionTypeListExecutionStrategyType, Failure | Error, void, void>,
    'path'
  >
  /**
   * Gets Execution Strategy list
   */
  export const GetExecutionStrategyList: (props: GetExecutionStrategyListProps) => JSX.Element
  export type UseGetExecutionStrategyListProps = Omit<
    UseGetProps<ResponseMapServiceDefinitionTypeListExecutionStrategyType, Failure | Error, void, void>,
    'path'
  >
  /**
   * Gets Execution Strategy list
   */
  export const useGetExecutionStrategyList: (
    props: UseGetExecutionStrategyListProps
  ) => import('restful-react').UseGetReturn<
    ResponseMapServiceDefinitionTypeListExecutionStrategyType,
    Error | Failure,
    void,
    unknown
  >
  /**
   * Gets Execution Strategy list
   */
  export const getExecutionStrategyListPromise: (
    props: GetUsingFetchProps<ResponseMapServiceDefinitionTypeListExecutionStrategyType, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseMapServiceDefinitionTypeListExecutionStrategyType>
  export interface GetProvisionerExecutionStrategyYamlQueryParams {
    provisionerType: 'TERRAFORM' | 'CLOUD_FORMATION' | 'AZURE_ARM' | 'SHELL_SCRIPT_PROVISIONER'
  }
  export type GetProvisionerExecutionStrategyYamlProps = Omit<
    GetProps<ResponseString, Failure | Error, GetProvisionerExecutionStrategyYamlQueryParams, void>,
    'path'
  >
  /**
   * Gets Yaml for Execution Strategy based on Provisioner Type
   */
  export const GetProvisionerExecutionStrategyYaml: (props: GetProvisionerExecutionStrategyYamlProps) => JSX.Element
  export type UseGetProvisionerExecutionStrategyYamlProps = Omit<
    UseGetProps<ResponseString, Failure | Error, GetProvisionerExecutionStrategyYamlQueryParams, void>,
    'path'
  >
  /**
   * Gets Yaml for Execution Strategy based on Provisioner Type
   */
  export const useGetProvisionerExecutionStrategyYaml: (
    props: UseGetProvisionerExecutionStrategyYamlProps
  ) => import('restful-react').UseGetReturn<
    ResponseString,
    Error | Failure,
    GetProvisionerExecutionStrategyYamlQueryParams,
    unknown
  >
  /**
   * Gets Yaml for Execution Strategy based on Provisioner Type
   */
  export const getProvisionerExecutionStrategyYamlPromise: (
    props: GetUsingFetchProps<ResponseString, Failure | Error, GetProvisionerExecutionStrategyYamlQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface GetExecutionStrategyYamlQueryParams {
    serviceDefinitionType: 'Kubernetes'
    strategyType: 'Basic' | 'Canary' | 'BlueGreen' | 'Rolling' | 'Default'
    includeVerify?: boolean
  }
  export type GetExecutionStrategyYamlProps = Omit<
    GetProps<ResponseString, Failure | Error, GetExecutionStrategyYamlQueryParams, void>,
    'path'
  >
  /**
   * Gets Yaml for Execution Strategy based on deployment type and selected strategy
   */
  export const GetExecutionStrategyYaml: (props: GetExecutionStrategyYamlProps) => JSX.Element
  export type UseGetExecutionStrategyYamlProps = Omit<
    UseGetProps<ResponseString, Failure | Error, GetExecutionStrategyYamlQueryParams, void>,
    'path'
  >
  /**
   * Gets Yaml for Execution Strategy based on deployment type and selected strategy
   */
  export const useGetExecutionStrategyYaml: (
    props: UseGetExecutionStrategyYamlProps
  ) => import('restful-react').UseGetReturn<
    ResponseString,
    Error | Failure,
    GetExecutionStrategyYamlQueryParams,
    unknown
  >
  /**
   * Gets Yaml for Execution Strategy based on deployment type and selected strategy
   */
  export const getExecutionStrategyYamlPromise: (
    props: GetUsingFetchProps<ResponseString, Failure | Error, GetExecutionStrategyYamlQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface ProcessPollingResultNgQueryParams {
    accountId?: string
  }
  export interface ProcessPollingResultNgPathParams {
    perpetualTaskId: string
  }
  export type ProcessPollingResultNgProps = Omit<
    MutateProps<
      void,
      Failure | Error,
      ProcessPollingResultNgQueryParams,
      UnsubscribeBodyRequestBody,
      ProcessPollingResultNgPathParams
    >,
    'path' | 'verb'
  > &
    ProcessPollingResultNgPathParams
  export const ProcessPollingResultNg: ({ perpetualTaskId, ...props }: ProcessPollingResultNgProps) => JSX.Element
  export type UseProcessPollingResultNgProps = Omit<
    UseMutateProps<
      void,
      Failure | Error,
      ProcessPollingResultNgQueryParams,
      UnsubscribeBodyRequestBody,
      ProcessPollingResultNgPathParams
    >,
    'path' | 'verb'
  > &
    ProcessPollingResultNgPathParams
  export const useProcessPollingResultNg: ({
    perpetualTaskId,
    ...props
  }: UseProcessPollingResultNgProps) => import('restful-react').UseMutateReturn<
    void,
    Error | Failure,
    UnsubscribeBodyRequestBody,
    ProcessPollingResultNgQueryParams,
    ProcessPollingResultNgPathParams
  >
  export const processPollingResultNgPromise: (
    {
      perpetualTaskId,
      ...props
    }: MutateUsingFetchProps<
      void,
      Error | Failure,
      ProcessPollingResultNgQueryParams,
      UnsubscribeBodyRequestBody,
      ProcessPollingResultNgPathParams
    > & {
      perpetualTaskId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<void>
  export type SubscribeProps = Omit<
    MutateProps<string[], Failure | Error, void, UnsubscribeBodyRequestBody, void>,
    'path' | 'verb'
  >
  export const Subscribe: (props: SubscribeProps) => JSX.Element
  export type UseSubscribeProps = Omit<
    UseMutateProps<string[], Failure | Error, void, UnsubscribeBodyRequestBody, void>,
    'path' | 'verb'
  >
  export const useSubscribe: (
    props: UseSubscribeProps
  ) => import('restful-react').UseMutateReturn<string[], Error | Failure, UnsubscribeBodyRequestBody, void, void>
  export const subscribePromise: (
    props: MutateUsingFetchProps<string[], Failure | Error, void, UnsubscribeBodyRequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<string[]>
  export type UnsubscribeProps = Omit<
    MutateProps<boolean, Failure | Error, void, UnsubscribeBodyRequestBody, void>,
    'path' | 'verb'
  >
  export const Unsubscribe: (props: UnsubscribeProps) => JSX.Element
  export type UseUnsubscribeProps = Omit<
    UseMutateProps<boolean, Failure | Error, void, UnsubscribeBodyRequestBody, void>,
    'path' | 'verb'
  >
  export const useUnsubscribe: (
    props: UseUnsubscribeProps
  ) => import('restful-react').UseMutateReturn<boolean, Error | Failure, UnsubscribeBodyRequestBody, void, void>
  export const unsubscribePromise: (
    props: MutateUsingFetchProps<boolean, Failure | Error, void, UnsubscribeBodyRequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<boolean>
  export interface GetProjectListQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    hasModule?: boolean
    identifiers?: string[]
    moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
    searchTerm?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetProjectListProps = Omit<
    GetProps<ResponsePageProjectResponse, Failure | Error, GetProjectListQueryParams, void>,
    'path'
  >
  /**
   * Get Project list
   */
  export const GetProjectList: (props: GetProjectListProps) => JSX.Element
  export type UseGetProjectListProps = Omit<
    UseGetProps<ResponsePageProjectResponse, Failure | Error, GetProjectListQueryParams, void>,
    'path'
  >
  /**
   * Get Project list
   */
  export const useGetProjectList: (
    props: UseGetProjectListProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageProjectResponse,
    Error | Failure,
    GetProjectListQueryParams,
    unknown
  >
  /**
   * Get Project list
   */
  export const getProjectListPromise: (
    props: GetUsingFetchProps<ResponsePageProjectResponse, Failure | Error, GetProjectListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageProjectResponse>
  export interface PostProjectQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
  }
  export type PostProjectProps = Omit<
    MutateProps<ResponseProjectResponse, Failure | Error, PostProjectQueryParams, ProjectRequestRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a Project
   */
  export const PostProject: (props: PostProjectProps) => JSX.Element
  export type UsePostProjectProps = Omit<
    UseMutateProps<ResponseProjectResponse, Failure | Error, PostProjectQueryParams, ProjectRequestRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a Project
   */
  export const usePostProject: (
    props: UsePostProjectProps
  ) => import('restful-react').UseMutateReturn<
    ResponseProjectResponse,
    Error | Failure,
    ProjectRequest,
    PostProjectQueryParams,
    void
  >
  /**
   * Create a Project
   */
  export const postProjectPromise: (
    props: MutateUsingFetchProps<
      ResponseProjectResponse,
      Failure | Error,
      PostProjectQueryParams,
      ProjectRequestRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseProjectResponse>
  export interface DeleteProjectQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
  }
  export type DeleteProjectProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteProjectQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a project by identifier
   */
  export const DeleteProject: (props: DeleteProjectProps) => JSX.Element
  export type UseDeleteProjectProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteProjectQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a project by identifier
   */
  export const useDeleteProject: (
    props: UseDeleteProjectProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, Error | Failure, string, DeleteProjectQueryParams, void>
  /**
   * Delete a project by identifier
   */
  export const deleteProjectPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteProjectQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetProjectQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
  }
  export interface GetProjectPathParams {
    identifier: string
  }
  export type GetProjectProps = Omit<
    GetProps<ResponseProjectResponse, Failure | Error, GetProjectQueryParams, GetProjectPathParams>,
    'path'
  > &
    GetProjectPathParams
  /**
   * Gets a Project by identifier
   */
  export const GetProject: ({ identifier, ...props }: GetProjectProps) => JSX.Element
  export type UseGetProjectProps = Omit<
    UseGetProps<ResponseProjectResponse, Failure | Error, GetProjectQueryParams, GetProjectPathParams>,
    'path'
  > &
    GetProjectPathParams
  /**
   * Gets a Project by identifier
   */
  export const useGetProject: ({
    identifier,
    ...props
  }: UseGetProjectProps) => import('restful-react').UseGetReturn<
    ResponseProjectResponse,
    Error | Failure,
    GetProjectQueryParams,
    unknown
  >
  /**
   * Gets a Project by identifier
   */
  export const getProjectPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<ResponseProjectResponse, Error | Failure, GetProjectQueryParams, GetProjectPathParams> & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseProjectResponse>
  export interface PutProjectQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
  }
  export interface PutProjectPathParams {
    identifier: string
  }
  export type PutProjectProps = Omit<
    MutateProps<
      ResponseProjectResponse,
      Failure | Error,
      PutProjectQueryParams,
      ProjectRequestRequestBody,
      PutProjectPathParams
    >,
    'path' | 'verb'
  > &
    PutProjectPathParams
  /**
   * Update a project by identifier
   */
  export const PutProject: ({ identifier, ...props }: PutProjectProps) => JSX.Element
  export type UsePutProjectProps = Omit<
    UseMutateProps<
      ResponseProjectResponse,
      Failure | Error,
      PutProjectQueryParams,
      ProjectRequestRequestBody,
      PutProjectPathParams
    >,
    'path' | 'verb'
  > &
    PutProjectPathParams
  /**
   * Update a project by identifier
   */
  export const usePutProject: ({
    identifier,
    ...props
  }: UsePutProjectProps) => import('restful-react').UseMutateReturn<
    ResponseProjectResponse,
    Error | Failure,
    ProjectRequest,
    PutProjectQueryParams,
    PutProjectPathParams
  >
  /**
   * Update a project by identifier
   */
  export const putProjectPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseProjectResponse,
      Error | Failure,
      PutProjectQueryParams,
      ProjectRequest,
      PutProjectPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseProjectResponse>
  export interface CreateRoleAssignmentQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type CreateRoleAssignmentProps = Omit<
    MutateProps<ResponseRoleAssignmentResponse, Failure | Error, CreateRoleAssignmentQueryParams, RoleAssignment, void>,
    'path' | 'verb'
  >
  /**
   * Create Role Assignment
   */
  export const CreateRoleAssignment: (props: CreateRoleAssignmentProps) => JSX.Element
  export type UseCreateRoleAssignmentProps = Omit<
    UseMutateProps<
      ResponseRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentQueryParams,
      RoleAssignment,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Role Assignment
   */
  export const useCreateRoleAssignment: (
    props: UseCreateRoleAssignmentProps
  ) => import('restful-react').UseMutateReturn<
    ResponseRoleAssignmentResponse,
    Error | Failure,
    RoleAssignment,
    CreateRoleAssignmentQueryParams,
    void
  >
  /**
   * Create Role Assignment
   */
  export const createRoleAssignmentPromise: (
    props: MutateUsingFetchProps<
      ResponseRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentQueryParams,
      RoleAssignment,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseRoleAssignmentResponse>
  export interface GetFilteredRoleAssignmentListQueryParams {
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type GetFilteredRoleAssignmentListProps = Omit<
    MutateProps<
      ResponsePageRoleAssignmentResponse,
      Failure | Error,
      GetFilteredRoleAssignmentListQueryParams,
      RoleAssignmentFilter,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Get Filtered Role Assignments
   */
  export const GetFilteredRoleAssignmentList: (props: GetFilteredRoleAssignmentListProps) => JSX.Element
  export type UseGetFilteredRoleAssignmentListProps = Omit<
    UseMutateProps<
      ResponsePageRoleAssignmentResponse,
      Failure | Error,
      GetFilteredRoleAssignmentListQueryParams,
      RoleAssignmentFilter,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Get Filtered Role Assignments
   */
  export const useGetFilteredRoleAssignmentList: (
    props: UseGetFilteredRoleAssignmentListProps
  ) => import('restful-react').UseMutateReturn<
    ResponsePageRoleAssignmentResponse,
    Error | Failure,
    RoleAssignmentFilter,
    GetFilteredRoleAssignmentListQueryParams,
    void
  >
  /**
   * Get Filtered Role Assignments
   */
  export const getFilteredRoleAssignmentListPromise: (
    props: MutateUsingFetchProps<
      ResponsePageRoleAssignmentResponse,
      Failure | Error,
      GetFilteredRoleAssignmentListQueryParams,
      RoleAssignmentFilter,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageRoleAssignmentResponse>
  export interface CreateRoleAssignmentsQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    managed?: boolean
  }
  export type CreateRoleAssignmentsProps = Omit<
    MutateProps<
      ResponseListRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentsQueryParams,
      BatchRoleAssignmentCreateRequest,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Multiple Role Assignments
   */
  export const CreateRoleAssignments: (props: CreateRoleAssignmentsProps) => JSX.Element
  export type UseCreateRoleAssignmentsProps = Omit<
    UseMutateProps<
      ResponseListRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentsQueryParams,
      BatchRoleAssignmentCreateRequest,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Multiple Role Assignments
   */
  export const useCreateRoleAssignments: (
    props: UseCreateRoleAssignmentsProps
  ) => import('restful-react').UseMutateReturn<
    ResponseListRoleAssignmentResponse,
    Error | Failure,
    BatchRoleAssignmentCreateRequest,
    CreateRoleAssignmentsQueryParams,
    void
  >
  /**
   * Create Multiple Role Assignments
   */
  export const createRoleAssignmentsPromise: (
    props: MutateUsingFetchProps<
      ResponseListRoleAssignmentResponse,
      Failure | Error,
      CreateRoleAssignmentsQueryParams,
      BatchRoleAssignmentCreateRequest,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListRoleAssignmentResponse>
  export type CreatePRProps = Omit<
    MutateProps<ResponseCreatePRDTO, Failure | Error, void, GitPRCreateRequest, void>,
    'path' | 'verb'
  >
  /**
   * creates a pull request
   */
  export const CreatePR: (props: CreatePRProps) => JSX.Element
  export type UseCreatePRProps = Omit<
    UseMutateProps<ResponseCreatePRDTO, Failure | Error, void, GitPRCreateRequest, void>,
    'path' | 'verb'
  >
  /**
   * creates a pull request
   */
  export const useCreatePR: (
    props: UseCreatePRProps
  ) => import('restful-react').UseMutateReturn<ResponseCreatePRDTO, Error | Failure, GitPRCreateRequest, void, void>
  /**
   * creates a pull request
   */
  export const createPRPromise: (
    props: MutateUsingFetchProps<ResponseCreatePRDTO, Failure | Error, void, GitPRCreateRequest, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseCreatePRDTO>
  export interface GetFileContentQueryParams {
    yamlGitConfigIdentifier: string
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    filePath: string
    branch?: string
    commitId?: string
  }
  export type GetFileContentProps = Omit<
    GetProps<ResponseGitFileContent, Failure | Error, GetFileContentQueryParams, void>,
    'path'
  >
  /**
   * Gets file content
   */
  export const GetFileContent: (props: GetFileContentProps) => JSX.Element
  export type UseGetFileContentProps = Omit<
    UseGetProps<ResponseGitFileContent, Failure | Error, GetFileContentQueryParams, void>,
    'path'
  >
  /**
   * Gets file content
   */
  export const useGetFileContent: (
    props: UseGetFileContentProps
  ) => import('restful-react').UseGetReturn<ResponseGitFileContent, Error | Failure, GetFileContentQueryParams, unknown>
  /**
   * Gets file content
   */
  export const getFileContentPromise: (
    props: GetUsingFetchProps<ResponseGitFileContent, Failure | Error, GetFileContentQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseGitFileContent>
  export interface IsSaasGitQueryParams {
    repoURL?: string
  }
  export type IsSaasGitProps = Omit<
    MutateProps<ResponseSaasGitDTO, Failure | Error, IsSaasGitQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Checks if Saas is possible
   */
  export const IsSaasGit: (props: IsSaasGitProps) => JSX.Element
  export type UseIsSaasGitProps = Omit<
    UseMutateProps<ResponseSaasGitDTO, Failure | Error, IsSaasGitQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Checks if Saas is possible
   */
  export const useIsSaasGit: (
    props: UseIsSaasGitProps
  ) => import('restful-react').UseMutateReturn<ResponseSaasGitDTO, Error | Failure, void, IsSaasGitQueryParams, void>
  /**
   * Checks if Saas is possible
   */
  export const isSaasGitPromise: (
    props: MutateUsingFetchProps<ResponseSaasGitDTO, Failure | Error, IsSaasGitQueryParams, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseSaasGitDTO>
  export interface GetListOfBranchesByGitConfigQueryParams {
    yamlGitConfigIdentifier?: string
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    page?: number
    size?: number
    searchTerm?: string
  }
  export type GetListOfBranchesByGitConfigProps = Omit<
    GetProps<ResponseListString, Failure | Error, GetListOfBranchesByGitConfigQueryParams, void>,
    'path'
  >
  /**
   * Gets list of branches by Git Config Identifier
   */
  export const GetListOfBranchesByGitConfig: (props: GetListOfBranchesByGitConfigProps) => JSX.Element
  export type UseGetListOfBranchesByGitConfigProps = Omit<
    UseGetProps<ResponseListString, Failure | Error, GetListOfBranchesByGitConfigQueryParams, void>,
    'path'
  >
  /**
   * Gets list of branches by Git Config Identifier
   */
  export const useGetListOfBranchesByGitConfig: (
    props: UseGetListOfBranchesByGitConfigProps
  ) => import('restful-react').UseGetReturn<
    ResponseListString,
    Error | Failure,
    GetListOfBranchesByGitConfigQueryParams,
    unknown
  >
  /**
   * Gets list of branches by Git Config Identifier
   */
  export const getListOfBranchesByGitConfigPromise: (
    props: GetUsingFetchProps<ResponseListString, Failure | Error, GetListOfBranchesByGitConfigQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListString>
  export interface GetListOfBranchesByConnectorQueryParams {
    connectorIdentifierRef?: string
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    repoURL?: string
    page?: number
    size?: number
    searchTerm?: string
  }
  export type GetListOfBranchesByConnectorProps = Omit<
    GetProps<ResponseListString, Failure | Error, GetListOfBranchesByConnectorQueryParams, void>,
    'path'
  >
  /**
   * Gets list of branches by Connector Identifier
   */
  export const GetListOfBranchesByConnector: (props: GetListOfBranchesByConnectorProps) => JSX.Element
  export type UseGetListOfBranchesByConnectorProps = Omit<
    UseGetProps<ResponseListString, Failure | Error, GetListOfBranchesByConnectorQueryParams, void>,
    'path'
  >
  /**
   * Gets list of branches by Connector Identifier
   */
  export const useGetListOfBranchesByConnector: (
    props: UseGetListOfBranchesByConnectorProps
  ) => import('restful-react').UseGetReturn<
    ResponseListString,
    Error | Failure,
    GetListOfBranchesByConnectorQueryParams,
    unknown
  >
  /**
   * Gets list of branches by Connector Identifier
   */
  export const getListOfBranchesByConnectorPromise: (
    props: GetUsingFetchProps<ResponseListString, Failure | Error, GetListOfBranchesByConnectorQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListString>
  export interface GetMetadataQueryParams {
    accountIdentifier: string
  }
  export type GetMetadataProps = Omit<
    MutateProps<
      ResponseSecretManagerMetadataDTO,
      Failure | Error,
      GetMetadataQueryParams,
      SecretManagerMetadataRequestDTO,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Get metadata of secret manager
   */
  export const GetMetadata: (props: GetMetadataProps) => JSX.Element
  export type UseGetMetadataProps = Omit<
    UseMutateProps<
      ResponseSecretManagerMetadataDTO,
      Failure | Error,
      GetMetadataQueryParams,
      SecretManagerMetadataRequestDTO,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Get metadata of secret manager
   */
  export const useGetMetadata: (
    props: UseGetMetadataProps
  ) => import('restful-react').UseMutateReturn<
    ResponseSecretManagerMetadataDTO,
    Error | Failure,
    SecretManagerMetadataRequestDTO,
    GetMetadataQueryParams,
    void
  >
  /**
   * Get metadata of secret manager
   */
  export const getMetadataPromise: (
    props: MutateUsingFetchProps<
      ResponseSecretManagerMetadataDTO,
      Failure | Error,
      GetMetadataQueryParams,
      SecretManagerMetadataRequestDTO,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseSecretManagerMetadataDTO>
  export interface ListServiceAccountQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    identifiers?: string[]
  }
  export type ListServiceAccountProps = Omit<
    GetProps<ResponseListServiceAccountDTO, Failure | Error, ListServiceAccountQueryParams, void>,
    'path'
  >
  /**
   * List service account
   */
  export const ListServiceAccount: (props: ListServiceAccountProps) => JSX.Element
  export type UseListServiceAccountProps = Omit<
    UseGetProps<ResponseListServiceAccountDTO, Failure | Error, ListServiceAccountQueryParams, void>,
    'path'
  >
  /**
   * List service account
   */
  export const useListServiceAccount: (
    props: UseListServiceAccountProps
  ) => import('restful-react').UseGetReturn<
    ResponseListServiceAccountDTO,
    Error | Failure,
    ListServiceAccountQueryParams,
    unknown
  >
  /**
   * List service account
   */
  export const listServiceAccountPromise: (
    props: GetUsingFetchProps<ResponseListServiceAccountDTO, Failure | Error, ListServiceAccountQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListServiceAccountDTO>
  export interface CreateServiceAccountQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type CreateServiceAccountProps = Omit<
    MutateProps<
      ResponseServiceAccountDTO,
      Failure | Error,
      CreateServiceAccountQueryParams,
      ServiceAccountDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create service account
   */
  export const CreateServiceAccount: (props: CreateServiceAccountProps) => JSX.Element
  export type UseCreateServiceAccountProps = Omit<
    UseMutateProps<
      ResponseServiceAccountDTO,
      Failure | Error,
      CreateServiceAccountQueryParams,
      ServiceAccountDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create service account
   */
  export const useCreateServiceAccount: (
    props: UseCreateServiceAccountProps
  ) => import('restful-react').UseMutateReturn<
    ResponseServiceAccountDTO,
    Error | Failure,
    ServiceAccountDTO,
    CreateServiceAccountQueryParams,
    void
  >
  /**
   * Create service account
   */
  export const createServiceAccountPromise: (
    props: MutateUsingFetchProps<
      ResponseServiceAccountDTO,
      Failure | Error,
      CreateServiceAccountQueryParams,
      ServiceAccountDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceAccountDTO>
  export interface ListAggregatedServiceAccountsQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    identifiers?: string[]
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
    searchTerm?: string
  }
  export type ListAggregatedServiceAccountsProps = Omit<
    GetProps<ResponsePageServiceAccountAggregateDTO, Failure | Error, ListAggregatedServiceAccountsQueryParams, void>,
    'path'
  >
  /**
   * List service account
   */
  export const ListAggregatedServiceAccounts: (props: ListAggregatedServiceAccountsProps) => JSX.Element
  export type UseListAggregatedServiceAccountsProps = Omit<
    UseGetProps<
      ResponsePageServiceAccountAggregateDTO,
      Failure | Error,
      ListAggregatedServiceAccountsQueryParams,
      void
    >,
    'path'
  >
  /**
   * List service account
   */
  export const useListAggregatedServiceAccounts: (
    props: UseListAggregatedServiceAccountsProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageServiceAccountAggregateDTO,
    Error | Failure,
    ListAggregatedServiceAccountsQueryParams,
    unknown
  >
  /**
   * List service account
   */
  export const listAggregatedServiceAccountsPromise: (
    props: GetUsingFetchProps<
      ResponsePageServiceAccountAggregateDTO,
      Failure | Error,
      ListAggregatedServiceAccountsQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageServiceAccountAggregateDTO>
  export interface GetAggregatedServiceAccountQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface GetAggregatedServiceAccountPathParams {
    identifier: string
  }
  export type GetAggregatedServiceAccountProps = Omit<
    GetProps<
      ResponseServiceAccountAggregateDTO,
      Failure | Error,
      GetAggregatedServiceAccountQueryParams,
      GetAggregatedServiceAccountPathParams
    >,
    'path'
  > &
    GetAggregatedServiceAccountPathParams
  /**
   * Get service account
   */
  export const GetAggregatedServiceAccount: ({ identifier, ...props }: GetAggregatedServiceAccountProps) => JSX.Element
  export type UseGetAggregatedServiceAccountProps = Omit<
    UseGetProps<
      ResponseServiceAccountAggregateDTO,
      Failure | Error,
      GetAggregatedServiceAccountQueryParams,
      GetAggregatedServiceAccountPathParams
    >,
    'path'
  > &
    GetAggregatedServiceAccountPathParams
  /**
   * Get service account
   */
  export const useGetAggregatedServiceAccount: ({
    identifier,
    ...props
  }: UseGetAggregatedServiceAccountProps) => import('restful-react').UseGetReturn<
    ResponseServiceAccountAggregateDTO,
    Error | Failure,
    GetAggregatedServiceAccountQueryParams,
    unknown
  >
  /**
   * Get service account
   */
  export const getAggregatedServiceAccountPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<
      ResponseServiceAccountAggregateDTO,
      Error | Failure,
      GetAggregatedServiceAccountQueryParams,
      GetAggregatedServiceAccountPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceAccountAggregateDTO>
  export interface DeleteServiceAccountQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type DeleteServiceAccountProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteServiceAccountQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete service account
   */
  export const DeleteServiceAccount: (props: DeleteServiceAccountProps) => JSX.Element
  export type UseDeleteServiceAccountProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteServiceAccountQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete service account
   */
  export const useDeleteServiceAccount: (
    props: UseDeleteServiceAccountProps
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    string,
    DeleteServiceAccountQueryParams,
    void
  >
  /**
   * Delete service account
   */
  export const deleteServiceAccountPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteServiceAccountQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface UpdateServiceAccountQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface UpdateServiceAccountPathParams {
    identifier: string
  }
  export type UpdateServiceAccountProps = Omit<
    MutateProps<
      ResponseServiceAccountDTO,
      Failure | Error,
      UpdateServiceAccountQueryParams,
      ServiceAccountDTORequestBody,
      UpdateServiceAccountPathParams
    >,
    'path' | 'verb'
  > &
    UpdateServiceAccountPathParams
  /**
   * Update service account
   */
  export const UpdateServiceAccount: ({ identifier, ...props }: UpdateServiceAccountProps) => JSX.Element
  export type UseUpdateServiceAccountProps = Omit<
    UseMutateProps<
      ResponseServiceAccountDTO,
      Failure | Error,
      UpdateServiceAccountQueryParams,
      ServiceAccountDTORequestBody,
      UpdateServiceAccountPathParams
    >,
    'path' | 'verb'
  > &
    UpdateServiceAccountPathParams
  /**
   * Update service account
   */
  export const useUpdateServiceAccount: ({
    identifier,
    ...props
  }: UseUpdateServiceAccountProps) => import('restful-react').UseMutateReturn<
    ResponseServiceAccountDTO,
    Error | Failure,
    ServiceAccountDTO,
    UpdateServiceAccountQueryParams,
    UpdateServiceAccountPathParams
  >
  /**
   * Update service account
   */
  export const updateServiceAccountPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseServiceAccountDTO,
      Error | Failure,
      UpdateServiceAccountQueryParams,
      ServiceAccountDTO,
      UpdateServiceAccountPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceAccountDTO>
  export interface GetServiceListForProjectQueryParams {
    page?: number
    size?: number
    accountId?: string
    orgIdentifier?: string
    projectIdentifier?: string
    serviceIdentifiers?: string[]
    sort?: string[]
  }
  export type GetServiceListForProjectProps = Omit<
    GetProps<ResponsePageServiceResponseDTO, Failure | Error, GetServiceListForProjectQueryParams, void>,
    'path'
  >
  /**
   * Gets Service list for a project
   */
  export const GetServiceListForProject: (props: GetServiceListForProjectProps) => JSX.Element
  export type UseGetServiceListForProjectProps = Omit<
    UseGetProps<ResponsePageServiceResponseDTO, Failure | Error, GetServiceListForProjectQueryParams, void>,
    'path'
  >
  /**
   * Gets Service list for a project
   */
  export const useGetServiceListForProject: (
    props: UseGetServiceListForProjectProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageServiceResponseDTO,
    Error | Failure,
    GetServiceListForProjectQueryParams,
    unknown
  >
  /**
   * Gets Service list for a project
   */
  export const getServiceListForProjectPromise: (
    props: GetUsingFetchProps<
      ResponsePageServiceResponseDTO,
      Failure | Error,
      GetServiceListForProjectQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageServiceResponseDTO>
  export interface CreateServiceQueryParams {
    accountId?: string
  }
  export type CreateServiceProps = Omit<
    MutateProps<
      ResponseServiceResponseDTO,
      Failure | Error,
      CreateServiceQueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create a Service
   */
  export const CreateService: (props: CreateServiceProps) => JSX.Element
  export type UseCreateServiceProps = Omit<
    UseMutateProps<
      ResponseServiceResponseDTO,
      Failure | Error,
      CreateServiceQueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create a Service
   */
  export const useCreateService: (
    props: UseCreateServiceProps
  ) => import('restful-react').UseMutateReturn<
    ResponseServiceResponseDTO,
    Error | Failure,
    ServiceRequestDTO,
    CreateServiceQueryParams,
    void
  >
  /**
   * Create a Service
   */
  export const createServicePromise: (
    props: MutateUsingFetchProps<
      ResponseServiceResponseDTO,
      Failure | Error,
      CreateServiceQueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceResponseDTO>
  export interface UpdateServiceQueryParams {
    accountId?: string
  }
  export type UpdateServiceProps = Omit<
    MutateProps<
      ResponseServiceResponseDTO,
      Failure | Error,
      UpdateServiceQueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Update a service by identifier
   */
  export const UpdateService: (props: UpdateServiceProps) => JSX.Element
  export type UseUpdateServiceProps = Omit<
    UseMutateProps<
      ResponseServiceResponseDTO,
      Failure | Error,
      UpdateServiceQueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Update a service by identifier
   */
  export const useUpdateService: (
    props: UseUpdateServiceProps
  ) => import('restful-react').UseMutateReturn<
    ResponseServiceResponseDTO,
    Error | Failure,
    ServiceRequestDTO,
    UpdateServiceQueryParams,
    void
  >
  /**
   * Update a service by identifier
   */
  export const updateServicePromise: (
    props: MutateUsingFetchProps<
      ResponseServiceResponseDTO,
      Failure | Error,
      UpdateServiceQueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceResponseDTO>
  export interface CreateServicesQueryParams {
    accountId?: string
  }
  export type CreateServicesProps = Omit<
    MutateProps<
      ResponsePageServiceResponseDTO,
      Failure | Error,
      CreateServicesQueryParams,
      ServiceRequestDTOArrayRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Services
   */
  export const CreateServices: (props: CreateServicesProps) => JSX.Element
  export type UseCreateServicesProps = Omit<
    UseMutateProps<
      ResponsePageServiceResponseDTO,
      Failure | Error,
      CreateServicesQueryParams,
      ServiceRequestDTOArrayRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Services
   */
  export const useCreateServices: (
    props: UseCreateServicesProps
  ) => import('restful-react').UseMutateReturn<
    ResponsePageServiceResponseDTO,
    Error | Failure,
    ServiceRequestDTOArrayRequestBody,
    CreateServicesQueryParams,
    void
  >
  /**
   * Create Services
   */
  export const createServicesPromise: (
    props: MutateUsingFetchProps<
      ResponsePageServiceResponseDTO,
      Failure | Error,
      CreateServicesQueryParams,
      ServiceRequestDTOArrayRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageServiceResponseDTO>
  export interface UpsertServiceQueryParams {
    accountId?: string
  }
  export type UpsertServiceProps = Omit<
    MutateProps<
      ResponseServiceResponseDTO,
      Failure | Error,
      UpsertServiceQueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Upsert a service by identifier
   */
  export const UpsertService: (props: UpsertServiceProps) => JSX.Element
  export type UseUpsertServiceProps = Omit<
    UseMutateProps<
      ResponseServiceResponseDTO,
      Failure | Error,
      UpsertServiceQueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Upsert a service by identifier
   */
  export const useUpsertService: (
    props: UseUpsertServiceProps
  ) => import('restful-react').UseMutateReturn<
    ResponseServiceResponseDTO,
    Error | Failure,
    ServiceRequestDTO,
    UpsertServiceQueryParams,
    void
  >
  /**
   * Upsert a service by identifier
   */
  export const upsertServicePromise: (
    props: MutateUsingFetchProps<
      ResponseServiceResponseDTO,
      Failure | Error,
      UpsertServiceQueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceResponseDTO>
  export interface DeleteServiceQueryParams {
    accountId?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type DeleteServiceProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteServiceQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a service by identifier
   */
  export const DeleteService: (props: DeleteServiceProps) => JSX.Element
  export type UseDeleteServiceProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteServiceQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a service by identifier
   */
  export const useDeleteService: (
    props: UseDeleteServiceProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, Error | Failure, string, DeleteServiceQueryParams, void>
  /**
   * Delete a service by identifier
   */
  export const deleteServicePromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteServiceQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetServiceQueryParams {
    accountId?: string
    orgIdentifier?: string
    projectIdentifier?: string
    deleted?: boolean
  }
  export interface GetServicePathParams {
    serviceIdentifier: string
  }
  export type GetServiceProps = Omit<
    GetProps<ResponseServiceResponseDTO, Failure | Error, GetServiceQueryParams, GetServicePathParams>,
    'path'
  > &
    GetServicePathParams
  /**
   * Gets a Service by identifier
   */
  export const GetService: ({ serviceIdentifier, ...props }: GetServiceProps) => JSX.Element
  export type UseGetServiceProps = Omit<
    UseGetProps<ResponseServiceResponseDTO, Failure | Error, GetServiceQueryParams, GetServicePathParams>,
    'path'
  > &
    GetServicePathParams
  /**
   * Gets a Service by identifier
   */
  export const useGetService: ({
    serviceIdentifier,
    ...props
  }: UseGetServiceProps) => import('restful-react').UseGetReturn<
    ResponseServiceResponseDTO,
    Error | Failure,
    GetServiceQueryParams,
    unknown
  >
  /**
   * Gets a Service by identifier
   */
  export const getServicePromise: (
    {
      serviceIdentifier,
      ...props
    }: GetUsingFetchProps<ResponseServiceResponseDTO, Error | Failure, GetServiceQueryParams, GetServicePathParams> & {
      serviceIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceResponseDTO>
  export interface GetServiceListQueryParams {
    page?: number
    size?: number
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    searchTerm?: string
    serviceIdentifiers?: string[]
    sort?: string[]
  }
  export type GetServiceListProps = Omit<
    GetProps<ResponsePageServiceResponse, Failure | Error, GetServiceListQueryParams, void>,
    'path'
  >
  /**
   * Gets Service list
   */
  export const GetServiceList: (props: GetServiceListProps) => JSX.Element
  export type UseGetServiceListProps = Omit<
    UseGetProps<ResponsePageServiceResponse, Failure | Error, GetServiceListQueryParams, void>,
    'path'
  >
  /**
   * Gets Service list
   */
  export const useGetServiceList: (
    props: UseGetServiceListProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageServiceResponse,
    Error | Failure,
    GetServiceListQueryParams,
    unknown
  >
  /**
   * Gets Service list
   */
  export const getServiceListPromise: (
    props: GetUsingFetchProps<ResponsePageServiceResponse, Failure | Error, GetServiceListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageServiceResponse>
  export interface CreateServiceV2QueryParams {
    accountIdentifier?: string
  }
  export type CreateServiceV2Props = Omit<
    MutateProps<
      ResponseServiceResponse,
      Failure | Error,
      CreateServiceV2QueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create a Service
   */
  export const CreateServiceV2: (props: CreateServiceV2Props) => JSX.Element
  export type UseCreateServiceV2Props = Omit<
    UseMutateProps<
      ResponseServiceResponse,
      Failure | Error,
      CreateServiceV2QueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create a Service
   */
  export const useCreateServiceV2: (
    props: UseCreateServiceV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponseServiceResponse,
    Error | Failure,
    ServiceRequestDTO,
    CreateServiceV2QueryParams,
    void
  >
  /**
   * Create a Service
   */
  export const createServiceV2Promise: (
    props: MutateUsingFetchProps<
      ResponseServiceResponse,
      Failure | Error,
      CreateServiceV2QueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceResponse>
  export interface UpdateServiceV2QueryParams {
    accountIdentifier?: string
  }
  export type UpdateServiceV2Props = Omit<
    MutateProps<
      ResponseServiceResponse,
      Failure | Error,
      UpdateServiceV2QueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Update a service by identifier
   */
  export const UpdateServiceV2: (props: UpdateServiceV2Props) => JSX.Element
  export type UseUpdateServiceV2Props = Omit<
    UseMutateProps<
      ResponseServiceResponse,
      Failure | Error,
      UpdateServiceV2QueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Update a service by identifier
   */
  export const useUpdateServiceV2: (
    props: UseUpdateServiceV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponseServiceResponse,
    Error | Failure,
    ServiceRequestDTO,
    UpdateServiceV2QueryParams,
    void
  >
  /**
   * Update a service by identifier
   */
  export const updateServiceV2Promise: (
    props: MutateUsingFetchProps<
      ResponseServiceResponse,
      Failure | Error,
      UpdateServiceV2QueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceResponse>
  export interface CreateServicesV2QueryParams {
    accountIdentifier?: string
  }
  export type CreateServicesV2Props = Omit<
    MutateProps<
      ResponsePageServiceResponse,
      Failure | Error,
      CreateServicesV2QueryParams,
      ServiceRequestDTOArrayRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Services
   */
  export const CreateServicesV2: (props: CreateServicesV2Props) => JSX.Element
  export type UseCreateServicesV2Props = Omit<
    UseMutateProps<
      ResponsePageServiceResponse,
      Failure | Error,
      CreateServicesV2QueryParams,
      ServiceRequestDTOArrayRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Services
   */
  export const useCreateServicesV2: (
    props: UseCreateServicesV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponsePageServiceResponse,
    Error | Failure,
    ServiceRequestDTOArrayRequestBody,
    CreateServicesV2QueryParams,
    void
  >
  /**
   * Create Services
   */
  export const createServicesV2Promise: (
    props: MutateUsingFetchProps<
      ResponsePageServiceResponse,
      Failure | Error,
      CreateServicesV2QueryParams,
      ServiceRequestDTOArrayRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageServiceResponse>
  export interface GetServiceAccessListQueryParams {
    page?: number
    size?: number
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    searchTerm?: string
    serviceIdentifiers?: string[]
    sort?: string[]
  }
  export type GetServiceAccessListProps = Omit<
    GetProps<ResponseListServiceResponse, Failure | Error, GetServiceAccessListQueryParams, void>,
    'path'
  >
  /**
   * Gets Service Access list
   */
  export const GetServiceAccessList: (props: GetServiceAccessListProps) => JSX.Element
  export type UseGetServiceAccessListProps = Omit<
    UseGetProps<ResponseListServiceResponse, Failure | Error, GetServiceAccessListQueryParams, void>,
    'path'
  >
  /**
   * Gets Service Access list
   */
  export const useGetServiceAccessList: (
    props: UseGetServiceAccessListProps
  ) => import('restful-react').UseGetReturn<
    ResponseListServiceResponse,
    Error | Failure,
    GetServiceAccessListQueryParams,
    unknown
  >
  /**
   * Gets Service Access list
   */
  export const getServiceAccessListPromise: (
    props: GetUsingFetchProps<ResponseListServiceResponse, Failure | Error, GetServiceAccessListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListServiceResponse>
  export interface UpsertServiceV2QueryParams {
    accountIdentifier?: string
  }
  export type UpsertServiceV2Props = Omit<
    MutateProps<
      ResponseServiceResponse,
      Failure | Error,
      UpsertServiceV2QueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Upsert a service by identifier
   */
  export const UpsertServiceV2: (props: UpsertServiceV2Props) => JSX.Element
  export type UseUpsertServiceV2Props = Omit<
    UseMutateProps<
      ResponseServiceResponse,
      Failure | Error,
      UpsertServiceV2QueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Upsert a service by identifier
   */
  export const useUpsertServiceV2: (
    props: UseUpsertServiceV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponseServiceResponse,
    Error | Failure,
    ServiceRequestDTO,
    UpsertServiceV2QueryParams,
    void
  >
  /**
   * Upsert a service by identifier
   */
  export const upsertServiceV2Promise: (
    props: MutateUsingFetchProps<
      ResponseServiceResponse,
      Failure | Error,
      UpsertServiceV2QueryParams,
      ServiceRequestDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceResponse>
  export interface DeleteServiceV2QueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type DeleteServiceV2Props = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteServiceV2QueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a service by identifier
   */
  export const DeleteServiceV2: (props: DeleteServiceV2Props) => JSX.Element
  export type UseDeleteServiceV2Props = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteServiceV2QueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a service by identifier
   */
  export const useDeleteServiceV2: (
    props: UseDeleteServiceV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    string,
    DeleteServiceV2QueryParams,
    void
  >
  /**
   * Delete a service by identifier
   */
  export const deleteServiceV2Promise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteServiceV2QueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetServiceV2QueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    deleted?: boolean
  }
  export interface GetServiceV2PathParams {
    serviceIdentifier: string
  }
  export type GetServiceV2Props = Omit<
    GetProps<ResponseServiceResponse, Failure | Error, GetServiceV2QueryParams, GetServiceV2PathParams>,
    'path'
  > &
    GetServiceV2PathParams
  /**
   * Gets a Service by identifier
   */
  export const GetServiceV2: ({ serviceIdentifier, ...props }: GetServiceV2Props) => JSX.Element
  export type UseGetServiceV2Props = Omit<
    UseGetProps<ResponseServiceResponse, Failure | Error, GetServiceV2QueryParams, GetServiceV2PathParams>,
    'path'
  > &
    GetServiceV2PathParams
  /**
   * Gets a Service by identifier
   */
  export const useGetServiceV2: ({
    serviceIdentifier,
    ...props
  }: UseGetServiceV2Props) => import('restful-react').UseGetReturn<
    ResponseServiceResponse,
    Error | Failure,
    GetServiceV2QueryParams,
    unknown
  >
  /**
   * Gets a Service by identifier
   */
  export const getServiceV2Promise: (
    {
      serviceIdentifier,
      ...props
    }: GetUsingFetchProps<ResponseServiceResponse, Error | Failure, GetServiceV2QueryParams, GetServiceV2PathParams> & {
      serviceIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseServiceResponse>
  export interface SignupQueryParams {
    captchaToken?: string
  }
  export type SignupProps = Omit<
    MutateProps<RestResponseVoid, Failure | Error, SignupQueryParams, SignupDTO, void>,
    'path' | 'verb'
  >
  export const Signup: (props: SignupProps) => JSX.Element
  export type UseSignupProps = Omit<
    UseMutateProps<RestResponseVoid, Failure | Error, SignupQueryParams, SignupDTO, void>,
    'path' | 'verb'
  >
  export const useSignup: (
    props: UseSignupProps
  ) => import('restful-react').UseMutateReturn<RestResponseVoid, Error | Failure, SignupDTO, SignupQueryParams, void>
  export const signupPromise: (
    props: MutateUsingFetchProps<RestResponseVoid, Failure | Error, SignupQueryParams, SignupDTO, void>,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseVoid>
  export interface CompleteSignupInvitePathParams {
    token: string
  }
  export type CompleteSignupInviteProps = Omit<
    MutateProps<RestResponseUserInfo, Failure | Error, void, void, CompleteSignupInvitePathParams>,
    'path' | 'verb'
  > &
    CompleteSignupInvitePathParams
  export const CompleteSignupInvite: ({ token, ...props }: CompleteSignupInviteProps) => JSX.Element
  export type UseCompleteSignupInviteProps = Omit<
    UseMutateProps<RestResponseUserInfo, Failure | Error, void, void, CompleteSignupInvitePathParams>,
    'path' | 'verb'
  > &
    CompleteSignupInvitePathParams
  export const useCompleteSignupInvite: ({
    token,
    ...props
  }: UseCompleteSignupInviteProps) => import('restful-react').UseMutateReturn<
    RestResponseUserInfo,
    Error | Failure,
    void,
    void,
    CompleteSignupInvitePathParams
  >
  export const completeSignupInvitePromise: (
    {
      token,
      ...props
    }: MutateUsingFetchProps<RestResponseUserInfo, Error | Failure, void, void, CompleteSignupInvitePathParams> & {
      token: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseUserInfo>
  export type SignupOAuthProps = Omit<
    MutateProps<RestResponseUserInfo, Failure | Error, void, OAuthSignupDTO, void>,
    'path' | 'verb'
  >
  export const SignupOAuth: (props: SignupOAuthProps) => JSX.Element
  export type UseSignupOAuthProps = Omit<
    UseMutateProps<RestResponseUserInfo, Failure | Error, void, OAuthSignupDTO, void>,
    'path' | 'verb'
  >
  export const useSignupOAuth: (
    props: UseSignupOAuthProps
  ) => import('restful-react').UseMutateReturn<RestResponseUserInfo, Error | Failure, OAuthSignupDTO, void, void>
  export const signupOAuthPromise: (
    props: MutateUsingFetchProps<RestResponseUserInfo, Failure | Error, void, OAuthSignupDTO, void>,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseUserInfo>
  export interface ResendVerifyEmailQueryParams {
    email: string
  }
  export type ResendVerifyEmailProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, ResendVerifyEmailQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Resend user verification email
   */
  export const ResendVerifyEmail: (props: ResendVerifyEmailProps) => JSX.Element
  export type UseResendVerifyEmailProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, ResendVerifyEmailQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Resend user verification email
   */
  export const useResendVerifyEmail: (
    props: UseResendVerifyEmailProps
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    void,
    ResendVerifyEmailQueryParams,
    void
  >
  /**
   * Resend user verification email
   */
  export const resendVerifyEmailPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, ResendVerifyEmailQueryParams, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface VerifyTokenPathParams {
    token: string
  }
  export type VerifyTokenProps = Omit<
    MutateProps<RestResponseVerifyTokenResponseDTO, Failure | Error, void, void, VerifyTokenPathParams>,
    'path' | 'verb'
  > &
    VerifyTokenPathParams
  export const VerifyToken: ({ token, ...props }: VerifyTokenProps) => JSX.Element
  export type UseVerifyTokenProps = Omit<
    UseMutateProps<RestResponseVerifyTokenResponseDTO, Failure | Error, void, void, VerifyTokenPathParams>,
    'path' | 'verb'
  > &
    VerifyTokenPathParams
  export const useVerifyToken: ({
    token,
    ...props
  }: UseVerifyTokenProps) => import('restful-react').UseMutateReturn<
    RestResponseVerifyTokenResponseDTO,
    Error | Failure,
    void,
    void,
    VerifyTokenPathParams
  >
  export const verifyTokenPromise: (
    {
      token,
      ...props
    }: MutateUsingFetchProps<RestResponseVerifyTokenResponseDTO, Error | Failure, void, void, VerifyTokenPathParams> & {
      token: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseVerifyTokenResponseDTO>
  export type GetSourceCodeManagersProps = Omit<GetProps<ResponseListSourceCodeManagerDTO, unknown, void, void>, 'path'>
  /**
   * get source code manager information
   */
  export const GetSourceCodeManagers: (props: GetSourceCodeManagersProps) => JSX.Element
  export type UseGetSourceCodeManagersProps = Omit<
    UseGetProps<ResponseListSourceCodeManagerDTO, unknown, void, void>,
    'path'
  >
  /**
   * get source code manager information
   */
  export const useGetSourceCodeManagers: (
    props: UseGetSourceCodeManagersProps
  ) => import('restful-react').UseGetReturn<ResponseListSourceCodeManagerDTO, unknown, void, unknown>
  /**
   * get source code manager information
   */
  export const getSourceCodeManagersPromise: (
    props: GetUsingFetchProps<ResponseListSourceCodeManagerDTO, unknown, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListSourceCodeManagerDTO>
  export type SaveSourceCodeManagersProps = Omit<
    MutateProps<ResponseSourceCodeManagerDTO, unknown, void, SourceCodeManagerDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * save source code manager
   */
  export const SaveSourceCodeManagers: (props: SaveSourceCodeManagersProps) => JSX.Element
  export type UseSaveSourceCodeManagersProps = Omit<
    UseMutateProps<ResponseSourceCodeManagerDTO, unknown, void, SourceCodeManagerDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * save source code manager
   */
  export const useSaveSourceCodeManagers: (
    props: UseSaveSourceCodeManagersProps
  ) => import('restful-react').UseMutateReturn<ResponseSourceCodeManagerDTO, unknown, SourceCodeManagerDTO, void, void>
  /**
   * save source code manager
   */
  export const saveSourceCodeManagersPromise: (
    props: MutateUsingFetchProps<ResponseSourceCodeManagerDTO, unknown, void, SourceCodeManagerDTORequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseSourceCodeManagerDTO>
  export type DeleteSourceCodeManagersProps = Omit<
    MutateProps<ResponseBoolean, unknown, void, string, void>,
    'path' | 'verb'
  >
  /**
   * delete source code manager
   */
  export const DeleteSourceCodeManagers: (props: DeleteSourceCodeManagersProps) => JSX.Element
  export type UseDeleteSourceCodeManagersProps = Omit<
    UseMutateProps<ResponseBoolean, unknown, void, string, void>,
    'path' | 'verb'
  >
  /**
   * delete source code manager
   */
  export const useDeleteSourceCodeManagers: (
    props: UseDeleteSourceCodeManagersProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, unknown, string, void, void>
  /**
   * delete source code manager
   */
  export const deleteSourceCodeManagersPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, unknown, void, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface UpdateSourceCodeManagersPathParams {
    identifier: string
  }
  export type UpdateSourceCodeManagersProps = Omit<
    MutateProps<
      ResponseSourceCodeManagerDTO,
      unknown,
      void,
      SourceCodeManagerDTORequestBody,
      UpdateSourceCodeManagersPathParams
    >,
    'path' | 'verb'
  > &
    UpdateSourceCodeManagersPathParams
  /**
   * update source code manager
   */
  export const UpdateSourceCodeManagers: ({ identifier, ...props }: UpdateSourceCodeManagersProps) => JSX.Element
  export type UseUpdateSourceCodeManagersProps = Omit<
    UseMutateProps<
      ResponseSourceCodeManagerDTO,
      unknown,
      void,
      SourceCodeManagerDTORequestBody,
      UpdateSourceCodeManagersPathParams
    >,
    'path' | 'verb'
  > &
    UpdateSourceCodeManagersPathParams
  /**
   * update source code manager
   */
  export const useUpdateSourceCodeManagers: ({
    identifier,
    ...props
  }: UseUpdateSourceCodeManagersProps) => import('restful-react').UseMutateReturn<
    ResponseSourceCodeManagerDTO,
    unknown,
    SourceCodeManagerDTO,
    void,
    UpdateSourceCodeManagersPathParams
  >
  /**
   * update source code manager
   */
  export const updateSourceCodeManagersPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseSourceCodeManagerDTO,
      unknown,
      void,
      SourceCodeManagerDTO,
      UpdateSourceCodeManagersPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseSourceCodeManagerDTO>
  export interface GetTokenQueryParams {
    tokenId?: string
  }
  export type GetTokenProps = Omit<GetProps<ResponseTokenDTO, Failure | Error, GetTokenQueryParams, void>, 'path'>
  /**
   * Get token
   */
  export const GetToken: (props: GetTokenProps) => JSX.Element
  export type UseGetTokenProps = Omit<UseGetProps<ResponseTokenDTO, Failure | Error, GetTokenQueryParams, void>, 'path'>
  /**
   * Get token
   */
  export const useGetToken: (
    props: UseGetTokenProps
  ) => import('restful-react').UseGetReturn<ResponseTokenDTO, Error | Failure, GetTokenQueryParams, unknown>
  /**
   * Get token
   */
  export const getTokenPromise: (
    props: GetUsingFetchProps<ResponseTokenDTO, Failure | Error, GetTokenQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseTokenDTO>
  export type CreateTokenProps = Omit<
    MutateProps<ResponseString, Failure | Error, void, TokenDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create token
   */
  export const CreateToken: (props: CreateTokenProps) => JSX.Element
  export type UseCreateTokenProps = Omit<
    UseMutateProps<ResponseString, Failure | Error, void, TokenDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create token
   */
  export const useCreateToken: (
    props: UseCreateTokenProps
  ) => import('restful-react').UseMutateReturn<ResponseString, Error | Failure, TokenDTO, void, void>
  /**
   * Create token
   */
  export const createTokenPromise: (
    props: MutateUsingFetchProps<ResponseString, Failure | Error, void, TokenDTORequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface ListAggregatedTokensQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    apiKeyType: 'USER' | 'SERVICE_ACCOUNT'
    parentIdentifier: string
    apiKeyIdentifier: string
    identifiers?: string[]
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
    searchTerm?: string
  }
  export type ListAggregatedTokensProps = Omit<
    GetProps<ResponsePageTokenAggregateDTO, Failure | Error, ListAggregatedTokensQueryParams, void>,
    'path'
  >
  /**
   * List tokens
   */
  export const ListAggregatedTokens: (props: ListAggregatedTokensProps) => JSX.Element
  export type UseListAggregatedTokensProps = Omit<
    UseGetProps<ResponsePageTokenAggregateDTO, Failure | Error, ListAggregatedTokensQueryParams, void>,
    'path'
  >
  /**
   * List tokens
   */
  export const useListAggregatedTokens: (
    props: UseListAggregatedTokensProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageTokenAggregateDTO,
    Error | Failure,
    ListAggregatedTokensQueryParams,
    unknown
  >
  /**
   * List tokens
   */
  export const listAggregatedTokensPromise: (
    props: GetUsingFetchProps<ResponsePageTokenAggregateDTO, Failure | Error, ListAggregatedTokensQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageTokenAggregateDTO>
  export interface RotateTokenQueryParams {
    rotateTimestamp?: number
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    apiKeyType: 'USER' | 'SERVICE_ACCOUNT'
    parentIdentifier: string
    apiKeyIdentifier: string
  }
  export interface RotateTokenPathParams {
    identifier: string
  }
  export type RotateTokenProps = Omit<
    MutateProps<ResponseString, Failure | Error, RotateTokenQueryParams, void, RotateTokenPathParams>,
    'path' | 'verb'
  > &
    RotateTokenPathParams
  /**
   * Rotate token
   */
  export const RotateToken: ({ identifier, ...props }: RotateTokenProps) => JSX.Element
  export type UseRotateTokenProps = Omit<
    UseMutateProps<ResponseString, Failure | Error, RotateTokenQueryParams, void, RotateTokenPathParams>,
    'path' | 'verb'
  > &
    RotateTokenPathParams
  /**
   * Rotate token
   */
  export const useRotateToken: ({
    identifier,
    ...props
  }: UseRotateTokenProps) => import('restful-react').UseMutateReturn<
    ResponseString,
    Error | Failure,
    void,
    RotateTokenQueryParams,
    RotateTokenPathParams
  >
  /**
   * Rotate token
   */
  export const rotateTokenPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<ResponseString, Error | Failure, RotateTokenQueryParams, void, RotateTokenPathParams> & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface DeleteTokenQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    apiKeyType: 'USER' | 'SERVICE_ACCOUNT'
    parentIdentifier: string
    apiKeyIdentifier: string
  }
  export type DeleteTokenProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteTokenQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete token
   */
  export const DeleteToken: (props: DeleteTokenProps) => JSX.Element
  export type UseDeleteTokenProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteTokenQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete token
   */
  export const useDeleteToken: (
    props: UseDeleteTokenProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, Error | Failure, string, DeleteTokenQueryParams, void>
  /**
   * Delete token
   */
  export const deleteTokenPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteTokenQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface UpdateTokenPathParams {
    identifier: string
  }
  export type UpdateTokenProps = Omit<
    MutateProps<ResponseTokenDTO, Failure | Error, void, TokenDTORequestBody, UpdateTokenPathParams>,
    'path' | 'verb'
  > &
    UpdateTokenPathParams
  /**
   * Update token
   */
  export const UpdateToken: ({ identifier, ...props }: UpdateTokenProps) => JSX.Element
  export type UseUpdateTokenProps = Omit<
    UseMutateProps<ResponseTokenDTO, Failure | Error, void, TokenDTORequestBody, UpdateTokenPathParams>,
    'path' | 'verb'
  > &
    UpdateTokenPathParams
  /**
   * Update token
   */
  export const useUpdateToken: ({
    identifier,
    ...props
  }: UseUpdateTokenProps) => import('restful-react').UseMutateReturn<
    ResponseTokenDTO,
    Error | Failure,
    TokenDTO,
    void,
    UpdateTokenPathParams
  >
  /**
   * Update token
   */
  export const updateTokenPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<ResponseTokenDTO, Error | Failure, void, TokenDTO, UpdateTokenPathParams> & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseTokenDTO>
  export type UpdateUserInfoProps = Omit<
    MutateProps<ResponseUserInfo, Failure | Error, void, UserInfo, void>,
    'path' | 'verb'
  >
  /**
   * update user information
   */
  export const UpdateUserInfo: (props: UpdateUserInfoProps) => JSX.Element
  export type UseUpdateUserInfoProps = Omit<
    UseMutateProps<ResponseUserInfo, Failure | Error, void, UserInfo, void>,
    'path' | 'verb'
  >
  /**
   * update user information
   */
  export const useUpdateUserInfo: (
    props: UseUpdateUserInfoProps
  ) => import('restful-react').UseMutateReturn<ResponseUserInfo, Error | Failure, UserInfo, void, void>
  /**
   * update user information
   */
  export const updateUserInfoPromise: (
    props: MutateUsingFetchProps<ResponseUserInfo, Failure | Error, void, UserInfo, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserInfo>
  export interface GetUserGroupListQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    searchTerm?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetUserGroupListProps = Omit<
    GetProps<ResponsePageUserGroupDTO, Failure | Error, GetUserGroupListQueryParams, void>,
    'path'
  >
  /**
   * Get User Group List
   */
  export const GetUserGroupList: (props: GetUserGroupListProps) => JSX.Element
  export type UseGetUserGroupListProps = Omit<
    UseGetProps<ResponsePageUserGroupDTO, Failure | Error, GetUserGroupListQueryParams, void>,
    'path'
  >
  /**
   * Get User Group List
   */
  export const useGetUserGroupList: (
    props: UseGetUserGroupListProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageUserGroupDTO,
    Error | Failure,
    GetUserGroupListQueryParams,
    unknown
  >
  /**
   * Get User Group List
   */
  export const getUserGroupListPromise: (
    props: GetUsingFetchProps<ResponsePageUserGroupDTO, Failure | Error, GetUserGroupListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageUserGroupDTO>
  export interface PostUserGroupQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type PostUserGroupProps = Omit<
    MutateProps<ResponseUserGroupDTO, Failure | Error, PostUserGroupQueryParams, UserGroupDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a User Group
   */
  export const PostUserGroup: (props: PostUserGroupProps) => JSX.Element
  export type UsePostUserGroupProps = Omit<
    UseMutateProps<ResponseUserGroupDTO, Failure | Error, PostUserGroupQueryParams, UserGroupDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a User Group
   */
  export const usePostUserGroup: (
    props: UsePostUserGroupProps
  ) => import('restful-react').UseMutateReturn<
    ResponseUserGroupDTO,
    Error | Failure,
    UserGroupDTO,
    PostUserGroupQueryParams,
    void
  >
  /**
   * Create a User Group
   */
  export const postUserGroupPromise: (
    props: MutateUsingFetchProps<
      ResponseUserGroupDTO,
      Failure | Error,
      PostUserGroupQueryParams,
      UserGroupDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserGroupDTO>
  export interface PutUserGroupQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type PutUserGroupProps = Omit<
    MutateProps<ResponseUserGroupDTO, Failure | Error, PutUserGroupQueryParams, UserGroupDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Update a User Group
   */
  export const PutUserGroup: (props: PutUserGroupProps) => JSX.Element
  export type UsePutUserGroupProps = Omit<
    UseMutateProps<ResponseUserGroupDTO, Failure | Error, PutUserGroupQueryParams, UserGroupDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Update a User Group
   */
  export const usePutUserGroup: (
    props: UsePutUserGroupProps
  ) => import('restful-react').UseMutateReturn<
    ResponseUserGroupDTO,
    Error | Failure,
    UserGroupDTO,
    PutUserGroupQueryParams,
    void
  >
  /**
   * Update a User Group
   */
  export const putUserGroupPromise: (
    props: MutateUsingFetchProps<
      ResponseUserGroupDTO,
      Failure | Error,
      PutUserGroupQueryParams,
      UserGroupDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserGroupDTO>
  export type GetBatchUserGroupListProps = Omit<
    MutateProps<ResponseListUserGroupDTO, Failure | Error, void, UserGroupFilterDTO, void>,
    'path' | 'verb'
  >
  /**
   * Get Batch User Group List
   */
  export const GetBatchUserGroupList: (props: GetBatchUserGroupListProps) => JSX.Element
  export type UseGetBatchUserGroupListProps = Omit<
    UseMutateProps<ResponseListUserGroupDTO, Failure | Error, void, UserGroupFilterDTO, void>,
    'path' | 'verb'
  >
  /**
   * Get Batch User Group List
   */
  export const useGetBatchUserGroupList: (
    props: UseGetBatchUserGroupListProps
  ) => import('restful-react').UseMutateReturn<
    ResponseListUserGroupDTO,
    Error | Failure,
    UserGroupFilterDTO,
    void,
    void
  >
  /**
   * Get Batch User Group List
   */
  export const getBatchUserGroupListPromise: (
    props: MutateUsingFetchProps<ResponseListUserGroupDTO, Failure | Error, void, UserGroupFilterDTO, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListUserGroupDTO>
  export interface DeleteUserGroupQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type DeleteUserGroupProps = Omit<
    MutateProps<ResponseUserGroupDTO, Failure | Error, DeleteUserGroupQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a User Group
   */
  export const DeleteUserGroup: (props: DeleteUserGroupProps) => JSX.Element
  export type UseDeleteUserGroupProps = Omit<
    UseMutateProps<ResponseUserGroupDTO, Failure | Error, DeleteUserGroupQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a User Group
   */
  export const useDeleteUserGroup: (
    props: UseDeleteUserGroupProps
  ) => import('restful-react').UseMutateReturn<
    ResponseUserGroupDTO,
    Error | Failure,
    string,
    DeleteUserGroupQueryParams,
    void
  >
  /**
   * Delete a User Group
   */
  export const deleteUserGroupPromise: (
    props: MutateUsingFetchProps<ResponseUserGroupDTO, Failure | Error, DeleteUserGroupQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserGroupDTO>
  export interface GetUserGroupQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface GetUserGroupPathParams {
    identifier: string
  }
  export type GetUserGroupProps = Omit<
    GetProps<ResponseUserGroupDTO, Failure | Error, GetUserGroupQueryParams, GetUserGroupPathParams>,
    'path'
  > &
    GetUserGroupPathParams
  /**
   * Get a User Group
   */
  export const GetUserGroup: ({ identifier, ...props }: GetUserGroupProps) => JSX.Element
  export type UseGetUserGroupProps = Omit<
    UseGetProps<ResponseUserGroupDTO, Failure | Error, GetUserGroupQueryParams, GetUserGroupPathParams>,
    'path'
  > &
    GetUserGroupPathParams
  /**
   * Get a User Group
   */
  export const useGetUserGroup: ({
    identifier,
    ...props
  }: UseGetUserGroupProps) => import('restful-react').UseGetReturn<
    ResponseUserGroupDTO,
    Error | Failure,
    GetUserGroupQueryParams,
    unknown
  >
  /**
   * Get a User Group
   */
  export const getUserGroupPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<ResponseUserGroupDTO, Error | Failure, GetUserGroupQueryParams, GetUserGroupPathParams> & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserGroupDTO>
  export interface RemoveMemberQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface RemoveMemberPathParams {
    identifier: string
  }
  export type RemoveMemberProps = Omit<
    MutateProps<ResponseUserGroupDTO, Failure | Error, RemoveMemberQueryParams, string, RemoveMemberPathParams>,
    'path' | 'verb'
  > &
    RemoveMemberPathParams
  /**
   * Remove a user from the user group
   */
  export const RemoveMember: ({ identifier, ...props }: RemoveMemberProps) => JSX.Element
  export type UseRemoveMemberProps = Omit<
    UseMutateProps<ResponseUserGroupDTO, Failure | Error, RemoveMemberQueryParams, string, RemoveMemberPathParams>,
    'path' | 'verb'
  > &
    RemoveMemberPathParams
  /**
   * Remove a user from the user group
   */
  export const useRemoveMember: ({
    identifier,
    ...props
  }: UseRemoveMemberProps) => import('restful-react').UseMutateReturn<
    ResponseUserGroupDTO,
    Error | Failure,
    string,
    RemoveMemberQueryParams,
    RemoveMemberPathParams
  >
  /**
   * Remove a user from the user group
   */
  export const removeMemberPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseUserGroupDTO,
      Error | Failure,
      RemoveMemberQueryParams,
      string,
      RemoveMemberPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserGroupDTO>
  export interface CheckMemberQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface CheckMemberPathParams {
    identifier: string
    userIdentifier: string
  }
  export type CheckMemberProps = Omit<
    GetProps<ResponseBoolean, Failure | Error, CheckMemberQueryParams, CheckMemberPathParams>,
    'path'
  > &
    CheckMemberPathParams
  /**
   * Check if the user is part of the user group
   */
  export const CheckMember: ({ identifier, userIdentifier, ...props }: CheckMemberProps) => JSX.Element
  export type UseCheckMemberProps = Omit<
    UseGetProps<ResponseBoolean, Failure | Error, CheckMemberQueryParams, CheckMemberPathParams>,
    'path'
  > &
    CheckMemberPathParams
  /**
   * Check if the user is part of the user group
   */
  export const useCheckMember: ({
    identifier,
    userIdentifier,
    ...props
  }: UseCheckMemberProps) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    CheckMemberQueryParams,
    unknown
  >
  /**
   * Check if the user is part of the user group
   */
  export const checkMemberPromise: (
    {
      identifier,
      userIdentifier,
      ...props
    }: GetUsingFetchProps<ResponseBoolean, Error | Failure, CheckMemberQueryParams, CheckMemberPathParams> & {
      identifier: string
      userIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface AddMemberQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface AddMemberPathParams {
    identifier: string
    userIdentifier: string
  }
  export type AddMemberProps = Omit<
    MutateProps<ResponseUserGroupDTO, Failure | Error, AddMemberQueryParams, void, AddMemberPathParams>,
    'path' | 'verb'
  > &
    AddMemberPathParams
  /**
   * Add a user to the user group
   */
  export const AddMember: ({ identifier, userIdentifier, ...props }: AddMemberProps) => JSX.Element
  export type UseAddMemberProps = Omit<
    UseMutateProps<ResponseUserGroupDTO, Failure | Error, AddMemberQueryParams, void, AddMemberPathParams>,
    'path' | 'verb'
  > &
    AddMemberPathParams
  /**
   * Add a user to the user group
   */
  export const useAddMember: ({
    identifier,
    userIdentifier,
    ...props
  }: UseAddMemberProps) => import('restful-react').UseMutateReturn<
    ResponseUserGroupDTO,
    Error | Failure,
    void,
    AddMemberQueryParams,
    AddMemberPathParams
  >
  /**
   * Add a user to the user group
   */
  export const addMemberPromise: (
    {
      identifier,
      userIdentifier,
      ...props
    }: MutateUsingFetchProps<ResponseUserGroupDTO, Error | Failure, AddMemberQueryParams, void, AddMemberPathParams> & {
      identifier: string
      userIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserGroupDTO>
  export interface GetUsersInUserGroupQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export interface GetUsersInUserGroupPathParams {
    identifier: string
  }
  export type GetUsersInUserGroupProps = Omit<
    MutateProps<
      ResponsePageUserMetadataDTO,
      Failure | Error,
      GetUsersInUserGroupQueryParams,
      UserFilterRequestBody,
      GetUsersInUserGroupPathParams
    >,
    'path' | 'verb'
  > &
    GetUsersInUserGroupPathParams
  /**
   * List users in a user group
   */
  export const GetUsersInUserGroup: ({ identifier, ...props }: GetUsersInUserGroupProps) => JSX.Element
  export type UseGetUsersInUserGroupProps = Omit<
    UseMutateProps<
      ResponsePageUserMetadataDTO,
      Failure | Error,
      GetUsersInUserGroupQueryParams,
      UserFilterRequestBody,
      GetUsersInUserGroupPathParams
    >,
    'path' | 'verb'
  > &
    GetUsersInUserGroupPathParams
  /**
   * List users in a user group
   */
  export const useGetUsersInUserGroup: ({
    identifier,
    ...props
  }: UseGetUsersInUserGroupProps) => import('restful-react').UseMutateReturn<
    ResponsePageUserMetadataDTO,
    Error | Failure,
    UserFilter,
    GetUsersInUserGroupQueryParams,
    GetUsersInUserGroupPathParams
  >
  /**
   * List users in a user group
   */
  export const getUsersInUserGroupPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponsePageUserMetadataDTO,
      Error | Failure,
      GetUsersInUserGroupQueryParams,
      UserFilter,
      GetUsersInUserGroupPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageUserMetadataDTO>
  export interface LinkToSamlGroupQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface LinkToSamlGroupPathParams {
    userGroupId: string
    samlId: string
  }
  export type LinkToSamlGroupProps = Omit<
    MutateProps<
      RestResponseUserGroup,
      Failure | Error,
      LinkToSamlGroupQueryParams,
      SamlLinkGroupRequest,
      LinkToSamlGroupPathParams
    >,
    'path' | 'verb'
  > &
    LinkToSamlGroupPathParams
  /**
   * Link to SAML group
   */
  export const LinkToSamlGroup: ({ userGroupId, samlId, ...props }: LinkToSamlGroupProps) => JSX.Element
  export type UseLinkToSamlGroupProps = Omit<
    UseMutateProps<
      RestResponseUserGroup,
      Failure | Error,
      LinkToSamlGroupQueryParams,
      SamlLinkGroupRequest,
      LinkToSamlGroupPathParams
    >,
    'path' | 'verb'
  > &
    LinkToSamlGroupPathParams
  /**
   * Link to SAML group
   */
  export const useLinkToSamlGroup: ({
    userGroupId,
    samlId,
    ...props
  }: UseLinkToSamlGroupProps) => import('restful-react').UseMutateReturn<
    RestResponseUserGroup,
    Error | Failure,
    SamlLinkGroupRequest,
    LinkToSamlGroupQueryParams,
    LinkToSamlGroupPathParams
  >
  /**
   * Link to SAML group
   */
  export const linkToSamlGroupPromise: (
    {
      userGroupId,
      samlId,
      ...props
    }: MutateUsingFetchProps<
      RestResponseUserGroup,
      Error | Failure,
      LinkToSamlGroupQueryParams,
      SamlLinkGroupRequest,
      LinkToSamlGroupPathParams
    > & {
      userGroupId: string
      samlId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseUserGroup>
  export interface UnlinkSsoGroupQueryParams {
    retainMembers?: boolean
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface UnlinkSsoGroupPathParams {
    userGroupId: string
  }
  export type UnlinkSsoGroupProps = Omit<
    MutateProps<RestResponseUserGroup, Failure | Error, UnlinkSsoGroupQueryParams, void, UnlinkSsoGroupPathParams>,
    'path' | 'verb'
  > &
    UnlinkSsoGroupPathParams
  /**
   * API to unlink the harness user group from SSO group
   */
  export const UnlinkSsoGroup: ({ userGroupId, ...props }: UnlinkSsoGroupProps) => JSX.Element
  export type UseUnlinkSsoGroupProps = Omit<
    UseMutateProps<RestResponseUserGroup, Failure | Error, UnlinkSsoGroupQueryParams, void, UnlinkSsoGroupPathParams>,
    'path' | 'verb'
  > &
    UnlinkSsoGroupPathParams
  /**
   * API to unlink the harness user group from SSO group
   */
  export const useUnlinkSsoGroup: ({
    userGroupId,
    ...props
  }: UseUnlinkSsoGroupProps) => import('restful-react').UseMutateReturn<
    RestResponseUserGroup,
    Error | Failure,
    void,
    UnlinkSsoGroupQueryParams,
    UnlinkSsoGroupPathParams
  >
  /**
   * API to unlink the harness user group from SSO group
   */
  export const unlinkSsoGroupPromise: (
    {
      userGroupId,
      ...props
    }: MutateUsingFetchProps<
      RestResponseUserGroup,
      Error | Failure,
      UnlinkSsoGroupQueryParams,
      void,
      UnlinkSsoGroupPathParams
    > & {
      userGroupId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseUserGroup>
  export interface GetAggregatedUsersQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    searchTerm?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetAggregatedUsersProps = Omit<
    MutateProps<ResponsePageUserAggregate, Failure | Error, GetAggregatedUsersQueryParams, ACLAggregateFilter, void>,
    'path' | 'verb'
  >
  /**
   * Get a page of active users for access control
   */
  export const GetAggregatedUsers: (props: GetAggregatedUsersProps) => JSX.Element
  export type UseGetAggregatedUsersProps = Omit<
    UseMutateProps<ResponsePageUserAggregate, Failure | Error, GetAggregatedUsersQueryParams, ACLAggregateFilter, void>,
    'path' | 'verb'
  >
  /**
   * Get a page of active users for access control
   */
  export const useGetAggregatedUsers: (
    props: UseGetAggregatedUsersProps
  ) => import('restful-react').UseMutateReturn<
    ResponsePageUserAggregate,
    Error | Failure,
    ACLAggregateFilter,
    GetAggregatedUsersQueryParams,
    void
  >
  /**
   * Get a page of active users for access control
   */
  export const getAggregatedUsersPromise: (
    props: MutateUsingFetchProps<
      ResponsePageUserAggregate,
      Failure | Error,
      GetAggregatedUsersQueryParams,
      ACLAggregateFilter,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageUserAggregate>
  export interface GetAggregatedUserQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface GetAggregatedUserPathParams {
    userId: string
  }
  export type GetAggregatedUserProps = Omit<
    GetProps<ResponseUserAggregate, Failure | Error, GetAggregatedUserQueryParams, GetAggregatedUserPathParams>,
    'path'
  > &
    GetAggregatedUserPathParams
  /**
   * Get a user by userId for access control
   */
  export const GetAggregatedUser: ({ userId, ...props }: GetAggregatedUserProps) => JSX.Element
  export type UseGetAggregatedUserProps = Omit<
    UseGetProps<ResponseUserAggregate, Failure | Error, GetAggregatedUserQueryParams, GetAggregatedUserPathParams>,
    'path'
  > &
    GetAggregatedUserPathParams
  /**
   * Get a user by userId for access control
   */
  export const useGetAggregatedUser: ({
    userId,
    ...props
  }: UseGetAggregatedUserProps) => import('restful-react').UseGetReturn<
    ResponseUserAggregate,
    Error | Failure,
    GetAggregatedUserQueryParams,
    unknown
  >
  /**
   * Get a user by userId for access control
   */
  export const getAggregatedUserPromise: (
    {
      userId,
      ...props
    }: GetUsingFetchProps<
      ResponseUserAggregate,
      Error | Failure,
      GetAggregatedUserQueryParams,
      GetAggregatedUserPathParams
    > & {
      userId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserAggregate>
  export interface GetUsersQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetUsersProps = Omit<
    MutateProps<ResponsePageUserMetadataDTO, Failure | Error, GetUsersQueryParams, UserFilterRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Get a list of users
   */
  export const GetUsers: (props: GetUsersProps) => JSX.Element
  export type UseGetUsersProps = Omit<
    UseMutateProps<ResponsePageUserMetadataDTO, Failure | Error, GetUsersQueryParams, UserFilterRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Get a list of users
   */
  export const useGetUsers: (
    props: UseGetUsersProps
  ) => import('restful-react').UseMutateReturn<
    ResponsePageUserMetadataDTO,
    Error | Failure,
    UserFilter,
    GetUsersQueryParams,
    void
  >
  /**
   * Get a list of users
   */
  export const getUsersPromise: (
    props: MutateUsingFetchProps<
      ResponsePageUserMetadataDTO,
      Failure | Error,
      GetUsersQueryParams,
      UserFilterRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageUserMetadataDTO>
  export type GetCurrentUserInfoProps = Omit<GetProps<ResponseUserInfo, Failure | Error, void, void>, 'path'>
  /**
   * get current user information
   */
  export const GetCurrentUserInfo: (props: GetCurrentUserInfoProps) => JSX.Element
  export type UseGetCurrentUserInfoProps = Omit<UseGetProps<ResponseUserInfo, Failure | Error, void, void>, 'path'>
  /**
   * get current user information
   */
  export const useGetCurrentUserInfo: (
    props: UseGetCurrentUserInfoProps
  ) => import('restful-react').UseGetReturn<ResponseUserInfo, Error | Failure, void, unknown>
  /**
   * get current user information
   */
  export const getCurrentUserInfoPromise: (
    props: GetUsingFetchProps<ResponseUserInfo, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserInfo>
  export interface GetCurrentGenUsersQueryParams {
    accountIdentifier: string
    searchString?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetCurrentGenUsersProps = Omit<
    GetProps<ResponsePageUserMetadataDTO, Failure | Error, GetCurrentGenUsersQueryParams, void>,
    'path'
  >
  /**
   * Get users from current gen for an account
   */
  export const GetCurrentGenUsers: (props: GetCurrentGenUsersProps) => JSX.Element
  export type UseGetCurrentGenUsersProps = Omit<
    UseGetProps<ResponsePageUserMetadataDTO, Failure | Error, GetCurrentGenUsersQueryParams, void>,
    'path'
  >
  /**
   * Get users from current gen for an account
   */
  export const useGetCurrentGenUsers: (
    props: UseGetCurrentGenUsersProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageUserMetadataDTO,
    Error | Failure,
    GetCurrentGenUsersQueryParams,
    unknown
  >
  /**
   * Get users from current gen for an account
   */
  export const getCurrentGenUsersPromise: (
    props: GetUsingFetchProps<ResponsePageUserMetadataDTO, Failure | Error, GetCurrentGenUsersQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageUserMetadataDTO>
  export type DisableTwoFactorAuthProps = Omit<
    MutateProps<ResponseUserInfo, Failure | Error, void, void, void>,
    'path' | 'verb'
  >
  /**
   * disable two factor auth settings
   */
  export const DisableTwoFactorAuth: (props: DisableTwoFactorAuthProps) => JSX.Element
  export type UseDisableTwoFactorAuthProps = Omit<
    UseMutateProps<ResponseUserInfo, Failure | Error, void, void, void>,
    'path' | 'verb'
  >
  /**
   * disable two factor auth settings
   */
  export const useDisableTwoFactorAuth: (
    props: UseDisableTwoFactorAuthProps
  ) => import('restful-react').UseMutateReturn<ResponseUserInfo, Error | Failure, void, void, void>
  /**
   * disable two factor auth settings
   */
  export const disableTwoFactorAuthPromise: (
    props: MutateUsingFetchProps<ResponseUserInfo, Failure | Error, void, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserInfo>
  export type EnableTwoFactorAuthProps = Omit<
    MutateProps<ResponseUserInfo, Failure | Error, void, TwoFactorAuthSettingsInfo, void>,
    'path' | 'verb'
  >
  /**
   * enable two factor auth settings
   */
  export const EnableTwoFactorAuth: (props: EnableTwoFactorAuthProps) => JSX.Element
  export type UseEnableTwoFactorAuthProps = Omit<
    UseMutateProps<ResponseUserInfo, Failure | Error, void, TwoFactorAuthSettingsInfo, void>,
    'path' | 'verb'
  >
  /**
   * enable two factor auth settings
   */
  export const useEnableTwoFactorAuth: (
    props: UseEnableTwoFactorAuthProps
  ) => import('restful-react').UseMutateReturn<ResponseUserInfo, Error | Failure, TwoFactorAuthSettingsInfo, void, void>
  /**
   * enable two factor auth settings
   */
  export const enableTwoFactorAuthPromise: (
    props: MutateUsingFetchProps<ResponseUserInfo, Failure | Error, void, TwoFactorAuthSettingsInfo, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserInfo>
  export type ChangeUserPasswordProps = Omit<
    MutateProps<ResponsePasswordChangeResponse, Failure | Error, void, PasswordChangeDTO, void>,
    'path' | 'verb'
  >
  /**
   * Change user password
   */
  export const ChangeUserPassword: (props: ChangeUserPasswordProps) => JSX.Element
  export type UseChangeUserPasswordProps = Omit<
    UseMutateProps<ResponsePasswordChangeResponse, Failure | Error, void, PasswordChangeDTO, void>,
    'path' | 'verb'
  >
  /**
   * Change user password
   */
  export const useChangeUserPassword: (
    props: UseChangeUserPasswordProps
  ) => import('restful-react').UseMutateReturn<
    ResponsePasswordChangeResponse,
    Error | Failure,
    PasswordChangeDTO,
    void,
    void
  >
  /**
   * Change user password
   */
  export const changeUserPasswordPromise: (
    props: MutateUsingFetchProps<ResponsePasswordChangeResponse, Failure | Error, void, PasswordChangeDTO, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePasswordChangeResponse>
  export interface GetUserProjectInfoQueryParams {
    accountId?: string
    pageIndex?: number
    pageSize?: number
    sortOrders?: string[]
  }
  export type GetUserProjectInfoProps = Omit<
    GetProps<ResponsePageProject, Failure | Error, GetUserProjectInfoQueryParams, void>,
    'path'
  >
  /**
   * get user project information
   */
  export const GetUserProjectInfo: (props: GetUserProjectInfoProps) => JSX.Element
  export type UseGetUserProjectInfoProps = Omit<
    UseGetProps<ResponsePageProject, Failure | Error, GetUserProjectInfoQueryParams, void>,
    'path'
  >
  /**
   * get user project information
   */
  export const useGetUserProjectInfo: (
    props: UseGetUserProjectInfoProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageProject,
    Error | Failure,
    GetUserProjectInfoQueryParams,
    unknown
  >
  /**
   * get user project information
   */
  export const getUserProjectInfoPromise: (
    props: GetUsingFetchProps<ResponsePageProject, Failure | Error, GetUserProjectInfoQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageProject>
  export interface GetTwoFactorAuthSettingsPathParams {
    authMechanism: 'TOTP'
  }
  export type GetTwoFactorAuthSettingsProps = Omit<
    GetProps<ResponseTwoFactorAuthSettingsInfo, Failure | Error, void, GetTwoFactorAuthSettingsPathParams>,
    'path'
  > &
    GetTwoFactorAuthSettingsPathParams
  /**
   * get two factor auth settings
   */
  export const GetTwoFactorAuthSettings: ({ authMechanism, ...props }: GetTwoFactorAuthSettingsProps) => JSX.Element
  export type UseGetTwoFactorAuthSettingsProps = Omit<
    UseGetProps<ResponseTwoFactorAuthSettingsInfo, Failure | Error, void, GetTwoFactorAuthSettingsPathParams>,
    'path'
  > &
    GetTwoFactorAuthSettingsPathParams
  /**
   * get two factor auth settings
   */
  export const useGetTwoFactorAuthSettings: ({
    authMechanism,
    ...props
  }: UseGetTwoFactorAuthSettingsProps) => import('restful-react').UseGetReturn<
    ResponseTwoFactorAuthSettingsInfo,
    Error | Failure,
    void,
    unknown
  >
  /**
   * get two factor auth settings
   */
  export const getTwoFactorAuthSettingsPromise: (
    {
      authMechanism,
      ...props
    }: GetUsingFetchProps<
      ResponseTwoFactorAuthSettingsInfo,
      Error | Failure,
      void,
      GetTwoFactorAuthSettingsPathParams
    > & {
      authMechanism: 'TOTP'
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseTwoFactorAuthSettingsInfo>
  export interface UnlockUserQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface UnlockUserPathParams {
    userId: string
  }
  export type UnlockUserProps = Omit<
    MutateProps<ResponseUserInfo, Failure | Error, UnlockUserQueryParams, void, UnlockUserPathParams>,
    'path' | 'verb'
  > &
    UnlockUserPathParams
  /**
   * unlock user
   */
  export const UnlockUser: ({ userId, ...props }: UnlockUserProps) => JSX.Element
  export type UseUnlockUserProps = Omit<
    UseMutateProps<ResponseUserInfo, Failure | Error, UnlockUserQueryParams, void, UnlockUserPathParams>,
    'path' | 'verb'
  > &
    UnlockUserPathParams
  /**
   * unlock user
   */
  export const useUnlockUser: ({
    userId,
    ...props
  }: UseUnlockUserProps) => import('restful-react').UseMutateReturn<
    ResponseUserInfo,
    Error | Failure,
    void,
    UnlockUserQueryParams,
    UnlockUserPathParams
  >
  /**
   * unlock user
   */
  export const unlockUserPromise: (
    {
      userId,
      ...props
    }: MutateUsingFetchProps<ResponseUserInfo, Error | Failure, UnlockUserQueryParams, void, UnlockUserPathParams> & {
      userId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseUserInfo>
  export interface RemoveUserQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type RemoveUserProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, RemoveUserQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Remove user as the collaborator from the scope
   */
  export const RemoveUser: (props: RemoveUserProps) => JSX.Element
  export type UseRemoveUserProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, RemoveUserQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Remove user as the collaborator from the scope
   */
  export const useRemoveUser: (
    props: UseRemoveUserProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, Error | Failure, string, RemoveUserQueryParams, void>
  /**
   * Remove user as the collaborator from the scope
   */
  export const removeUserPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, RemoveUserQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface ListDelegateConfigsNgV2QueryParams {
    offset?: string
    limit?: string
    fieldsIncluded?: string[]
    fieldsExcluded?: string[]
    orgId?: string
    projectId?: string
  }
  export interface ListDelegateConfigsNgV2PathParams {
    accountId: string
  }
  export type ListDelegateConfigsNgV2Props = Omit<
    GetProps<
      RestResponsePageResponseDelegateProfileDetailsNg,
      unknown,
      ListDelegateConfigsNgV2QueryParams,
      ListDelegateConfigsNgV2PathParams
    >,
    'path'
  > &
    ListDelegateConfigsNgV2PathParams
  /**
   * Lists the delegate configs
   */
  export const ListDelegateConfigsNgV2: ({ accountId, ...props }: ListDelegateConfigsNgV2Props) => JSX.Element
  export type UseListDelegateConfigsNgV2Props = Omit<
    UseGetProps<
      RestResponsePageResponseDelegateProfileDetailsNg,
      unknown,
      ListDelegateConfigsNgV2QueryParams,
      ListDelegateConfigsNgV2PathParams
    >,
    'path'
  > &
    ListDelegateConfigsNgV2PathParams
  /**
   * Lists the delegate configs
   */
  export const useListDelegateConfigsNgV2: ({
    accountId,
    ...props
  }: UseListDelegateConfigsNgV2Props) => import('restful-react').UseGetReturn<
    RestResponsePageResponseDelegateProfileDetailsNg,
    unknown,
    ListDelegateConfigsNgV2QueryParams,
    unknown
  >
  /**
   * Lists the delegate configs
   */
  export const listDelegateConfigsNgV2Promise: (
    {
      accountId,
      ...props
    }: GetUsingFetchProps<
      RestResponsePageResponseDelegateProfileDetailsNg,
      unknown,
      ListDelegateConfigsNgV2QueryParams,
      ListDelegateConfigsNgV2PathParams
    > & {
      accountId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponsePageResponseDelegateProfileDetailsNg>
  export interface AddDelegateProfileNgV2PathParams {
    accountId: string
  }
  export type AddDelegateProfileNgV2Props = Omit<
    MutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      void,
      DelegateProfileDetailsNgRequestBody,
      AddDelegateProfileNgV2PathParams
    >,
    'path' | 'verb'
  > &
    AddDelegateProfileNgV2PathParams
  /**
   * Adds a delegate profile
   */
  export const AddDelegateProfileNgV2: ({ accountId, ...props }: AddDelegateProfileNgV2Props) => JSX.Element
  export type UseAddDelegateProfileNgV2Props = Omit<
    UseMutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      void,
      DelegateProfileDetailsNgRequestBody,
      AddDelegateProfileNgV2PathParams
    >,
    'path' | 'verb'
  > &
    AddDelegateProfileNgV2PathParams
  /**
   * Adds a delegate profile
   */
  export const useAddDelegateProfileNgV2: ({
    accountId,
    ...props
  }: UseAddDelegateProfileNgV2Props) => import('restful-react').UseMutateReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    DelegateProfileDetailsNg,
    void,
    AddDelegateProfileNgV2PathParams
  >
  /**
   * Adds a delegate profile
   */
  export const addDelegateProfileNgV2Promise: (
    {
      accountId,
      ...props
    }: MutateUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      void,
      DelegateProfileDetailsNg,
      AddDelegateProfileNgV2PathParams
    > & {
      accountId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export interface ListDelegateConfigsNgV2WithFilterQueryParams {
    orgId?: string
    projectId?: string
    filterIdentifier?: string
    searchTerm?: string
    offset?: string
    limit?: string
    fieldsIncluded?: string[]
    fieldsExcluded?: string[]
  }
  export interface ListDelegateConfigsNgV2WithFilterPathParams {
    accountId: string
  }
  export type ListDelegateConfigsNgV2WithFilterProps = Omit<
    MutateProps<
      RestResponsePageResponseDelegateProfileDetailsNg,
      unknown,
      ListDelegateConfigsNgV2WithFilterQueryParams,
      DelegateProfileFilterProperties,
      ListDelegateConfigsNgV2WithFilterPathParams
    >,
    'path' | 'verb'
  > &
    ListDelegateConfigsNgV2WithFilterPathParams
  /**
   * Lists the delegate configs with filter
   */
  export const ListDelegateConfigsNgV2WithFilter: ({
    accountId,
    ...props
  }: ListDelegateConfigsNgV2WithFilterProps) => JSX.Element
  export type UseListDelegateConfigsNgV2WithFilterProps = Omit<
    UseMutateProps<
      RestResponsePageResponseDelegateProfileDetailsNg,
      unknown,
      ListDelegateConfigsNgV2WithFilterQueryParams,
      DelegateProfileFilterProperties,
      ListDelegateConfigsNgV2WithFilterPathParams
    >,
    'path' | 'verb'
  > &
    ListDelegateConfigsNgV2WithFilterPathParams
  /**
   * Lists the delegate configs with filter
   */
  export const useListDelegateConfigsNgV2WithFilter: ({
    accountId,
    ...props
  }: UseListDelegateConfigsNgV2WithFilterProps) => import('restful-react').UseMutateReturn<
    RestResponsePageResponseDelegateProfileDetailsNg,
    unknown,
    DelegateProfileFilterProperties,
    ListDelegateConfigsNgV2WithFilterQueryParams,
    ListDelegateConfigsNgV2WithFilterPathParams
  >
  /**
   * Lists the delegate configs with filter
   */
  export const listDelegateConfigsNgV2WithFilterPromise: (
    {
      accountId,
      ...props
    }: MutateUsingFetchProps<
      RestResponsePageResponseDelegateProfileDetailsNg,
      unknown,
      ListDelegateConfigsNgV2WithFilterQueryParams,
      DelegateProfileFilterProperties,
      ListDelegateConfigsNgV2WithFilterPathParams
    > & {
      accountId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponsePageResponseDelegateProfileDetailsNg>
  export interface DeleteDelegateConfigNgV2QueryParams {
    orgId?: string
    projectId?: string
  }
  export interface DeleteDelegateConfigNgV2PathParams {
    accountId: string
  }
  export type DeleteDelegateConfigNgV2Props = Omit<
    MutateProps<
      ResponseBoolean,
      unknown,
      DeleteDelegateConfigNgV2QueryParams,
      string,
      DeleteDelegateConfigNgV2PathParams
    >,
    'path' | 'verb'
  > &
    DeleteDelegateConfigNgV2PathParams
  /**
   * Deletes a delegate config by identifier
   */
  export const DeleteDelegateConfigNgV2: ({ accountId, ...props }: DeleteDelegateConfigNgV2Props) => JSX.Element
  export type UseDeleteDelegateConfigNgV2Props = Omit<
    UseMutateProps<
      ResponseBoolean,
      unknown,
      DeleteDelegateConfigNgV2QueryParams,
      string,
      DeleteDelegateConfigNgV2PathParams
    >,
    'path' | 'verb'
  > &
    DeleteDelegateConfigNgV2PathParams
  /**
   * Deletes a delegate config by identifier
   */
  export const useDeleteDelegateConfigNgV2: ({
    accountId,
    ...props
  }: UseDeleteDelegateConfigNgV2Props) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    unknown,
    string,
    DeleteDelegateConfigNgV2QueryParams,
    DeleteDelegateConfigNgV2PathParams
  >
  /**
   * Deletes a delegate config by identifier
   */
  export const deleteDelegateConfigNgV2Promise: (
    {
      accountId,
      ...props
    }: MutateUsingFetchProps<
      ResponseBoolean,
      unknown,
      DeleteDelegateConfigNgV2QueryParams,
      string,
      DeleteDelegateConfigNgV2PathParams
    > & {
      accountId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetDelegateConfigNgV2QueryParams {
    orgId?: string
    projectId?: string
  }
  export interface GetDelegateConfigNgV2PathParams {
    accountId: string
    delegateConfigIdentifier: string
  }
  export type GetDelegateConfigNgV2Props = Omit<
    GetProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      GetDelegateConfigNgV2QueryParams,
      GetDelegateConfigNgV2PathParams
    >,
    'path'
  > &
    GetDelegateConfigNgV2PathParams
  /**
   * Gets delegate config by identifier
   */
  export const GetDelegateConfigNgV2: ({
    accountId,
    delegateConfigIdentifier,
    ...props
  }: GetDelegateConfigNgV2Props) => JSX.Element
  export type UseGetDelegateConfigNgV2Props = Omit<
    UseGetProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      GetDelegateConfigNgV2QueryParams,
      GetDelegateConfigNgV2PathParams
    >,
    'path'
  > &
    GetDelegateConfigNgV2PathParams
  /**
   * Gets delegate config by identifier
   */
  export const useGetDelegateConfigNgV2: ({
    accountId,
    delegateConfigIdentifier,
    ...props
  }: UseGetDelegateConfigNgV2Props) => import('restful-react').UseGetReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    GetDelegateConfigNgV2QueryParams,
    unknown
  >
  /**
   * Gets delegate config by identifier
   */
  export const getDelegateConfigNgV2Promise: (
    {
      accountId,
      delegateConfigIdentifier,
      ...props
    }: GetUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      GetDelegateConfigNgV2QueryParams,
      GetDelegateConfigNgV2PathParams
    > & {
      accountId: string
      delegateConfigIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export interface UpdateDelegateConfigNgV2QueryParams {
    orgId?: string
    projectId?: string
  }
  export interface UpdateDelegateConfigNgV2PathParams {
    accountId: string
    delegateConfigIdentifier: string
  }
  export type UpdateDelegateConfigNgV2Props = Omit<
    MutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateDelegateConfigNgV2QueryParams,
      DelegateProfileDetailsNgRequestBody,
      UpdateDelegateConfigNgV2PathParams
    >,
    'path' | 'verb'
  > &
    UpdateDelegateConfigNgV2PathParams
  /**
   * Updates a delegate config
   */
  export const UpdateDelegateConfigNgV2: ({
    accountId,
    delegateConfigIdentifier,
    ...props
  }: UpdateDelegateConfigNgV2Props) => JSX.Element
  export type UseUpdateDelegateConfigNgV2Props = Omit<
    UseMutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateDelegateConfigNgV2QueryParams,
      DelegateProfileDetailsNgRequestBody,
      UpdateDelegateConfigNgV2PathParams
    >,
    'path' | 'verb'
  > &
    UpdateDelegateConfigNgV2PathParams
  /**
   * Updates a delegate config
   */
  export const useUpdateDelegateConfigNgV2: ({
    accountId,
    delegateConfigIdentifier,
    ...props
  }: UseUpdateDelegateConfigNgV2Props) => import('restful-react').UseMutateReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    DelegateProfileDetailsNg,
    UpdateDelegateConfigNgV2QueryParams,
    UpdateDelegateConfigNgV2PathParams
  >
  /**
   * Updates a delegate config
   */
  export const updateDelegateConfigNgV2Promise: (
    {
      accountId,
      delegateConfigIdentifier,
      ...props
    }: MutateUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateDelegateConfigNgV2QueryParams,
      DelegateProfileDetailsNg,
      UpdateDelegateConfigNgV2PathParams
    > & {
      accountId: string
      delegateConfigIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export interface UpdateScopingRulesNgV2QueryParams {
    orgId?: string
    projectId?: string
  }
  export interface UpdateScopingRulesNgV2PathParams {
    accountId: string
    delegateConfigIdentifier: string
  }
  export type UpdateScopingRulesNgV2Props = Omit<
    MutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateScopingRulesNgV2QueryParams,
      ScopingRuleDetailsNgArrayRequestBody,
      UpdateScopingRulesNgV2PathParams
    >,
    'path' | 'verb'
  > &
    UpdateScopingRulesNgV2PathParams
  /**
   * Updates the scoping rules inside the delegate config
   */
  export const UpdateScopingRulesNgV2: ({
    accountId,
    delegateConfigIdentifier,
    ...props
  }: UpdateScopingRulesNgV2Props) => JSX.Element
  export type UseUpdateScopingRulesNgV2Props = Omit<
    UseMutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateScopingRulesNgV2QueryParams,
      ScopingRuleDetailsNgArrayRequestBody,
      UpdateScopingRulesNgV2PathParams
    >,
    'path' | 'verb'
  > &
    UpdateScopingRulesNgV2PathParams
  /**
   * Updates the scoping rules inside the delegate config
   */
  export const useUpdateScopingRulesNgV2: ({
    accountId,
    delegateConfigIdentifier,
    ...props
  }: UseUpdateScopingRulesNgV2Props) => import('restful-react').UseMutateReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    ScopingRuleDetailsNgArrayRequestBody,
    UpdateScopingRulesNgV2QueryParams,
    UpdateScopingRulesNgV2PathParams
  >
  /**
   * Updates the scoping rules inside the delegate config
   */
  export const updateScopingRulesNgV2Promise: (
    {
      accountId,
      delegateConfigIdentifier,
      ...props
    }: MutateUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateScopingRulesNgV2QueryParams,
      ScopingRuleDetailsNgArrayRequestBody,
      UpdateScopingRulesNgV2PathParams
    > & {
      accountId: string
      delegateConfigIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export interface UpdateSelectorsNgV2QueryParams {
    orgId?: string
    projectId?: string
  }
  export interface UpdateSelectorsNgV2PathParams {
    accountId: string
    delegateConfigIdentifier: string
  }
  export type UpdateSelectorsNgV2Props = Omit<
    MutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateSelectorsNgV2QueryParams,
      UpdateWhitelistedDomainsBodyRequestBody,
      UpdateSelectorsNgV2PathParams
    >,
    'path' | 'verb'
  > &
    UpdateSelectorsNgV2PathParams
  /**
   * Updates the selectors inside the delegate config
   */
  export const UpdateSelectorsNgV2: ({
    accountId,
    delegateConfigIdentifier,
    ...props
  }: UpdateSelectorsNgV2Props) => JSX.Element
  export type UseUpdateSelectorsNgV2Props = Omit<
    UseMutateProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateSelectorsNgV2QueryParams,
      UpdateWhitelistedDomainsBodyRequestBody,
      UpdateSelectorsNgV2PathParams
    >,
    'path' | 'verb'
  > &
    UpdateSelectorsNgV2PathParams
  /**
   * Updates the selectors inside the delegate config
   */
  export const useUpdateSelectorsNgV2: ({
    accountId,
    delegateConfigIdentifier,
    ...props
  }: UseUpdateSelectorsNgV2Props) => import('restful-react').UseMutateReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    UpdateWhitelistedDomainsBodyRequestBody,
    UpdateSelectorsNgV2QueryParams,
    UpdateSelectorsNgV2PathParams
  >
  /**
   * Updates the selectors inside the delegate config
   */
  export const updateSelectorsNgV2Promise: (
    {
      accountId,
      delegateConfigIdentifier,
      ...props
    }: MutateUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      UpdateSelectorsNgV2QueryParams,
      UpdateWhitelistedDomainsBodyRequestBody,
      UpdateSelectorsNgV2PathParams
    > & {
      accountId: string
      delegateConfigIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export type AddDelegateProfileNgV2noQueryParamsV2Props = Omit<
    MutateProps<RestResponseDelegateProfileDetailsNg, unknown, void, DelegateProfileDetailsNgRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Adds a delegate profile
   */
  export const AddDelegateProfileNgV2noQueryParamsV2: (props: AddDelegateProfileNgV2noQueryParamsV2Props) => JSX.Element
  export type UseAddDelegateProfileNgV2noQueryParamsV2Props = Omit<
    UseMutateProps<RestResponseDelegateProfileDetailsNg, unknown, void, DelegateProfileDetailsNgRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Adds a delegate profile
   */
  export const useAddDelegateProfileNgV2noQueryParamsV2: (
    props: UseAddDelegateProfileNgV2noQueryParamsV2Props
  ) => import('restful-react').UseMutateReturn<
    RestResponseDelegateProfileDetailsNg,
    unknown,
    DelegateProfileDetailsNg,
    void,
    void
  >
  /**
   * Adds a delegate profile
   */
  export const addDelegateProfileNgV2noQueryParamsV2Promise: (
    props: MutateUsingFetchProps<
      RestResponseDelegateProfileDetailsNg,
      unknown,
      void,
      DelegateProfileDetailsNgRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseDelegateProfileDetailsNg>
  export interface ListSecretsV2QueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    identifiers?: string[]
    type?: 'SecretFile' | 'SecretText' | 'SSHKey'
    searchTerm?: string
    types?: ('SecretFile' | 'SecretText' | 'SSHKey')[]
    source_category?:
      | 'CLOUD_PROVIDER'
      | 'SECRET_MANAGER'
      | 'CLOUD_COST'
      | 'ARTIFACTORY'
      | 'CODE_REPO'
      | 'MONITORING'
      | 'TICKETING'
    includeSecretsFromEverySubScope?: boolean
    pageIndex?: number
    pageSize?: number
  }
  export type ListSecretsV2Props = Omit<
    GetProps<ResponsePageSecretResponseWrapper, Failure | Error, ListSecretsV2QueryParams, void>,
    'path'
  >
  /**
   * Get secrets
   */
  export const ListSecretsV2: (props: ListSecretsV2Props) => JSX.Element
  export type UseListSecretsV2Props = Omit<
    UseGetProps<ResponsePageSecretResponseWrapper, Failure | Error, ListSecretsV2QueryParams, void>,
    'path'
  >
  /**
   * Get secrets
   */
  export const useListSecretsV2: (
    props: UseListSecretsV2Props
  ) => import('restful-react').UseGetReturn<
    ResponsePageSecretResponseWrapper,
    Error | Failure,
    ListSecretsV2QueryParams,
    unknown
  >
  /**
   * Get secrets
   */
  export const listSecretsV2Promise: (
    props: GetUsingFetchProps<ResponsePageSecretResponseWrapper, Failure | Error, ListSecretsV2QueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageSecretResponseWrapper>
  export interface PostSecretQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    privateSecret?: boolean
  }
  export type PostSecretProps = Omit<
    MutateProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PostSecretQueryParams,
      SecretRequestWrapperRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create a secret
   */
  export const PostSecret: (props: PostSecretProps) => JSX.Element
  export type UsePostSecretProps = Omit<
    UseMutateProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PostSecretQueryParams,
      SecretRequestWrapperRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create a secret
   */
  export const usePostSecret: (
    props: UsePostSecretProps
  ) => import('restful-react').UseMutateReturn<
    ResponseSecretResponseWrapper,
    Error | Failure,
    SecretRequestWrapper,
    PostSecretQueryParams,
    void
  >
  /**
   * Create a secret
   */
  export const postSecretPromise: (
    props: MutateUsingFetchProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PostSecretQueryParams,
      SecretRequestWrapperRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseSecretResponseWrapper>
  export interface PostSecretFileV2QueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    privateSecret?: boolean
  }
  export type PostSecretFileV2Props = Omit<
    MutateProps<ResponseSecretResponseWrapper, Failure | Error, PostSecretFileV2QueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Create a secret file
   */
  export const PostSecretFileV2: (props: PostSecretFileV2Props) => JSX.Element
  export type UsePostSecretFileV2Props = Omit<
    UseMutateProps<ResponseSecretResponseWrapper, Failure | Error, PostSecretFileV2QueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Create a secret file
   */
  export const usePostSecretFileV2: (
    props: UsePostSecretFileV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponseSecretResponseWrapper,
    Error | Failure,
    void,
    PostSecretFileV2QueryParams,
    void
  >
  /**
   * Create a secret file
   */
  export const postSecretFileV2Promise: (
    props: MutateUsingFetchProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PostSecretFileV2QueryParams,
      void,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseSecretResponseWrapper>
  export interface PutSecretFileV2QueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface PutSecretFileV2PathParams {
    identifier: string
  }
  export type PutSecretFileV2Props = Omit<
    MutateProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PutSecretFileV2QueryParams,
      void,
      PutSecretFileV2PathParams
    >,
    'path' | 'verb'
  > &
    PutSecretFileV2PathParams
  /**
   * Update a secret file
   */
  export const PutSecretFileV2: ({ identifier, ...props }: PutSecretFileV2Props) => JSX.Element
  export type UsePutSecretFileV2Props = Omit<
    UseMutateProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PutSecretFileV2QueryParams,
      void,
      PutSecretFileV2PathParams
    >,
    'path' | 'verb'
  > &
    PutSecretFileV2PathParams
  /**
   * Update a secret file
   */
  export const usePutSecretFileV2: ({
    identifier,
    ...props
  }: UsePutSecretFileV2Props) => import('restful-react').UseMutateReturn<
    ResponseSecretResponseWrapper,
    Error | Failure,
    void,
    PutSecretFileV2QueryParams,
    PutSecretFileV2PathParams
  >
  /**
   * Update a secret file
   */
  export const putSecretFileV2Promise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseSecretResponseWrapper,
      Error | Failure,
      PutSecretFileV2QueryParams,
      void,
      PutSecretFileV2PathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseSecretResponseWrapper>
  export interface ValidateSecretQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    identifier?: string
  }
  export type ValidateSecretProps = Omit<
    MutateProps<
      ResponseSecretValidationResultDTO,
      Failure | Error,
      ValidateSecretQueryParams,
      SecretValidationMetaData,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Validate a secret
   */
  export const ValidateSecret: (props: ValidateSecretProps) => JSX.Element
  export type UseValidateSecretProps = Omit<
    UseMutateProps<
      ResponseSecretValidationResultDTO,
      Failure | Error,
      ValidateSecretQueryParams,
      SecretValidationMetaData,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Validate a secret
   */
  export const useValidateSecret: (
    props: UseValidateSecretProps
  ) => import('restful-react').UseMutateReturn<
    ResponseSecretValidationResultDTO,
    Error | Failure,
    SecretValidationMetaData,
    ValidateSecretQueryParams,
    void
  >
  /**
   * Validate a secret
   */
  export const validateSecretPromise: (
    props: MutateUsingFetchProps<
      ResponseSecretValidationResultDTO,
      Failure | Error,
      ValidateSecretQueryParams,
      SecretValidationMetaData,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseSecretValidationResultDTO>
  export interface ValidateSecretIdentifierIsUniqueQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface ValidateSecretIdentifierIsUniquePathParams {
    identifier: string
  }
  export type ValidateSecretIdentifierIsUniqueProps = Omit<
    GetProps<
      ResponseBoolean,
      Failure | Error,
      ValidateSecretIdentifierIsUniqueQueryParams,
      ValidateSecretIdentifierIsUniquePathParams
    >,
    'path'
  > &
    ValidateSecretIdentifierIsUniquePathParams
  /**
   * Validate Secret Identifier is unique
   */
  export const ValidateSecretIdentifierIsUnique: ({
    identifier,
    ...props
  }: ValidateSecretIdentifierIsUniqueProps) => JSX.Element
  export type UseValidateSecretIdentifierIsUniqueProps = Omit<
    UseGetProps<
      ResponseBoolean,
      Failure | Error,
      ValidateSecretIdentifierIsUniqueQueryParams,
      ValidateSecretIdentifierIsUniquePathParams
    >,
    'path'
  > &
    ValidateSecretIdentifierIsUniquePathParams
  /**
   * Validate Secret Identifier is unique
   */
  export const useValidateSecretIdentifierIsUnique: ({
    identifier,
    ...props
  }: UseValidateSecretIdentifierIsUniqueProps) => import('restful-react').UseGetReturn<
    ResponseBoolean,
    Error | Failure,
    ValidateSecretIdentifierIsUniqueQueryParams,
    unknown
  >
  /**
   * Validate Secret Identifier is unique
   */
  export const validateSecretIdentifierIsUniquePromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<
      ResponseBoolean,
      Error | Failure,
      ValidateSecretIdentifierIsUniqueQueryParams,
      ValidateSecretIdentifierIsUniquePathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface PostSecretViaYamlQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    privateSecret?: boolean
  }
  export type PostSecretViaYamlProps = Omit<
    MutateProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PostSecretViaYamlQueryParams,
      SecretRequestWrapper2RequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create a secret via yaml
   */
  export const PostSecretViaYaml: (props: PostSecretViaYamlProps) => JSX.Element
  export type UsePostSecretViaYamlProps = Omit<
    UseMutateProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PostSecretViaYamlQueryParams,
      SecretRequestWrapper2RequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create a secret via yaml
   */
  export const usePostSecretViaYaml: (
    props: UsePostSecretViaYamlProps
  ) => import('restful-react').UseMutateReturn<
    ResponseSecretResponseWrapper,
    Error | Failure,
    void,
    PostSecretViaYamlQueryParams,
    void
  >
  /**
   * Create a secret via yaml
   */
  export const postSecretViaYamlPromise: (
    props: MutateUsingFetchProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PostSecretViaYamlQueryParams,
      SecretRequestWrapper2RequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseSecretResponseWrapper>
  export interface DeleteSecretV2QueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type DeleteSecretV2Props = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteSecretV2QueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete secret
   */
  export const DeleteSecretV2: (props: DeleteSecretV2Props) => JSX.Element
  export type UseDeleteSecretV2Props = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteSecretV2QueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete secret
   */
  export const useDeleteSecretV2: (
    props: UseDeleteSecretV2Props
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    string,
    DeleteSecretV2QueryParams,
    void
  >
  /**
   * Delete secret
   */
  export const deleteSecretV2Promise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteSecretV2QueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetSecretV2QueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface GetSecretV2PathParams {
    identifier: string
  }
  export type GetSecretV2Props = Omit<
    GetProps<ResponseSecretResponseWrapper, Failure | Error, GetSecretV2QueryParams, GetSecretV2PathParams>,
    'path'
  > &
    GetSecretV2PathParams
  /**
   * Gets secret
   */
  export const GetSecretV2: ({ identifier, ...props }: GetSecretV2Props) => JSX.Element
  export type UseGetSecretV2Props = Omit<
    UseGetProps<ResponseSecretResponseWrapper, Failure | Error, GetSecretV2QueryParams, GetSecretV2PathParams>,
    'path'
  > &
    GetSecretV2PathParams
  /**
   * Gets secret
   */
  export const useGetSecretV2: ({
    identifier,
    ...props
  }: UseGetSecretV2Props) => import('restful-react').UseGetReturn<
    ResponseSecretResponseWrapper,
    Error | Failure,
    GetSecretV2QueryParams,
    unknown
  >
  /**
   * Gets secret
   */
  export const getSecretV2Promise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<
      ResponseSecretResponseWrapper,
      Error | Failure,
      GetSecretV2QueryParams,
      GetSecretV2PathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseSecretResponseWrapper>
  export interface PutSecretQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface PutSecretPathParams {
    identifier: string
  }
  export type PutSecretProps = Omit<
    MutateProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PutSecretQueryParams,
      SecretRequestWrapperRequestBody,
      PutSecretPathParams
    >,
    'path' | 'verb'
  > &
    PutSecretPathParams
  /**
   * Update a secret
   */
  export const PutSecret: ({ identifier, ...props }: PutSecretProps) => JSX.Element
  export type UsePutSecretProps = Omit<
    UseMutateProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PutSecretQueryParams,
      SecretRequestWrapperRequestBody,
      PutSecretPathParams
    >,
    'path' | 'verb'
  > &
    PutSecretPathParams
  /**
   * Update a secret
   */
  export const usePutSecret: ({
    identifier,
    ...props
  }: UsePutSecretProps) => import('restful-react').UseMutateReturn<
    ResponseSecretResponseWrapper,
    Error | Failure,
    SecretRequestWrapper,
    PutSecretQueryParams,
    PutSecretPathParams
  >
  /**
   * Update a secret
   */
  export const putSecretPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseSecretResponseWrapper,
      Error | Failure,
      PutSecretQueryParams,
      SecretRequestWrapper,
      PutSecretPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseSecretResponseWrapper>
  export interface PutSecretViaYamlQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface PutSecretViaYamlPathParams {
    identifier: string
  }
  export type PutSecretViaYamlProps = Omit<
    MutateProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PutSecretViaYamlQueryParams,
      SecretRequestWrapper2RequestBody,
      PutSecretViaYamlPathParams
    >,
    'path' | 'verb'
  > &
    PutSecretViaYamlPathParams
  /**
   * Update a secret via yaml
   */
  export const PutSecretViaYaml: ({ identifier, ...props }: PutSecretViaYamlProps) => JSX.Element
  export type UsePutSecretViaYamlProps = Omit<
    UseMutateProps<
      ResponseSecretResponseWrapper,
      Failure | Error,
      PutSecretViaYamlQueryParams,
      SecretRequestWrapper2RequestBody,
      PutSecretViaYamlPathParams
    >,
    'path' | 'verb'
  > &
    PutSecretViaYamlPathParams
  /**
   * Update a secret via yaml
   */
  export const usePutSecretViaYaml: ({
    identifier,
    ...props
  }: UsePutSecretViaYamlProps) => import('restful-react').UseMutateReturn<
    ResponseSecretResponseWrapper,
    Error | Failure,
    void,
    PutSecretViaYamlQueryParams,
    PutSecretViaYamlPathParams
  >
  /**
   * Update a secret via yaml
   */
  export const putSecretViaYamlPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseSecretResponseWrapper,
      Error | Failure,
      PutSecretViaYamlQueryParams,
      void,
      PutSecretViaYamlPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseSecretResponseWrapper>
  export interface WebhookEndpointQueryParams {
    accountIdentifier: string
  }
  export type WebhookEndpointProps = Omit<
    MutateProps<ResponseString, Failure | Error, WebhookEndpointQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * accept webhook event
   */
  export const WebhookEndpoint: (props: WebhookEndpointProps) => JSX.Element
  export type UseWebhookEndpointProps = Omit<
    UseMutateProps<ResponseString, Failure | Error, WebhookEndpointQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * accept webhook event
   */
  export const useWebhookEndpoint: (
    props: UseWebhookEndpointProps
  ) => import('restful-react').UseMutateReturn<
    ResponseString,
    Error | Failure,
    string,
    WebhookEndpointQueryParams,
    void
  >
  /**
   * accept webhook event
   */
  export const webhookEndpointPromise: (
    props: MutateUsingFetchProps<ResponseString, Failure | Error, WebhookEndpointQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface GetYamlSchemaQueryParams {
    entityType:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Triggers'
    subtype?:
      | 'K8sCluster'
      | 'Git'
      | 'Splunk'
      | 'AppDynamics'
      | 'Prometheus'
      | 'Dynatrace'
      | 'Vault'
      | 'AzureKeyVault'
      | 'DockerRegistry'
      | 'Local'
      | 'AwsKms'
      | 'GcpKms'
      | 'AwsSecretManager'
      | 'Gcp'
      | 'Aws'
      | 'Artifactory'
      | 'Jira'
      | 'Nexus'
      | 'Github'
      | 'Gitlab'
      | 'Bitbucket'
      | 'Codecommit'
      | 'CEAws'
      | 'CEAzure'
      | 'GcpCloudCost'
      | 'CEK8sCluster'
      | 'HttpHelmRepo'
      | 'NewRelic'
      | 'Datadog'
      | 'SumoLogic'
    projectIdentifier?: string
    orgIdentifier?: string
    scope?: 'account' | 'org' | 'project' | 'unknown'
    identifier?: string
  }
  export type GetYamlSchemaProps = Omit<
    GetProps<ResponseJsonNode, Failure | Error, GetYamlSchemaQueryParams, void>,
    'path'
  >
  /**
   * Get Yaml Schema
   */
  export const GetYamlSchema: (props: GetYamlSchemaProps) => JSX.Element
  export type UseGetYamlSchemaProps = Omit<
    UseGetProps<ResponseJsonNode, Failure | Error, GetYamlSchemaQueryParams, void>,
    'path'
  >
  /**
   * Get Yaml Schema
   */
  export const useGetYamlSchema: (
    props: UseGetYamlSchemaProps
  ) => import('restful-react').UseGetReturn<ResponseJsonNode, Error | Failure, GetYamlSchemaQueryParams, unknown>
  /**
   * Get Yaml Schema
   */
  export const getYamlSchemaPromise: (
    props: GetUsingFetchProps<ResponseJsonNode, Failure | Error, GetYamlSchemaQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseJsonNode>
  export interface GetYamlSnippetMetadataQueryParams {
    tags: (
      | 'k8s'
      | 'git'
      | 'docker'
      | 'connector'
      | 'secretmanager'
      | 'secret'
      | 'secretText'
      | 'secretFile'
      | 'sshKey'
      | 'service'
      | 'infra'
      | 'steps'
      | 'pipeline'
      | 'http'
      | 'splunk'
      | 'appdynamics'
      | 'vault'
      | 'azurekeyvault'
      | 'local'
      | 'gcpkms'
      | 'gcp'
      | 'aws'
      | 'awskms'
      | 'awssecretmanager'
      | 'artifactory'
      | 'jira'
      | 'nexus'
      | 'github'
      | 'gitlab'
      | 'bitbucket'
      | 'ceaws'
      | 'ceazure'
      | 'cek8s'
      | 'codecommit'
      | 'httphelmrepo'
      | 'newrelic'
      | 'gcpcloudcost'
      | 'prometheus'
      | 'datadog'
      | 'sumologic'
      | 'dynatrace'
    )[]
  }
  export type GetYamlSnippetMetadataProps = Omit<
    GetProps<ResponseYamlSnippets, Failure | Error, GetYamlSnippetMetadataQueryParams, void>,
    'path'
  >
  /**
   * Get Yaml Snippet Metadata
   */
  export const GetYamlSnippetMetadata: (props: GetYamlSnippetMetadataProps) => JSX.Element
  export type UseGetYamlSnippetMetadataProps = Omit<
    UseGetProps<ResponseYamlSnippets, Failure | Error, GetYamlSnippetMetadataQueryParams, void>,
    'path'
  >
  /**
   * Get Yaml Snippet Metadata
   */
  export const useGetYamlSnippetMetadata: (
    props: UseGetYamlSnippetMetadataProps
  ) => import('restful-react').UseGetReturn<
    ResponseYamlSnippets,
    Error | Failure,
    GetYamlSnippetMetadataQueryParams,
    unknown
  >
  /**
   * Get Yaml Snippet Metadata
   */
  export const getYamlSnippetMetadataPromise: (
    props: GetUsingFetchProps<ResponseYamlSnippets, Failure | Error, GetYamlSnippetMetadataQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseYamlSnippets>
  export interface GetYamlSnippetQueryParams {
    projectIdentifier?: string
    orgIdentifier?: string
    scope?: 'account' | 'org' | 'project' | 'unknown'
  }
  export interface GetYamlSnippetPathParams {
    identifier: string
  }
  export type GetYamlSnippetProps = Omit<
    GetProps<ResponseJsonNode, Failure | Error, GetYamlSnippetQueryParams, GetYamlSnippetPathParams>,
    'path'
  > &
    GetYamlSnippetPathParams
  /**
   * Get Yaml Snippet
   */
  export const GetYamlSnippet: ({ identifier, ...props }: GetYamlSnippetProps) => JSX.Element
  export type UseGetYamlSnippetProps = Omit<
    UseGetProps<ResponseJsonNode, Failure | Error, GetYamlSnippetQueryParams, GetYamlSnippetPathParams>,
    'path'
  > &
    GetYamlSnippetPathParams
  /**
   * Get Yaml Snippet
   */
  export const useGetYamlSnippet: ({
    identifier,
    ...props
  }: UseGetYamlSnippetProps) => import('restful-react').UseGetReturn<
    ResponseJsonNode,
    Error | Failure,
    GetYamlSnippetQueryParams,
    unknown
  >
  /**
   * Get Yaml Snippet
   */
  export const getYamlSnippetPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<ResponseJsonNode, Error | Failure, GetYamlSnippetQueryParams, GetYamlSnippetPathParams> & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseJsonNode>
  export interface SchemafileQueryParams {
    filename?: string
  }
  export type SchemafileProps = Omit<GetProps<void, void, SchemafileQueryParams, void>, 'path'>
  /**
   * Get Schema for the given entity type
   */
  export const Schemafile: (props: SchemafileProps) => JSX.Element
  export type UseSchemafileProps = Omit<UseGetProps<void, void, SchemafileQueryParams, void>, 'path'>
  /**
   * Get Schema for the given entity type
   */
  export const useSchemafile: (
    props: UseSchemafileProps
  ) => import('restful-react').UseGetReturn<void, void, SchemafileQueryParams, unknown>
  /**
   * Get Schema for the given entity type
   */
  export const schemafilePromise: (
    props: GetUsingFetchProps<void, void, SchemafileQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<void>
}
declare module 'services/portal/index' {
  import { GetProps, UseGetProps, MutateProps, UseMutateProps } from 'restful-react'
  export const SPEC_VERSION = '1.0'
  export interface APMFetchConfig {
    body?: string
    guid?: string
    url?: string
  }
  export interface APMSetupTestNodeData {
    apmMetricCollectionInfo?: MetricCollectionInfo
    appId: string
    fetchConfig?: APMFetchConfig
    fromTime?: number
    guid?: string
    host?: string
    hostExpression?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    toTime?: number
    workflowId?: string
  }
  export type ARMInfrastructureProvisioner = InfrastructureProvisioner & {
    gitFileConfig?: GitFileConfig
    resourceType?: 'ARM' | 'BLUEPRINT'
    scopeType?: 'RESOURCE_GROUP' | 'SUBSCRIPTION' | 'MANAGEMENT_GROUP' | 'TENANT'
    sourceType?: 'TEMPLATE_BODY' | 'GIT'
    templateBody?: string
  }
  export interface Aws {
    completeDockerId?: string
    containerId?: string
    containerInstanceArn?: string
    containerInstanceId?: string
    dockerId?: string
    ec2Instance?: Instance
    ecsServiceName?: string
    instanceId?: string
    ip?: string
    publicDns?: string
    taskArn?: string
    taskId?: string
  }
  export interface AzureVmss {
    instanceId?: string
    ip?: string
    publicDns?: string
  }
  export interface AzureWebapp {
    appName?: string
    appServicePlanId?: string
    deploySlot?: string
    deploySlotId?: string
    instanceHostName?: string
    instanceId?: string
    instanceName?: string
    instanceType?: string
    ip?: string
  }
  export interface AccessRequestDTO {
    accessActive?: boolean
    accessEndAt?: number
    accessRequestId?: string
    accessStartAt?: number
    accessType?: 'GROUP_ACCESS' | 'MEMBER_ACCESS'
    accountId?: string
    emailIds?: string[]
    harnessUserGroupId?: string
    harnessUserGroupName?: string
    hours?: number
  }
  export interface AccessTokenBean {
    expirationTimeMillis?: number
    projectId?: string
    tokenValue?: string
  }
  export interface Account {
    accountEvents?: AccountEvent[]
    accountName: string
    accountPreferences?: AccountPreferences
    appId: string
    authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
    ceAutoCollectK8sEvents?: boolean
    ceLicenseInfo?: CeLicenseInfo
    cloudCostEnabled?: boolean
    companyName: string
    createdAt?: number
    createdBy?: EmbeddedUser
    createdFromNG?: boolean
    dataRetentionDurationMs?: number
    defaultExperience?: 'NG' | 'CG'
    defaults?: {
      [key: string]: string
    }
    delegateConfiguration?: DelegateConfiguration
    forImport?: boolean
    harnessSupportAccessAllowed?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    licenseId?: string
    licenseInfo?: LicenseInfo
    localEncryptionEnabled?: boolean
    migratedToClusterUrl?: string
    nextGenEnabled?: boolean
    oauthEnabled?: boolean
    povAccount?: boolean
    serviceAccountConfig?: ServiceAccountConfig
    serviceGuardLimit?: number
    subdomainUrl?: string
    techStacks?: TechStack[]
    trialSignupOptions?: TrialSignupOptions
    twoFactorAdminEnforced?: boolean
    uuid: string
    whitelistedDomains?: string[]
  }
  export interface AccountAuditFilter {
    resourceIds?: string[]
    resourceTypes?: string[]
  }
  export interface AccountDetails {
    accountId?: string
    accountName?: string
    ceLicenseInfo?: CeLicenseInfo
    cluster?: string
    companyName?: string
    createdFromNG?: boolean
    defaultExperience?: 'NG' | 'CG'
    licenseInfo?: LicenseInfo
  }
  export interface AccountEvent {
    accountEventType?:
      | 'APP_CREATED'
      | 'SERVICE_CREATED'
      | 'ENV_CREATED'
      | 'WORKFLOW_CREATED'
      | 'WORKFLOW_DEPLOYED'
      | 'PIPELINE_DEPLOYED'
      | 'DELEGATE_INSTALLED'
      | 'CLOUD_PROVIDER_CREATED'
      | 'ARTIFACT_REPO_CREATED'
      | 'PIPELINE_CREATED'
      | 'ARTIFACT_STREAM_ADDED'
      | 'INFRA_MAPPING_ADDED'
      | 'INFRA_DEFINITION_ADDED'
      | 'CUSTOM'
    category?: string
    customMsg?: string
    properties?: {
      [key: string]: string
    }
  }
  export interface AccountJoinRequest {
    accountAdminEmail?: string
    companyName?: string
    email?: string
    name?: string
    note?: string
  }
  export interface AccountLicenseDTO {
    accountId?: string
    allModuleLicenses?: {
      [key: string]: ModuleLicenseDTO[]
    }
    createdAt?: number
    lastUpdatedAt?: number
    moduleLicenses?: {
      [key: string]: ModuleLicenseDTO
    }
  }
  export interface AccountPermissionSummary {
    permissions?: (
      | 'ACCOUNT'
      | 'LOGGED_IN'
      | 'DELEGATE'
      | 'NONE'
      | 'APP'
      | 'ALL_APP_ENTITIES'
      | 'ENV'
      | 'SERVICE'
      | 'WORKFLOW'
      | 'PIPELINE'
      | 'DEPLOYMENT'
      | 'APPLICATION_CREATE_DELETE'
      | 'USER_PERMISSION_MANAGEMENT'
      | 'ACCOUNT_MANAGEMENT'
      | 'PROVISIONER'
      | 'TEMPLATE_MANAGEMENT'
      | 'USER_PERMISSION_READ'
      | 'AUDIT_VIEWER'
      | 'TAG_MANAGEMENT'
      | 'CE_ADMIN'
      | 'CE_VIEWER'
      | 'MANAGE_CLOUD_PROVIDERS'
      | 'MANAGE_CONNECTORS'
      | 'MANAGE_APPLICATIONS'
      | 'MANAGE_APPLICATION_STACKS'
      | 'MANAGE_DELEGATES'
      | 'MANAGE_ALERT_NOTIFICATION_RULES'
      | 'MANAGE_DELEGATE_PROFILES'
      | 'MANAGE_CONFIG_AS_CODE'
      | 'MANAGE_SECRETS'
      | 'MANAGE_SECRET_MANAGERS'
      | 'MANAGE_SSH_AND_WINRM'
      | 'MANAGE_AUTHENTICATION_SETTINGS'
      | 'MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'VIEW_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'MANAGE_IP_WHITELIST'
      | 'MANAGE_IP_WHITELISTING'
      | 'MANAGE_DEPLOYMENT_FREEZES'
      | 'MANAGE_PIPELINE_GOVERNANCE_STANDARDS'
      | 'MANAGE_API_KEYS'
      | 'MANAGE_TAGS'
      | 'MANAGE_CUSTOM_DASHBOARDS'
      | 'CREATE_CUSTOM_DASHBOARDS'
      | 'MANAGE_RESTRICTED_ACCESS'
    )[]
  }
  export interface AccountPermissions {
    permissions?: (
      | 'ACCOUNT'
      | 'LOGGED_IN'
      | 'DELEGATE'
      | 'NONE'
      | 'APP'
      | 'ALL_APP_ENTITIES'
      | 'ENV'
      | 'SERVICE'
      | 'WORKFLOW'
      | 'PIPELINE'
      | 'DEPLOYMENT'
      | 'APPLICATION_CREATE_DELETE'
      | 'USER_PERMISSION_MANAGEMENT'
      | 'ACCOUNT_MANAGEMENT'
      | 'PROVISIONER'
      | 'TEMPLATE_MANAGEMENT'
      | 'USER_PERMISSION_READ'
      | 'AUDIT_VIEWER'
      | 'TAG_MANAGEMENT'
      | 'CE_ADMIN'
      | 'CE_VIEWER'
      | 'MANAGE_CLOUD_PROVIDERS'
      | 'MANAGE_CONNECTORS'
      | 'MANAGE_APPLICATIONS'
      | 'MANAGE_APPLICATION_STACKS'
      | 'MANAGE_DELEGATES'
      | 'MANAGE_ALERT_NOTIFICATION_RULES'
      | 'MANAGE_DELEGATE_PROFILES'
      | 'MANAGE_CONFIG_AS_CODE'
      | 'MANAGE_SECRETS'
      | 'MANAGE_SECRET_MANAGERS'
      | 'MANAGE_SSH_AND_WINRM'
      | 'MANAGE_AUTHENTICATION_SETTINGS'
      | 'MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'VIEW_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'MANAGE_IP_WHITELIST'
      | 'MANAGE_IP_WHITELISTING'
      | 'MANAGE_DEPLOYMENT_FREEZES'
      | 'MANAGE_PIPELINE_GOVERNANCE_STANDARDS'
      | 'MANAGE_API_KEYS'
      | 'MANAGE_TAGS'
      | 'MANAGE_CUSTOM_DASHBOARDS'
      | 'CREATE_CUSTOM_DASHBOARDS'
      | 'MANAGE_RESTRICTED_ACCESS'
    )[]
  }
  export interface AccountPlugin {
    accountId?: string
    displayName?: string
    enabled?: boolean
    pluginCategories?: (
      | 'Artifact'
      | 'Verification'
      | 'Collaboration'
      | 'CloudProvider'
      | 'ConnectionAttributes'
      | 'LoadBalancer'
      | 'SourceRepo'
      | 'HelmRepo'
      | 'AzureArtifacts'
    )[]
    type?: string
    version?: Version
  }
  export interface AccountPreferences {
    delegateSecretsCacheTTLInHours?: number
  }
  export interface AccountRole {
    accountId?: string
    accountName?: string
    allApps?: boolean
    applicationRoles?: ApplicationRole[]
    resourceAccess?: ImmutablePairResourceTypeAction[]
  }
  export interface AccountSalesContactsInfo {
    salesContacts?: string[]
  }
  export interface AccountSettingsResponse {
    allowedDomains?: string[]
    authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
    oauthProviderTypes?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
  }
  export interface ActiveScope {
    acquiredAt?: number
    permits?: number
    releaseEntityId?: string
    releaseEntityName?: string
    releaseEntityType?: string
    unit?: string
  }
  export interface Activity {
    accountId?: string
    appId: string
    applicationName?: string
    artifactId?: string
    artifactName?: string
    artifactStreamId?: string
    artifactStreamName?: string
    commandName?: string
    commandNameVersionMap?: {
      [key: string]: number
    }
    commandType?: string
    commandUnitType?:
      | 'COMMAND'
      | 'JENKINS'
      | 'GCB'
      | 'HELM'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'PCF_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_UPDATE_LISTENER'
      | 'PCF_RESIZE'
      | 'PCF_MAP_ROUTE'
      | 'PCF_BG_SWAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'KUBERNETES'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'AWS_ECS_UPDATE_LISTENER_BG'
      | 'AWS_ECS_UPDATE_ROUTE_53_DNS_WEIGHT'
      | 'AWS_ECS_SERVICE_SETUP'
      | 'AWS_ECS_RUN_TASK_DEPLOY'
      | 'AWS_ECS_SERVICE_SETUP_ROUTE53'
      | 'AWS_ECS_SERVICE_SETUP_ELB'
      | 'AWS_ECS_SERVICE_SETUP_DAEMON'
      | 'AWS_ECS_SERVICE_ROLLBACK_DAEMON'
      | 'AWS_ECS_SERVICE_DEPLOY'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_SWAP'
      | 'AZURE_APP_SERVICE_SLOT_SETUP'
      | 'AZURE_APP_SERVICE_SLOT_TRAFFIC_SHIFT'
      | 'AZURE_APP_SERVICE_SLOT_SWAP'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
      | 'AZURE_ARM_DEPLOYMENT'
      | 'AZURE_BLUEPRINT_DEPLOYMENT'
      | 'TERRAGRUNT_PROVISION'
    commandUnits: CommandUnit[]
    createdAt?: number
    createdBy?: EmbeddedUser
    environmentId?: string
    environmentName?: string
    environmentType: 'PROD' | 'NON_PROD' | 'ALL'
    hostName?: string
    infrastructureDefinitionId?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    logPurged?: boolean
    pipeline?: boolean
    publicDns?: string
    serviceId?: string
    serviceInstanceId?: string
    serviceName?: string
    serviceTemplateId?: string
    serviceTemplateName?: string
    stateExecutionInstanceId?: string
    stateExecutionInstanceName?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    triggeredBy?: TriggeredBy
    type?: 'Command' | 'Verification' | 'Other'
    uuid: string
    validUntil?: string
    version?: number
    workflowExecutionId?: string
    workflowExecutionName?: string
    workflowId?: string
    workflowType: 'PIPELINE' | 'ORCHESTRATION'
  }
  export type AddOperation = PatchOperation & {
    value?: JsonNode
  }
  export interface AdditionalMetadata {
    values?: {
      [key: string]: {
        [key: string]: any
      }
    }
  }
  export interface AdvancedSearchQuery {
    entities?: string[]
    numResults?: number
    offset?: number
    searchQuery?: string
  }
  export interface Aggregate {
    entityDeleted?: boolean
    entityType?: string
    id?: string
    invocationCount?: number
    invocationCountKey?: 'LAST_30_DAYS' | 'SINCE_LAST_DEPLOYED'
    name?: string
  }
  export interface AggregatedDayStats {
    daysStats?: DayStat[]
    failedCount?: number
    instancesCount?: number
    totalCount?: number
  }
  export interface Aggregation {
    crossSeriesReducer?: string
    groupByFields?: string[]
    perSeriesAligner?: string
  }
  export interface Alert {
    accountId?: string
    alertData?: AlertData
    alertReconciliation?: AlertReconciliation
    appId: string
    category?: 'All' | 'Setup' | 'Approval' | 'ManualIntervention' | 'ContinuousVerification'
    closedAt?: number
    createdAt?: number
    cvCleanUpIteration?: number
    lastTriggeredAt?: number
    lastUpdatedAt: number
    resolutionTitle?: string
    severity?: 'Warning' | 'Error'
    status?: 'Open' | 'Closed' | 'Pending'
    title?: string
    triggerCount?: number
    type?:
      | 'ApprovalNeeded'
      | 'ManualInterventionNeeded'
      | 'NoActiveDelegates'
      | 'NoInstalledDelegates'
      | 'DelegatesDown'
      | 'DelegatesScalingGroupDownAlert'
      | 'DelegateProfileError'
      | 'NoEligibleDelegates'
      | 'PerpetualTaskAlert'
      | 'InvalidKMS'
      | 'GitSyncError'
      | 'GitConnectionError'
      | 'INVALID_SMTP_CONFIGURATION'
      | 'EMAIL_NOT_SENT_ALERT'
      | 'USERGROUP_SYNC_FAILED'
      | 'USAGE_LIMIT_EXCEEDED'
      | 'INSTANCE_USAGE_APPROACHING_LIMIT'
      | 'RESOURCE_USAGE_APPROACHING_LIMIT'
      | 'DEPLOYMENT_RATE_APPROACHING_LIMIT'
      | 'SETTING_ATTRIBUTE_VALIDATION_FAILED'
      | 'ARTIFACT_COLLECTION_FAILED'
      | 'CONTINUOUS_VERIFICATION_ALERT'
      | 'CONTINUOUS_VERIFICATION_DATA_COLLECTION_ALERT'
      | 'MANIFEST_COLLECTION_FAILED'
      | 'DEPLOYMENT_FREEZE_EVENT'
    uuid: string
    validUntil?: string
  }
  export interface AlertData {
    [key: string]: any
  }
  export interface AlertFilter {
    alertType?:
      | 'ApprovalNeeded'
      | 'ManualInterventionNeeded'
      | 'NoActiveDelegates'
      | 'NoInstalledDelegates'
      | 'DelegatesDown'
      | 'DelegatesScalingGroupDownAlert'
      | 'DelegateProfileError'
      | 'NoEligibleDelegates'
      | 'PerpetualTaskAlert'
      | 'InvalidKMS'
      | 'GitSyncError'
      | 'GitConnectionError'
      | 'INVALID_SMTP_CONFIGURATION'
      | 'EMAIL_NOT_SENT_ALERT'
      | 'USERGROUP_SYNC_FAILED'
      | 'USAGE_LIMIT_EXCEEDED'
      | 'INSTANCE_USAGE_APPROACHING_LIMIT'
      | 'RESOURCE_USAGE_APPROACHING_LIMIT'
      | 'DEPLOYMENT_RATE_APPROACHING_LIMIT'
      | 'SETTING_ATTRIBUTE_VALIDATION_FAILED'
      | 'ARTIFACT_COLLECTION_FAILED'
      | 'CONTINUOUS_VERIFICATION_ALERT'
      | 'CONTINUOUS_VERIFICATION_DATA_COLLECTION_ALERT'
      | 'MANIFEST_COLLECTION_FAILED'
      | 'DEPLOYMENT_FREEZE_EVENT'
    conditions?: Conditions
  }
  export interface AlertNotificationRule {
    accountId?: string
    alertCategory?: 'All' | 'Setup' | 'Approval' | 'ManualIntervention' | 'ContinuousVerification'
    alertFilter?: AlertFilter
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    default?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    userGroupsToNotify?: string[]
    uuid: string
  }
  export interface AlertReconciliation {
    needed?: boolean
    nextIteration?: number
  }
  export interface AlertRiskDetail {
    metricName?: string
    txnName?: string
  }
  export interface AlertThreshold {
    alertsSent?: number
    basedOn?: 'ACTUAL_COST' | 'FORECASTED_COST'
    crossedAt?: number
    emailAddresses?: string[]
    percentage?: number
    slackWebhooks?: string[]
    userGroupIds?: string[]
  }
  export interface AlertType {
    alertType?:
      | 'ApprovalNeeded'
      | 'ManualInterventionNeeded'
      | 'NoActiveDelegates'
      | 'NoInstalledDelegates'
      | 'DelegatesDown'
      | 'DelegatesScalingGroupDownAlert'
      | 'DelegateProfileError'
      | 'NoEligibleDelegates'
      | 'PerpetualTaskAlert'
      | 'InvalidKMS'
      | 'GitSyncError'
      | 'GitConnectionError'
      | 'INVALID_SMTP_CONFIGURATION'
      | 'EMAIL_NOT_SENT_ALERT'
      | 'USERGROUP_SYNC_FAILED'
      | 'USAGE_LIMIT_EXCEEDED'
      | 'INSTANCE_USAGE_APPROACHING_LIMIT'
      | 'RESOURCE_USAGE_APPROACHING_LIMIT'
      | 'DEPLOYMENT_RATE_APPROACHING_LIMIT'
      | 'SETTING_ATTRIBUTE_VALIDATION_FAILED'
      | 'ARTIFACT_COLLECTION_FAILED'
      | 'CONTINUOUS_VERIFICATION_ALERT'
      | 'CONTINUOUS_VERIFICATION_DATA_COLLECTION_ALERT'
      | 'MANIFEST_COLLECTION_FAILED'
      | 'DEPLOYMENT_FREEZE_EVENT'
    category?: 'All' | 'Setup' | 'Approval' | 'ManualIntervention' | 'ContinuousVerification'
    severity?: 'Warning' | 'Error'
  }
  export type AllAppFilter = ApplicationFilter & {}
  export type AllEnvFilter = EnvironmentFilter & {}
  export type AllNonProdEnvFilter = EnvironmentFilter & {}
  export type AllProdEnvFilter = EnvironmentFilter & {}
  export interface ApiKeyAuditDetails {
    apiKeyId?: string
    apiKeyName?: string
  }
  export interface ApiKeyEntry {
    accountId?: string
    createdAt?: number
    decryptedKey?: string
    encryptedKey?: string[]
    hashOfKey?: string
    name?: string
    sha256Hash?: string
    userGroupIds?: string[]
    userGroups?: UserGroup[]
    uuid?: string
  }
  export interface ApiKeyInfo {
    apiKeyName?: string
    appKeyId?: string
  }
  export interface AppContainer {
    accountId?: string
    appId: string
    checksum?: string
    checksumType?: 'MD5' | 'SHA1' | 'SHA256'
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    family?: 'TOMCAT' | 'JBOSS'
    fileName?: string
    fileType?: 'ZIP' | 'TAR_GZ' | 'TAR_BZ' | 'TAR' | 'UNKNOWN'
    fileUuid?: string
    hardened?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    mimeType?: string
    name?: string
    size?: number
    stackRootDirectory?: string
    standard?: boolean
    standardUpload?: boolean
    systemCreated?: boolean
    uuid: string
    version?: string
  }
  export type AppDynamicsConnectorDTO = ConnectorConfigDTO & {
    accountname: string
    authType?: 'UsernamePassword' | 'ApiClientToken'
    clientId?: string
    clientSecretRef?: string
    controllerUrl: string
    delegateSelectors?: string[]
    passwordRef?: string
    username?: string
  }
  export interface AppEnvRestriction {
    appFilter?: GenericEntityFilter
    envFilter?: EnvFilter
  }
  export interface AppPermission {
    actions?: (
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    )[]
    appFilter?: GenericEntityFilter
    entityFilter?: Filter
    permissionType?:
      | 'ACCOUNT'
      | 'LOGGED_IN'
      | 'DELEGATE'
      | 'NONE'
      | 'APP'
      | 'ALL_APP_ENTITIES'
      | 'ENV'
      | 'SERVICE'
      | 'WORKFLOW'
      | 'PIPELINE'
      | 'DEPLOYMENT'
      | 'APPLICATION_CREATE_DELETE'
      | 'USER_PERMISSION_MANAGEMENT'
      | 'ACCOUNT_MANAGEMENT'
      | 'PROVISIONER'
      | 'TEMPLATE_MANAGEMENT'
      | 'USER_PERMISSION_READ'
      | 'AUDIT_VIEWER'
      | 'TAG_MANAGEMENT'
      | 'CE_ADMIN'
      | 'CE_VIEWER'
      | 'MANAGE_CLOUD_PROVIDERS'
      | 'MANAGE_CONNECTORS'
      | 'MANAGE_APPLICATIONS'
      | 'MANAGE_APPLICATION_STACKS'
      | 'MANAGE_DELEGATES'
      | 'MANAGE_ALERT_NOTIFICATION_RULES'
      | 'MANAGE_DELEGATE_PROFILES'
      | 'MANAGE_CONFIG_AS_CODE'
      | 'MANAGE_SECRETS'
      | 'MANAGE_SECRET_MANAGERS'
      | 'MANAGE_SSH_AND_WINRM'
      | 'MANAGE_AUTHENTICATION_SETTINGS'
      | 'MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'VIEW_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'MANAGE_IP_WHITELIST'
      | 'MANAGE_IP_WHITELISTING'
      | 'MANAGE_DEPLOYMENT_FREEZES'
      | 'MANAGE_PIPELINE_GOVERNANCE_STANDARDS'
      | 'MANAGE_API_KEYS'
      | 'MANAGE_TAGS'
      | 'MANAGE_CUSTOM_DASHBOARDS'
      | 'CREATE_CUSTOM_DASHBOARDS'
      | 'MANAGE_RESTRICTED_ACCESS'
  }
  export interface AppPermissionSummaryForUI {
    canCreateEnvironment?: boolean
    canCreatePipeline?: boolean
    canCreateProvisioner?: boolean
    canCreateService?: boolean
    canCreateWorkflow?: boolean
    deploymentPermissions?: {
      [key: string]: (
        | 'ALL'
        | 'CREATE'
        | 'READ'
        | 'UPDATE'
        | 'DELETE'
        | 'EXECUTE'
        | 'EXECUTE_WORKFLOW'
        | 'EXECUTE_PIPELINE'
        | 'EXECUTE_WORKFLOW_ROLLBACK'
        | 'DEFAULT'
      )[]
    }
    envPermissions?: {
      [key: string]: (
        | 'ALL'
        | 'CREATE'
        | 'READ'
        | 'UPDATE'
        | 'DELETE'
        | 'EXECUTE'
        | 'EXECUTE_WORKFLOW'
        | 'EXECUTE_PIPELINE'
        | 'EXECUTE_WORKFLOW_ROLLBACK'
        | 'DEFAULT'
      )[]
    }
    pipelinePermissions?: {
      [key: string]: (
        | 'ALL'
        | 'CREATE'
        | 'READ'
        | 'UPDATE'
        | 'DELETE'
        | 'EXECUTE'
        | 'EXECUTE_WORKFLOW'
        | 'EXECUTE_PIPELINE'
        | 'EXECUTE_WORKFLOW_ROLLBACK'
        | 'DEFAULT'
      )[]
    }
    provisionerPermissions?: {
      [key: string]: (
        | 'ALL'
        | 'CREATE'
        | 'READ'
        | 'UPDATE'
        | 'DELETE'
        | 'EXECUTE'
        | 'EXECUTE_WORKFLOW'
        | 'EXECUTE_PIPELINE'
        | 'EXECUTE_WORKFLOW_ROLLBACK'
        | 'DEFAULT'
      )[]
    }
    servicePermissions?: {
      [key: string]: (
        | 'ALL'
        | 'CREATE'
        | 'READ'
        | 'UPDATE'
        | 'DELETE'
        | 'EXECUTE'
        | 'EXECUTE_WORKFLOW'
        | 'EXECUTE_PIPELINE'
        | 'EXECUTE_WORKFLOW_ROLLBACK'
        | 'DEFAULT'
      )[]
    }
    workflowPermissions?: {
      [key: string]: (
        | 'ALL'
        | 'CREATE'
        | 'READ'
        | 'UPDATE'
        | 'DELETE'
        | 'EXECUTE'
        | 'EXECUTE_WORKFLOW'
        | 'EXECUTE_PIPELINE'
        | 'EXECUTE_WORKFLOW_ROLLBACK'
        | 'DEFAULT'
      )[]
    }
  }
  export interface AppRestrictionsSummary {
    application?: EntityReference
    environments?: EntityReference[]
    hasAllNonProdEnvAccess?: boolean
    hasAllProdEnvAccess?: boolean
  }
  export interface AppdynamicsSetupTestNodeData {
    appId: string
    applicationId?: number
    fromTime?: number
    guid?: string
    hostExpression?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    tierId?: number
    toTime?: number
    workflowId?: string
  }
  export interface AppdynamicsTier {
    agentType?: string
    dependencyPath?: string
    description?: string
    externalTiers?: AppdynamicsTier[]
    id?: number
    name?: string
    type?: string
  }
  export interface Application {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    defaults?: {
      [key: string]: string
    }
    description?: string
    environments?: Environment[]
    isManualTriggerAuthorized?: boolean
    keywords?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    nextDeploymentOn?: number
    notifications?: Notification[]
    recentExecutions?: WorkflowExecution[]
    sample?: boolean
    services?: Service[]
    setup?: Setup
    tagLinks?: HarnessTagLink[]
    uuid: string
    yamlGitConfig?: YamlGitConfig
  }
  export interface ApplicationAuditFilter {
    appIds?: string[]
    resourceIds?: string[]
    resourceTypes?: string[]
  }
  export type ApplicationBudgetScope = BudgetScope & {
    applicationIds?: string[]
    environmentType?: 'PROD' | 'NON_PROD' | 'ALL'
  }
  export interface ApplicationFilter {
    envSelection?: EnvironmentFilter
    filterType?: 'ALL' | 'CUSTOM'
  }
  export interface ApplicationManifest {
    accountId?: string
    appId: string
    collectionStatus?: 'UNSTABLE' | 'COLLECTING' | 'STABLE'
    createdAt?: number
    createdBy?: EmbeddedUser
    customSourceConfig?: CustomSourceConfig
    envId?: string
    failedAttempts?: number
    gitFileConfig?: GitFileConfig
    helmChartConfig?: HelmChartConfig
    helmCommandFlag?: HelmCommandFlagConfig
    helmValuesYamlFilePaths?: string
    kind?:
      | 'VALUES'
      | 'K8S_MANIFEST'
      | 'PCF_OVERRIDE'
      | 'AZURE_APP_SERVICE_MANIFEST'
      | 'AZURE_APP_SETTINGS_OVERRIDE'
      | 'AZURE_CONN_STRINGS_OVERRIDE'
      | 'HELM_CHART_OVERRIDE'
      | 'OC_PARAMS'
    kustomizeConfig?: KustomizeConfig
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    perpetualTaskId?: string
    pollForChanges?: boolean
    serviceId?: string
    serviceName?: string
    skipVersioningForAllK8sObjects?: boolean
    storeType?:
      | 'Local'
      | 'Remote'
      | 'HelmSourceRepo'
      | 'HelmChartRepo'
      | 'KustomizeSourceRepo'
      | 'OC_TEMPLATES'
      | 'CUSTOM'
      | 'CUSTOM_OPENSHIFT_TEMPLATE'
      | 'VALUES_YAML_FROM_HELM_REPO'
    uuid: string
    validationMessage?: string
  }
  export interface ApplicationManifestSummary {
    appManifestId?: string
    defaultManifest?: ManifestSummary
    lastCollectedManifest?: ManifestSummary
    settingId?: string
  }
  export interface ApplicationRole {
    allEnvironments?: boolean
    appId?: string
    appName?: string
    environmentRoles?: EnvironmentRole[]
    resourceAccess?: ImmutablePairResourceTypeAction[]
  }
  export interface ApprovalAuthorization {
    authorized?: boolean
  }
  export interface ApprovalDetails {
    action?: 'APPROVE' | 'REJECT'
    approvalFromSlack?: boolean
    approvalId?: string
    approvedBy?: EmbeddedUser
    comments?: string
    variables?: NameValuePair[]
  }
  export interface Artifact {
    accountId?: string
    appId: string
    artifactFileMetadata?: ArtifactFileMetadata[]
    artifactFileSize?: number
    artifactFiles?: ArtifactFile[]
    artifactPath?: string
    artifactSourceName?: string
    artifactStreamId?: string
    artifactStreamName?: string
    artifactStreamType?: string
    bucketName?: string
    buildFullDisplayName?: string
    buildIdentity?: string
    buildNo?: string
    contentStatus?: 'METADATA_ONLY' | 'NOT_DOWNLOADED' | 'DOWNLOADING' | 'DOWNLOADED' | 'DELETED' | 'FAILED'
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    displayName?: string
    duplicate?: boolean
    errorMessage?: string
    fileName?: string
    key?: string
    labels?: {
      [key: string]: string
    }
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    metadata?: {
      [key: string]: string
    }
    revision?: string
    serviceIds?: string[]
    services?: Service[]
    settingId?: string
    source?: {
      [key: string]: string
    }
    status?:
      | 'NEW'
      | 'RUNNING'
      | 'QUEUED'
      | 'WAITING'
      | 'READY'
      | 'APPROVED'
      | 'REJECTED'
      | 'ABORTED'
      | 'FAILED'
      | 'ERROR'
    uiDisplayName?: string
    url?: string
    uuid: string
  }
  export interface ArtifactFile {
    accountId?: string
    appId: string
    checksum?: string
    checksumType?: 'MD5' | 'SHA1' | 'SHA256'
    createdAt?: number
    createdBy?: EmbeddedUser
    fileName?: string
    fileUuid?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    mimeType?: string
    name?: string
    size?: number
    uuid: string
  }
  export interface ArtifactFileMetadata {
    fileName?: string
    url?: string
  }
  export interface ArtifactSelection {
    artifactFilter?: string
    artifactSourceName?: string
    artifactStreamId?: string
    pipelineId?: string
    pipelineName?: string
    regex?: boolean
    serviceId?: string
    serviceName?: string
    type?: 'ARTIFACT_SOURCE' | 'LAST_COLLECTED' | 'LAST_DEPLOYED' | 'PIPELINE_SOURCE' | 'WEBHOOK_VARIABLE'
    uiDisplayName?: string
    workflowId?: string
    workflowName?: string
  }
  export interface ArtifactSource {
    [key: string]: any
  }
  export type ArtifactSourceTemplate = BaseTemplate & {
    artifactSource?: ArtifactSource
  }
  export interface ArtifactStream {
    accountId?: string
    appId: string
    artifactCount?: number
    artifactServerName?: string
    artifactStreamId?: string
    artifactStreamParameterized?: boolean
    artifactStreamType?: string
    artifacts?: ArtifactSummary[]
    autoApproveForProduction?: boolean
    autoDownload?: boolean
    autoPopulate?: boolean
    collectionStatus?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    failedCronAttempts?: number
    keywords?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    metadataOnly?: boolean
    name?: string
    nextCleanupIteration?: number
    nextIteration?: number
    perpetualTaskId?: string
    sample?: boolean
    service?: Service
    serviceId?: string
    settingId?: string
    sourceName?: string
    templateUuid?: string
    templateVariables?: Variable[]
    templateVersion?: string
    uuid: string
  }
  export interface ArtifactStreamBinding {
    artifactStreams?: ArtifactStreamSummary[]
    name?: string
  }
  export interface ArtifactStreamMetadata {
    artifactStreamId?: string
    runtimeValues?: {
      [key: string]: {
        [key: string]: any
      }
    }
  }
  export interface ArtifactStreamSummary {
    artifactStreamId?: string
    defaultArtifact?: ArtifactSummary
    displayName?: string
    lastCollectedArtifact?: string
    name?: string
    settingId?: string
  }
  export interface ArtifactSummary {
    buildNo?: string
    uiDisplayName?: string
    uuid?: string
  }
  export type ArtifactTriggerCondition = TriggerCondition & {
    artifactFilter?: string
    artifactSourceName?: string
    artifactStreamId?: string
    regex?: boolean
  }
  export interface ArtifactVariable {
    allowMultipleValues?: boolean
    allowedList?: string[]
    allowedValues?: string
    artifactStreamMetadata?: ArtifactStreamMetadata
    artifactStreamSummaries?: ArtifactStreamSummary[]
    description?: string
    displayInfo?: {
      [key: string]: string[]
    }
    entityId?: string
    entityType?:
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    fixed?: boolean
    lastDeployedArtifactInfo?: LastDeployedArtifactInformation
    mandatory?: boolean
    metadata?: {
      [key: string]: {
        [key: string]: any
      }
    }
    name?: string
    overriddenArtifactVariables?: ArtifactVariable[]
    runtimeInput?: boolean
    type?: 'TEXT' | 'NUMBER' | 'EMAIL' | 'ENTITY' | 'ARTIFACT' | 'MANIFEST'
    uiDisplayName?: string
    value?: string
    workflowIds?: string[]
  }
  export interface ArtifactoryAuthCredentials {
    [key: string]: any
  }
  export interface ArtifactoryAuthentication {
    spec?: ArtifactoryAuthCredentials
    type: 'UsernamePassword' | 'Anonymous'
  }
  export type ArtifactoryConnector = ConnectorConfigDTO & {
    artifactoryServerUrl: string
    auth?: ArtifactoryAuthentication
    delegateSelectors?: string[]
  }
  export type ArtifactoryUsernamePasswordAuth = ArtifactoryAuthCredentials & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export interface AtomicInteger {
    andDecrement?: number
    andIncrement?: number
  }
  export interface AttributeMapping {
    mappedAttribute?: string
    relativePath?: string
  }
  export interface AuditHeader {
    accountId?: string
    apiKeyAuditDetails?: ApiKeyAuditDetails
    appId: string
    application?: Application
    component?: Service
    createdAt?: number
    createdBy?: EmbeddedUser
    details?: {
      [key: string]: {
        [key: string]: any
      }
    }
    entityAuditRecords?: EntityAuditRecord[]
    environment?: Environment
    errorCode?: string
    failureStatusMsg?: string
    gitAuditDetails?: GitAuditDetails
    headerString?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    localHostName?: string
    localIpAddress?: string
    queryParams?: string
    remoteHostName?: string
    remoteHostPort?: number
    remoteIpAddress?: string
    remoteUser?: User
    requestMethod?: 'OPTIONS' | 'HEAD' | 'GET' | 'PATCH' | 'POST' | 'PUT' | 'DELETE'
    requestPayloadUuid?: string
    requestTime?: number
    resourcePath?: string
    responsePayloadUuid?: string
    responseStatusCode?: number
    responseTime?: number
    responseType?: 'SUCCESS' | 'FAILED' | 'COMPLETED_WITH_ERRORS'
    url?: string
    uuid: string
  }
  export interface AuditHeaderYamlResponse {
    auditHeaderId?: string
    entityId?: string
    newYaml?: string
    newYamlPath?: string
    oldYaml?: string
    oldYamlPath?: string
  }
  export type AuditPreference = Preference & {
    accountAuditFilter?: AccountAuditFilter
    applicationAuditFilter?: ApplicationAuditFilter
    createdByUserIds?: string[]
    endTime?: string
    includeAccountLevelResources?: boolean
    includeAppLevelResources?: boolean
    lastNDays?: number
    operationTypes?: string[]
    startTime?: string
  }
  export interface AuditPreferenceResponse {
    auditPreferences?: AuditPreference[]
    resourceLookupMap?: {
      [key: string]: ResourceLookup
    }
  }
  export type AwsAmiInfrastructure = InfraMappingInfrastructureProvider & {
    amiDeploymentType?: 'AWS_ASG' | 'SPOTINST'
    asgIdentifiesWorkload?: boolean
    autoScalingGroupName?: string
    classicLoadBalancers?: string[]
    expressions?: {
      [key: string]: string
    }
    hostNameConvention?: string
    region?: string
    spotinstCloudProvider?: string
    spotinstElastiGroupJson?: string
    stageClassicLoadBalancers?: string[]
    stageTargetGroupArns?: string[]
    targetGroupArns?: string[]
    useTrafficShift?: boolean
  }
  export interface AwsAsgGetRunningCountData {
    asgDesired?: number
    asgMax?: number
    asgMin?: number
    asgName?: string
  }
  export interface AwsCFTemplateParamsData {
    defaultValue?: string
    paramKey?: string
    paramType?: string
  }
  export interface AwsCodeCommitAuthenticationDTO {
    spec: AwsCodeCommitCredentialsDTO
    type: 'HTTPS'
  }
  export type AwsCodeCommitConnectorDTO = ConnectorConfigDTO & {
    authentication: AwsCodeCommitAuthenticationDTO
    delegateSelectors?: string[]
    type: 'Repo' | 'Region'
    url: string
  }
  export interface AwsCodeCommitCredentialsDTO {
    [key: string]: any
  }
  export type AwsCodeCommitHttpsCredentialsDTO = AwsCodeCommitCredentialsDTO & {
    spec: AwsCodeCommitHttpsCredentialsSpecDTO
    type: 'AWSCredentials'
  }
  export interface AwsCodeCommitHttpsCredentialsSpecDTO {
    [key: string]: any
  }
  export type AwsCodeCommitSecretKeyAccessKeyDTO = AwsCodeCommitHttpsCredentialsSpecDTO & {
    accessKey?: string
    accessKeyRef?: string
    secretKeyRef: string
  }
  export type AwsConnector = ConnectorConfigDTO & {
    credential: AwsCredential
    delegateSelectors?: string[]
  }
  export interface AwsCredential {
    crossAccountAccess?: CrossAccountAccess
    spec?: AwsCredentialSpec
    type: 'InheritFromDelegate' | 'ManualConfig'
  }
  export interface AwsCredentialSpec {
    [key: string]: any
  }
  export interface AwsCurAttributes {
    region?: string
    reportName: string
    s3BucketName: string
    s3Prefix?: string
  }
  export type AwsEcsInfrastructure = InfraMappingInfrastructureProvider & {
    assignPublicIp?: boolean
    clusterName?: string
    executionRole?: string
    expressions?: {
      [key: string]: string
    }
    launchType?: string
    region?: string
    securityGroupIds?: string[]
    subnetIds?: string[]
    vpcId?: string
  }
  export interface AwsElbListener {
    listenerArn?: string
    loadBalancerArn?: string
    port?: number
    protocol?: string
    rules?: AwsElbListenerRuleData[]
  }
  export interface AwsElbListenerRuleData {
    default?: boolean
    ruleArn?: string
    rulePriority?: string
    ruleTargetGroupArn?: string
  }
  export interface AwsInstanceFilter {
    tags?: Tag[]
    vpcIds?: string[]
  }
  export type AwsInstanceInfrastructure = InfraMappingInfrastructureProvider & {
    autoScalingGroupName?: string
    awsInstanceFilter?: AwsInstanceFilter
    desiredCapacity?: number
    expressions?: {
      [key: string]: string
    }
    hostConnectionAttrs?: string
    hostConnectionType?: string
    hostNameConvention?: string
    loadBalancerId?: string
    loadBalancerName?: string
    provisionInstances?: boolean
    region?: string
    setDesiredCapacity?: boolean
    usePublicDns?: boolean
  }
  export interface AwsKmsConnectorCredential {
    spec?: AwsKmsCredentialSpec
    type: 'AssumeIAMRole' | 'AssumeSTSRole' | 'ManualConfig'
  }
  export type AwsKmsConnectorDTO = ConnectorConfigDTO & {
    credential?: AwsKmsConnectorCredential
    default?: boolean
    delegateSelectors?: string[]
    kmsArn: string
    region?: string
  }
  export interface AwsKmsCredentialSpec {
    [key: string]: any
  }
  export type AwsKmsCredentialSpecAssumeIAM = AwsKmsCredentialSpec & {
    delegateSelectors: string[]
  }
  export type AwsKmsCredentialSpecAssumeSTS = AwsKmsCredentialSpec & {
    assumeStsRoleDuration?: number
    delegateSelectors: string[]
    externalName?: string
    roleArn: string
  }
  export type AwsKmsCredentialSpecManualConfig = AwsKmsCredentialSpec & {
    accessKey: string
    secretKey: string
  }
  export interface AwsLambdaExecutionSummary {
    functionMeta?: FunctionMeta
    success?: boolean
  }
  export type AwsLambdaInfrastructure = InfraMappingInfrastructureProvider & {
    expressions?: {
      [key: string]: string
    }
    region?: string
    role?: string
    securityGroupIds?: string[]
    subnetIds?: string[]
    vpcId?: string
  }
  export interface AwsLambdaInstanceKey {
    functionName?: string
    functionVersion?: string
  }
  export interface AwsLoadBalancerDetails {
    arn?: string
    dnsname?: string
    ipAddressType?: string
    name?: string
    scheme?: string
    type?: string
    vpcId?: string
  }
  export type AwsManualConfigSpec = AwsCredentialSpec & {
    accessKey?: string
    accessKeyRef?: string
    secretKeyRef: string
  }
  export interface AwsRoute53HostedZoneData {
    hostedZoneId?: string
    hostedZoneName?: string
  }
  export interface AwsSecretsManagerConfig {
    accessKey?: string
    accountId?: string
    assumeIamRoleOnDelegate?: boolean
    assumeStsRoleDuration?: number
    assumeStsRoleOnDelegate?: boolean
    createdAt?: number
    createdBy?: EmbeddedUser
    default?: boolean
    delegateSelectors?: string[]
    encryptedBy?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    externalName?: string
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    manuallyEnteredSecretEngineMigrationIteration?: number
    name?: string
    nextTokenRenewIteration?: number
    numOfEncryptedValue?: number
    region?: string
    roleArn?: string
    scopedToAccount?: boolean
    secretKey?: string
    secretNamePrefix?: string
    templatized?: boolean
    templatizedFields?: string[]
    usageRestrictions?: UsageRestrictions
    uuid: string
  }
  export interface AwsSecurityGroup {
    id?: string
    name?: string
  }
  export interface AwsSubnet {
    id?: string
    name?: string
  }
  export interface AwsVPC {
    id?: string
    name?: string
  }
  export interface AzureAppDeploymentData {
    appName?: string
    appServicePlanId?: string
    deploySlot?: string
    deploySlotId?: string
    hostName?: string
    instanceId?: string
    instanceIp?: string
    instanceName?: string
    instanceState?: string
    instanceType?: string
    resourceGroup?: string
    subscriptionId?: string
  }
  export interface AzureArtifactsFeed {
    fullyQualifiedName?: string
    id?: string
    name?: string
    project?: AzureDevopsProject
  }
  export interface AzureArtifactsPackage {
    id?: string
    name?: string
    protocolType?: string
  }
  export interface AzureContainerRegistry {
    loginServer?: string
    name?: string
    resourceGroup?: string
    resourceId?: string
    subscriptionId?: string
    type?: string
  }
  export interface AzureDevopsProject {
    id?: string
    name?: string
  }
  export interface AzureImageDefinition {
    galleryName?: string
    location?: string
    name?: string
    osType?: string
    resourceGroupName?: string
    subscriptionId?: string
  }
  export interface AzureImageGallery {
    name?: string
    regionName?: string
    resourceGroupName?: string
    subscriptionId?: string
  }
  export type AzureInstanceInfrastructure = InfraMappingInfrastructureProvider & {
    hostConnectionAttrs?: string
    resourceGroup?: string
    subscriptionId?: string
    tags?: AzureTag[]
    usePublicDns?: boolean
    winRmConnectionAttributes?: string
  }
  export type AzureKeyVaultConnectorDTO = ConnectorConfigDTO & {
    azureEnvironmentType?: 'AZURE' | 'AZURE_US_GOVERNMENT'
    clientId: string
    default?: boolean
    delegateSelectors?: string[]
    secretKey: string
    subscription: string
    tenantId: string
    vaultName: string
  }
  export type AzureKubernetesCluster = Cluster & {
    resourceGroup?: string
    subscriptionId?: string
  }
  export type AzureKubernetesService = InfraMappingInfrastructureProvider & {
    clusterName?: string
    namespace?: string
    releaseName?: string
    resourceGroup?: string
    subscriptionId?: string
  }
  export interface AzureResourceGroup {
    name?: string
    subscriptionId?: string
  }
  export interface AzureTag {
    key?: string
    value?: string
  }
  export interface AzureVMInstanceData {
    instanceId?: string
    privateDnsName?: string
    privateIpAddress?: string
    publicDnsName?: string
  }
  export type AzureVMSSInfra = InfraMappingInfrastructureProvider & {
    baseVMSSName?: string
    hostConnectionAttrs?: string
    passwordSecretTextName?: string
    resourceGroupName?: string
    subscriptionId?: string
    userName?: string
    vmssAuthType?: 'PASSWORD' | 'SSH_PUBLIC_KEY'
    vmssDeploymentType?: 'NATIVE_VMSS' | 'SPOTINST'
  }
  export interface AzureVaultConfig {
    accountId?: string
    azureEnvironmentType?: 'AZURE' | 'AZURE_US_GOVERNMENT'
    clientId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    default?: boolean
    delegateSelectors?: string[]
    encryptedBy?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    manuallyEnteredSecretEngineMigrationIteration?: number
    name?: string
    nextTokenRenewIteration?: number
    numOfEncryptedValue?: number
    scopedToAccount?: boolean
    secretKey?: string
    subscription?: string
    templatized?: boolean
    templatizedFields?: string[]
    tenantId?: string
    usageRestrictions?: UsageRestrictions
    uuid: string
    vaultName?: string
  }
  export type AzureWebAppInfra = InfraMappingInfrastructureProvider & {
    expressions?: {
      [key: string]: string
    }
    resourceGroup?: string
    subscriptionId?: string
  }
  export interface Bar {
    count?: number
    timestamp?: number
  }
  export interface Base {
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    uuid: string
  }
  export interface BaseTemplate {
    [key: string]: any
  }
  export type BasicOrchestrationWorkflow = OrchestrationWorkflow & {
    derivedVariables?: Variable[]
    failureStrategies?: FailureStrategy[]
    graph?: Graph
    postDeploymentSteps?: PhaseStep
    preDeploymentSteps?: PhaseStep
    rollbackProvisioners?: PhaseStep
    rollbackWorkflowPhaseIdMap?: {
      [key: string]: WorkflowPhase
    }
    systemVariables?: Variable[]
    workflowPhases?: WorkflowPhase[]
  }
  export interface BillingExportSpec {
    containerName: string
    directoryName: string
    reportName: string
    storageAccountName: string
    subscriptionId: string
  }
  export interface BitbucketApiAccess {
    spec: BitbucketApiAccessSpecDTO
    type: 'UsernameToken'
  }
  export interface BitbucketApiAccessSpecDTO {
    [key: string]: any
  }
  export interface BitbucketAuthentication {
    spec: BitbucketCredentialsDTO
    type: 'Http' | 'Ssh'
  }
  export type BitbucketConnector = ConnectorConfigDTO & {
    apiAccess?: BitbucketApiAccess
    authentication: BitbucketAuthentication
    delegateSelectors?: string[]
    type: 'Account' | 'Repo'
    url: string
    validationRepo?: string
  }
  export interface BitbucketCredentialsDTO {
    [key: string]: any
  }
  export type BitbucketHttpCredentials = BitbucketCredentialsDTO & {
    spec: BitbucketHttpCredentialsSpecDTO
    type: 'UsernamePassword'
  }
  export interface BitbucketHttpCredentialsSpecDTO {
    [key: string]: any
  }
  export type BitbucketSshCredentials = BitbucketCredentialsDTO & {
    sshKeyRef: string
  }
  export type BitbucketUsernamePassword = BitbucketHttpCredentialsSpecDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export type BitbucketUsernameTokenApiAccess = BitbucketApiAccessSpecDTO & {
    tokenRef: string
    username?: string
    usernameRef?: string
  }
  export type BlueGreenOrchestrationWorkflow = OrchestrationWorkflow & {
    derivedVariables?: Variable[]
    failureStrategies?: FailureStrategy[]
    graph?: Graph
    postDeploymentSteps?: PhaseStep
    preDeploymentSteps?: PhaseStep
    rollbackProvisioners?: PhaseStep
    rollbackWorkflowPhaseIdMap?: {
      [key: string]: WorkflowPhase
    }
    systemVariables?: Variable[]
    workflowPhases?: WorkflowPhase[]
  }
  export interface BlueprintProperty {
    fields?: NameValuePair[]
    name?: string
    value: string
    valueType?: string
  }
  export interface Budget {
    accountId?: string
    actualCost?: number
    alertThresholds?: AlertThreshold[]
    budgetAmount?: number
    createdAt?: number
    emailAddresses?: string[]
    forecastCost?: number
    lastMonthCost?: number
    lastUpdatedAt?: number
    name?: string
    notifyOnSlack?: boolean
    scope?: BudgetScope
    type?: 'SPECIFIED_AMOUNT' | 'PREVIOUS_MONTH_SPEND'
    userGroupIds?: string[]
    uuid?: string
  }
  export interface BudgetScope {
    budgetScopeType?: string
    entityIds?: string[]
    entityNames?: string[]
  }
  export interface BugsnagApplication {
    id?: string
    name?: string
  }
  export interface BugsnagSetupTestData {
    appId: string
    browserApplication?: boolean
    fromTime?: number
    guid?: string
    hostExpression?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    orgId?: string
    projectId?: string
    query?: string
    releaseStage?: string
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    toTime?: number
    workflowId?: string
  }
  export interface BuildDetails {
    artifactFileMetadataList?: ArtifactFileMetadata[]
    artifactFileSize?: string
    artifactPath?: string
    buildDisplayName?: string
    buildFullDisplayName?: string
    buildParameters?: {
      [key: string]: string
    }
    buildUrl?: string
    description?: string
    labels?: {
      [key: string]: string
    }
    metadata?: {
      [key: string]: string
    }
    number?: string
    revision?: string
    status?: 'FAILURE' | 'UNSTABLE' | 'SUCCESS'
    uiDisplayName?: string
  }
  export interface BuildExecutionSummary {
    artifactSource?: string
    artifactStreamId?: string
    buildName?: string
    buildUrl?: string
    metadata?: string
    revision?: string
  }
  export type BuildWorkflow = OrchestrationWorkflow & {
    derivedVariables?: Variable[]
    failureStrategies?: FailureStrategy[]
    graph?: Graph
    postDeploymentSteps?: PhaseStep
    preDeploymentSteps?: PhaseStep
    rollbackProvisioners?: PhaseStep
    rollbackWorkflowPhaseIdMap?: {
      [key: string]: WorkflowPhase
    }
    systemVariables?: Variable[]
    workflowPhases?: WorkflowPhase[]
  }
  export type CDModuleLicenseDTO = ModuleLicenseDTO & {
    deploymentsPerDay?: number
    workloads?: number
  }
  export type CEAwsConnector = ConnectorConfigDTO & {
    awsAccountId?: string
    crossAccountAccess: CrossAccountAccess
    curAttributes?: AwsCurAttributes
    featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  }
  export type CEAzureConnector = ConnectorConfigDTO & {
    billingExportSpec?: BillingExportSpec
    featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
    subscriptionId: string
    tenantId: string
  }
  export interface CECommunications {
    accountId?: string
    createdAt?: number
    emailId?: string
    enabled?: boolean
    lastUpdatedAt?: number
    selfEnabled?: boolean
    type?: 'WEEKLY_REPORT'
    uuid?: string
  }
  export interface CEDelegateStatus {
    ceEnabled?: boolean
    connections?: DelegateConnectionDetails[]
    delegateName?: string
    delegateType?: string
    found?: boolean
    lastHeartBeat?: number
    metricsServerCheck?: MetricsServerCheck
    permissionRuleList?: Rule[]
    status?: 'ENABLED' | 'WAITING_FOR_APPROVAL' | 'DISABLED' | 'DELETED'
    uuid?: string
  }
  export type CEKubernetesClusterConfig = ConnectorConfigDTO & {
    connectorRef: string
    featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  }
  export type CEModuleLicenseDTO = ModuleLicenseDTO & {
    spendLimit?: number
  }
  export interface CEReportSchedule {
    accountId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    enabled?: boolean
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    nextExecution?: string
    recipients?: string[]
    userCron?: string
    userCronTimeZone?: string
    uuid?: string
    viewsId: string[]
  }
  export interface CESlackWebhook {
    accountId?: string
    createdAt?: number
    lastUpdatedAt?: number
    sendAnomalyAlerts?: boolean
    sendCostReport?: boolean
    uuid?: string
    webhookUrl?: string
  }
  export interface CEView {
    accountId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    dataSources?: ('CLUSTER' | 'AWS' | 'GCP' | 'AZURE' | 'COMMON' | 'CUSTOM' | 'LABEL')[]
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    totalCost?: number
    uuid?: string
    viewRules?: ViewRule[]
    viewState?: 'DRAFT' | 'COMPLETED'
    viewTimeRange?: ViewTimeRange
    viewType?: 'SAMPLE' | 'CUSTOMER' | 'DEFAULT_AZURE' | 'DEFAULT'
    viewVersion?: string
    viewVisualization?: ViewVisualization
  }
  export type CFModuleLicenseDTO = ModuleLicenseDTO & {
    numberOfClientMAUs?: number
    numberOfUsers?: number
  }
  export type CIModuleLicenseDTO = ModuleLicenseDTO & {
    numberOfCommitters?: number
  }
  export interface CVActivityLog {
    accountId?: string
    ansiLog?: string
    cvConfigId?: string
    dataCollectionMinute?: number
    log?: string
    logLevel?: 'INFO' | 'WARN' | 'ERROR'
    stateExecutionId?: string
    timestamp?: number
    timestampParams?: number[]
    uuid?: string
    validUntil?: string
  }
  export interface CVAlertFilters {
    alertMinThreshold?: number
    appIds?: string[]
    cvConfigIds?: string[]
    envIds?: string[]
  }
  export interface CVCertifiedDetailsForWorkflowState {
    executionDetails?: StateExecutionInstance
    phaseName?: string
    pipelineExecutionId?: string
    pipelineId?: string
    pipelineName?: string
    stateExecutionId?: string
    workflowExecutionId?: string
    workflowId?: string
    workflowName?: string
  }
  export interface CVCollaborationProviderParameters {
    collaborationProviderConfigId?: string
    cvFeedbackRecord?: CVFeedbackRecord
    jiraTaskParameters?: JiraTaskParameters
  }
  export interface CVConfiguration {
    accountId: string
    alertEnabled?: boolean
    alertThreshold?: number
    analysisTolerance: 'LOW' | 'MEDIUM' | 'HIGH'
    appId: string
    appName?: string
    comparisonStrategy?: 'COMPARE_WITH_PREVIOUS' | 'COMPARE_WITH_CURRENT' | 'PREDICTIVE'
    connectorId: string
    connectorName?: string
    contextId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    customThresholdRefId?: string
    enabled24x7?: boolean
    envId: string
    envName?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name: string
    numOfOccurrencesForAlert?: number
    serviceId: string
    serviceName?: string
    snoozeEndTime?: number
    snoozeStartTime?: number
    stateType:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    uuid: string
    workflowConfig?: boolean
  }
  export interface CVDeploymentData {
    accountId?: string
    appId?: string
    envId?: string
    pipelineExecutionId?: string
    pipelineName?: string
    serviceId?: string
    startTs?: number
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    workflowExecutionId?: string
    workflowName?: string
  }
  export interface CVEnabledService {
    appId?: string
    appName?: string
    cvConfig?: CVConfiguration[]
    service?: Service
  }
  export interface CVFeedbackRecord {
    accountId?: string
    actionTaken?: 'ADD_TO_BASELINE' | 'REMOVE_FROM_BASELINE' | 'UPDATE_PRIORITY'
    analysisMinute?: number
    clusterLabel?: number
    clusterType?: 'CONTROL' | 'TEST' | 'UNKNOWN' | 'IGNORE'
    comment?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    cvConfigId?: string
    duplicate?: boolean
    envId?: string
    feedbackNote?: string
    jiraLink?: string
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    logMessage?: string
    priority?: 'BASELINE' | 'P5' | 'P4' | 'P3' | 'P2' | 'P1' | 'P0'
    serviceId?: string
    stateExecutionId?: string
    supervisedLabel?: string
    uuid?: string
  }
  export type CVModuleLicenseDTO = ModuleLicenseDTO & {}
  export interface CVNGPerpetualTaskDTO {
    accountId?: string
    cvngPerpetualTaskState?: 'TASK_UNASSIGNED' | 'TASK_TO_REBALANCE' | 'TASK_PAUSED' | 'TASK_ASSIGNED'
    cvngPerpetualTaskUnassignedReason?: 'NO_DELEGATE_INSTALLED' | 'NO_DELEGATE_AVAILABLE' | 'NO_ELIGIBLE_DELEGATES'
    delegateId?: string
  }
  export type CanaryOrchestrationWorkflow = OrchestrationWorkflow & {
    derivedVariables?: Variable[]
    failureStrategies?: FailureStrategy[]
    graph?: Graph
    postDeploymentSteps?: PhaseStep
    preDeploymentSteps?: PhaseStep
    rollbackProvisioners?: PhaseStep
    rollbackWorkflowPhaseIdMap?: {
      [key: string]: WorkflowPhase
    }
    systemVariables?: Variable[]
    workflowPhases?: WorkflowPhase[]
  }
  export interface CapacityReservationSpecificationResponse {
    capacityReservationPreference?: string
    capacityReservationTarget?: CapacityReservationTargetResponse
  }
  export interface CapacityReservationTargetResponse {
    capacityReservationId?: string
    capacityReservationResourceGroupArn?: string
  }
  export interface CeLicenseInfo {
    expiryTime?: number
    licenseType?: 'FULL_TRIAL' | 'LIMITED_TRIAL' | 'PAID'
  }
  export interface CgEventConfig {
    accountId?: string
    appId: string
    config: WebHookEventConfig
    createdAt?: number
    createdBy?: EmbeddedUser
    delegateSelectors?: string[]
    enabled?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    rule?: CgEventRule
    summary?: string
    uuid: string
  }
  export interface CgEventRule {
    pipelineRule?: PipelineRule
    type?: 'PIPELINE' | 'WORKFLOW' | 'ALL'
    workflowRule?: WorkflowRule
  }
  export interface ChangeSetDTO {
    changeSetId?: string
    changesetInformation?: ChangesetInformation
    gitDetail?: GitDetail
    gitToHarness?: boolean
    status?: 'QUEUED' | 'RUNNING' | 'FAILED' | 'COMPLETED' | 'SKIPPED'
  }
  export interface ChangesetInformation {
    [key: string]: any
  }
  export interface CloneMetadata {
    environment?: Environment
    serviceMapping?: {
      [key: string]: string
    }
    targetAppId?: string
    workflow?: Workflow
  }
  export type CloudFormationInfrastructureProvisioner = InfrastructureProvisioner & {
    gitFileConfig?: GitFileConfig
    sourceType?: string
    templateBody?: string
    templateFilePath?: string
  }
  export interface CloudWatchMetric {
    dimension?: string
    dimensionDisplay?: string
    displayName?: string
    enabledDefault?: boolean
    metricName?: string
    metricType?: string
    statistics?: string
    unit?:
      | 'Seconds'
      | 'Microseconds'
      | 'Milliseconds'
      | 'Bytes'
      | 'Kilobytes'
      | 'Megabytes'
      | 'Gigabytes'
      | 'Terabytes'
      | 'Bits'
      | 'Kilobits'
      | 'Megabits'
      | 'Gigabits'
      | 'Terabits'
      | 'Percent'
      | 'Count'
      | 'BytesSecond'
      | 'KilobytesSecond'
      | 'MegabytesSecond'
      | 'GigabytesSecond'
      | 'TerabytesSecond'
      | 'BitsSecond'
      | 'KilobitsSecond'
      | 'MegabitsSecond'
      | 'GigabitsSecond'
      | 'TerabitsSecond'
      | 'CountSecond'
      | 'None'
  }
  export interface CloudWatchSetupTestNodeData {
    appId: string
    ec2Metrics?: CloudWatchMetric[]
    ecsMetrics?: {
      [key: string]: CloudWatchMetric[]
    }
    fromTime?: number
    guid?: string
    hostExpression?: string
    hostName?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    lambdaFunctionsMetrics?: {
      [key: string]: CloudWatchMetric[]
    }
    loadBalancerMetricsByLBName?: {
      [key: string]: CloudWatchMetric[]
    }
    region?: string
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    toTime?: number
    workflowId?: string
  }
  export interface Cluster {
    cloudProviderId?: string
    clusterName?: string
    clusterType?: string
  }
  export type ClusterBudgetScope = BudgetScope & {
    clusterIds?: string[]
  }
  export interface ClusterRecord {
    accountId?: string
    cluster?: Cluster
    createdAt?: number
    deactivated?: boolean
    lastUpdatedAt?: number
    perpetualTaskIds?: string[]
    uuid?: string
  }
  export type CodeDeployInfrastructure = InfraMappingInfrastructureProvider & {
    applicationName?: string
    deploymentConfig?: string
    deploymentGroup?: string
    hostNameConvention?: string
    region?: string
  }
  export interface Command {
    accountId?: string
    appId: string
    artifactNeeded?: boolean
    artifactType?:
      | 'JAR'
      | 'WAR'
      | 'TAR'
      | 'ZIP'
      | 'NUGET'
      | 'DOCKER'
      | 'RPM'
      | 'AWS_LAMBDA'
      | 'AWS_CODEDEPLOY'
      | 'PCF'
      | 'AMI'
      | 'AZURE_MACHINE_IMAGE'
      | 'AZURE_WEBAPP'
      | 'IIS'
      | 'OTHER'
      | 'IIS_APP'
      | 'IIS_VirtualDirectory'
    commandExecutionStatus?: 'SUCCESS' | 'FAILURE' | 'RUNNING' | 'QUEUED' | 'SKIPPED'
    commandType?: 'START' | 'STOP' | 'INSTALL' | 'ENABLE' | 'DISABLE' | 'VERIFY' | 'OTHER' | 'RESIZE' | 'SETUP'
    commandUnitType?:
      | 'EXEC'
      | 'SCP'
      | 'COPY_CONFIGS'
      | 'COMMAND'
      | 'SETUP_ENV'
      | 'DOCKER_START'
      | 'DOCKER_STOP'
      | 'PROCESS_CHECK_RUNNING'
      | 'PROCESS_CHECK_STOPPED'
      | 'PORT_CHECK_CLEARED'
      | 'PORT_CHECK_LISTENING'
      | 'CODE_DEPLOY'
      | 'AWS_LAMBDA'
      | 'AWS_AMI'
      | 'ECS_SETUP'
      | 'ECS_SETUP_DAEMON_SCHEDULING_TYPE'
      | 'KUBERNETES_SETUP'
      | 'RESIZE'
      | 'RESIZE_KUBERNETES'
      | 'DOWNLOAD_ARTIFACT'
      | 'K8S_DUMMY'
      | 'SPOTINST_DUMMY'
      | 'HELM_DUMMY'
      | 'PCF_DUMMY'
      | 'AZURE_VMSS_DUMMY'
      | 'AZURE_WEBAPP'
      | 'FETCH_INSTANCES_DUMMY'
      | 'AZURE_ARM'
      | 'TERRAGRUNT_PROVISION'
    commandUnits?: CommandUnit[]
    containerFamily?: 'TOMCAT' | 'JBOSS'
    createdAt?: number
    createdBy?: EmbeddedUser
    deploymentType?: string
    graph?: Graph
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    originEntityId?: string
    referenceId?: string
    referenceUuid?: string
    templateMetadata?: TemplateMetadata
    templateReference?: TemplateReference
    templateVariables?: Variable[]
    uuid: string
    variables?: Variable[]
    version?: number
  }
  export interface CommandCategory {
    commandUnits?: CommandUnit[]
    displayName?: string
    type?: 'COMMANDS' | 'COPY' | 'SCRIPTS' | 'VERIFICATIONS'
  }
  export interface CommandLibraryConfigurationDTO {
    clImplementationVersion?: number
    supportedCommandStoreNameList?: string[]
  }
  export type CommandRefYaml = Yaml & {
    templateUri?: string
    variables?: TemplateVariableYaml[]
  }
  export interface CommandUnit {
    artifactNeeded?: boolean
    commandExecutionStatus?: 'SUCCESS' | 'FAILURE' | 'RUNNING' | 'QUEUED' | 'SKIPPED'
    commandUnitType?:
      | 'EXEC'
      | 'SCP'
      | 'COPY_CONFIGS'
      | 'COMMAND'
      | 'SETUP_ENV'
      | 'DOCKER_START'
      | 'DOCKER_STOP'
      | 'PROCESS_CHECK_RUNNING'
      | 'PROCESS_CHECK_STOPPED'
      | 'PORT_CHECK_CLEARED'
      | 'PORT_CHECK_LISTENING'
      | 'CODE_DEPLOY'
      | 'AWS_LAMBDA'
      | 'AWS_AMI'
      | 'ECS_SETUP'
      | 'ECS_SETUP_DAEMON_SCHEDULING_TYPE'
      | 'KUBERNETES_SETUP'
      | 'RESIZE'
      | 'RESIZE_KUBERNETES'
      | 'DOWNLOAD_ARTIFACT'
      | 'K8S_DUMMY'
      | 'SPOTINST_DUMMY'
      | 'HELM_DUMMY'
      | 'PCF_DUMMY'
      | 'AZURE_VMSS_DUMMY'
      | 'AZURE_WEBAPP'
      | 'FETCH_INSTANCES_DUMMY'
      | 'AZURE_ARM'
      | 'TERRAGRUNT_PROVISION'
    deploymentType?: string
    name?: string
    variables?: Variable[]
  }
  export interface CommandUnitDetails {
    commandExecutionStatus?: 'SUCCESS' | 'FAILURE' | 'RUNNING' | 'QUEUED' | 'SKIPPED'
    commandUnitType?:
      | 'COMMAND'
      | 'JENKINS'
      | 'GCB'
      | 'HELM'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'PCF_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_UPDATE_LISTENER'
      | 'PCF_RESIZE'
      | 'PCF_MAP_ROUTE'
      | 'PCF_BG_SWAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'KUBERNETES'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'AWS_ECS_UPDATE_LISTENER_BG'
      | 'AWS_ECS_UPDATE_ROUTE_53_DNS_WEIGHT'
      | 'AWS_ECS_SERVICE_SETUP'
      | 'AWS_ECS_RUN_TASK_DEPLOY'
      | 'AWS_ECS_SERVICE_SETUP_ROUTE53'
      | 'AWS_ECS_SERVICE_SETUP_ELB'
      | 'AWS_ECS_SERVICE_SETUP_DAEMON'
      | 'AWS_ECS_SERVICE_ROLLBACK_DAEMON'
      | 'AWS_ECS_SERVICE_DEPLOY'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_SWAP'
      | 'AZURE_APP_SERVICE_SLOT_SETUP'
      | 'AZURE_APP_SERVICE_SLOT_TRAFFIC_SHIFT'
      | 'AZURE_APP_SERVICE_SLOT_SWAP'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
      | 'AZURE_ARM_DEPLOYMENT'
      | 'AZURE_BLUEPRINT_DEPLOYMENT'
      | 'TERRAGRUNT_PROVISION'
    name?: string
    variables?: Variable[]
  }
  export interface CompareEnvironmentAggregationInfo {
    count?: string
    get_id?: Id
    serviceId?: string
    serviceInfoSummaries?: ServiceInfoSummary[]
    serviceName?: string
  }
  export interface ConcurrencyStrategy {
    holdingScope: 'PIPELINE' | 'WORKFLOW' | 'PHASE' | 'PHASE_SECTION' | 'NEXT_STEP'
    notificationGroups?: string[]
    notifyTriggeredByUser?: boolean
    resourceUnit: string
    strategy: 'ASAP' | 'FIFO'
    unitType: 'INFRA' | 'CUSTOM' | 'NONE'
  }
  export interface ConcurrentExecutionResponse {
    executions?: WorkflowExecution[]
    infrastructureDetails?: {
      [key: string]: {
        [key: string]: any
      }
    }
    state?: 'BLOCKED' | 'ACTIVE' | 'FINISHED' | 'REJECTED'
    unitType?: 'INFRA' | 'CUSTOM' | 'NONE'
  }
  export interface Conditions {
    cvAlertFilters?: CVAlertFilters
    manualInterventionFilters?: ManualInterventionAlertFilters
    operator?: 'MATCHING' | 'NOT_MATCHING'
  }
  export interface ConfigFile {
    accountId?: string
    appId: string
    checksum?: string
    checksumType?: 'MD5' | 'SHA1' | 'SHA256'
    configOverrideExpression?: string
    configOverrideType?: 'ALL' | 'INSTANCES' | 'CUSTOM'
    createdAt?: number
    createdBy?: EmbeddedUser
    defaultVersion?: number
    description?: string
    encrypted?: boolean
    encryptedBy?: string
    encryptedFileId?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    entityId?: string
    entityType:
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    envId?: string
    envIdVersionMap?: {
      [key: string]: EntityVersion
    }
    envIdVersionMapString?: string
    fileName?: string
    fileUuid?: string
    instances?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    mimeType?: string
    name?: string
    notes?: string
    overriddenConfigFile?: ConfigFile
    overridePath?: string
    parentConfigFileId?: string
    relativeFilePath?: string
    secretFileName?: string
    serviceId?: string
    setAsDefault?: boolean
    settingType?:
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
    size?: number
    targetToAllEnv?: boolean
    templateId?: string
    uuid: string
  }
  export interface ConnectivityValidationAttributes {
    [key: string]: any
  }
  export interface ConnectorConfigDTO {
    [key: string]: any
  }
  export interface ConnectorHeartbeatDelegateResponse {
    accountIdentifier?: string
    connectorValidationResult?: ConnectorValidationResult
    identifier?: string
    name?: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface ConnectorInfoDTO {
    description?: string
    identifier: string
    name: string
    orgIdentifier?: string
    projectIdentifier?: string
    spec: ConnectorConfigDTO
    tags?: {
      [key: string]: string
    }
    type:
      | 'K8sCluster'
      | 'Git'
      | 'Splunk'
      | 'AppDynamics'
      | 'Prometheus'
      | 'Dynatrace'
      | 'Vault'
      | 'AzureKeyVault'
      | 'DockerRegistry'
      | 'Local'
      | 'AwsKms'
      | 'GcpKms'
      | 'Gcp'
      | 'Aws'
      | 'Artifactory'
      | 'Jira'
      | 'Nexus'
      | 'Github'
      | 'Gitlab'
      | 'Bitbucket'
      | 'Codecommit'
      | 'CEAws'
      | 'CEAzure'
      | 'GcpCloudCost'
      | 'CEK8sCluster'
      | 'HttpHelmRepo'
      | 'NewRelic'
      | 'Datadog'
      | 'SumoLogic'
  }
  export interface ConnectorValidationResult {
    delegateId?: string
    errorSummary?: string
    errors?: ErrorDetail[]
    status?: 'SUCCESS' | 'FAILURE' | 'PARTIAL' | 'UNKNOWN'
    testedAt?: number
  }
  export interface ContainerDefinition {
    commands?: string[]
    cpu?: number
    logConfiguration?: LogConfiguration
    memory?: number
    name?: string
    portMappings?: PortMapping[]
    storageConfigurations?: StorageConfiguration[]
  }
  export interface ContainerInfo {
    containerId?: string
    containerTasksReachable?: boolean
    ec2Instance?: Instance
    ecsContainerDetails?: EcsContainerDetails
    hostName?: string
    ip?: string
    namespace?: string
    newContainer?: boolean
    podName?: string
    releaseName?: string
    status?: 'SUCCESS' | 'FAILURE'
    workloadName?: string
  }
  export interface ContainerInstanceKey {
    containerId?: string
    namespace?: string
  }
  export interface ContainerTask {
    accountId?: string
    advancedConfig?: string
    appId: string
    containerDefinitions?: ContainerDefinition[]
    createdAt?: number
    createdBy?: EmbeddedUser
    deploymentType?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    serviceId?: string
    uuid: string
  }
  export interface ContextElement {
    elementType?:
      | 'SERVICE'
      | 'INFRAMAPPING'
      | 'SERVICE_TEMPLATE'
      | 'TAG'
      | 'SHELL'
      | 'HOST'
      | 'INSTANCE'
      | 'STANDARD'
      | 'PARAM'
      | 'PARTITION'
      | 'OTHER'
      | 'FORK'
      | 'CONTAINER_SERVICE'
      | 'CLUSTER'
      | 'AWS_LAMBDA_FUNCTION'
      | 'AMI_SERVICE_SETUP'
      | 'AMI_SERVICE_DEPLOY'
      | 'ECS_SERVICE_SETUP'
      | 'AMI_SWITCH_ROUTES'
      | 'PCF_SERVICE_SETUP'
      | 'PCF_SERVICE_DEPLOY'
      | 'PCF_ROUTE_SWAP_ROLLBACK'
      | 'PCF_INSTANCE'
      | 'SPOTINST_SERVICE_SETUP'
      | 'SPOTINST_SERVICE_DEPLOY'
      | 'ARTIFACT'
      | 'ARTIFACT_VARIABLE'
      | 'HELM_DEPLOY'
      | 'CLOUD_FORMATION_PROVISION'
      | 'CLOUD_FORMATION_ROLLBACK'
      | 'CLOUD_FORMATION_DEPROVISION'
      | 'TERRAFORM_PROVISION'
      | 'SHELL_SCRIPT_PROVISION'
      | 'K8S'
      | 'TERRAFORM_INHERIT_PLAN'
      | 'TERRAGRUNT_INHERIT_PLAN'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_WEBAPP_SETUP'
      | 'HELM_CHART'
      | 'MANIFEST_VARIABLE'
    name?: string
    uuid?: string
  }
  export interface ContinuousVerificationAlertData {
    accountId?: string
    alertStatus?: 'Open' | 'Closed' | 'Pending'
    analysisEndTime?: number
    analysisStartTime?: number
    cvConfiguration?: CVConfiguration
    highRiskTxns?: AlertRiskDetail[]
    hosts?: string[]
    logAnomaly?: string
    mlAnalysisType?: 'TIME_SERIES' | 'LOG_CLUSTER' | 'LOG_ML' | 'FEEDBACK_ANALYSIS'
    portalUrl?: string
    riskScore?: number
    tag?: string
  }
  export interface ContinuousVerificationExecutionMetaData {
    accountId?: string
    appId: string
    appName?: string
    applicationId?: string
    artifactName?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    envId?: string
    envName?: string
    executionStatus?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    manualOverride?: boolean
    noData?: boolean
    phaseId?: string
    phaseName?: string
    pipelineExecutionId?: string
    pipelineId?: string
    pipelineName?: string
    pipelineStartTs?: number
    serviceId?: string
    serviceName?: string
    stateExecutionId?: string
    stateStartTs?: number
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    uuid: string
    validUntil?: string
    workflowExecutionId?: string
    workflowId?: string
    workflowName?: string
    workflowStartTs?: number
  }
  export type CopiedTemplateMetadata = TemplateMetadata & {
    parentCommandName?: string
    parentCommandStoreName?: string
    parentCommandVersion?: string
    parentTemplateId?: string
    parentTemplateVersion?: number
  }
  export interface CountsByStatuses {
    failed?: number
    inprogress?: number
    queued?: number
    success?: number
  }
  export interface CpuOptions {
    coreCount?: number
    threadsPerCore?: number
  }
  export interface CrossAccountAccess {
    crossAccountRoleArn: string
    externalId?: string
  }
  export interface CurrentActiveInstances {
    artifact?: ArtifactSummary
    deployedAt?: string
    environment?: EntitySummary
    instanceCount?: number
    lastWorkflowExecution?: EntitySummary
    manifest?: ManifestSummary
    onDemandRollbackAvailable?: boolean
    serviceInfra?: EntitySummary
    workflow?: EntitySummary
  }
  export type CustomAppFilter = ApplicationFilter & {
    apps?: string[]
  }
  export type CustomArtifactSourceTemplate = ArtifactSource & {
    customRepositoryMapping?: CustomRepositoryMapping
    script?: string
    timeoutSeconds?: string
  }
  export interface CustomDeploymentTypeDTO {
    infraVariables?: Variable[]
    name?: string
    uuid?: string
  }
  export type CustomDeploymentTypeTemplate = BaseTemplate & {
    fetchInstanceScript?: string
    hostAttributes?: {
      [key: string]: string
    }
    hostObjectArrayPath?: string
  }
  export type CustomEnvFilter = EnvironmentFilter & {
    environments?: string[]
  }
  export type CustomInfrastructure = InfraMappingInfrastructureProvider & {
    customDeploymentName?: string
    deploymentTypeTemplateVersion?: string
    infraVariables?: NameValuePair[]
  }
  export interface CustomLogSetupTestNodeData {
    appId: string
    fromTime?: number
    guid?: string
    host?: string
    hostExpression?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    logCollectionInfo?: LogCollectionInfo
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    toTime?: number
    workflowId?: string
  }
  export type CustomOrchestrationWorkflow = OrchestrationWorkflow & {
    graph?: Graph
  }
  export interface CustomRepositoryMapping {
    artifactAttributes?: AttributeMapping[]
    artifactRoot?: string
    buildNoPath?: string
  }
  export interface CustomSecretsManagerConfig {
    accountId?: string
    commandPath?: string
    connectorId?: string
    connectorTemplatized?: boolean
    createdAt?: number
    createdBy?: EmbeddedUser
    customSecretsManagerShellScript?: CustomSecretsManagerShellScript
    default?: boolean
    delegateSelectors?: string[]
    encryptedBy?: string
    encryptionServiceUrl?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    executeOnDelegate?: boolean
    host?: string
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    manuallyEnteredSecretEngineMigrationIteration?: number
    name?: string
    nextTokenRenewIteration?: number
    numOfEncryptedValue?: number
    remoteHostConnector?: EncryptableSetting
    scopedToAccount?: boolean
    templateId?: string
    templatized?: boolean
    templatizedFields?: string[]
    testVariables?: EncryptedDataParams[]
    usageRestrictions?: UsageRestrictions
    uuid: string
    validationCriteria?: string
  }
  export interface CustomSecretsManagerShellScript {
    scriptString?: string
    scriptType?: 'BASH' | 'POWERSHELL'
    timeoutMillis?: number
    variables?: string[]
  }
  export interface CustomSourceConfig {
    delegateSelectors?: string[]
    path?: string
    script?: string
  }
  export interface CyberArkConfig {
    accountId?: string
    appId?: string
    certValidationRequired?: boolean
    clientCertificate?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    cyberArkUrl?: string
    default?: boolean
    encryptedBy?: string
    encryptionServiceUrl?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    manuallyEnteredSecretEngineMigrationIteration?: number
    name?: string
    nextTokenRenewIteration?: number
    numOfEncryptedValue?: number
    scopedToAccount?: boolean
    templatized?: boolean
    templatizedFields?: string[]
    usageRestrictions?: UsageRestrictions
    uuid: string
    validationCriteria?: string
  }
  export interface DashboardAccessPermissions {
    allowedActions?: ('READ' | 'UPDATE' | 'DELETE' | 'MANAGE')[]
    userGroups?: string[]
  }
  export interface DashboardSettings {
    accountId?: string
    canDelete?: boolean
    canManage?: boolean
    canUpdate?: boolean
    createdAt?: number
    createdBy?: EmbeddedUser
    data?: string
    description?: string
    lastUpdatedAt?: number
    name?: string
    owner?: boolean
    permissions?: DashboardAccessPermissions[]
    shared?: boolean
    uuid: string
  }
  export interface DataCollectionConnectorBundle {
    connectorDTO?: ConnectorInfoDTO
    connectorIdentifier?: string
    dataCollectionType?: 'CV' | 'KUBERNETES'
    dataCollectionWorkerId?: string
    sourceIdentifier?: string
  }
  export interface DataCollectionInfoV2 {
    accountId?: string
    applicationId?: string
    connectorId?: string
    cvConfigId?: string
    cvTaskId?: string
    dataCollectionStartTime?: number
    encryptedDataDetails?: EncryptedDataDetail[]
    endTime?: number
    envId?: string
    hosts?: string[]
    serviceId?: string
    shouldSendHeartbeat?: boolean
    startTime?: number
    stateExecutionId?: string
    workflowExecutionId?: string
    workflowId?: string
  }
  export interface DataCollectionRequest {
    baseUrl?: string
    connectorInfoDTO?: ConnectorInfoDTO
    dsl?: string
    tracingId?: string
    type?:
      | 'SPLUNK_SAVED_SEARCHES'
      | 'STACKDRIVER_DASHBOARD_LIST'
      | 'STACKDRIVER_DASHBOARD_GET'
      | 'STACKDRIVER_SAMPLE_DATA'
      | 'STACKDRIVER_LOG_SAMPLE_DATA'
      | 'APPDYNAMICS_FETCH_APPS'
      | 'APPDYNAMICS_FETCH_TIERS'
      | 'APPDYNAMICS_GET_METRIC_DATA'
      | 'NEWRELIC_APPS_REQUEST'
      | 'NEWRELIC_VALIDATION_REQUEST'
      | 'PROMETHEUS_METRIC_LIST_GET'
      | 'PROMETHEUS_LABEL_NAMES_GET'
      | 'PROMETHEUS_LABEL_VALUES_GET'
      | 'PROMETHEUS_SAMPLE_DATA'
  }
  export interface DataDogSetupTestNodeData {
    appId: string
    customMetrics?: {
      [key: string]: Metric[]
    }
    customMetricsMap?: {
      [key: string]: Metric[]
    }
    datadogServiceName?: string
    deploymentType?: string
    dockerMetrics?: {
      [key: string]: string
    }
    ecsMetrics?: {
      [key: string]: string
    }
    fromTime?: number
    guid?: string
    hostExpression?: string
    hostNameField?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    metrics?: string
    query?: string
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    toTime?: number
    workflowId?: string
  }
  export interface DataPoint {
    accountId?: string
    aggregateInvocationCountList?: Aggregate[]
    invocationCountKey?: 'LAST_30_DAYS' | 'SINCE_LAST_DEPLOYED'
    timestamp?: number
    totalInvocationCount?: number
  }
  export type DatadogConnectorDTO = ConnectorConfigDTO & {
    apiKeyRef: string
    applicationKeyRef: string
    delegateSelectors?: string[]
    url: string
  }
  export interface DayStat {
    date?: number
    failedCount?: number
    instancesCount?: number
    totalCount?: number
  }
  export interface DefaultSpecification {
    memorySize?: number
    runtime?: string
    timeout?: number
  }
  export interface Delegate {
    accountId?: string
    capabilitiesCheckNextIteration?: number
    ceEnabled?: boolean
    createdAt?: number
    currentlyExecutingDelegateTasks?: string[]
    delegateGroupId?: string
    delegateGroupName?: string
    delegateName?: string
    delegateProfileId?: string
    delegateRandomToken?: string
    delegateType?: string
    description?: string
    excludeScopes?: DelegateScope[]
    hostName?: string
    includeScopes?: DelegateScope[]
    ip?: string
    keepAlivePacket?: boolean
    keywords?: string[]
    lastHeartBeat?: number
    location?: string
    ng?: boolean
    owner?: DelegateEntityOwner
    polllingModeEnabled?: boolean
    profileError?: boolean
    profileExecutedAt?: number
    profileResult?: string
    proxy?: boolean
    sampleDelegate?: boolean
    sequenceNum?: string
    sessionIdentifier?: string
    sizeDetails?: DelegateSizeDetails
    status?: 'ENABLED' | 'WAITING_FOR_APPROVAL' | 'DISABLED' | 'DELETED'
    supportedTaskTypes?: string[]
    tags?: string[]
    useCdn?: boolean
    useJreVersion?: string
    uuid: string
    validUntil?: string
    version?: string
  }
  export interface DelegateConfiguration {
    action?: 'SELF_DESTRUCT'
    delegateVersions?: string[]
  }
  export interface DelegateConnectionDetails {
    lastHeartbeat?: number
    uuid?: string
    version?: string
  }
  export interface DelegateConnectionHeartbeat {
    delegateConnectionId?: string
    location?: string
    version?: string
  }
  export interface DelegateConnectionResultDetail {
    accountId?: string
    criteria?: string
    delegateId?: string
    duration?: number
    lastUpdatedAt?: number
    uuid?: string
    validUntil?: string
    validated?: boolean
  }
  export interface DelegateEntityOwner {
    identifier?: string
  }
  export interface DelegateFile {
    accountId?: string
    appId?: string
    bucket?:
      | 'LOB'
      | 'ARTIFACTS'
      | 'AUDITS'
      | 'CONFIGS'
      | 'CUSTOM_MANIFEST'
      | 'LOGS'
      | 'PLATFORMS'
      | 'TERRAFORM_STATE'
      | 'PROFILE_RESULTS'
      | 'TERRAFORM_PLAN'
      | 'EXPORT_EXECUTIONS'
    checksum?: string
    checksumType?: 'MD5' | 'SHA1' | 'SHA256'
    delegateId?: string
    entityId?: string
    fileId?: string
    fileLength?: number
    fileName?: string
    fileUuid?: string
    length?: number
    localFilePath?: string
    metadata?: {
      [key: string]: {
        [key: string]: any
      }
    }
    mimeType?: string
    relativePath?: string
    taskId?: string
  }
  export interface DelegateGroupDetails {
    activelyConnected?: boolean
    delegateConfigurationId?: string
    delegateDescription?: string
    delegateGroupIdentifier?: string
    delegateInsightsDetails?: DelegateInsightsDetails
    delegateInstanceDetails?: DelegateInner[]
    delegateType?: string
    groupCustomSelectors?: string[]
    groupHostName?: string
    groupId?: string
    groupImplicitSelectors?: {
      [key: string]:
        | 'PROFILE_NAME'
        | 'DELEGATE_NAME'
        | 'HOST_NAME'
        | 'GROUP_NAME'
        | 'GROUP_SELECTORS'
        | 'PROFILE_SELECTORS'
    }
    groupName?: string
    lastHeartBeat?: number
    sizeDetails?: DelegateSizeDetails
  }
  export interface DelegateGroupListing {
    delegateGroupDetails?: DelegateGroupDetails[]
  }
  export interface DelegateHeartbeatDetails {
    numberOfConnectedDelegates?: number
    numberOfRegisteredDelegates?: number
  }
  export interface DelegateHeartbeatResponse {
    delegateId?: string
    delegateRandomToken?: string
    jreVersion?: string
    sequenceNumber?: string
    status?: string
    useCdn?: boolean
  }
  export interface DelegateInitializationDetails {
    delegateId?: string
    hostname?: string
    initialized?: boolean
    profileError?: boolean
    profileExecutedAt?: number
  }
  export interface DelegateInner {
    activelyConnected?: boolean
    ceEnabled?: boolean
    connections?: DelegateConnectionDetails[]
    delegateGroupName?: string
    delegateName?: string
    delegateProfileId?: string
    delegateType?: string
    description?: string
    excludeScopes?: DelegateScope[]
    hostName?: string
    implicitSelectors?: {
      [key: string]:
        | 'PROFILE_NAME'
        | 'DELEGATE_NAME'
        | 'HOST_NAME'
        | 'GROUP_NAME'
        | 'GROUP_SELECTORS'
        | 'PROFILE_SELECTORS'
    }
    includeScopes?: DelegateScope[]
    ip?: string
    lastHeartBeat?: number
    polllingModeEnabled?: boolean
    profileError?: boolean
    profileExecutedAt?: number
    proxy?: boolean
    sampleDelegate?: boolean
    status?: 'ENABLED' | 'WAITING_FOR_APPROVAL' | 'DISABLED' | 'DELETED'
    tags?: string[]
    uuid?: string
  }
  export interface DelegateInsightsBarDetails {
    counts?: PairDelegateInsightsTypeLong[]
    timeStamp?: number
  }
  export interface DelegateInsightsDetails {
    insights?: DelegateInsightsBarDetails[]
  }
  export interface DelegateMetaInfo {
    hostName?: string
    id?: string
  }
  export interface DelegateParams {
    accountId?: string
    ceEnabled?: boolean
    currentlyExecutingDelegateTasks?: string[]
    delegateGroupId?: string
    delegateGroupName?: string
    delegateId?: string
    delegateName?: string
    delegateProfileId?: string
    delegateRandomToken?: string
    delegateSize?: string
    delegateType?: string
    description?: string
    hostName?: string
    ip?: string
    keepAlivePacket?: boolean
    lastHeartBeat?: number
    location?: string
    orgIdentifier?: string
    pollingModeEnabled?: boolean
    projectIdentifier?: string
    proxy?: boolean
    sampleDelegate?: boolean
    sequenceNum?: string
    sessionIdentifier?: string
    version?: string
  }
  export interface DelegateProfile {
    accountId?: string
    approvalRequired?: boolean
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    identifier?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    ng?: boolean
    owner?: DelegateEntityOwner
    primary?: boolean
    scopingRules?: DelegateProfileScopingRule[]
    selectors?: string[]
    startupScript?: string
    uuid: string
  }
  export interface DelegateProfileDetails {
    accountId?: string
    approvalRequired?: boolean
    createdBy?: EmbeddedUserDetails
    description?: string
    identifier?: string
    lastUpdatedBy?: EmbeddedUserDetails
    name?: string
    primary?: boolean
    scopingRules?: ScopingRuleDetails[]
    selectors?: string[]
    startupScript?: string
    uuid?: string
  }
  export interface DelegateProfileParams {
    name?: string
    profileId?: string
    profileLastUpdatedAt?: number
    scriptContent?: string
  }
  export interface DelegateProfileScopingRule {
    description?: string
    scopingEntities?: {
      [key: string]: string[]
    }
  }
  export interface DelegateRegisterResponse {
    action?: 'SELF_DESTRUCT' | 'MIGRATE'
    delegateId?: string
    delegateRandomToken?: string
    migrateUrl?: string
    sequenceNum?: string
  }
  export interface DelegateResponseData {
    [key: string]: any
  }
  export interface DelegateScalingGroup {
    delegates?: DelegateInner[]
    groupName?: string
  }
  export interface DelegateScope {
    accountId?: string
    applications?: string[]
    createdAt?: number
    createdBy?: EmbeddedUser
    environmentTypes?: ('PROD' | 'NON_PROD' | 'ALL')[]
    environments?: string[]
    infrastructureDefinitions?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    serviceInfrastructures?: string[]
    services?: string[]
    taskTypes?: (
      | 'SCRIPT'
      | 'HTTP'
      | 'SPLUNK'
      | 'APPDYNAMICS'
      | 'INSTANA'
      | 'NEWRELIC'
      | 'STACKDRIVER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'CLOUD_WATCH'
      | 'JENKINS'
      | 'COMMAND'
      | 'BAMBOO'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'GCS'
      | 'GCB'
      | 'GCP'
      | 'ACR'
      | 'NEXUS'
      | 'S3'
      | 'AZURE_ARTIFACTS'
      | 'AZURE_VMSS'
      | 'AZURE_APP_SERVICE'
      | 'AZURE_ARM'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'ARTIFACTORY'
      | 'HOST_VALIDATION'
      | 'KMS'
      | 'GIT'
      | 'CONTAINER'
      | 'AMI'
      | 'HELM'
      | 'COLLABORATION_PROVIDER'
      | 'PCF'
      | 'SPOTINST'
      | 'APM'
      | 'LOG'
      | 'CLOUD_FORMATION'
      | 'TERRAFORM'
      | 'TERRAGRUNT'
      | 'AWS'
      | 'LDAP'
      | 'K8S'
      | 'SMB'
      | 'SFTP'
      | 'TRIGGER'
      | 'JIRA'
      | 'CONNECTIVITY_VALIDATION'
      | 'BUILD_SOURCE'
      | 'CUSTOM'
      | 'SHELL_SCRIPT_PROVISION'
      | 'SERVICENOW'
      | 'HELM_REPO_CONFIG_VALIDATION'
      | 'HELM_VALUES_FETCH_TASK'
      | 'GUARD_24x7'
      | 'CI'
      | 'SLACK'
      | 'ARTIFACT_COLLECT_NG'
      | 'K8S_NG'
      | 'CAPABILITY_VALIDATION'
      | 'JIRA_NG'
      | 'CVNG'
      | 'NOTIFICATION'
      | 'HTTP_NG'
      | 'SHELL_SCRIPT_NG'
      | 'GIT_NG'
      | 'BATCH_CAPABILITY_CHECK'
      | 'CUSTOM_MANIFEST_VALUES_FETCH_TASK'
      | 'CUSTOM_MANIFEST_FETCH_TASK'
      | 'TERRAFORM_NG'
      | 'CE'
    )[]
    uuid: string
    valid?: boolean
  }
  export interface DelegateScopes {
    excludeScopeIds?: string[]
    includeScopeIds?: string[]
  }
  export interface DelegateScripts {
    delegateScript?: string
    doUpgrade?: boolean
    setupProxyScript?: string
    startScript?: string
    stopScript?: string
    version?: string
  }
  export interface DelegateSelectionLogParams {
    conclusion?: string
    delegateHostName?: string
    delegateId?: string
    delegateName?: string
    delegateProfileName?: string
    delegateType?: string
    eventTimestamp?: number
    message?: string
    profileScopingRulesDetails?: ProfileScopingRulesDetails
  }
  export interface DelegateSelectionLogResponse {
    delegateSelectionLogs?: DelegateSelectionLogParams[]
    taskSetupAbstractions?: {
      [key: string]: string
    }
  }
  export interface DelegateSetupDetails {
    delegateConfigurationId: string
    description?: string
    identifier?: string
    k8sConfigDetails?: K8sConfigDetails
    name: string
    orgIdentifier?: string
    projectIdentifier?: string
    sessionIdentifier?: string
    size: 'EXTRA_SMALL' | 'LAPTOP' | 'SMALL' | 'MEDIUM' | 'LARGE'
    tags?: string[]
  }
  export interface DelegateSizeDetails {
    cpu?: number
    label?: string
    ram?: number
    replicas?: number
    size?: 'EXTRA_SMALL' | 'LAPTOP' | 'SMALL' | 'MEDIUM' | 'LARGE'
    taskLimit?: number
  }
  export interface DelegateStatus {
    delegates?: DelegateInner[]
    publishedVersions?: string[]
    scalingGroups?: DelegateScalingGroup[]
  }
  export interface DelegateTags {
    tags?: string[]
  }
  export type DelegateTaskAbortEvent = DelegateTaskEvent & {}
  export interface DelegateTaskDetails {
    delegateTaskId?: string
    selectedDelegateHostName?: string
    selectedDelegateId?: string
    selectedDelegateName?: string
    setupAbstractions?: {
      [key: string]: string
    }
    taskDescription?: string
    taskType?: string
  }
  export interface DelegateTaskEvent {
    accountId?: string
    delegateTaskId?: string
    sync?: boolean
  }
  export interface DelegateTaskEventsResponse {
    delegateTaskEvents?: DelegateTaskEvent[]
    processTaskEventsAsync?: boolean
  }
  export interface DelegateTaskPackage {
    accountId?: string
    data?: TaskData
    delegateCallbackToken?: string
    delegateId?: string
    delegateTaskId?: string
    encryptionConfigs?: {
      [key: string]: EncryptionConfig
    }
    executionCapabilities?: ExecutionCapability[]
    logStreamingAbstractions?: {
      [key: string]: string
    }
    logStreamingToken?: string
    secretDetails?: {
      [key: string]: SecretDetail
    }
    secrets?: string[]
  }
  export interface DelegateTaskResponse {
    accountId?: string
    response?: DelegateResponseData
    responseCode?: 'OK' | 'FAILED' | 'RETRY_ON_OTHER_DELEGATE'
  }
  export interface DelegateTokenDetails {
    accountId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    name?: string
    status?: 'ACTIVE' | 'REVOKED'
    uuid?: string
    value?: string
  }
  export interface DeploymentFreezeInfo {
    allEnvFrozenApps?: string[]
    appEnvs?: {
      [key: string]: string[]
    }
    freezeAll?: boolean
  }
  export interface DeploymentHistory {
    artifact?: ArtifactSummary
    deployedAt?: string
    envs?: EntitySummary[]
    inframappings?: EntitySummary[]
    instanceCount?: number
    manifest?: ManifestSummary
    pipeline?: EntitySummary
    rolledBack?: boolean
    status?: string
    triggeredBy?: EntitySummary
    workflow?: EntitySummary
  }
  export interface DeploymentMetadata {
    artifactRequiredServiceIds?: string[]
    artifactRequiredServices?: Service[]
    artifactVariables?: ArtifactVariable[]
    deploymentTypes?: (
      | 'SSH'
      | 'AWS_CODEDEPLOY'
      | 'ECS'
      | 'SPOTINST'
      | 'KUBERNETES'
      | 'HELM'
      | 'AWS_LAMBDA'
      | 'AMI'
      | 'WINRM'
      | 'PCF'
      | 'AZURE_VMSS'
      | 'AZURE_WEBAPP'
      | 'CUSTOM'
    )[]
    envIds?: string[]
    envSummaries?: EnvSummary[]
    manifestRequiredServiceIds?: string[]
    manifestVariables?: ManifestVariable[]
  }
  export type DeploymentPreference = Preference & {
    appIds?: string[]
    endTime?: string
    envIds?: string[]
    harnessTagFilter?: HarnessTagFilter
    includeIndirectExecutions?: boolean
    keywords?: string[]
    pipelineIds?: string[]
    serviceIds?: string[]
    startTime?: string
    status?: string[]
    uiDisplayTagString?: string
    workflowIds?: string[]
  }
  export interface DeploymentSlotData {
    name?: string
    type?: string
  }
  export interface DeploymentStatistics {
    statsMap?: {
      [key: string]: AggregatedDayStats
    }
    type?: 'DEPLOYMENT' | 'SERVICE_INSTANCE_STATISTICS'
  }
  export interface DeploymentTimeSeriesAnalysis {
    baseLineExecutionId?: string
    customThresholdRefId?: string
    message?: string
    metricAnalyses?: NewRelicMetricAnalysis[]
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    stateExecutionId?: string
    total?: number
  }
  export type DirectKubernetesCluster = Cluster & {}
  export type DirectKubernetesInfrastructure = InfraMappingInfrastructureProvider & {
    clusterName?: string
    expressions?: {
      [key: string]: string
    }
    namespace?: string
    releaseName?: string
  }
  export interface DirectoryNode {
    accountId?: string
    className?: string
    directoryPath?: DirectoryPath
    name?: string
    restName?: string
    shortClassName?: string
    type?: 'FOLDER' | 'YAML' | 'FILE'
  }
  export interface DirectoryPath {
    path?: string
  }
  export interface DockerAuthCredentialsDTO {
    [key: string]: any
  }
  export interface DockerAuthenticationDTO {
    spec?: DockerAuthCredentialsDTO
    type: 'UsernamePassword' | 'Anonymous'
  }
  export type DockerConnectorDTO = ConnectorConfigDTO & {
    auth?: DockerAuthenticationDTO
    delegateSelectors?: string[]
    dockerRegistryUrl: string
    providerType: 'DockerHub' | 'Harbor' | 'Quay' | 'Other'
  }
  export type DockerUserNamePasswordDTO = DockerAuthCredentialsDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export interface Duration {
    nano?: number
    negative?: boolean
    seconds?: number
    units?: TemporalUnit[]
    zero?: boolean
  }
  export interface DynaTraceApplication {
    displayName?: string
    entityId?: string
  }
  export interface DynaTraceSetupTestNodeData {
    appId: string
    fromTime?: number
    guid?: string
    hostExpression?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    serviceEntityId?: string
    serviceLevel?: boolean
    serviceMethods?: string
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    toTime?: number
    workflowId?: string
  }
  export type DynatraceConnectorDTO = ConnectorConfigDTO & {
    apiTokenRef: string
    delegateSelectors?: string[]
    url: string
  }
  export interface EbsInstanceBlockDevice {
    attachTime?: string
    deleteOnTermination?: boolean
    status?: string
    volumeId?: string
  }
  export type EcsBlueGreenOrchestrationWorkflow = OrchestrationWorkflow & {
    derivedVariables?: Variable[]
    ecsBGType?: string
    failureStrategies?: FailureStrategy[]
    graph?: Graph
    postDeploymentSteps?: PhaseStep
    preDeploymentSteps?: PhaseStep
    rollbackProvisioners?: PhaseStep
    rollbackWorkflowPhaseIdMap?: {
      [key: string]: WorkflowPhase
    }
    systemVariables?: Variable[]
    workflowPhases?: WorkflowPhase[]
  }
  export type EcsCluster = Cluster & {
    region?: string
  }
  export interface EcsContainerDetails {
    completeDockerId?: string
    containerId?: string
    containerInstanceArn?: string
    containerInstanceId?: string
    dockerId?: string
    ecsServiceName?: string
    taskArn?: string
    taskId?: string
  }
  export interface EcsServiceSpecification {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    schedulingStrategy?: string
    serviceId: string
    serviceSpecJson?: string
    uuid: string
  }
  export interface ElastiGroup {
    capacity?: ElastiGroupCapacity
    id?: string
    name?: string
  }
  export interface ElastiGroupCapacity {
    maximum?: number
    minimum?: number
    target?: number
  }
  export interface ElasticGpuAssociation {
    elasticGpuAssociationId?: string
    elasticGpuAssociationState?: string
    elasticGpuAssociationTime?: string
    elasticGpuId?: string
  }
  export interface ElasticInferenceAcceleratorAssociation {
    elasticInferenceAcceleratorArn?: string
    elasticInferenceAcceleratorAssociationId?: string
    elasticInferenceAcceleratorAssociationState?: string
    elasticInferenceAcceleratorAssociationTime?: string
  }
  export interface ElementExecutionSummary {
    avgTime?: number
    contextElement?: ContextElement
    endTs?: number
    infraDefinitionSummaries?: InfraDefinitionSummary[]
    infraMappingSummaries?: InfraMappingSummary[]
    instanceStatusSummaries?: InstanceStatusSummary[]
    instancesCount?: number
    startTs?: number
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    totalTime?: number
  }
  export interface ElkIndexTemplate {
    name?: string
    properties?: {
      [key: string]: {
        [key: string]: any
      }
    }
  }
  export interface ElkSetupTestNodeData {
    appId: string
    fromTime?: number
    guid?: string
    hostExpression?: string
    hostNameField?: string
    indices?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    messageField?: string
    query?: string
    queryType?: 'TERM' | 'MATCH' | 'MATCH_PHRASE'
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    timeStampField?: string
    timeStampFieldFormat?: string
    toTime?: number
    workflowId?: string
  }
  export interface EmbeddedUser {
    email?: string
    name?: string
    uuid?: string
  }
  export interface EmbeddedUserDetails {
    email?: string
    name?: string
    uuid?: string
  }
  export interface EncryptableSetting {
    accountId?: string
    settingType?:
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
  }
  export interface EncryptedData {
    accountId?: string
    additionalMetadata?: AdditionalMetadata
    appIds?: string[]
    backupEncryptedValue?: string[]
    backupEncryptionKey?: string
    backupEncryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    backupKmsId?: string
    base64Encoded?: boolean
    changeLog?: number
    createdAt?: number
    createdBy?: EmbeddedUser
    enabled?: boolean
    encryptedBy?: string
    encryptedValue?: string[]
    encryptionKey?: string
    encryptionType:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    envIds?: string[]
    fileSize?: number
    hideFromListing?: boolean
    inheritScopesFromSM?: boolean
    inlineSecret?: boolean
    keywords?: string[]
    kmsId?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    nextAwsKmsToGcpKmsMigrationIteration?: number
    nextAwsToGcpKmsMigrationIteration?: number
    nextLocalToGcpKmsMigrationIteration?: number
    nextMigrationIteration?: number
    ngMetadata?: NGEncryptedDataMetadata
    parameterizedSecret?: boolean
    parameters?: EncryptedDataParams[]
    parents?: EncryptedDataParent[]
    path?: string
    referencedSecret?: boolean
    runTimeUsage?: number
    scopedToAccount?: boolean
    searchTags?: {
      [key: string]: AtomicInteger
    }
    serviceIds?: string[]
    serviceVariableIds?: string[]
    setupUsage?: number
    type:
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
    usageRestrictions?: UsageRestrictions
    uuid: string
  }
  export interface EncryptedDataDetail {
    encryptedData?: EncryptedRecordData
    encryptionConfig?: EncryptionConfig
    fieldName?: string
    identifier?: SecretUniqueIdentifier
  }
  export interface EncryptedDataParams {
    name?: string
    value?: string
  }
  export interface EncryptedDataParent {
    fieldName?: string
    id?: string
    type?:
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
  }
  export interface EncryptedRecord {
    additionalMetadata?: AdditionalMetadata
    backupEncryptedValue?: string[]
    backupEncryptionKey?: string
    backupEncryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    backupKmsId?: string
    base64Encoded?: boolean
    encryptedValue?: string[]
    encryptionKey?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    kmsId?: string
    name?: string
    parameters?: EncryptedDataParams[]
    path?: string
    uuid?: string
  }
  export interface EncryptedRecordData {
    additionalMetadata?: AdditionalMetadata
    backupEncryptedValue?: string[]
    backupEncryptionKey?: string
    backupEncryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    backupKmsId?: string
    base64Encoded?: boolean
    encryptedValue?: string[]
    encryptionKey?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    kmsId?: string
    name?: string
    parameters?: EncryptedDataParams[]
    path?: string
    uuid?: string
  }
  export interface EncryptionConfig {
    accountId?: string
    default?: boolean
    encryptionServiceUrl?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    globalKms?: boolean
    name?: string
    numOfEncryptedValue?: number
    type?: 'KMS' | 'VAULT' | 'CUSTOM' | 'SSH'
    uuid?: string
    validationCriteria?: string
  }
  export interface EntityAuditRecord {
    affectedResourceId?: string
    affectedResourceName?: string
    affectedResourceOperation?: string
    affectedResourceType?: string
    appId?: string
    appName?: string
    createdAt?: number
    entityId?: string
    entityName?: string
    entityNewYamlRecordId?: string
    entityOldYamlRecordId?: string
    entityType?: string
    failure?: boolean
    operationType?: string
    yamlError?: string
    yamlPath?: string
  }
  export interface EntityReference {
    appId?: string
    entityType?: string
    id?: string
    name?: string
  }
  export interface EntitySummary {
    id?: string
    name?: string
    type?: string
  }
  export interface EntitySummaryStats {
    count?: number
    entitySummary?: EntitySummary
  }
  export interface EntityVersion {
    accountId?: string
    appId: string
    changeType?: 'CREATED' | 'UPDATED'
    createdAt?: number
    createdBy?: EmbeddedUser
    entityData?: string
    entityName?: string
    entityParentUuid?: string
    entityType?:
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    entityUuid?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    uuid: string
    version?: number
  }
  export interface EntityVersionCollection {
    accountId?: string
    appId: string
    changeType?: 'CREATED' | 'UPDATED'
    createdAt?: number
    createdBy?: EmbeddedUser
    entityData?: string
    entityName?: string
    entityParentUuid?: string
    entityType?:
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    entityUuid?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    uuid: string
    version?: number
  }
  export interface EnvFilter {
    filterTypes?: string[]
    ids?: string[]
  }
  export interface EnvSummary {
    environmentType?: 'PROD' | 'NON_PROD' | 'ALL'
    name?: string
    uuid?: string
  }
  export interface Environment {
    accountId?: string
    appId: string
    configFiles?: ConfigFile[]
    configMapYaml?: string
    configMapYamlByServiceTemplateId?: {
      [key: string]: string
    }
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    environmentType: 'PROD' | 'NON_PROD' | 'ALL'
    helmValueYaml?: string
    helmValueYamlByServiceTemplateId?: {
      [key: string]: string
    }
    infraDefinitionsCount?: number
    infrastructureDefinitions?: InfrastructureDefinition[]
    keywords?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    sample?: boolean
    serviceTemplates?: ServiceTemplate[]
    setup?: Setup
    tagLinks?: HarnessTagLink[]
    uuid: string
  }
  export interface EnvironmentFilter {
    filterType?: 'ALL_PROD' | 'ALL_NON_PROD' | 'ALL' | 'CUSTOM'
  }
  export interface EnvironmentRole {
    envId?: string
    envName?: string
    environmentType?: 'PROD' | 'NON_PROD' | 'ALL'
    resourceAccess?: {
      [key: string]:
        | 'ALL'
        | 'CREATE'
        | 'READ'
        | 'UPDATE'
        | 'DELETE'
        | 'EXECUTE'
        | 'EXECUTE_WORKFLOW'
        | 'EXECUTE_PIPELINE'
        | 'EXECUTE_WORKFLOW_ROLLBACK'
        | 'DEFAULT'
    }
  }
  export interface EnvironmentSummary {
    id?: string
    name?: string
    prod?: boolean
    type?: string
  }
  export interface ErrorDetail {
    code?: number
    message?: string
    reason?: string
  }
  export interface ExecutionArgs {
    artifactIdNames?: {
      [key: string]: string
    }
    artifactVariables?: ArtifactVariable[]
    artifacts?: Artifact[]
    commandName?: string
    continueWithDefaultValues?: boolean
    createdByType?: 'USER' | 'API_KEY' | 'TRIGGER'
    errorStrategy?: 'CONTINUE' | 'FAIL' | 'PAUSE' | 'RETRY'
    excludeHostsWithSameArtifact?: boolean
    executionCredential?: ExecutionCredential
    executionStrategy?: 'SERIAL' | 'PARALLEL'
    helmChartIdNames?: {
      [key: string]: string
    }
    helmCharts?: HelmChart[]
    hosts?: string[]
    manifestVariables?: ManifestVariable[]
    notes?: string
    notifyTriggeredUserOnly?: boolean
    orchestrationId?: string
    pipelineId?: string
    pipelinePhaseElementId?: string
    pipelinePhaseParallelIndex?: number
    serviceId?: string
    serviceInstanceIdNames?: {
      [key: string]: string
    }
    serviceInstances?: ServiceInstance[]
    stageName?: string
    targetToSpecificHosts?: boolean
    triggeredBy?: EmbeddedUser
    triggeredFromPipeline?: boolean
    triggeringApiKeyId?: string
    workflowType?: 'PIPELINE' | 'ORCHESTRATION'
    workflowVariables?: {
      [key: string]: string
    }
  }
  export interface ExecutionCapability {
    capabilityType?:
      | 'SOCKET'
      | 'ALWAYS_TRUE'
      | 'PROCESS_EXECUTOR'
      | 'AWS_REGION'
      | 'SYSTEM_ENV'
      | 'HTTP'
      | 'HELM_INSTALL'
      | 'CHART_MUSEUM'
      | 'ALWAYS_FALSE'
      | 'SMTP'
      | 'WINRM_HOST_CONNECTION'
      | 'SSH_HOST_CONNECTION'
      | 'SFTP'
      | 'PCF_AUTO_SCALAR'
      | 'PCF_CONNECTIVITY'
      | 'PCF_INSTALL'
      | 'POWERSHELL'
      | 'HELM_COMMAND'
      | 'CLUSTER_MASTER_URL'
      | 'SHELL_CONNECTION'
      | 'GIT_CONNECTION'
      | 'KUSTOMIZE'
      | 'SMB'
      | 'SELECTORS'
      | 'GIT_CONNECTION_NG'
      | 'GIT_INSTALLATION'
      | 'LITE_ENGINE'
    maxValidityPeriod?: Duration
    periodUntilNextValidation?: Duration
  }
  export interface ExecutionCredential {
    executionType?: 'SSH'
  }
  export interface ExecutionDataValue {
    displayName?: string
    value?: {
      [key: string]: any
    }
  }
  export interface ExecutionEventAdvisor {
    [key: string]: any
  }
  export interface ExecutionInterrupt {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    envId?: string
    executionInterruptType:
      | 'ABORT'
      | 'ABORT_ALL'
      | 'PAUSE'
      | 'PAUSE_FOR_INPUTS'
      | 'PAUSE_ALL'
      | 'RESUME'
      | 'RESUME_ALL'
      | 'RETRY'
      | 'IGNORE'
      | 'WAITING_FOR_MANUAL_INTERVENTION'
      | 'MARK_FAILED'
      | 'MARK_SUCCESS'
      | 'ROLLBACK'
      | 'NEXT_STEP'
      | 'END_EXECUTION'
      | 'ROLLBACK_DONE'
      | 'MARK_EXPIRED'
      | 'CONTINUE_WITH_DEFAULTS'
      | 'CONTINUE_PIPELINE_STAGE'
    executionUuid: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    properties?: {
      [key: string]: {
        [key: string]: any
      }
    }
    seized?: boolean
    stateExecutionInstanceId?: string
    uuid: string
  }
  export interface ExecutionInterruptEffect {
    interruptId?: string
    tookEffectAt?: string
  }
  export interface ExecutionStatusResponse {
    status?: string
  }
  export interface ExpAnalysisInfo {
    appId?: string
    createdAt?: number
    envId?: string
    expName?: string
    mismatch?: boolean
    stateExecutionId?: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    workflowExecutionId?: string
  }
  export interface ExperimentPerformance {
    [key: string]: any
  }
  export interface ExperimentalMessageComparisonResult {
    cluster_type?: string
    createdAt?: number
    cvConfigId?: string
    logCollectionMinute?: number
    message1?: string
    message2?: string
    modelVersion?: string
    numVotes?: number
    prediction?: string
    similarity?: number
    stateExecutionId?: string
    userVotes?: {
      [key: string]: string
    }
    uuid?: string
  }
  export interface ExperimentalMetricAnalysis {
    displayName?: string
    experimentalRiskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    fullMetricName?: string
    metricName?: string
    metricValues?: ExperimentalMetricAnalysisValue[]
    mismatch?: boolean
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    tag?: string
  }
  export interface ExperimentalMetricAnalysisValue {
    alertType?: string
    controlValue?: number
    experimentalRiskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    hostAnalysisValues?: ExperimentalMetricHostAnalysisValue[]
    mismatch?: boolean
    name?: string
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    testValue?: number
    type?: string
  }
  export interface ExperimentalMetricHostAnalysisValue {
    anomalies?: number[]
    controlHostName?: string
    controlValues?: number[]
    experimentalRiskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    mismatch?: boolean
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    testHostName?: string
    testStartIndex?: number
    testValues?: number[]
  }
  export interface ExperimentalMetricRecord {
    analysisMinute?: number
    baseLineExecutionId?: string
    cvConfigId?: string
    experimentStatus?: 'UNDETERMINED' | 'SUCCESS' | 'FAILURE'
    experimentalRiskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    metricAnalysis?: ExperimentalMetricAnalysis[]
    mismatch?: boolean
    mlAnalysisType?: 'COMPARATIVE' | 'PREDICTIVE' | 'TIMESERIES_24x7'
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    stateExecutionId?: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    workflowExecutionId?: string
  }
  export interface ExportExecutionsRequestLimitChecks {
    executionCount?: LimitCheck
    queuedRequests?: LimitCheck
  }
  export interface ExportExecutionsRequestSummary {
    downloadLink?: string
    errorMessage?: string
    expiresAt?: string
    requestId?: string
    status?: 'QUEUED' | 'READY' | 'FAILED' | 'EXPIRED'
    statusLink?: string
    totalExecutions?: number
    triggeredAt?: string
  }
  export interface ExportExecutionsUserParams {
    createdByType?: 'USER' | 'API_KEY' | 'TRIGGER'
    notifyOnlyTriggeringUser?: boolean
    outputFormat?: 'JSON'
    userGroupIds?: string[]
  }
  export interface FailureCriteria {
    failureThresholdPercentage?: number
  }
  export interface FailureStrategy {
    actionAfterTimeout?:
      | 'ABORT'
      | 'ABORT_ALL'
      | 'PAUSE'
      | 'PAUSE_FOR_INPUTS'
      | 'PAUSE_ALL'
      | 'RESUME'
      | 'RESUME_ALL'
      | 'RETRY'
      | 'IGNORE'
      | 'WAITING_FOR_MANUAL_INTERVENTION'
      | 'MARK_FAILED'
      | 'MARK_SUCCESS'
      | 'ROLLBACK'
      | 'NEXT_STEP'
      | 'END_EXECUTION'
      | 'ROLLBACK_DONE'
      | 'MARK_EXPIRED'
      | 'CONTINUE_WITH_DEFAULTS'
      | 'CONTINUE_PIPELINE_STAGE'
    executionScope?: 'WORKFLOW' | 'WORKFLOW_PHASE'
    failureCriteria?: FailureCriteria
    failureTypes: (
      | 'EXPIRED'
      | 'DELEGATE_PROVISIONING'
      | 'CONNECTIVITY'
      | 'AUTHENTICATION'
      | 'VERIFICATION_FAILURE'
      | 'APPLICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'TIMEOUT_ERROR'
    )[]
    manualInterventionTimeout?: number
    repairActionCode?:
      | 'MANUAL_INTERVENTION'
      | 'ROLLBACK_WORKFLOW'
      | 'ROLLBACK_PHASE'
      | 'IGNORE'
      | 'RETRY'
      | 'END_EXECUTION'
      | 'CONTINUE_WITH_DEFAULTS'
      | 'ABORT_WORKFLOW_EXECUTION'
    repairActionCodeAfterRetry?:
      | 'MANUAL_INTERVENTION'
      | 'ROLLBACK_WORKFLOW'
      | 'ROLLBACK_PHASE'
      | 'IGNORE'
      | 'RETRY'
      | 'END_EXECUTION'
      | 'CONTINUE_WITH_DEFAULTS'
      | 'ABORT_WORKFLOW_EXECUTION'
    retryCount?: number
    retryIntervals?: number[]
    specificSteps?: string[]
  }
  export interface FeatureFlag {
    enabled?: boolean
    lastUpdatedAt?: number
    name?: string
    uuid?: string
  }
  export interface FeatureUsageComplianceReport {
    featureName?: string
    properties?: {
      [key: string]: {
        [key: string]: any
      }
    }
  }
  export interface FeaturesUsageComplianceReport {
    accountId?: string
    featureUsageComplianceReports?: FeatureUsageComplianceReport[]
    targetAccountType?: string
  }
  export interface FileOperationStatus {
    entityId?: string
    errorMssg?: string
    status?: 'FAILED' | 'SUCCESS' | 'SKIPPED'
    yamlFilePath?: string
  }
  export interface Filter {
    ids?: string[]
  }
  export interface FunctionMeta {
    functionArn?: string
    functionName?: string
    version?: string
  }
  export interface FunctionSpecification {
    functionName?: string
    handler?: string
    memorySize?: number
    runtime?: string
    timeout?: number
  }
  export interface GcpBillingAccount {
    accountId?: string
    bqDataSetRegion?: string
    bqDatasetId?: string
    bqProjectId?: string
    createdAt?: number
    exportEnabled?: boolean
    gcpBillingAccountId?: string
    gcpBillingAccountName?: string
    lastUpdatedAt?: number
    organizationSettingId?: string
    uuid?: string
  }
  export interface GcpBillingExportSpec {
    datasetId: string
  }
  export type GcpCloudCostConnector = ConnectorConfigDTO & {
    billingExportSpec?: GcpBillingExportSpec
    featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
    projectId: string
  }
  export type GcpConnector = ConnectorConfigDTO & {
    credential?: GcpConnectorCredential
    delegateSelectors?: string[]
  }
  export interface GcpConnectorCredential {
    spec?: GcpCredentialSpec
    type: 'InheritFromDelegate' | 'ManualConfig'
  }
  export interface GcpCredentialSpec {
    [key: string]: any
  }
  export type GcpKmsConnectorDTO = ConnectorConfigDTO & {
    credentials: string
    default?: boolean
    delegateSelectors?: string[]
    keyName?: string
    keyRing?: string
    projectId?: string
    region?: string
  }
  export type GcpKubernetesCluster = Cluster & {}
  export type GcpManualDetails = GcpCredentialSpec & {
    secretKeyRef: string
  }
  export interface GcpOrganization {
    accountId?: string
    createdAt?: number
    lastUpdatedAt?: number
    organizationId?: string
    organizationName?: string
    serviceAccountEmail?: string
    uuid?: string
  }
  export interface GenericEntityFilter {
    filterType?: string
    ids?: string[]
  }
  export interface GitAuditDetails {
    author?: string
    gitCommitId?: string
    repoUrl?: string
  }
  export interface GitAuthenticationDTO {
    [key: string]: any
  }
  export type GitConfigDTO = ConnectorConfigDTO & {
    branchName?: string
    connectionType: 'Account' | 'Repo'
    delegateSelectors?: string[]
    spec: GitAuthenticationDTO
    type: 'Http' | 'Ssh'
    url: string
    validationRepo?: string
  }
  export interface GitDetail {
    appId?: string
    branchName?: string
    connectorName?: string
    entityName?: string
    entityType?:
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    gitCommitId?: string
    gitConnectorId?: string
    repositoryInfo?: GitRepositoryInfo
    repositoryUrl?: string
    yamlGitConfigId?: string
  }
  export interface GitFileActivity {
    accountId?: string
    appId?: string
    branchName?: string
    changeFromAnotherCommit?: boolean
    changeType?: 'ADD' | 'RENAME' | 'MODIFY' | 'DELETE' | 'NONE'
    commitId?: string
    commitMessage?: string
    connectorName?: string
    createdAt?: number
    errorMessage?: string
    fileContent?: string
    filePath?: string
    gitConnectorId?: string
    lastUpdatedAt?: number
    processingCommitId?: string
    processingCommitMessage?: string
    repositoryInfo?: GitRepositoryInfo
    repositoryName?: string
    status?: 'SUCCESS' | 'FAILED' | 'DISCARDED' | 'EXPIRED' | 'SKIPPED' | 'QUEUED'
    triggeredBy?: 'USER' | 'GIT' | 'FULL_SYNC'
    userDoesNotHavePermForFile?: boolean
    uuid?: string
  }
  export interface GitFileActivitySummary {
    accountId?: string
    appId?: string
    branchName?: string
    commitId?: string
    commitMessage?: string
    connectorName?: string
    createdAt?: number
    fileProcessingSummary?: GitFileProcessingSummary
    gitConnectorId?: string
    gitToHarness?: boolean
    lastUpdatedAt?: number
    repositoryInfo?: GitRepositoryInfo
    repositoryName?: string
    status?: 'QUEUED' | 'RUNNING' | 'COMPLETED' | 'FAILED' | 'COMPLETED_WITH_ERRORS' | 'SKIPPED'
    uuid: string
  }
  export interface GitFileConfig {
    branch?: string
    commitId?: string
    connectorId?: string
    connectorName?: string
    filePath?: string
    filePathList?: string[]
    repoName?: string
    serviceSpecFilePath?: string
    taskSpecFilePath?: string
    useBranch?: boolean
    useInlineServiceDefinition?: boolean
  }
  export interface GitFileProcessingSummary {
    failureCount?: number
    queuedCount?: number
    skippedCount?: number
    successCount?: number
    totalCount?: number
  }
  export type GitHTTPAuthenticationDTO = GitAuthenticationDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export interface GitProcessingError {
    accountId?: string
    branchName?: string
    connectorName?: string
    createdAt?: number
    gitConnectorId?: string
    message?: string
    repositoryInfo?: GitRepositoryInfo
    repositoryName?: string
  }
  export interface GitRepositoryInfo {
    displayUrl?: string
    provider?: 'GITHUB' | 'BITBUCKET' | 'GITLAB' | 'UNKNOWN'
    url?: string
  }
  export type GitSSHAuthenticationDTO = GitAuthenticationDTO & {
    sshKeyRef: string
  }
  export interface GitSyncError {
    accountId?: string
    additionalErrorDetails?: GitSyncErrorDetails
    appId: string
    branchName?: string
    changeType?: string
    commitTime?: number
    createdAt?: number
    createdBy?: EmbeddedUser
    failureReason?: string
    fullSyncPath?: boolean
    gitCommitId?: string
    gitConnectorId?: string
    gitConnectorName?: string
    gitSyncDirection?: string
    lastAttemptedYaml?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    nextIteration?: number
    repositoryInfo?: GitRepositoryInfo
    repositoryName?: string
    status?: 'ACTIVE' | 'DISCARDED' | 'EXPIRED' | 'RESOLVED' | 'OVERRIDDEN'
    userDoesNotHavePermForFile?: boolean
    uuid: string
    yamlContent?: string
    yamlFilePath?: string
    yamlGitConfigId?: string
  }
  export interface GitSyncErrorDetails {
    [key: string]: any
  }
  export interface GitSyncWebhook {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    entityId?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    uuid: string
    webhookToken?: string
  }
  export interface GitToHarnessErrorCommitStats {
    branchName?: string
    commitMessage?: string
    commitTime?: number
    errorsForSummaryView?: GitSyncError[]
    failedCount?: number
    gitCommitId?: string
    gitConnectorId?: string
    gitConnectorName?: string
    repositoryInfo?: GitRepositoryInfo
    repositoryName?: string
  }
  export interface GithubApiAccess {
    spec?: GithubApiAccessSpecDTO
    type: 'GithubApp' | 'Token'
  }
  export interface GithubApiAccessSpecDTO {
    [key: string]: any
  }
  export type GithubAppSpec = GithubApiAccessSpecDTO & {
    applicationId: string
    installationId: string
    privateKeyRef: string
  }
  export interface GithubAuthentication {
    spec: GithubCredentialsDTO
    type: 'Http' | 'Ssh'
  }
  export type GithubConnector = ConnectorConfigDTO & {
    apiAccess?: GithubApiAccess
    authentication: GithubAuthentication
    delegateSelectors?: string[]
    type: 'Account' | 'Repo'
    url: string
    validationRepo?: string
  }
  export interface GithubCredentialsDTO {
    [key: string]: any
  }
  export type GithubHttpCredentials = GithubCredentialsDTO & {
    spec: GithubHttpCredentialsSpecDTO
    type: 'UsernamePassword' | 'UsernameToken'
  }
  export interface GithubHttpCredentialsSpecDTO {
    [key: string]: any
  }
  export type GithubSshCredentials = GithubCredentialsDTO & {
    sshKeyRef: string
  }
  export type GithubTokenSpec = GithubApiAccessSpecDTO & {
    tokenRef: string
  }
  export type GithubUsernamePassword = GithubHttpCredentialsSpecDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export type GithubUsernameToken = GithubHttpCredentialsSpecDTO & {
    tokenRef: string
    username?: string
    usernameRef?: string
  }
  export interface GitlabApiAccess {
    spec?: GitlabApiAccessSpecDTO
    type: 'Token'
  }
  export interface GitlabApiAccessSpecDTO {
    [key: string]: any
  }
  export interface GitlabAuthentication {
    spec: GitlabCredentialsDTO
    type: 'Http' | 'Ssh'
  }
  export type GitlabConnector = ConnectorConfigDTO & {
    apiAccess?: GitlabApiAccess
    authentication: GitlabAuthentication
    delegateSelectors?: string[]
    type: 'Account' | 'Repo'
    url: string
    validationRepo?: string
  }
  export interface GitlabCredentialsDTO {
    [key: string]: any
  }
  export type GitlabHttpCredentials = GitlabCredentialsDTO & {
    spec: GitlabHttpCredentialsSpecDTO
    type: 'UsernamePassword' | 'UsernameToken' | 'Kerberos'
  }
  export interface GitlabHttpCredentialsSpecDTO {
    [key: string]: any
  }
  export type GitlabKerberos = GitlabHttpCredentialsSpecDTO & {
    kerberosKeyRef: string
  }
  export type GitlabSshCredentials = GitlabCredentialsDTO & {
    sshKeyRef: string
  }
  export type GitlabTokenSpec = GitlabApiAccessSpecDTO & {
    tokenRef: string
  }
  export type GitlabUsernamePassword = GitlabHttpCredentialsSpecDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export type GitlabUsernameToken = GitlabHttpCredentialsSpecDTO & {
    tokenRef: string
    username?: string
    usernameRef?: string
  }
  export type GoogleKubernetesEngine = InfraMappingInfrastructureProvider & {
    clusterName?: string
    expressions?: {
      [key: string]: string
    }
    namespace?: string
    releaseName?: string
  }
  export interface GovernanceConfig {
    accountId?: string
    appId: string
    deploymentFreeze?: boolean
    enableNextCloseIterations?: boolean
    enableNextIterations?: boolean
    lastUpdatedBy?: EmbeddedUser
    nextCloseIterations?: number[]
    nextIterations?: number[]
    timeRangeBasedFreezeConfigs?: TimeRangeBasedFreezeConfig[]
    uuid?: string
    weeklyFreezeConfigs?: WeeklyFreezeConfig[]
  }
  export interface GovernanceRuleStatus {
    matchType?: 'ANY' | 'ALL'
    tags?: Tag[]
    tagsIncluded?: boolean
    tagsLocations?: Usage[]
    weight?: number
  }
  export interface GovernanceStandard {
    description?: string
    id?: string
    name?: string
  }
  export interface Graph {
    graphName?: string
    links?: GraphLink[]
    nodes?: GraphNode[]
    subworkflows?: {
      [key: string]: Graph
    }
  }
  export interface GraphGroup {
    delegateTaskId?: string
    delegateTasksDetails?: DelegateTaskDetails[]
    detailsReference?: string
    elementStatusSummary?: ElementExecutionSummary[]
    elements?: GraphNode[]
    executionDetails?: {
      [key: string]: any
    }
    executionHistoryCount?: number
    executionStrategy?: 'SERIAL' | 'PARALLEL'
    executionSummary?: {
      [key: string]: any
    }
    group?: GraphGroup
    hasInspection?: boolean
    id?: string
    importedTemplateDetails?: ImportedTemplateDetails
    inValidFieldMessages?: {
      [key: string]: string
    }
    instanceStatusSummary?: InstanceStatusSummary[]
    interruptHistoryCount?: number
    name?: string
    next?: GraphNode
    origin?: boolean
    properties?: {
      [key: string]: {
        [key: string]: any
      }
    }
    rollback?: boolean
    selectionLogsTrackingForTaskEnabled?: boolean
    selectionLogsTrackingForTasksEnabled?: boolean
    status?: string
    templateExpressions?: TemplateExpression[]
    templateMetadata?: TemplateMetadata
    templateUuid?: string
    templateVariables?: Variable[]
    templateVersion?: string
    type?: string
    valid?: boolean
    validationMessage?: string
    variableOverrides?: NameValuePair[]
  }
  export interface GraphLink {
    from?: string
    id?: string
    to?: string
    type?: string
  }
  export interface GraphNode {
    delegateTaskId?: string
    delegateTasksDetails?: DelegateTaskDetails[]
    detailsReference?: string
    elementStatusSummary?: ElementExecutionSummary[]
    executionDetails?: {
      [key: string]: any
    }
    executionHistoryCount?: number
    executionSummary?: {
      [key: string]: any
    }
    group?: GraphGroup
    hasInspection?: boolean
    id?: string
    importedTemplateDetails?: ImportedTemplateDetails
    inValidFieldMessages?: {
      [key: string]: string
    }
    instanceStatusSummary?: InstanceStatusSummary[]
    interruptHistoryCount?: number
    name?: string
    next?: GraphNode
    origin?: boolean
    properties?: {
      [key: string]: {
        [key: string]: any
      }
    }
    rollback?: boolean
    selectionLogsTrackingForTaskEnabled?: boolean
    selectionLogsTrackingForTasksEnabled?: boolean
    status?: string
    templateExpressions?: TemplateExpression[]
    templateMetadata?: TemplateMetadata
    templateUuid?: string
    templateVariables?: Variable[]
    templateVersion?: string
    type?: string
    valid?: boolean
    validationMessage?: string
    variableOverrides?: NameValuePair[]
  }
  export interface GraphQLQuery {
    operationName?: string
    query?: string
    variables?: {
      [key: string]: {
        [key: string]: any
      }
    }
  }
  export interface GroupIdentifier {
    groupId?: string
    groupName?: string
  }
  export type HarnessImportedTemplateDetails = ImportedTemplateDetails & {
    commandName?: string
    commandStoreName?: string
    commandVersion?: string
    repoUrl?: string
    tags?: string[]
  }
  export interface HarnessSupportUserDTO {
    emailId?: string
    id?: string
    name?: string
  }
  export interface HarnessTag {
    accountId?: string
    allowedValues?: string[]
    createdAt?: number
    createdBy?: EmbeddedUser
    inUseValues?: string[]
    key?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    tagType?: 'USER' | 'HARNESS'
    uuid?: string
  }
  export interface HarnessTagFilter {
    conditions?: TagFilterCondition[]
    matchAll?: boolean
  }
  export interface HarnessTagLink {
    accountId?: string
    appId?: string
    appName?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    entityId?: string
    entityName?: string
    entityType:
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    key?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    tagType?: 'USER' | 'HARNESS'
    uuid?: string
    value?: string
  }
  export interface HarnessUserGroup {
    accountIds?: string[]
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    groupType?: 'DEFAULT' | 'RESTRICTED'
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    memberIds?: string[]
    name?: string
    uuid: string
  }
  export interface HarnessUserGroupDTO {
    accountIds?: string[]
    description?: string
    emailIds?: string[]
    name?: string
  }
  export interface HeatMap {
    cvConfiguration?: CVConfiguration
    observedTimeSeries?: {
      [key: string]: {
        [key: string]: TimeSeriesDataPoint[]
      }
    }
    predictedTimeSeries?: {
      [key: string]: {
        [key: string]: TimeSeriesDataPoint[]
      }
    }
    riskLevelSummary?: HeatMapUnit[]
  }
  export interface HeatMapUnit {
    endTime?: number
    highRisk?: number
    keyTransactionScore?: number
    keyTransactionScoreList?: number[]
    lowRisk?: number
    mediumRisk?: number
    na?: number
    overallScore?: number
    scoreList?: number[]
    startTime?: number
  }
  export interface HelmChart {
    accountId?: string
    appId?: string
    appVersion?: string
    applicationManifestId?: string
    createdAt?: number
    description?: string
    displayName?: string
    lastUpdatedAt?: number
    metadata?: {
      [key: string]: string
    }
    name?: string
    serviceId?: string
    uuid?: string
    version?: string
  }
  export interface HelmChartConfig {
    basePath?: string
    chartName?: string
    chartUrl?: string
    chartVersion?: string
    connectorId?: string
    connectorName?: string
  }
  export interface HelmChartInfo {
    name?: string
    repoUrl?: string
    version?: string
  }
  export interface HelmChartSpecification {
    accountId?: string
    appId: string
    chartName: string
    chartUrl: string
    chartVersion: string
    createdAt?: number
    createdBy?: EmbeddedUser
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    serviceId?: string
    uuid: string
  }
  export interface HelmCommandFlagConfig {
    valueMap: {
      [key: string]: string
    }
  }
  export interface HelmExecutionSummary {
    containerInfoList?: ContainerInfo[]
    helmChartInfo?: HelmChartInfo
    releaseName?: string
  }
  export interface HibernationOptions {
    configured?: boolean
  }
  export interface Histogram {
    bars?: Bar[]
    count?: number
    errorMessage?: string
    intervalMs?: number
    query?: string
    splunkQuery?: string
  }
  export interface Host {
    appId: string
    bastionConnAttr?: string
    computeProviderId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    ec2Instance?: Instance
    envId?: string
    hostConnAttr?: string
    hostName?: string
    infraDefinitionId?: string
    infraMappingId?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    properties?: {
      [key: string]: {
        [key: string]: any
      }
    }
    publicDns?: string
    serviceTemplateId?: string
    uuid: string
    winrmConnAttr?: string
  }
  export interface HostElement {
    azureVMInstance?: AzureVMInstanceData
    ec2Instance?: Instance
    elementType?:
      | 'SERVICE'
      | 'INFRAMAPPING'
      | 'SERVICE_TEMPLATE'
      | 'TAG'
      | 'SHELL'
      | 'HOST'
      | 'INSTANCE'
      | 'STANDARD'
      | 'PARAM'
      | 'PARTITION'
      | 'OTHER'
      | 'FORK'
      | 'CONTAINER_SERVICE'
      | 'CLUSTER'
      | 'AWS_LAMBDA_FUNCTION'
      | 'AMI_SERVICE_SETUP'
      | 'AMI_SERVICE_DEPLOY'
      | 'ECS_SERVICE_SETUP'
      | 'AMI_SWITCH_ROUTES'
      | 'PCF_SERVICE_SETUP'
      | 'PCF_SERVICE_DEPLOY'
      | 'PCF_ROUTE_SWAP_ROLLBACK'
      | 'PCF_INSTANCE'
      | 'SPOTINST_SERVICE_SETUP'
      | 'SPOTINST_SERVICE_DEPLOY'
      | 'ARTIFACT'
      | 'ARTIFACT_VARIABLE'
      | 'HELM_DEPLOY'
      | 'CLOUD_FORMATION_PROVISION'
      | 'CLOUD_FORMATION_ROLLBACK'
      | 'CLOUD_FORMATION_DEPROVISION'
      | 'TERRAFORM_PROVISION'
      | 'SHELL_SCRIPT_PROVISION'
      | 'K8S'
      | 'TERRAFORM_INHERIT_PLAN'
      | 'TERRAGRUNT_INHERIT_PLAN'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_WEBAPP_SETUP'
      | 'HELM_CHART'
      | 'MANIFEST_VARIABLE'
    hostName?: string
    instanceId?: string
    ip?: string
    name?: string
    pcfElement?: PcfInstanceElement
    properties?: {
      [key: string]: {
        [key: string]: any
      }
    }
    publicDns?: string
    uuid?: string
    webAppInstance?: AzureAppDeploymentData
  }
  export interface HostInstanceKey {
    hostName?: string
    infraMappingId?: string
  }
  export interface HostValidationRequest {
    appId?: string
    computeProviderSettingId?: string
    deploymentType?: string
    envId?: string
    executionCredential?: ExecutionCredential
    hostConnectionAttrs?: string
    hostNames?: string[]
  }
  export interface HostValidationResponse {
    errorCode?: string
    errorDescription?: string
    hostName?: string
    status?: string
  }
  export interface HttpHelmAuthCredentialsDTO {
    [key: string]: any
  }
  export interface HttpHelmAuthenticationDTO {
    spec?: HttpHelmAuthCredentialsDTO
    type: 'UsernamePassword' | 'Anonymous'
  }
  export type HttpHelmConnectorDTO = ConnectorConfigDTO & {
    auth?: HttpHelmAuthenticationDTO
    delegateSelectors?: string[]
    helmRepoUrl: string
  }
  export type HttpHelmUsernamePasswordDTO = HttpHelmAuthCredentialsDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export type HttpTemplate = BaseTemplate & {
    assertion?: string
    body?: string
    executeWithPreviousSteps?: boolean
    header?: string
    headers?: KeyValuePair[]
    method?: string
    timeoutMillis?: number
    url?: string
  }
  export interface Id {
    envId?: string
    infraMappingId?: string
    lastArtifactBuildNum?: string
    lastWorkflowExecutionId?: string
    serviceId?: string
  }
  export interface IamInstanceProfile {
    arn?: string
    id?: string
  }
  export interface IdNameReference {
    id?: string
    name?: string
  }
  export interface ImmutablePair {
    key?: {
      [key: string]: any
    }
    left?: {
      [key: string]: any
    }
    right?: {
      [key: string]: any
    }
    value?: {
      [key: string]: any
    }
  }
  export interface ImmutablePairResourceTypeAction {
    key?:
      | 'APPLICATION'
      | 'SERVICE'
      | 'CONFIGURATION'
      | 'CONFIGURATION_OVERRIDE'
      | 'WORKFLOW'
      | 'ENVIRONMENT'
      | 'ROLE'
      | 'DEPLOYMENT'
      | 'ARTIFACT'
      | 'CLOUD'
      | 'USER'
      | 'CD'
      | 'PIPELINE'
      | 'SETTING'
      | 'LIMIT'
      | 'APP_STACK'
      | 'NOTIFICATION_GROUP'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'WHITE_LIST'
      | 'SSO'
      | 'API_KEY'
      | 'PROVISIONER'
      | 'PREFERENCE'
      | 'TEMPLATE'
      | 'CUSTOM_DASHBOARD'
      | 'BUDGET'
      | 'GCP_RESOURCE'
      | 'CLUSTERRECORD'
      | 'K8S_LABEL'
      | 'K8S_EVENT_YAML_DIFF'
      | 'K8S_RECOMMENDATION'
      | 'CE_ANOMALIES'
      | 'CE_CLUSTER'
      | 'CE_CONNECTOR'
      | 'CE_BATCH'
      | 'LINKED_ACCOUNT'
    left?:
      | 'APPLICATION'
      | 'SERVICE'
      | 'CONFIGURATION'
      | 'CONFIGURATION_OVERRIDE'
      | 'WORKFLOW'
      | 'ENVIRONMENT'
      | 'ROLE'
      | 'DEPLOYMENT'
      | 'ARTIFACT'
      | 'CLOUD'
      | 'USER'
      | 'CD'
      | 'PIPELINE'
      | 'SETTING'
      | 'LIMIT'
      | 'APP_STACK'
      | 'NOTIFICATION_GROUP'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'WHITE_LIST'
      | 'SSO'
      | 'API_KEY'
      | 'PROVISIONER'
      | 'PREFERENCE'
      | 'TEMPLATE'
      | 'CUSTOM_DASHBOARD'
      | 'BUDGET'
      | 'GCP_RESOURCE'
      | 'CLUSTERRECORD'
      | 'K8S_LABEL'
      | 'K8S_EVENT_YAML_DIFF'
      | 'K8S_RECOMMENDATION'
      | 'CE_ANOMALIES'
      | 'CE_CLUSTER'
      | 'CE_CONNECTOR'
      | 'CE_BATCH'
      | 'LINKED_ACCOUNT'
    right?:
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    value?:
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
  }
  export interface ImportStatus {
    collectionName?: string
    idClashes?: number
    imported?: number
  }
  export interface ImportStatusReport {
    mode?: 'DRY_RUN' | 'UPSERT' | 'INSERT'
    statuses?: ImportStatus[]
  }
  export interface ImportedCommand {
    appId?: string
    commandName?: string
    commandStoreName?: string
    createdAt?: string
    createdBy?: string
    description?: string
    highestVersion?: string
    importedCommandVersionList?: ImportedCommandVersion[]
    name?: string
    repoUrl?: string
    tags?: string[]
    templateId?: string
  }
  export interface ImportedCommandVersion {
    commandDisplayName?: string
    commandName?: string
    commandStoreName?: string
    createdAt?: string
    createdBy?: string
    description?: string
    templateId?: string
    templateObject?: BaseTemplate
    variables?: Variable[]
    version?: string
    yamlContent?: string
  }
  export interface ImportedTemplateDetails {
    [key: string]: any
  }
  export type ImportedTemplateMetadata = TemplateMetadata & {
    defaultVersion?: number
  }
  export interface InfraDefinitionDetail {
    countDerivedInfraMappings?: number
    derivedInfraMappingDetailList?: InfraMappingDetail[]
    infrastructureDefinition?: InfrastructureDefinition
  }
  export interface InfraDefinitionSummary {
    cloudProviderName?: string
    cloudProviderType?: 'PHYSICAL_DATA_CENTER' | 'AWS' | 'AZURE' | 'GCP' | 'KUBERNETES_CLUSTER' | 'PCF' | 'CUSTOM'
    deploymentType?:
      | 'SSH'
      | 'AWS_CODEDEPLOY'
      | 'ECS'
      | 'SPOTINST'
      | 'KUBERNETES'
      | 'HELM'
      | 'AWS_LAMBDA'
      | 'AMI'
      | 'WINRM'
      | 'PCF'
      | 'AZURE_VMSS'
      | 'AZURE_WEBAPP'
      | 'CUSTOM'
    displayName?: string
    infraDefinitionId?: string
  }
  export interface InfraMappingDetail {
    infrastructureMapping?: InfrastructureMapping
    workflowExecutionList?: WorkflowExecution[]
  }
  export interface InfraMappingInfrastructureProvider {
    cloudProviderId?: string
  }
  export interface InfraMappingSummary {
    computeProviderName?: string
    computeProviderType?: string
    deploymentType?: string
    displayName?: string
    infraMappingId?: string
    infraMappingType?: string
  }
  export interface InfrastructureDefinition {
    accountId?: string
    appId: string
    cloudProviderType: 'PHYSICAL_DATA_CENTER' | 'AWS' | 'AZURE' | 'GCP' | 'KUBERNETES_CLUSTER' | 'PCF' | 'CUSTOM'
    createdAt?: number
    createdBy?: EmbeddedUser
    customDeploymentName?: string
    deploymentType:
      | 'SSH'
      | 'AWS_CODEDEPLOY'
      | 'ECS'
      | 'SPOTINST'
      | 'KUBERNETES'
      | 'HELM'
      | 'AWS_LAMBDA'
      | 'AMI'
      | 'WINRM'
      | 'PCF'
      | 'AZURE_VMSS'
      | 'AZURE_WEBAPP'
      | 'CUSTOM'
    deploymentTypeTemplateId?: string
    envId: string
    infrastructure: InfraMappingInfrastructureProvider
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    provisionerId?: string
    sample?: boolean
    scopedToServices?: string[]
    uuid?: string
  }
  export interface InfrastructureMapping {
    accountId?: string
    appId: string
    autoPopulate?: boolean
    blueprints?: {
      [key: string]: {
        [key: string]: any
      }
    }
    computeProviderName?: string
    computeProviderSettingId?: string
    computeProviderType?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    customDeploymentTemplateId?: string
    deploymentType?: string
    displayName?: string
    envId?: string
    hostConnectionAttrs?: string
    infraMappingType?: string
    infrastructureDefinitionId?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    provisionerId?: string
    sample?: boolean
    serviceId?: string
    serviceTemplateId?: string
    settingType?:
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
    uuid: string
  }
  export interface InfrastructureMappingBlueprint {
    cloudProviderType: 'AWS' | 'GCP' | 'PHYSICAL_DATA_CENTER'
    deploymentType:
      | 'SSH'
      | 'AWS_CODEDEPLOY'
      | 'ECS'
      | 'SPOTINST'
      | 'KUBERNETES'
      | 'HELM'
      | 'AWS_LAMBDA'
      | 'AMI'
      | 'WINRM'
      | 'PCF'
      | 'AZURE_VMSS'
      | 'AZURE_WEBAPP'
      | 'CUSTOM'
    nodeFilteringType?:
      | 'AWS_INSTANCE_FILTER'
      | 'AWS_AUTOSCALING_GROUP'
      | 'AWS_ECS_EC2'
      | 'AWS_ECS_FARGATE'
      | 'AWS_ASG_AMI'
    properties: BlueprintProperty[]
    serviceId?: string
  }
  export interface InfrastructureProvisioner {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    infrastructureProvisionerType?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    mappingBlueprints?: InfrastructureMappingBlueprint[]
    name?: string
    tagLinks?: HarnessTagLink[]
    uuid: string
    variables?: NameValuePair[]
  }
  export interface InfrastructureProvisionerDetails {
    azureARMResourceType?: 'ARM' | 'BLUEPRINT'
    cloudFormationSourceType?: string
    description?: string
    infrastructureProvisionerType?: string
    name?: string
    repository?: string
    services?: {
      [key: string]: string
    }
    tagLinks?: HarnessTagLink[]
    uuid?: string
  }
  export interface InstanaApplicationParams {
    hostTagFilter?: string
    tagFilters?: InstanaTagFilter[]
  }
  export interface InstanaInfraParams {
    metrics?: string[]
    query?: string
  }
  export interface InstanaSetupTestNodeData {
    appId: string
    applicationParams?: InstanaApplicationParams
    fromTime?: number
    guid?: string
    hostExpression?: string
    infraParams?: InstanaInfraParams
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    tagFilters?: InstanaTagFilter[]
    toTime?: number
    workflowId?: string
  }
  export interface InstanaTagFilter {
    name?: string
    operator?: 'EQUALS' | 'CONTAINS' | 'NOT_EQUAL' | 'NOT_CONTAIN' | 'NOT_EMPTY' | 'IS_EMPTY'
    value?: string
  }
  export interface Instance {
    amiLaunchIndex?: number
    architecture?: string
    blockDeviceMappings?: InstanceBlockDeviceMapping[]
    capacityReservationId?: string
    capacityReservationSpecification?: CapacityReservationSpecificationResponse
    clientToken?: string
    cpuOptions?: CpuOptions
    ebsOptimized?: boolean
    elasticGpuAssociations?: ElasticGpuAssociation[]
    elasticInferenceAcceleratorAssociations?: ElasticInferenceAcceleratorAssociation[]
    enaSupport?: boolean
    hibernationOptions?: HibernationOptions
    hypervisor?: string
    iamInstanceProfile?: IamInstanceProfile
    imageId?: string
    instanceId?: string
    instanceLifecycle?: string
    instanceType?: string
    kernelId?: string
    keyName?: string
    launchTime?: string
    licenses?: LicenseConfiguration[]
    metadataOptions?: InstanceMetadataOptionsResponse
    monitoring?: Monitoring
    networkInterfaces?: InstanceNetworkInterface[]
    outpostArn?: string
    placement?: Placement
    platform?: string
    privateDnsName?: string
    privateIpAddress?: string
    productCodes?: ProductCode[]
    publicDnsName?: string
    publicIpAddress?: string
    ramdiskId?: string
    rootDeviceName?: string
    rootDeviceType?: string
    securityGroups?: GroupIdentifier[]
    sourceDestCheck?: boolean
    spotInstanceRequestId?: string
    sriovNetSupport?: string
    state?: InstanceState
    stateReason?: StateReason
    stateTransitionReason?: string
    subnetId?: string
    tags?: Tag[]
    virtualizationType?: string
    vpcId?: string
  }
  export interface InstanceBlockDeviceMapping {
    deviceName?: string
    ebs?: EbsInstanceBlockDevice
  }
  export interface InstanceDetails {
    aws?: Aws
    azureVmss?: AzureVmss
    azureWebapp?: AzureWebapp
    hostName?: string
    instanceType?: 'PCF' | 'AWS' | 'K8s' | 'PHYSICAL_HOST' | 'AZURE_VMSS' | 'AZURE_WEBAPP'
    k8s?: K8s
    newInstance?: boolean
    pcf?: Pcf
    physicalHost?: PhysicalHost
    properties?: {
      [key: string]: {
        [key: string]: any
      }
    }
    serviceId?: string
    serviceName?: string
    serviceTemplateId?: string
    serviceTemplateName?: string
    workloadName?: string
  }
  export interface InstanceElement {
    displayName?: string
    dockerId?: string
    ecsContainerDetails?: EcsContainerDetails
    elementType?:
      | 'SERVICE'
      | 'INFRAMAPPING'
      | 'SERVICE_TEMPLATE'
      | 'TAG'
      | 'SHELL'
      | 'HOST'
      | 'INSTANCE'
      | 'STANDARD'
      | 'PARAM'
      | 'PARTITION'
      | 'OTHER'
      | 'FORK'
      | 'CONTAINER_SERVICE'
      | 'CLUSTER'
      | 'AWS_LAMBDA_FUNCTION'
      | 'AMI_SERVICE_SETUP'
      | 'AMI_SERVICE_DEPLOY'
      | 'ECS_SERVICE_SETUP'
      | 'AMI_SWITCH_ROUTES'
      | 'PCF_SERVICE_SETUP'
      | 'PCF_SERVICE_DEPLOY'
      | 'PCF_ROUTE_SWAP_ROLLBACK'
      | 'PCF_INSTANCE'
      | 'SPOTINST_SERVICE_SETUP'
      | 'SPOTINST_SERVICE_DEPLOY'
      | 'ARTIFACT'
      | 'ARTIFACT_VARIABLE'
      | 'HELM_DEPLOY'
      | 'CLOUD_FORMATION_PROVISION'
      | 'CLOUD_FORMATION_ROLLBACK'
      | 'CLOUD_FORMATION_DEPROVISION'
      | 'TERRAFORM_PROVISION'
      | 'SHELL_SCRIPT_PROVISION'
      | 'K8S'
      | 'TERRAFORM_INHERIT_PLAN'
      | 'TERRAGRUNT_INHERIT_PLAN'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_WEBAPP_SETUP'
      | 'HELM_CHART'
      | 'MANIFEST_VARIABLE'
    host?: HostElement
    hostName?: string
    name?: string
    namespace?: string
    newInstance?: boolean
    podName?: string
    serviceTemplateElement?: ServiceTemplateElement
    uuid?: string
    workloadName?: string
  }
  export interface InstanceExecutionHistory {
    errorCode?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'REVOKED_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_CREDENTIALS_THIRD_PARTY'
      | 'INVALID_KEY'
      | 'INVALID_CONNECTOR_TYPE'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'SCHEMA_VALIDATION_FAILED'
      | 'FILTER_CREATION_ERROR'
      | 'INVALID_YAML_ERROR'
      | 'PLAN_CREATION_ERROR'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'EXPIRE_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'IMAGE_NOT_FOUND'
      | 'ILLEGAL_ARGUMENT'
      | 'IMAGE_TAG_NOT_FOUND'
      | 'DELEGATE_NOT_AVAILABLE'
      | 'INVALID_YAML_PAYLOAD'
      | 'AUTHENTICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'SECRET_NOT_FOUND'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'FILE_NOT_FOUND_ERROR'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'DATA_COLLECTION_ERROR'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'TIMESCALE_NOT_AVAILABLE'
      | 'MIGRATION_EXCEPTION'
      | 'REQUEST_PROCESSING_INTERRUPTED'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
      | 'HTTP_RESPONSE_EXCEPTION'
      | 'SCM_NOT_FOUND_ERROR'
      | 'SCM_CONFLICT_ERROR'
      | 'SCM_UNPROCESSABLE_ENTITY'
      | 'PROCESS_EXECUTION_EXCEPTION'
      | 'SCM_UNAUTHORIZED'
      | 'DATA'
      | 'CONTEXT'
      | 'PR_CREATION_ERROR'
      | 'URL_NOT_REACHABLE'
      | 'URL_NOT_PROVIDED'
      | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
      | 'ENGINE_FUNCTOR_ERROR'
      | 'JIRA_CLIENT_ERROR'
      | 'SCM_NOT_MODIFIED'
      | 'JIRA_STEP_ERROR'
      | 'BUCKET_SERVER_ERROR'
    executionInterruptType?:
      | 'ABORT'
      | 'ABORT_ALL'
      | 'PAUSE'
      | 'PAUSE_FOR_INPUTS'
      | 'PAUSE_ALL'
      | 'RESUME'
      | 'RESUME_ALL'
      | 'RETRY'
      | 'IGNORE'
      | 'WAITING_FOR_MANUAL_INTERVENTION'
      | 'MARK_FAILED'
      | 'MARK_SUCCESS'
      | 'ROLLBACK'
      | 'NEXT_STEP'
      | 'END_EXECUTION'
      | 'ROLLBACK_DONE'
      | 'MARK_EXPIRED'
      | 'CONTINUE_WITH_DEFAULTS'
      | 'CONTINUE_PIPELINE_STAGE'
    intanceCount?: number
    message?: string
    stateName?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
  }
  export interface InstanceInfo {
    [key: string]: any
  }
  export interface InstanceIpv6Address {
    ipv6Address?: string
  }
  export interface InstanceMetadataOptionsResponse {
    httpEndpoint?: string
    httpPutResponseHopLimit?: number
    httpTokens?: string
    state?: string
  }
  export interface InstanceNetworkInterface {
    association?: InstanceNetworkInterfaceAssociation
    attachment?: InstanceNetworkInterfaceAttachment
    description?: string
    groups?: GroupIdentifier[]
    interfaceType?: string
    ipv6Addresses?: InstanceIpv6Address[]
    macAddress?: string
    networkInterfaceId?: string
    ownerId?: string
    privateDnsName?: string
    privateIpAddress?: string
    privateIpAddresses?: InstancePrivateIpAddress[]
    sourceDestCheck?: boolean
    status?: string
    subnetId?: string
    vpcId?: string
  }
  export interface InstanceNetworkInterfaceAssociation {
    ipOwnerId?: string
    publicDnsName?: string
    publicIp?: string
  }
  export interface InstanceNetworkInterfaceAttachment {
    attachTime?: string
    attachmentId?: string
    deleteOnTermination?: boolean
    deviceIndex?: number
    status?: string
  }
  export interface InstancePrivateIpAddress {
    association?: InstanceNetworkInterfaceAssociation
    primary?: boolean
    privateDnsName?: string
    privateIpAddress?: string
  }
  export interface InstanceState {
    code?: number
    name?: string
  }
  export interface InstanceStats {
    entitySummaryList?: EntitySummary[]
    invocationCount?: InvocationCount
    totalCount?: number
  }
  export interface InstanceStatsByArtifact {
    entitySummary?: ArtifactSummary
    instanceStats?: InstanceStats
  }
  export interface InstanceStatsByEnvironment {
    environmentSummary?: EnvironmentSummary
    hasSyncIssues?: boolean
    infraMappingSyncStatusList?: SyncStatus[]
    instanceStatsByArtifactList?: InstanceStatsByArtifact[]
  }
  export interface InstanceStatsByService {
    instanceStatsByEnvList?: InstanceStatsByEnvironment[]
    serviceSummary?: ServiceSummary
    totalCount?: number
  }
  export interface InstanceStatusSummary {
    instanceElement?: InstanceElement
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
  }
  export interface InstanceSummaryStats {
    countMap?: {
      [key: string]: EntitySummaryStats[]
    }
    totalCount?: number
  }
  export interface InstanceSummaryStatsByService {
    invocationCount?: InvocationCount
    nonprodCount?: number
    prodCount?: number
    serviceSummary?: ServiceSummary
    totalCount?: number
  }
  export interface InstanceTimeline {
    localPercentile?: {
      [key: string]: {
        [key: string]: any
      }
    }
    points?: DataPoint[]
  }
  export interface InvocationCount {
    count?: number
    from?: number
    key?: 'LAST_30_DAYS' | 'SINCE_LAST_DEPLOYED'
    to?: number
  }
  export interface JiraConfig {
    accountId?: string
    baseUrl?: string
    certValidationRequired?: boolean
    encryptedPassword?: string
    password?: string[]
    settingType?:
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
    type?: string
    username?: string
  }
  export type JiraConnector = ConnectorConfigDTO & {
    delegateSelectors?: string[]
    jiraUrl: string
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export interface JiraCustomFieldValue {
    fieldType?: string
    fieldValue?: string
  }
  export interface JiraTaskParameters {
    accountId?: string
    activityId?: string
    appId?: string
    approvalField?: string
    approvalId?: string
    approvalValue?: string
    comment?: string
    createmetaExpandParam?: string
    customFields?: {
      [key: string]: JiraCustomFieldValue
    }
    description?: string
    encryptionDetails?: EncryptedDataDetail[]
    issueId?: string
    issueType?: string
    jiraAction?:
      | 'CREATE_TICKET'
      | 'UPDATE_TICKET'
      | 'AUTH'
      | 'GET_PROJECTS'
      | 'GET_FIELDS_OPTIONS'
      | 'GET_STATUSES'
      | 'GET_CREATE_METADATA'
      | 'FETCH_ISSUE'
      | 'FETCH_ISSUE_DATA'
      | 'CHECK_APPROVAL'
    jiraConfig?: JiraConfig
    labels?: string[]
    priority?: string
    project?: string
    rejectionField?: string
    rejectionValue?: string
    status?: string
    summary?: string
    updateIssueIds?: string[]
  }
  export interface JobDetails {
    folder?: boolean
    jobName?: string
    parameters?: JobParameter[]
    url?: string
  }
  export interface JobParameter {
    defaultValue?: string
    description?: string
    name?: string
    options?: string[]
  }
  export interface JsonNode {
    array?: boolean
    bigDecimal?: boolean
    bigInteger?: boolean
    binary?: boolean
    boolean?: boolean
    containerNode?: boolean
    double?: boolean
    float?: boolean
    floatingPointNumber?: boolean
    int?: boolean
    integralNumber?: boolean
    long?: boolean
    missingNode?: boolean
    nodeType?: 'ARRAY' | 'BINARY' | 'BOOLEAN' | 'MISSING' | 'NULL' | 'NUMBER' | 'OBJECT' | 'POJO' | 'STRING'
    null?: boolean
    number?: boolean
    object?: boolean
    pojo?: boolean
    short?: boolean
    textual?: boolean
    valueNode?: boolean
  }
  export interface K8s {
    dockerId?: string
    ip?: string
    podName?: string
  }
  export interface K8sConfigDetails {
    k8sPermissionType?: 'CLUSTER_ADMIN' | 'CLUSTER_VIEWER' | 'NAMESPACE_ADMIN'
    namespace?: string
  }
  export interface K8sEventCollectionBundle {
    cloudProviderId?: string
    clusterId?: string
    clusterName?: string
    connectorIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface KeyValuePair {
    key?: string
    value?: string
  }
  export interface KmsConfig {
    accessKey?: string
    accountId?: string
    assumeIamRoleOnDelegate?: boolean
    assumeStsRoleDuration?: number
    assumeStsRoleOnDelegate?: boolean
    createdAt?: number
    createdBy?: EmbeddedUser
    default?: boolean
    delegateSelectors?: string[]
    encryptedBy?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    externalName?: string
    kmsArn?: string
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    manuallyEnteredSecretEngineMigrationIteration?: number
    name?: string
    nextTokenRenewIteration?: number
    numOfEncryptedValue?: number
    region?: string
    roleArn?: string
    scopedToAccount?: boolean
    secretKey?: string
    templatized?: boolean
    templatizedFields?: string[]
    usageRestrictions?: UsageRestrictions
    uuid: string
  }
  export interface KubernetesAuthCredentialDTO {
    [key: string]: any
  }
  export interface KubernetesAuthDTO {
    spec: KubernetesAuthCredentialDTO
    type: 'UsernamePassword' | 'ClientKeyCert' | 'ServiceAccount' | 'OpenIdConnect'
  }
  export type KubernetesClientKeyCertDTO = KubernetesAuthCredentialDTO & {
    caCertRef?: string
    clientCertRef: string
    clientKeyAlgo?: string
    clientKeyPassphraseRef?: string
    clientKeyRef: string
  }
  export type KubernetesClusterConfigDTO = ConnectorConfigDTO & {
    credential: KubernetesCredentialDTO
    delegateSelectors?: string[]
  }
  export type KubernetesClusterDetailsDTO = KubernetesCredentialSpecDTO & {
    auth: KubernetesAuthDTO
    masterUrl: string
  }
  export interface KubernetesCredentialDTO {
    spec?: KubernetesCredentialSpecDTO
    type: 'InheritFromDelegate' | 'ManualConfig'
  }
  export interface KubernetesCredentialSpecDTO {
    [key: string]: any
  }
  export type KubernetesOpenIdConnectDTO = KubernetesAuthCredentialDTO & {
    oidcClientIdRef: string
    oidcIssuerUrl?: string
    oidcPasswordRef: string
    oidcScopes?: string
    oidcSecretRef?: string
    oidcUsername?: string
    oidcUsernameRef?: string
  }
  export interface KubernetesPayload {
    advancedConfig?: string
  }
  export type KubernetesServiceAccountDTO = KubernetesAuthCredentialDTO & {
    serviceAccountTokenRef: string
  }
  export type KubernetesUserNamePasswordDTO = KubernetesAuthCredentialDTO & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export interface KustomizeConfig {
    kustomizeDirPath?: string
    pluginRootDir?: string
  }
  export interface LDAPTestAuthenticationRequest {
    email?: string
    password?: string
  }
  export interface LabeledLogRecord {
    accountId?: string
    createdAt?: number
    envId?: string
    feedbackIds?: string[]
    label?: string
    lastUpdatedAt?: number
    logDataRecordIds?: string[]
    serviceId?: string
    uuid?: string
  }
  export interface LambdaSpecification {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    defaults?: DefaultSpecification
    functions?: FunctionSpecification[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    serviceId?: string
    uuid: string
  }
  export interface LastDeployedArtifactInformation {
    artifact?: Artifact
    envId?: string
    executionEntityId?: string
    executionEntityName?: string
    executionEntityType?: 'PIPELINE' | 'ORCHESTRATION'
    executionId?: string
    executionStartTime?: number
  }
  export interface LastDeployedHelmChartInformation {
    envId?: string
    executionEntityId?: string
    executionEntityName?: string
    executionEntityType?: 'PIPELINE' | 'ORCHESTRATION'
    executionId?: string
    executionStartTime?: number
    helmchart?: HelmChart
  }
  export interface LdapConnectionSettings {
    bindDN?: string
    bindPassword?: string
    connectTimeout?: number
    host: string
    maxReferralHops?: number
    port?: number
    referralsEnabled?: boolean
    responseTimeout?: number
    sslEnabled?: boolean
  }
  export interface LdapGroupResponse {
    description?: string
    dn?: string
    message?: string
    name?: string
    selectable?: boolean
    totalMembers?: number
    users?: LdapUserResponse[]
  }
  export interface LdapGroupSettings {
    baseDN?: string
    descriptionAttr?: string
    nameAttr?: string
    referencedUserAttr?: string
    searchFilter?: string
    userMembershipAttr?: string
  }
  export interface LdapLinkGroupRequest {
    ldapGroupDN?: string
    ldapGroupName?: string
  }
  export interface LdapResponse {
    message?: string
    status?: 'SUCCESS' | 'FAILURE'
  }
  export interface LdapSettings {
    accountId?: string
    appId: string
    connectionSettings: LdapConnectionSettings
    createdAt?: number
    createdBy?: EmbeddedUser
    displayName?: string
    groupSettings?: LdapGroupSettings
    groupSettingsList?: LdapGroupSettings[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    nextIteration?: number
    type: 'SAML' | 'LDAP' | 'OAUTH'
    url?: string
    userSettings?: LdapUserSettings
    userSettingsList?: LdapUserSettings[]
    uuid: string
  }
  export interface LdapTestResponse {
    message?: string
    status?: 'SUCCESS' | 'FAILURE'
  }
  export interface LdapUserResponse {
    dn?: string
    email?: string
    name?: string
  }
  export interface LdapUserSettings {
    baseDN?: string
    displayNameAttr?: string
    emailAttr?: string
    groupMembershipAttr?: string
    searchFilter?: string
  }
  export interface LicenseConfiguration {
    licenseConfigurationArn?: string
  }
  export interface LicenseInfo {
    accountStatus?: string
    accountType?: string
    expiryTime?: number
    licenseUnits?: number
  }
  export interface LicenseUpdateInfo {
    licenseInfo: LicenseInfo
    requiredInfoToComply?: {
      [key: string]: {
        [key: string]: {
          [key: string]: any
        }
      }
    }
  }
  export interface LimitCheck {
    limit?: number
    value?: number
  }
  export interface ListInfraDefinitionParams {
    deploymentTypeFromMetaData?: string[]
    serviceIds?: string[]
  }
  export type LocalConnectorDTO = ConnectorConfigDTO & {
    default?: boolean
  }
  export interface LocalTime {
    hour?: number
    minute?: number
    nano?: number
    second?: number
  }
  export interface Log {
    accountId?: string
    activityId?: string
    appId: string
    commandExecutionStatus: 'SUCCESS' | 'FAILURE' | 'RUNNING' | 'QUEUED' | 'SKIPPED'
    commandUnitName?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    hostName?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    linesCount?: number
    logLevel: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'FATAL'
    logLine?: string
    uuid: string
  }
  export interface LogCollectionInfo {
    collectionBody?: string
    collectionUrl?: string
    method?: 'POST' | 'GET'
    responseMapping?: ResponseMapping
    responseType?: 'JSON'
  }
  export interface LogConfiguration {
    logDriver?: string
    options?: LogOption[]
  }
  export interface LogDataRecord {
    accountId?: string
    appId: string
    clusterLabel?: string
    clusterLevel?: 'L0' | 'L1' | 'L2' | 'H0' | 'H1' | 'H2' | 'HF'
    count?: number
    createdAt?: number
    createdBy?: EmbeddedUser
    cvConfigId?: string
    host?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    logCollectionMinute?: number
    logMD5Hash?: string
    logMessage?: string
    query?: string
    serviceId?: string
    stateExecutionId?: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    supervisedLabel?: string
    timeStamp?: number
    timesLabeled?: number
    uuid: string
    validUntil?: string
    workflowExecutionId?: string
    workflowId?: string
  }
  export interface LogMLAnalysisSummary {
    analysisComparisonStrategy?: 'COMPARE_WITH_PREVIOUS' | 'COMPARE_WITH_CURRENT' | 'PREDICTIVE'
    analysisMinute?: number
    analysisSummaryMessage?: string
    baseLineExecutionId?: string
    baselineEndTime?: number
    baselineStartTime?: number
    controlClusters?: LogMLClusterSummary[]
    emptyResult?: boolean
    highRiskClusters?: number
    ignoreClusters?: LogMLClusterSummary[]
    lowRiskClusters?: number
    mediumRiskClusters?: number
    newVersionNodes?: string[]
    previousVersionNodes?: string[]
    progress?: number
    query?: string
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    score?: number
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    testClusters?: LogMLClusterSummary[]
    timeDuration?: number
    unknownClusters?: LogMLClusterSummary[]
  }
  export interface LogMLClusterSummary {
    clusterLabel?: number
    feedbackSummary?: LogMLFeedbackSummary
    hostSummary?: {
      [key: string]: LogMLHostSummary
    }
    jiraLink?: string
    logMLFeedbackId?: string
    logMLFeedbackType?:
      | 'IGNORE_SERVICE'
      | 'IGNORE_WORKFLOW'
      | 'IGNORE_WORKFLOW_EXECUTION'
      | 'IGNORE_ALWAYS'
      | 'DISMISS'
      | 'PRIORITIZE'
      | 'THUMBS_UP'
      | 'THUMBS_DOWN'
      | 'UNDO_IGNORE'
    logText?: string
    priority?: 'BASELINE' | 'P5' | 'P4' | 'P3' | 'P2' | 'P1' | 'P0'
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    score?: number
    tags?: string[]
  }
  export interface LogMLFeedback {
    analysisMinute?: number
    appId?: string
    clusterLabel?: number
    clusterType?: 'CONTROL' | 'TEST' | 'UNKNOWN' | 'IGNORE'
    comment?: string
    envId?: string
    logMLFeedbackId?: string
    logMLFeedbackType?:
      | 'IGNORE_SERVICE'
      | 'IGNORE_WORKFLOW'
      | 'IGNORE_WORKFLOW_EXECUTION'
      | 'IGNORE_ALWAYS'
      | 'DISMISS'
      | 'PRIORITIZE'
      | 'THUMBS_UP'
      | 'THUMBS_DOWN'
      | 'UNDO_IGNORE'
    serviceId?: string
    stateExecutionId?: string
  }
  export interface LogMLFeedbackRecord {
    actionTaken?: 'ADD_TO_BASELINE' | 'REMOVE_FROM_BASELINE' | 'UPDATE_PRIORITY'
    analysisMinute?: number
    appId: string
    clusterLabel?: number
    clusterType?: 'CONTROL' | 'TEST' | 'UNKNOWN' | 'IGNORE'
    comment?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    cvConfigId?: string
    envId?: string
    jiraLink?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    logMD5Hash?: string
    logMLFeedbackType?:
      | 'IGNORE_SERVICE'
      | 'IGNORE_WORKFLOW'
      | 'IGNORE_WORKFLOW_EXECUTION'
      | 'IGNORE_ALWAYS'
      | 'DISMISS'
      | 'PRIORITIZE'
      | 'THUMBS_UP'
      | 'THUMBS_DOWN'
      | 'UNDO_IGNORE'
    logMessage?: string
    metadata?: {
      [key: string]: any
    }
    priority?: 'BASELINE' | 'P5' | 'P4' | 'P3' | 'P2' | 'P1' | 'P0'
    serviceId?: string
    stateExecutionId?: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    supervisedLabel?: string
    uuid: string
    workflowExecutionId?: string
    workflowId?: string
  }
  export interface LogMLFeedbackSummary {
    feedbackNote?: string
    jiraLink?: string
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    logMLFeedbackId?: string
    priority?: 'BASELINE' | 'P5' | 'P4' | 'P3' | 'P2' | 'P1' | 'P0'
  }
  export interface LogMLHostSummary {
    count?: number
    frequencies?: number[]
    frequencyMap?: {
      [key: string]: number
    }
    unexpectedFreq?: boolean
    xcordinate?: number
    ycordinate?: number
  }
  export interface LogOption {
    key?: string
    value?: string
  }
  export interface LoginRequest {
    authorization?: string
  }
  export interface LoginSettings {
    accountId: string
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    passwordExpirationPolicy: PasswordExpirationPolicy
    passwordStrengthPolicy: PasswordStrengthPolicy
    userLockoutPolicy: UserLockoutPolicy
    uuid: string
  }
  export interface LoginTypeRequest {
    userName?: string
  }
  export interface LoginTypeResponse {
    authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
    defaultExperience?: 'NG' | 'CG'
    oauthEnabled?: boolean
    showCaptcha?: boolean
    ssorequest?: SSORequest
  }
  export interface LogoutResponse {
    logoutUrl?: string
  }
  export interface LogsCVConfiguration {
    accountId: string
    alertEnabled?: boolean
    alertPriority?: 'BASELINE' | 'P5' | 'P4' | 'P3' | 'P2' | 'P1' | 'P0'
    alertThreshold?: number
    analysisTolerance: 'LOW' | 'MEDIUM' | 'HIGH'
    appId: string
    appName?: string
    baselineEndMinute?: number
    baselineStartMinute?: number
    comparisonStrategy?: 'COMPARE_WITH_PREVIOUS' | 'COMPARE_WITH_CURRENT' | 'PREDICTIVE'
    connectorId: string
    connectorName?: string
    contextId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    customThresholdRefId?: string
    enabled24x7?: boolean
    envId: string
    envName?: string
    is247LogsV2?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name: string
    numOfOccurrencesForAlert?: number
    query?: string
    serviceId: string
    serviceName?: string
    snoozeEndTime?: number
    snoozeStartTime?: number
    stateType:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    uuid: string
    workflowConfig?: boolean
  }
  export interface LoopParams {
    [key: string]: any
  }
  export interface ManifestFile {
    accountId?: string
    appId: string
    applicationManifestId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    fileContent?: string
    fileName?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    uuid: string
  }
  export interface ManifestSelection {
    appManifestId?: string
    appManifestName?: string
    pipelineId?: string
    pipelineName?: string
    serviceId?: string
    serviceName?: string
    type?: 'FROM_APP_MANIFEST' | 'LAST_COLLECTED' | 'LAST_DEPLOYED' | 'PIPELINE_SOURCE' | 'WEBHOOK_VARIABLE'
    versionRegex?: string
    workflowId?: string
    workflowName?: string
  }
  export interface ManifestSummary {
    appManifestName?: string
    name?: string
    source?: string
    uuid?: string
    versionNo?: string
  }
  export type ManifestTriggerCondition = TriggerCondition & {
    appManifestId?: string
    appManifestName?: string
    serviceId?: string
    serviceName?: string
    versionRegex?: string
  }
  export interface ManifestVariable {
    allowMultipleValues?: boolean
    allowedList?: string[]
    allowedValues?: string
    applicationManifestSummary?: ApplicationManifestSummary[]
    artifactStreamSummaries?: ArtifactStreamSummary[]
    description?: string
    fixed?: boolean
    lastDeployedHelmChartInfo?: LastDeployedHelmChartInformation
    mandatory?: boolean
    metadata?: {
      [key: string]: {
        [key: string]: any
      }
    }
    name?: string
    runtimeInput?: boolean
    serviceId?: string
    serviceName?: string
    type?: 'TEXT' | 'NUMBER' | 'EMAIL' | 'ENTITY' | 'ARTIFACT' | 'MANIFEST'
    value?: string
    workflowIds?: string[]
  }
  export interface ManualInterventionAlertFilters {
    appIds?: string[]
    envIds?: string[]
  }
  export interface Member {
    display?: string
    ref?: string
    value?: string
  }
  export interface Metric {
    displayName?: string
    metricName?: string
    mlMetricType?: 'INFRA' | 'VALUE' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'VALUE_LOWER'
    tags?: string[]
  }
  export interface MetricCollectionInfo {
    baselineCollectionUrl?: string
    collectionBody?: string
    collectionUrl?: string
    method?: 'POST' | 'GET'
    metricName?: string
    metricType?: 'INFRA' | 'VALUE' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'VALUE_LOWER'
    responseMapping?: ResponseMapping
    responseType?: 'JSON'
    tag?: string
  }
  export interface MetricsServerCheck {
    isInstalled?: boolean
    message?: string
  }
  export interface ModuleLicenseDTO {
    accountIdentifier?: string
    createdAt?: number
    edition?: 'FREE' | 'TEAM' | 'ENTERPRISE'
    expiryTime?: number
    id?: string
    lastModifiedAt?: number
    licenseType?: 'TRIAL' | 'PAID'
    moduleType?: 'CD' | 'CI' | 'CV' | 'CE' | 'CF'
    startTime?: number
    status?: 'ACTIVE' | 'DELETED' | 'EXPIRED'
  }
  export interface Monitoring {
    state?: string
  }
  export type MultiServiceOrchestrationWorkflow = OrchestrationWorkflow & {
    derivedVariables?: Variable[]
    failureStrategies?: FailureStrategy[]
    graph?: Graph
    postDeploymentSteps?: PhaseStep
    preDeploymentSteps?: PhaseStep
    rollbackProvisioners?: PhaseStep
    rollbackWorkflowPhaseIdMap?: {
      [key: string]: WorkflowPhase
    }
    systemVariables?: Variable[]
    workflowPhases?: WorkflowPhase[]
  }
  export interface NGEncryptedDataMetadata {
    accountIdentifier?: string
    description?: string
    draft?: boolean
    identifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    secretManagerIdentifier?: string
    secretManagerName?: string
    tags?: string[]
  }
  export interface NGSecretManagerMetadata {
    accountIdentifier?: string
    deleted?: boolean
    description?: string
    harnessManaged?: boolean
    identifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    tags?: NGTag[]
  }
  export interface NGTag {
    key: string
    value: string
  }
  export interface NameValuePair {
    name?: string
    value: string
    valueType?: string
  }
  export type NewInstanceTriggerCondition = TriggerCondition & {}
  export interface NewRelicApplication {
    id?: number
    name?: string
  }
  export interface NewRelicApplicationInstance {
    host?: string
    id?: number
    port?: number
  }
  export type NewRelicConnectorDTO = ConnectorConfigDTO & {
    apiKeyRef: string
    delegateSelectors?: string[]
    newRelicAccountId: string
    url: string
  }
  export interface NewRelicMetric {
    name?: string
  }
  export interface NewRelicMetricAnalysis {
    displayName?: string
    fullMetricName?: string
    metricName?: string
    metricValues?: NewRelicMetricAnalysisValue[]
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    tag?: string
  }
  export interface NewRelicMetricAnalysisRecord {
    accountId?: string
    analysisMinute?: number
    appId: string
    baseLineExecutionId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    cvConfigId?: string
    dependencyPath?: string
    groupName?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    message?: string
    metricAnalyses?: NewRelicMetricAnalysis[]
    mlAnalysisType?: 'COMPARATIVE' | 'PREDICTIVE' | 'TIMESERIES_24x7'
    progress?: number
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    showTimeSeries?: boolean
    stateExecutionId?: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    uuid: string
    workflowExecutionId?: string
  }
  export interface NewRelicMetricAnalysisValue {
    alertType?: string
    controlValue?: number
    hostAnalysisValues?: NewRelicMetricHostAnalysisValue[]
    name?: string
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    testValue?: number
    type?: string
  }
  export interface NewRelicMetricHostAnalysisValue {
    anomalies?: number[]
    controlHostName?: string
    controlValues?: number[]
    failFastCriteriaDescription?: string
    lowerThresholds?: number[]
    riskLevel?: 'HIGH' | 'MEDIUM' | 'LOW' | 'NA'
    testHostName?: string
    testStartIndex?: number
    testValues?: number[]
    upperThresholds?: number[]
  }
  export interface NewRelicSetupTestNodeData {
    appId: string
    fromTime?: number
    guid?: string
    hostExpression?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    newRelicAppId?: number
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    toTime?: number
    workflowId?: string
  }
  export interface NexusAuthCredentials {
    [key: string]: any
  }
  export interface NexusAuthentication {
    spec?: NexusAuthCredentials
    type: 'UsernamePassword' | 'Anonymous'
  }
  export type NexusConnector = ConnectorConfigDTO & {
    auth?: NexusAuthentication
    delegateSelectors?: string[]
    nexusServerUrl: string
    version: string
  }
  export type NexusUsernamePasswordAuth = NexusAuthCredentials & {
    passwordRef: string
    username?: string
    usernameRef?: string
  }
  export interface Notification {
    accountId?: string
    actionable: boolean
    appId: string
    complete: boolean
    createdAt?: number
    createdBy?: EmbeddedUser
    entityId?: string
    entityType?:
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    environmentId?: string
    eventType?:
      | 'USER_INVITED_FROM_EXISTING_ACCOUNT'
      | 'COMPLETE_USER_REGISTRATION'
      | 'FIRST_DELEGATE_REGISTERED'
      | 'FIRST_WORKFLOW_CREATED'
      | 'FIRST_DEPLOYMENT_EXECUTED'
      | 'FIRST_VERIFIED_DEPLOYMENT'
      | 'FIRST_ROLLED_BACK_DEPLOYMENT'
      | 'SETUP_CV_24X7'
      | 'SETUP_2FA'
      | 'SETUP_SSO'
      | 'SETUP_IP_WHITELISTING'
      | 'SETUP_RBAC'
      | 'TRIAL_TO_PAID'
      | 'TRIAL_TO_COMMUNITY'
      | 'COMMUNITY_TO_PAID'
      | 'COMMUNITY_TO_ESSENTIALS'
      | 'ESSENTIALS_TO_PAID'
      | 'PAID_TO_ESSENTIALS'
      | 'TRIAL_TO_ESSENTIALS'
      | 'CV_META_DATA'
      | 'OPEN_ALERT'
      | 'CLOSE_ALERT'
      | 'NEW_TRIAL_SIGNUP'
      | 'LICENSE_UPDATE'
      | 'DEPLOYMENT_VERIFIED'
      | 'JOIN_ACCOUNT_REQUEST'
      | 'SERVICE_GUARD_SETUP'
      | 'DEPLOYMENT_EVENT'
      | 'INSTANCE_EVENT'
      | 'CUSTOM'
      | 'TECH_STACK'
      | 'ACCOUNT_ENTITY_CHANGE'
      | 'BLACKOUT_WINDOW_UPDATED'
      | 'SECRET_MANAGER_TYPE'
      | 'USER_INVITE_ACCEPTED_FOR_TRIAL_ACCOUNT'
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    notificationTemplateId?: string
    notificationTemplateVariables?: {
      [key: string]: string
    }
    notificationType: 'APPROVAL' | 'CHANGE' | 'FAILURE' | 'INFORMATION'
    uuid: string
  }
  export interface NotificationGroup {
    accountId?: string
    addressesByChannelType: {
      [key: string]: string[]
    }
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    defaultNotificationGroupForAccount?: boolean
    editable?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name: string
    roles?: Role[]
    uuid: string
  }
  export interface NotificationRule {
    active?: boolean
    batchNotifications?: boolean
    conditions?: (
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    )[]
    executionScope?: 'WORKFLOW' | 'WORKFLOW_PHASE'
    notificationGroupAsExpression?: boolean
    notificationGroups: NotificationGroup[]
    userGroupAsExpression?: boolean
    userGroupExpression: string
    userGroupIds: string[]
    uuid?: string
  }
  export interface NotificationRulesStatus {
    accountId?: string
    enabled?: boolean
  }
  export interface NotificationSettings {
    emailAddresses: string[]
    microsoftTeamsWebhookUrl?: string
    pagerDutyIntegrationKey?: string
    sendMailToNewMembers?: boolean
    slackConfig: SlackNotificationSetting
    useIndividualEmails?: boolean
  }
  export interface OauthSettings {
    accountId?: string
    allowedProviders?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    displayName?: string
    filter?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    nextIteration?: number
    type: 'SAML' | 'LDAP' | 'OAUTH'
    url?: string
    uuid: string
  }
  export interface OauthUserInfo {
    email?: string
    freemiumAssistedOption?: boolean
    freemiumProducts?: ('CD' | 'CE' | 'CI')[]
    login?: string
    name?: string
    utmInfo?: UtmInfo
  }
  export type OktaAddOperation = PatchOperation & {
    value?: JsonNode
  }
  export type OktaRemoveOperation = PatchOperation & {
    value?: JsonNode
  }
  export type OktaReplaceOperation = PatchOperation & {
    value?: JsonNode
  }
  export interface OrchestrationWorkflow {
    concurrencyStrategy?: ConcurrencyStrategy
    infraDefinitionIds?: string[]
    infraMappingIds?: string[]
    linkedTemplateUuids?: string[]
    notificationRules?: NotificationRule[]
    orchestrationWorkflowType?: 'BUILD' | 'BASIC' | 'CANARY' | 'MULTI_SERVICE' | 'BLUE_GREEN' | 'ROLLING' | 'CUSTOM'
    requiredEntityTypes?: (
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    )[]
    serviceIds?: string[]
    userVariables?: Variable[]
    valid?: boolean
    validationMessage?: string
  }
  export interface Pcf {
    applicationId?: string
    applicationName?: string
    instanceIndex?: string
  }
  export interface PhysicalHost {
    instanceId?: string
    publicDns?: string
  }
  export interface Pair {
    key?: {
      [key: string]: any
    }
    left?: {
      [key: string]: any
    }
    right?: {
      [key: string]: any
    }
    value?: {
      [key: string]: any
    }
  }
  export interface PairDelegateInsightsTypeLong {
    key?: 'SUCCESSFUL' | 'FAILED' | 'IN_PROGRESS' | 'PERPETUAL_TASK_ASSIGNED'
    left?: 'SUCCESSFUL' | 'FAILED' | 'IN_PROGRESS' | 'PERPETUAL_TASK_ASSIGNED'
    right?: number
    value?: number
  }
  export interface ParallelInfo {
    groupIndex?: number
  }
  export interface PasswordExpirationPolicy {
    daysBeforePasswordExpires?: number
    daysBeforeUserNotifiedOfPasswordExpiration?: number
    enabled?: boolean
  }
  export interface PasswordStrengthPolicy {
    enabled?: boolean
    minNumberOfCharacters?: number
    minNumberOfDigits?: number
    minNumberOfLowercaseCharacters?: number
    minNumberOfSpecialCharacters?: number
    minNumberOfUppercaseCharacters?: number
  }
  export interface PatchOperation {
    path?: string
  }
  export interface PatchRequest {
    Operations: PatchOperation[]
    externalId?: string
    id?: string
    meta?: JsonNode
    schemas: string[]
  }
  export type PcfCommandTemplate = BaseTemplate & {
    scriptString?: string
    timeoutIntervalInMinutes?: number
  }
  export type PcfInfraStructure = InfraMappingInfrastructureProvider & {
    organization?: string
    routeMaps?: string[]
    space?: string
    tempRouteMap?: string[]
  }
  export interface PcfInstanceElement {
    applicationId?: string
    displayName?: string
    elementType?:
      | 'SERVICE'
      | 'INFRAMAPPING'
      | 'SERVICE_TEMPLATE'
      | 'TAG'
      | 'SHELL'
      | 'HOST'
      | 'INSTANCE'
      | 'STANDARD'
      | 'PARAM'
      | 'PARTITION'
      | 'OTHER'
      | 'FORK'
      | 'CONTAINER_SERVICE'
      | 'CLUSTER'
      | 'AWS_LAMBDA_FUNCTION'
      | 'AMI_SERVICE_SETUP'
      | 'AMI_SERVICE_DEPLOY'
      | 'ECS_SERVICE_SETUP'
      | 'AMI_SWITCH_ROUTES'
      | 'PCF_SERVICE_SETUP'
      | 'PCF_SERVICE_DEPLOY'
      | 'PCF_ROUTE_SWAP_ROLLBACK'
      | 'PCF_INSTANCE'
      | 'SPOTINST_SERVICE_SETUP'
      | 'SPOTINST_SERVICE_DEPLOY'
      | 'ARTIFACT'
      | 'ARTIFACT_VARIABLE'
      | 'HELM_DEPLOY'
      | 'CLOUD_FORMATION_PROVISION'
      | 'CLOUD_FORMATION_ROLLBACK'
      | 'CLOUD_FORMATION_DEPROVISION'
      | 'TERRAFORM_PROVISION'
      | 'SHELL_SCRIPT_PROVISION'
      | 'K8S'
      | 'TERRAFORM_INHERIT_PLAN'
      | 'TERRAGRUNT_INHERIT_PLAN'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_WEBAPP_SETUP'
      | 'HELM_CHART'
      | 'MANIFEST_VARIABLE'
    instanceIndex?: string
    name?: string
    newInstance?: boolean
    upsize?: boolean
    uuid?: string
  }
  export interface PcfInstanceKey {
    id?: string
  }
  export interface PcfServiceSpecification {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    manifestYaml: string
    serviceId: string
    uuid: string
  }
  export interface Permission {
    accountId?: string
    action?:
      | 'ALL'
      | 'CREATE'
      | 'READ'
      | 'UPDATE'
      | 'DELETE'
      | 'EXECUTE'
      | 'EXECUTE_WORKFLOW'
      | 'EXECUTE_PIPELINE'
      | 'EXECUTE_WORKFLOW_ROLLBACK'
      | 'DEFAULT'
    appId?: string
    envId?: string
    environmentType?: 'PROD' | 'NON_PROD' | 'ALL'
    permissionScope?:
      | 'ACCOUNT'
      | 'LOGGED_IN'
      | 'DELEGATE'
      | 'NONE'
      | 'APP'
      | 'ALL_APP_ENTITIES'
      | 'ENV'
      | 'SERVICE'
      | 'WORKFLOW'
      | 'PIPELINE'
      | 'DEPLOYMENT'
      | 'APPLICATION_CREATE_DELETE'
      | 'USER_PERMISSION_MANAGEMENT'
      | 'ACCOUNT_MANAGEMENT'
      | 'PROVISIONER'
      | 'TEMPLATE_MANAGEMENT'
      | 'USER_PERMISSION_READ'
      | 'AUDIT_VIEWER'
      | 'TAG_MANAGEMENT'
      | 'CE_ADMIN'
      | 'CE_VIEWER'
      | 'MANAGE_CLOUD_PROVIDERS'
      | 'MANAGE_CONNECTORS'
      | 'MANAGE_APPLICATIONS'
      | 'MANAGE_APPLICATION_STACKS'
      | 'MANAGE_DELEGATES'
      | 'MANAGE_ALERT_NOTIFICATION_RULES'
      | 'MANAGE_DELEGATE_PROFILES'
      | 'MANAGE_CONFIG_AS_CODE'
      | 'MANAGE_SECRETS'
      | 'MANAGE_SECRET_MANAGERS'
      | 'MANAGE_SSH_AND_WINRM'
      | 'MANAGE_AUTHENTICATION_SETTINGS'
      | 'MANAGE_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'VIEW_USER_AND_USER_GROUPS_AND_API_KEYS'
      | 'MANAGE_IP_WHITELIST'
      | 'MANAGE_IP_WHITELISTING'
      | 'MANAGE_DEPLOYMENT_FREEZES'
      | 'MANAGE_PIPELINE_GOVERNANCE_STANDARDS'
      | 'MANAGE_API_KEYS'
      | 'MANAGE_TAGS'
      | 'MANAGE_CUSTOM_DASHBOARDS'
      | 'CREATE_CUSTOM_DASHBOARDS'
      | 'MANAGE_RESTRICTED_ACCESS'
    resourceType?:
      | 'APPLICATION'
      | 'SERVICE'
      | 'CONFIGURATION'
      | 'CONFIGURATION_OVERRIDE'
      | 'WORKFLOW'
      | 'ENVIRONMENT'
      | 'ROLE'
      | 'DEPLOYMENT'
      | 'ARTIFACT'
      | 'CLOUD'
      | 'USER'
      | 'CD'
      | 'PIPELINE'
      | 'SETTING'
      | 'LIMIT'
      | 'APP_STACK'
      | 'NOTIFICATION_GROUP'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'WHITE_LIST'
      | 'SSO'
      | 'API_KEY'
      | 'PROVISIONER'
      | 'PREFERENCE'
      | 'TEMPLATE'
      | 'CUSTOM_DASHBOARD'
      | 'BUDGET'
      | 'GCP_RESOURCE'
      | 'CLUSTERRECORD'
      | 'K8S_LABEL'
      | 'K8S_EVENT_YAML_DIFF'
      | 'K8S_RECOMMENDATION'
      | 'CE_ANOMALIES'
      | 'CE_CLUSTER'
      | 'CE_CONNECTOR'
      | 'CE_BATCH'
      | 'LINKED_ACCOUNT'
  }
  export interface PerpetualTaskClientContext {
    clientId?: string
    clientParams?: {
      [key: string]: string
    }
    executionBundle?: string[]
    lastContextUpdated?: number
  }
  export interface PerpetualTaskRecord {
    accountId?: string
    assignerIterations?: number[]
    clientContext?: PerpetualTaskClientContext
    createdAt?: number
    delegateId?: string
    intervalSeconds?: number
    lastHeartbeat?: number
    lastUpdatedAt?: number
    perpetualTaskType?: string
    rebalanceIteration?: number
    state?:
      | 'TASK_UNASSIGNED'
      | 'TASK_TO_REBALANCE'
      | 'TASK_PAUSED'
      | 'TASK_ASSIGNED'
      | 'NO_DELEGATE_INSTALLED'
      | 'NO_DELEGATE_AVAILABLE'
      | 'NO_ELIGIBLE_DELEGATES'
      | 'TASK_RUN_SUCCEEDED'
      | 'TASK_RUN_FAILED'
    taskDescription?: string
    timeoutMillis?: number
    unassignedReason?: 'NO_DELEGATE_INSTALLED' | 'NO_DELEGATE_AVAILABLE' | 'NO_ELIGIBLE_DELEGATES'
    uuid?: string
  }
  export type PerspectiveBudgetScope = BudgetScope & {
    viewId?: string
    viewName?: string
  }
  export interface PhaseStep {
    artifactNeeded?: boolean
    failureStrategies?: FailureStrategy[]
    name?: string
    phaseStepNameForRollback?: string
    phaseStepType?:
      | 'SELECT_NODE'
      | 'INFRASTRUCTURE_NODE'
      | 'PROVISION_NODE'
      | 'DISABLE_SERVICE'
      | 'DEPLOY_SERVICE'
      | 'ENABLE_SERVICE'
      | 'VERIFY_SERVICE'
      | 'WRAP_UP'
      | 'PRE_DEPLOYMENT'
      | 'ROLLBACK_PROVISIONERS'
      | 'POST_DEPLOYMENT'
      | 'STOP_SERVICE'
      | 'DE_PROVISION_NODE'
      | 'CLUSTER_SETUP'
      | 'CONTAINER_SETUP'
      | 'CONTAINER_DEPLOY'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROUTE_UPDATE'
      | 'PCF_SWICH_ROUTES'
      | 'START_SERVICE'
      | 'DEPLOY_AWSCODEDEPLOY'
      | 'PREPARE_STEPS'
      | 'DEPLOY_AWS_LAMBDA'
      | 'COLLECT_ARTIFACT'
      | 'AMI_AUTOSCALING_GROUP_SETUP'
      | 'AMI_DEPLOY_AUTOSCALING_GROUP'
      | 'AMI_SWITCH_AUTOSCALING_GROUP_ROUTES'
      | 'ECS_UPDATE_LISTENER_BG'
      | 'ECS_UPDATE_ROUTE_53_DNS_WEIGHT'
      | 'HELM_DEPLOY'
      | 'ROUTE_UPDATE'
      | 'K8S_PHASE_STEP'
      | 'PROVISION_INFRASTRUCTURE'
      | 'ROLLBACK_PROVISION_INFRASTRUCTURE'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'STAGE_EXECUTION'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROLLBACK'
      | 'CUSTOM_DEPLOYMENT_PHASE_STEP'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_TRAFFIC_SHIFT'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
    rollback?: boolean
    statusForRollback?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    stepSkipStrategies?: StepSkipStrategy[]
    steps?: GraphNode[]
    stepsInParallel?: boolean
    uuid?: string
    valid?: boolean
    validationMessage?: string
    waitInterval?: number
  }
  export type PhysicalInfra = InfraMappingInfrastructureProvider & {
    expressions?: {
      [key: string]: string
    }
    hostConnectionAttrs?: string
    hostNames?: string[]
    hosts?: Host[]
    loadBalancerId?: string
    loadBalancerName?: string
  }
  export type PhysicalInfraWinrm = InfraMappingInfrastructureProvider & {
    hostNames?: string[]
    hosts?: Host[]
    loadBalancerId?: string
    loadBalancerName?: string
    winRmConnectionAttributes?: string
  }
  export interface Pipeline {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    deploymentTypes?: (
      | 'SSH'
      | 'AWS_CODEDEPLOY'
      | 'ECS'
      | 'SPOTINST'
      | 'KUBERNETES'
      | 'HELM'
      | 'AWS_LAMBDA'
      | 'AMI'
      | 'WINRM'
      | 'PCF'
      | 'AZURE_VMSS'
      | 'AZURE_WEBAPP'
      | 'CUSTOM'
    )[]
    description?: string
    envIds?: string[]
    envParameterized?: boolean
    envSummaries?: EnvSummary[]
    failureStrategies?: FailureStrategy[]
    hasBuildWorkflow?: boolean
    hasSshInfraMapping?: boolean
    infraDefinitionIds?: string[]
    infraMappingIds?: string[]
    keywords?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name: string
    pipelineStages?: PipelineStage[]
    pipelineVariables?: Variable[]
    sample?: boolean
    services?: Service[]
    stateEtaMap?: {
      [key: string]: number
    }
    tagLinks?: HarnessTagLink[]
    templatized?: boolean
    uuid: string
    valid?: boolean
    validationMessage?: string
    workflowExecutions?: WorkflowExecution[]
    workflowIds?: string[]
  }
  export interface PipelineExecution {
    appId: string
    appName?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    endTs?: number
    estimatedTime?: number
    name?: string
    pipeline?: Pipeline
    pipelineId?: string
    pipelineStageExecutions?: PipelineStageExecution[]
    startTs?: number
    stateMachineId?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    uuid: string
    workflowExecutionId?: string
    workflowType?: 'PIPELINE' | 'ORCHESTRATION'
  }
  export interface PipelineGovernanceConfig {
    accountId?: string
    description?: string
    enabled?: boolean
    name?: string
    restrictions?: Restriction[]
    rules?: PipelineGovernanceRule[]
    uuid?: string
  }
  export interface PipelineGovernanceRule {
    matchType?: 'ANY' | 'ALL'
    note?: string
    tags?: Tag[]
    weight?: number
  }
  export interface PipelineReportCard {
    governanceStandard?: GovernanceStandard
    pipelineId?: string
    ruleStatuses?: GovernanceRuleStatus[]
  }
  export interface PipelineRule {
    allEvents?: boolean
    allPipelines?: boolean
    events?: string[]
    pipelineIds?: string[]
  }
  export interface PipelineStage {
    looped?: boolean
    loopedVarName?: string
    name?: string
    parallel?: boolean
    pipelineStageElements?: PipelineStageElement[]
    valid?: boolean
    validationMessage?: string
  }
  export interface PipelineStageElement {
    disable?: boolean
    disableAssertion?: string
    name?: string
    parallelIndex?: number
    properties?: {
      [key: string]: {
        [key: string]: any
      }
    }
    runtimeInputsConfig?: RuntimeInputsConfig
    type?: string
    uuid?: string
    valid?: boolean
    validationMessage?: string
    workflowVariables?: {
      [key: string]: string
    }
  }
  export interface PipelineStageExecution {
    disableAssertionInspection?: StateInspection
    endTs?: number
    estimatedTime?: number
    expiryTs?: number
    looped?: boolean
    message?: string
    needsInputButNotReceivedYet?: boolean
    parallelInfo?: ParallelInfo
    pipelineStageElementId?: string
    skipCondition?: string
    startTs?: number
    stateExecutionData?: StateExecutionData
    stateName?: string
    stateType?: string
    stateUuid?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    triggeredBy?: EmbeddedUser
    waitingForInputs?: boolean
    workflowExecutions?: WorkflowExecution[]
  }
  export interface PipelineStageGroupedInfo {
    name?: string
    parallelIndex?: number
    pipelineStageElementNames?: string[]
  }
  export interface PipelineSummary {
    pipelineId?: string
    pipelineName?: string
  }
  export type PipelineTriggerCondition = TriggerCondition & {
    pipelineId?: string
    pipelineName?: string
  }
  export interface Placement {
    affinity?: string
    availabilityZone?: string
    groupName?: string
    hostId?: string
    hostResourceGroupArn?: string
    partitionNumber?: number
    spreadDomain?: string
    tenancy?: string
  }
  export interface PodInstanceKey {
    namespace?: string
    podName?: string
  }
  export interface PortMapping {
    containerPort?: number
    hostPort?: number
  }
  export interface Preference {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    preferenceType?: string
    userId?: string
    uuid: string
  }
  export interface ProductCode {
    productCodeId?: string
    productCodeType?: string
  }
  export interface ProfileScopingRulesDetails {
    profileId?: string
    profileName?: string
    scopingRulesDescriptions?: string[]
  }
  export type PrometheusConnectorDTO = ConnectorConfigDTO & {
    delegateSelectors?: string[]
    url: string
  }
  export interface PrometheusSetupTestNodeData {
    appId: string
    fromTime?: number
    guid?: string
    hostExpression?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    timeSeriesToAnalyze?: TimeSeries[]
    toTime?: number
    workflowId?: string
  }
  export interface ProvisionStep {
    done?: boolean
    step?: string
  }
  export interface PublicUser {
    inviteAccepted?: boolean
    user?: User
  }
  export interface RateLimit {
    count?: number
    duration?: number
    durationUnit: 'NANOSECONDS' | 'MICROSECONDS' | 'MILLISECONDS' | 'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS'
    limitType?: 'STATIC' | 'RATE_LIMIT'
  }
  export interface ReferencedTemplate {
    templateReference?: TemplateReference
    variableMapping?: {
      [key: string]: Variable
    }
  }
  export type RemoveOperation = PatchOperation & {
    value?: JsonNode
  }
  export type ReplaceOperation = PatchOperation & {
    value?: JsonNode
  }
  export interface RequiredExecutionArgs {
    defaultExecutionArgs?: ExecutionArgs
    entityTypes?: (
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    )[]
  }
  export interface ResendInvitationEmailRequest {
    email?: string
  }
  export interface ResetPasswordRequest {
    email?: string
    isNG?: boolean
  }
  export interface ResourceConstraint {
    accountId?: string
    capacity?: number
    createdAt?: number
    createdBy?: EmbeddedUser
    harnessOwned?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    strategy?: 'ASAP' | 'FIFO'
    uuid: string
  }
  export interface ResourceConstraintUsage {
    activeScopes?: ActiveScope[]
    resourceConstraintId?: string
  }
  export interface ResourceLookup {
    accountId?: string
    appId?: string
    createdAt?: number
    lastUpdatedAt?: number
    resourceId?: string
    resourceName?: string
    resourceType?: string
    tags?: NameValuePair[]
    uuid: string
  }
  export interface Response {
    correlationId?: string
    data?: {
      [key: string]: any
    }
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseBoolean {
    correlationId?: string
    data?: boolean
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseMapping {
    hostJsonPath?: string
    hostRegex?: string
    logMessageJsonPath?: string
    timestampFormat?: string
    timestampJsonPath?: string
  }
  export interface ResponseMessage {
    code?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'REVOKED_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_CREDENTIALS_THIRD_PARTY'
      | 'INVALID_KEY'
      | 'INVALID_CONNECTOR_TYPE'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'SCHEMA_VALIDATION_FAILED'
      | 'FILTER_CREATION_ERROR'
      | 'INVALID_YAML_ERROR'
      | 'PLAN_CREATION_ERROR'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'EXPIRE_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'IMAGE_NOT_FOUND'
      | 'ILLEGAL_ARGUMENT'
      | 'IMAGE_TAG_NOT_FOUND'
      | 'DELEGATE_NOT_AVAILABLE'
      | 'INVALID_YAML_PAYLOAD'
      | 'AUTHENTICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'SECRET_NOT_FOUND'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'FILE_NOT_FOUND_ERROR'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'DATA_COLLECTION_ERROR'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'TIMESCALE_NOT_AVAILABLE'
      | 'MIGRATION_EXCEPTION'
      | 'REQUEST_PROCESSING_INTERRUPTED'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
      | 'HTTP_RESPONSE_EXCEPTION'
      | 'SCM_NOT_FOUND_ERROR'
      | 'SCM_CONFLICT_ERROR'
      | 'SCM_UNPROCESSABLE_ENTITY'
      | 'PROCESS_EXECUTION_EXCEPTION'
      | 'SCM_UNAUTHORIZED'
      | 'DATA'
      | 'CONTEXT'
      | 'PR_CREATION_ERROR'
      | 'URL_NOT_REACHABLE'
      | 'URL_NOT_PROVIDED'
      | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
      | 'ENGINE_FUNCTOR_ERROR'
      | 'JIRA_CLIENT_ERROR'
      | 'SCM_NOT_MODIFIED'
      | 'JIRA_STEP_ERROR'
      | 'BUCKET_SERVER_ERROR'
    exception?: Throwable
    failureTypes?: (
      | 'EXPIRED'
      | 'DELEGATE_PROVISIONING'
      | 'CONNECTIVITY'
      | 'AUTHENTICATION'
      | 'VERIFICATION_FAILURE'
      | 'APPLICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'TIMEOUT_ERROR'
    )[]
    level?: 'INFO' | 'ERROR'
    message?: string
  }
  export interface ResponsePerpetualTaskRecord {
    correlationId?: string
    data?: PerpetualTaskRecord
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseString {
    correlationId?: string
    data?: string
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface RestResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: any
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAccessRequestDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AccessRequestDTO
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAccessTokenBean {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AccessTokenBean
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAccount {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Account
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAccountDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AccountDetails
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAccountLicenseDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AccountLicenseDTO
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAccountRole {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AccountRole
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAccountSettingsResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AccountSettingsResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseActivity {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Activity
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAlertNotificationRule {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AlertNotificationRule
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseApiKeyEntry {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ApiKeyEntry
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAppContainer {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AppContainer
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseApplication {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Application
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseApplicationManifest {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ApplicationManifest
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseApplicationRole {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ApplicationRole
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseApprovalAuthorization {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ApprovalAuthorization
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseArtifact {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Artifact
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseArtifactStream {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ArtifactStream
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseArtifactStreamBinding {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ArtifactStreamBinding
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAuditHeaderYamlResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AuditHeaderYamlResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAuditPreferenceResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AuditPreferenceResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseAwsAsgGetRunningCountData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AwsAsgGetRunningCountData
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseBase {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Base
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseBoolean {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: boolean
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseBudget {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Budget
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCEDelegateStatus {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CEDelegateStatus
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCESlackWebhook {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CESlackWebhook
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCEView {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CEView
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCVConfiguration {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CVConfiguration
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCVNGPerpetualTaskDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CVNGPerpetualTaskDTO
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCgEventConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CgEventConfig
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseClusterRecord {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ClusterRecord
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCollectionFeatureFlag {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: FeatureFlag[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCollectionLdapGroupResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LdapGroupResponse[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCollectionSettingAttribute {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SettingAttribute[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCommandLibraryConfigurationDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CommandLibraryConfigurationDTO
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseConcurrencyStrategy {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ConcurrencyStrategy
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseConcurrentExecutionResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ConcurrentExecutionResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseConfigFile {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ConfigFile
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseContainerTask {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ContainerTask
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCustomDeploymentTypeDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CustomDeploymentTypeDTO
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseCustomSecretsManagerConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CustomSecretsManagerConfig
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDashboardSettings {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DashboardSettings
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegate {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Delegate
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateConfiguration {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateConfiguration
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateFile {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateFile
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateGroupDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateGroupDetails
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateGroupListing {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateGroupListing
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateHeartbeatDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateHeartbeatDetails
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateHeartbeatResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateHeartbeatResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateProfile {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateProfile
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateProfileDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateProfileDetails
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateProfileParams {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateProfileParams
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateRegisterResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateRegisterResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateScope {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateScope
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateScripts {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateScripts
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateSelectionLogResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateSelectionLogResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateSetupDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateSetupDetails
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateStatus {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateStatus
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDelegateTokenDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateTokenDetails
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDeploymentFreezeInfo {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DeploymentFreezeInfo
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDeploymentMetadata {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DeploymentMetadata
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDeploymentStatistics {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DeploymentStatistics
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDeploymentTimeSeriesAnalysis {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DeploymentTimeSeriesAnalysis
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDirectoryNode {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DirectoryNode
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseDouble {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: number
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseEcsServiceSpecification {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: EcsServiceSpecification
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseEnvironment {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Environment
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseExecutionInterrupt {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ExecutionInterrupt
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseExperimentPerformance {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ExperimentPerformance
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseExperimentalMetricRecord {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ExperimentalMetricRecord
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseExportExecutionsRequestLimitChecks {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ExportExecutionsRequestLimitChecks
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseExportExecutionsRequestSummary {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ExportExecutionsRequestSummary
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseFeatureFlag {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: FeatureFlag
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseFeatureRestrictions {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: {
        [key: string]: {
          [key: string]: {
            [key: string]: any
          }
        }
      }
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseFeaturesUsageComplianceReport {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: FeaturesUsageComplianceReport
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseFileOperationStatus {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: FileOperationStatus
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseGcpBillingAccount {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GcpBillingAccount
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseGcpOrganization {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GcpOrganization
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseGitSyncWebhook {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GitSyncWebhook
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseGovernanceConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GovernanceConfig
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseGraphNode {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GraphNode
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseHarnessTag {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: HarnessTag
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseHarnessUserGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: HarnessUserGroup
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseHelmChartSpecification {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: HelmChartSpecification
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseHost {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Host
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseImportStatusReport {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ImportStatusReport
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseImportedCommand {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ImportedCommand
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseInfraDefinitionDetail {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InfraDefinitionDetail
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseInfrastructureDefinition {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InfrastructureDefinition
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseInfrastructureMapping {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InfrastructureMapping
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseInfrastructureProvisioner {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InfrastructureProvisioner
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseInstance {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Instance
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseInstanceSummaryStats {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InstanceSummaryStats
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseInstanceTimeline {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InstanceTimeline
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseInteger {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: number
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseInviteOperationResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?:
      | 'ACCOUNT_INVITE_ACCEPTED_NEED_PASSWORD'
      | 'ACCOUNT_INVITE_ACCEPTED'
      | 'USER_INVITED_SUCCESSFULLY'
      | 'USER_ALREADY_ADDED'
      | 'USER_ALREADY_INVITED'
      | 'FAIL'
      | 'INVITE_EXPIRED'
      | 'INVITE_INVALID'
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseJobDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: JobDetails
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLambdaSpecification {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LambdaSpecification
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLdapResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LdapResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLdapSettings {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LdapSettings
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLdapTestResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LdapTestResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLinkedHashMapLongLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringLinkedHashMapStringListContinuousVerificationExecutionMetaData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: {
        [key: string]: {
          [key: string]: {
            [key: string]: {
              [key: string]: ContinuousVerificationExecutionMetaData[]
            }
          }
        }
      }
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAccessRequestDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AccessRequestDTO[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAccount {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Account[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAccountPlugin {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AccountPlugin[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAlertNotificationRule {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AlertNotificationRule[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAlertType {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AlertType[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListApplicationManifest {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ApplicationManifest[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListArtifact {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Artifact[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListArtifactStream {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ArtifactStream[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListArtifactStreamBinding {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ArtifactStreamBinding[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListArtifactStreamSummary {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ArtifactStreamSummary[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAwsCFTemplateParamsData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AwsCFTemplateParamsData[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAwsElbListener {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AwsElbListener[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAwsLoadBalancerDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AwsLoadBalancerDetails[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAwsRoute53HostedZoneData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AwsRoute53HostedZoneData[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAwsSecurityGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AwsSecurityGroup[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAwsSubnet {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AwsSubnet[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAwsVPC {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AwsVPC[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAzureArtifactsFeed {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AzureArtifactsFeed[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAzureArtifactsPackage {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AzureArtifactsPackage[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAzureContainerRegistry {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AzureContainerRegistry[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAzureDevopsProject {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AzureDevopsProject[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAzureImageDefinition {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AzureImageDefinition[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAzureImageGallery {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AzureImageGallery[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAzureKubernetesCluster {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AzureKubernetesCluster[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListAzureResourceGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AzureResourceGroup[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListBoolean {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: boolean[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListBudget {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Budget[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListBuildDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: BuildDetails[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCECommunications {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CECommunications[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCVActivityLog {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CVActivityLog[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCVCertifiedDetailsForWorkflowState {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CVCertifiedDetailsForWorkflowState[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCVConfiguration {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CVConfiguration[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCVDeploymentData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CVDeploymentData[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCVFeedbackRecord {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CVFeedbackRecord[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCgEventConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CgEventConfig[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListChangeSetDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ChangeSetDTO[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCloudWatchMetric {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CloudWatchMetric[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListClusterRecord {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ClusterRecord[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCommandCategory {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CommandCategory[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCommandUnitDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CommandUnitDetails[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListCustomDeploymentTypeDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CustomDeploymentTypeDTO[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListDelegateInitializationDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateInitializationDetails[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListDelegateSelectionLogParams {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateSelectionLogParams[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListDelegateSizeDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateSizeDetails[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListDelegateTokenDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateTokenDetails[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListDeploymentSlotData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DeploymentSlotData[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListDynaTraceApplication {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DynaTraceApplication[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListElastiGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ElastiGroup[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListEntityType {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: (
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    )[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListExpAnalysisInfo {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ExpAnalysisInfo[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListExperimentalMessageComparisonResult {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ExperimentalMessageComparisonResult[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListFailureStrategy {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: FailureStrategy[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListFeatureFlag {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: FeatureFlag[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListGcpBillingAccount {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GcpBillingAccount[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListGitDetail {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GitDetail[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListGitSyncError {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GitSyncError[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListHarnessSupportUserDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: HarnessSupportUserDTO[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListHarnessUserGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: HarnessUserGroup[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListHeatMap {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: HeatMap[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListHostValidationResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: HostValidationResponse[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListImportedCommand {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ImportedCommand[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListInstanceElement {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InstanceElement[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListInstanceStatsByEnvironment {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InstanceStatsByEnvironment[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListInstanceStatsByService {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InstanceStatsByService[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListInviteOperationResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: (
      | 'ACCOUNT_INVITE_ACCEPTED_NEED_PASSWORD'
      | 'ACCOUNT_INVITE_ACCEPTED'
      | 'USER_INVITED_SUCCESSFULLY'
      | 'USER_ALREADY_ADDED'
      | 'USER_ALREADY_INVITED'
      | 'FAIL'
      | 'INVITE_EXPIRED'
      | 'INVITE_INVALID'
    )[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListLogDataRecord {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LogDataRecord[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListLogLabel {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: (
      | 'NOISE'
      | 'CLEAN'
      | 'INFRA'
      | 'THIRD_PARTY'
      | 'IMPORTANT'
      | 'BACKGROUND'
      | 'JAVA_THROWABLE'
      | 'ERROR'
      | 'EXCEPTION'
      | 'RUNTIME'
      | 'HTTP'
      | 'UPSTREAM'
      | 'DOWNSTREAM'
      | 'DATABASE'
      | 'NETWORK'
      | 'APM'
      | 'LOGS'
      | 'JVM'
      | 'WARN'
    )[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListLogMLFeedbackRecord {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LogMLFeedbackRecord[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListManifestFile {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ManifestFile[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListMetric {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Metric[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListNameValuePair {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NameValuePair[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListNewRelicApplication {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NewRelicApplication[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListNewRelicApplicationInstance {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NewRelicApplicationInstance[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListNewRelicMetric {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NewRelicMetric[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListNewRelicMetricHostAnalysisValue {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NewRelicMetricHostAnalysisValue[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListNotificationRule {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NotificationRule[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListPipelineGovernanceConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: PipelineGovernanceConfig[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListPipelineReportCard {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: PipelineReportCard[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListPipelineStageGroupedInfo {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: PipelineStageGroupedInfo[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListProvisionStep {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ProvisionStep[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListResourceConstraintUsage {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ResourceConstraintUsage[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListSecretChangeLog {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SecretChangeLog[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListSecretEngineSummary {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SecretEngineSummary[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListSecretManagerConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SecretManagerConfig[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListService {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Service[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListSplunkSavedSearch {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SplunkSavedSearch[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListStackDriverMetric {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: StackDriverMetric[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListStateExecutionData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: StateExecutionData[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListStateExecutionElement {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: StateExecutionElement[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListStateExecutionInterrupt {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: StateExecutionInterrupt[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListStencil {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Stencil[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListString {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: string[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListTaskSelectorMap {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TaskSelectorMap[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListTimeRange {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TimeRange[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListTimeSeriesMLTransactionThresholds {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TimeSeriesMLTransactionThresholds[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListUser {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: User[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListUuidAware {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UuidAware[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListVariable {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Variable[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseListWorkflowExecution {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WorkflowExecution[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLogMLAnalysisSummary {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LogMLAnalysisSummary
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLoginSettings {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LoginSettings
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLoginTypeResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LoginTypeResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLogoutResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LogoutResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseLong {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: number
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseManifestFile {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ManifestFile
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapDeploymentTypeListSettingVariableTypes {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: (
        | 'HOST_CONNECTION_ATTRIBUTES'
        | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
        | 'SMTP'
        | 'SFTP'
        | 'JENKINS'
        | 'BAMBOO'
        | 'STRING'
        | 'SPLUNK'
        | 'ELK'
        | 'LOGZ'
        | 'SUMO'
        | 'DATA_DOG'
        | 'APM_VERIFICATION'
        | 'BUG_SNAG'
        | 'LOG_VERIFICATION'
        | 'APP_DYNAMICS'
        | 'NEW_RELIC'
        | 'DYNA_TRACE'
        | 'INSTANA'
        | 'DATA_DOG_LOG'
        | 'CLOUD_WATCH'
        | 'SCALYR'
        | 'ELB'
        | 'SLACK'
        | 'AWS'
        | 'GCS'
        | 'GCP'
        | 'AZURE'
        | 'PCF'
        | 'DIRECT'
        | 'KUBERNETES_CLUSTER'
        | 'DOCKER'
        | 'ECR'
        | 'GCR'
        | 'ACR'
        | 'PHYSICAL_DATA_CENTER'
        | 'KUBERNETES'
        | 'NEXUS'
        | 'ARTIFACTORY'
        | 'SMB'
        | 'AMAZON_S3'
        | 'GIT'
        | 'SSH_SESSION_CONFIG'
        | 'SERVICE_VARIABLE'
        | 'CONFIG_FILE'
        | 'KMS'
        | 'GCP_KMS'
        | 'JIRA'
        | 'SERVICENOW'
        | 'SECRET_TEXT'
        | 'YAML_GIT_SYNC'
        | 'VAULT'
        | 'VAULT_SSH'
        | 'AWS_SECRETS_MANAGER'
        | 'CYBERARK'
        | 'WINRM_CONNECTION_ATTRIBUTES'
        | 'WINRM_SESSION_CONFIG'
        | 'PROMETHEUS'
        | 'INFRASTRUCTURE_MAPPING'
        | 'HTTP_HELM_REPO'
        | 'AMAZON_S3_HELM_REPO'
        | 'GCS_HELM_REPO'
        | 'SPOT_INST'
        | 'AZURE_ARTIFACTS_PAT'
        | 'CUSTOM'
        | 'CE_AWS'
        | 'CE_GCP'
        | 'CE_AZURE'
        | 'AZURE_VAULT'
        | 'KUBERNETES_CLUSTER_NG'
        | 'GIT_NG'
        | 'GCP_SECRETS_MANAGER'
        | 'TRIGGER'
      )[]
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapFeedbackActionListFeedbackAction {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: ('ADD_TO_BASELINE' | 'REMOVE_FROM_BASELINE' | 'UPDATE_PRIORITY')[]
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapPairDeploymentTypeCloudProviderTypeMapStringString {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: {
        [key: string]: string
      }
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapPairStringStringInteger {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: number
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapStringDouble {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: number
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapStringElkIndexTemplate {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: ElkIndexTemplate
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapStringGraphGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: GraphGroup
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapStringListCVFeedbackRecord {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: CVFeedbackRecord[]
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapStringListHelmChart {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: HelmChart[]
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapStringListString {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: string[]
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapStringMapStringInstanceDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: {
        [key: string]: InstanceDetails
      }
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapStringMapStringObject {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: {
        [key: string]: {
          [key: string]: any
        }
      }
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapStringObject {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: {
        [key: string]: any
      }
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseMapStringString {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: string
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseModuleLicenseDTO {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ModuleLicenseDTO
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseNewRelicApplication {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NewRelicApplication
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseNotification {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Notification
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseNotificationGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NotificationGroup
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseNotificationRulesStatus {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NotificationRulesStatus
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseOauthSettings {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: OauthSettings
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseObject {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: any
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseAccount {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Account[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseActivity {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Activity[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseAlert {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Alert[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseApiKeyEntry {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ApiKeyEntry[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseAppContainer {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AppContainer[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseApplication {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Application[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseApplicationManifest {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ApplicationManifest[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseArtifact {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Artifact[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseArtifactStream {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ArtifactStream[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseAuditHeader {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AuditHeader[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseCVEnabledService {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CVEnabledService[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseCompareEnvironmentAggregationInfo {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: CompareEnvironmentAggregationInfo[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseConfigFile {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ConfigFile[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseContainerTask {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ContainerTask[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseContinuousVerificationExecutionMetaData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ContinuousVerificationExecutionMetaData[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseDashboardSettings {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DashboardSettings[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseDelegate {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Delegate[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseDelegateProfile {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateProfile[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseDelegateProfileDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateProfileDetails[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseDelegateScope {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: DelegateScope[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseEncryptedData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: EncryptedData[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseEntityVersionCollection {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: EntityVersionCollection[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseEnvironment {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Environment[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseExpAnalysisInfo {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ExpAnalysisInfo[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseGitFileActivity {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GitFileActivity[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseGitFileActivitySummary {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GitFileActivitySummary[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseGitProcessingError {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GitProcessingError[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseGitSyncError {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GitSyncError[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseGitToHarnessErrorCommitStats {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: GitToHarnessErrorCommitStats[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseHarnessTag {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: HarnessTag[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseHarnessTagLink {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: HarnessTagLink[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseHelmChartSpecification {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: HelmChartSpecification[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseHost {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Host[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseInfraDefinitionDetail {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InfraDefinitionDetail[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseInfrastructureDefinition {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InfrastructureDefinition[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseInfrastructureMapping {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InfrastructureMapping[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseInfrastructureProvisioner {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InfrastructureProvisioner[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseInfrastructureProvisionerDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InfrastructureProvisionerDetails[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseInstanceSummaryStatsByService {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: InstanceSummaryStatsByService[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseLambdaSpecification {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: LambdaSpecification[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseLog {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Log[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseNotification {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Notification[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseNotificationGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NotificationGroup[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponsePipeline {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Pipeline[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponsePreference {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Preference[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponsePublicUser {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: PublicUser[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseResourceConstraint {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ResourceConstraint[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseResourceLookup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ResourceLookup[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseRole {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Role[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseSecretUsageLog {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SecretUsageLog[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseService {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Service[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseServiceInstance {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServiceInstance[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseServiceTemplate {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServiceTemplate[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseServiceVariable {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServiceVariable[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseSettingAttribute {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SettingAttribute[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseTemplate {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Template[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseTemplateGallery {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TemplateGallery[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseTemplateVersion {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TemplateVersion[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseThirdPartyApiCallLog {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ThirdPartyApiCallLog[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseTrigger {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Trigger[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseUserDataSpecification {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UserDataSpecification[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseUserGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UserGroup[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseUserInvite {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UserInvite[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseWhitelist {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Whitelist[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseWorkflow {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Workflow[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePageResponseWorkflowExecution {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WorkflowExecution[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePcfServiceSpecification {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: PcfServiceSpecification
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePhaseStep {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: PhaseStep
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePipeline {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Pipeline
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePipelineGovernanceConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: PipelineGovernanceConfig
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponsePreference {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Preference
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseRequiredExecutionArgs {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: RequiredExecutionArgs
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseResourceConstraint {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ResourceConstraint
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseRestrictionsSummary {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: RestrictionsSummary
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseRole {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Role
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseRollbackConfirmation {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: RollbackConfirmation
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSSOConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SSOConfig
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSampleAppStatus {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SampleAppStatus
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSearchResults {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SearchResults
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSecretManagerConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SecretManagerConfig
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseServerInfo {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServerInfo
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseServerlessInstance {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServerlessInstance
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseServerlessInstanceTimeline {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServerlessInstanceTimeline
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseService {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Service
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseServiceCommand {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServiceCommand
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseServiceGuardTimeSeries {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServiceGuardTimeSeries
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseServiceInstanceDashboard {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServiceInstanceDashboard
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseServiceInstanceStatistics {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServiceInstanceStatistics
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseServiceTemplate {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServiceTemplate
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseServiceVariable {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ServiceVariable
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSetAppdynamicsTier {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: AppdynamicsTier[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSetBugsnagApplication {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: BugsnagApplication[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSetHelmSubCommand {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: (
      | 'INSTALL'
      | 'UPGRADE'
      | 'ROLLBACK'
      | 'HISTORY'
      | 'DELETE'
      | 'UNINSTALL'
      | 'LIST'
      | 'VERSION'
      | 'PULL'
      | 'FETCH'
      | 'TEMPLATE'
    )[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSetJobDetails {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: JobDetails[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSetNewRelicMetricAnalysisRecord {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: NewRelicMetricAnalysisRecord[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSetSecretSetupUsage {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SecretSetupUsage[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSetString {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: string[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSetWorkflowExecutionBaseline {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WorkflowExecutionBaseline[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSettingAttribute {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SettingAttribute
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSmtpConfigResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SmtpConfigResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSortedSetTransactionTimeSeries {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TransactionTimeSeries[]
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSplunkValidationResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SplunkValidationResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseSpotinstElastigroupRunningCountData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: SpotinstElastigroupRunningCountData
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseStateExecutionData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: StateExecutionData
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseStateInspection {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: StateInspection
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseString {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: string
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseTaskSelectorMap {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TaskSelectorMap
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseTemplate {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Template
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseTemplateFolder {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TemplateFolder
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseTemplateGallery {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TemplateGallery
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseTimeSeriesKeyTransactions {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TimeSeriesKeyTransactions
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseTimeSeriesMLTransactionThresholds {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TimeSeriesMLTransactionThresholds
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseTrafficShiftMetadata {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TrafficShiftMetadata
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseTrigger {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Trigger
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseTwoFactorAdminOverrideSettings {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TwoFactorAdminOverrideSettings
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseTwoFactorAuthenticationSettings {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: TwoFactorAuthenticationSettings
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseUsageRestrictions {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UsageRestrictions
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseUsageRestrictionsReferenceSummary {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UsageRestrictionsReferenceSummary
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseUser {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: User
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseUserDataSpecification {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UserDataSpecification
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseUserGroup {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UserGroup
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseUserInvite {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UserInvite
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseUserPermissionInfo {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: UserPermissionInfo
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseValidationResult {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ValidationResult
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseVerificationNodeDataSetupResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: VerificationNodeDataSetupResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseVersionPackage {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: VersionPackage
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseViewCustomField {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ViewCustomField
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseVirtualMachineScaleSetData {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: VirtualMachineScaleSetData
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseVoid {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Void
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWebHookToken {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WebHookToken
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWebhookEventType {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: 'PULL_REQUEST' | 'PUSH' | 'REPO' | 'ISSUE' | 'PING' | 'DELETE' | 'ANY' | 'OTHER' | 'RELEASE' | 'PACKAGE'
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWebhookParameters {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WebhookParameters
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWhitelist {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Whitelist
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWorkflow {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: Workflow
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWorkflowCategorySteps {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WorkflowCategorySteps
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWorkflowExecution {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WorkflowExecution
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWorkflowExecutionBaseline {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WorkflowExecutionBaseline
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWorkflowExecutionInfo {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WorkflowExecutionInfo
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWorkflowPhase {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WorkflowPhase
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseWorkflowVariablesMetadata {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: WorkflowVariablesMetadata
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseYamlGitConfig {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: YamlGitConfig
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseYamlHistory {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: YamlHistory
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseYamlOperationResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: YamlOperationResponse
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseYamlPayload {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: YamlPayload
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseYamlVersion {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: YamlVersion
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseZendeskSsoLoginResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: ZendeskSsoLoginResponse
    responseMessages?: ResponseMessage[]
  }
  export interface Restriction {
    appIds?: string[]
    tags?: Tag[]
    type?: 'APP_BASED' | 'TAG_BASED'
  }
  export interface RestrictionsSummary {
    applications?: AppRestrictionsSummary[]
    hasAllAppAccess?: boolean
    hasAllNonProdEnvAccess?: boolean
    hasAllProdEnvAccess?: boolean
  }
  export interface Role {
    accountId?: string
    allApps?: boolean
    appId: string
    appName?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    permissions?: Permission[]
    roleType?: 'ACCOUNT_ADMIN' | 'APPLICATION_ADMIN' | 'PROD_SUPPORT' | 'NON_PROD_SUPPORT' | 'CUSTOM'
    uuid: string
  }
  export interface RollbackConfirmation {
    activeWorkflowExecution?: WorkflowExecution
    artifacts?: Artifact[]
    valid?: boolean
    validationMessage?: string
    workflowId?: string
  }
  export interface RollbackWorkflowExecutionInfo {
    rollbackDuration?: number
    rollbackStartTs?: number
    rollbackStateExecutionId?: string
    rollbackType?: 'MANUAL' | 'AUTO'
  }
  export type RollingOrchestrationWorkflow = OrchestrationWorkflow & {
    derivedVariables?: Variable[]
    failureStrategies?: FailureStrategy[]
    graph?: Graph
    postDeploymentSteps?: PhaseStep
    preDeploymentSteps?: PhaseStep
    rollbackProvisioners?: PhaseStep
    rollbackWorkflowPhaseIdMap?: {
      [key: string]: WorkflowPhase
    }
    systemVariables?: Variable[]
    workflowPhases?: WorkflowPhase[]
  }
  export interface Rule {
    apiGroups?: string
    message?: string
    resources?: string
    verbs?: string
  }
  export interface RuntimeInfo {
    deployMode?: string
    primary?: boolean
    primaryVersion?: string
  }
  export interface RuntimeInputsConfig {
    runtimeInputVariables?: string[]
    timeout?: number
    timeoutAction?:
      | 'MANUAL_INTERVENTION'
      | 'ROLLBACK_WORKFLOW'
      | 'ROLLBACK_PHASE'
      | 'IGNORE'
      | 'RETRY'
      | 'END_EXECUTION'
      | 'CONTINUE_WITH_DEFAULTS'
      | 'ABORT_WORKFLOW_EXECUTION'
    userGroupIds?: string[]
  }
  export interface SSHVaultConfig {
    accountId?: string
    appRoleId?: string
    authToken?: string
    certValidationRequired?: boolean
    createdAt?: number
    createdBy?: EmbeddedUser
    default?: boolean
    delegateSelectors?: string[]
    encryptedBy?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    engineManuallyEntered?: boolean
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    manuallyEnteredSecretEngineMigrationIteration?: number
    name?: string
    namespace?: string
    nextTokenRenewIteration?: number
    numOfEncryptedValue?: number
    renewalInterval?: number
    renewedAt?: number
    scopedToAccount?: boolean
    secretEngineName?: string
    secretId?: string
    sinkPath?: string
    templatized?: boolean
    templatizedFields?: string[]
    usageRestrictions?: UsageRestrictions
    useVaultAgent?: boolean
    uuid: string
    vaultUrl?: string
  }
  export interface SSOConfig {
    accountId?: string
    authenticationMechanism?: 'USER_PASSWORD' | 'SAML' | 'LDAP' | 'OAUTH'
    ssoSettings?: SSOSettings[]
  }
  export interface SSORequest {
    idpRedirectUrl?: string
    oauthProviderType?: 'AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN'
    oauthProviderTypes?: ('AZURE' | 'BITBUCKET' | 'GITHUB' | 'GITLAB' | 'GOOGLE' | 'LINKEDIN')[]
  }
  export interface SSOSettings {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    displayName?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    nextIteration?: number
    type: 'SAML' | 'LDAP' | 'OAUTH'
    url?: string
    uuid: string
  }
  export interface SamlLinkGroupRequest {
    samlGroupName?: string
  }
  export interface SampleAppEntityStatus {
    entityName?: string
    entityType?: string
    health?: 'GOOD' | 'BAD'
  }
  export interface SampleAppStatus {
    deploymentType?: string
    health?: 'GOOD' | 'BAD'
    statusList?: SampleAppEntityStatus[]
  }
  export interface SampleLog {
    raw?: string
    timestamp?: number
  }
  export type ScheduledTriggerCondition = TriggerCondition & {
    cronDescription?: string
    cronExpression?: string
    onNewArtifactOnly?: boolean
  }
  export interface ScimGroup {
    displayName?: string
    externalId?: string
    id?: string
    members?: Member[]
    meta?: JsonNode
    schemas?: string[]
  }
  export interface ScimUser {
    active?: boolean
    displayName?: string
    emails?: JsonNode
    externalId?: string
    groups?: JsonNode
    id?: string
    meta?: JsonNode
    name?: JsonNode
    password?: JsonNode
    roles?: JsonNode
    schemas?: string[]
    userName?: string
  }
  export interface ScopingRuleDetails {
    applicationId?: string
    description?: string
    environmentIds?: string[]
    environmentTypeId?: string
    serviceIds?: string[]
  }
  export interface ScopingRules {
    scopingRuleDetails?: ScopingRuleDetails[]
  }
  export interface SearchResult {
    accountId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    id?: string
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    searchScore?: number
    type?:
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
  }
  export interface SearchResults {
    searchResults?: {
      [key: string]: SearchResult[]
    }
  }
  export interface SecretChangeLog {
    accountId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    encryptedDataId?: string
    external?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    user: EmbeddedUser
    uuid: string
  }
  export interface SecretDetail {
    configUuid?: string
    encryptedRecord?: EncryptedRecord
  }
  export interface SecretEngineSummary {
    description?: string
    name?: string
    type?: string
    version?: number
  }
  export interface SecretManagerConfig {
    accountId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    default?: boolean
    encryptedBy?: string
    encryptionServiceUrl?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    manuallyEnteredSecretEngineMigrationIteration?: number
    name?: string
    nextTokenRenewIteration?: number
    ngMetadata?: NGSecretManagerMetadata
    numOfEncryptedValue?: number
    scopedToAccount?: boolean
    templatized?: boolean
    templatizedFields?: string[]
    usageRestrictions?: UsageRestrictions
    uuid: string
    validationCriteria?: string
  }
  export interface SecretSetupUsage {
    entity?: UuidAware
    entityId?: string
    fieldName?: string
    type?:
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
  }
  export interface SecretText {
    additionalMetadata?: AdditionalMetadata
    hideFromListing?: boolean
    inheritScopesFromSM?: boolean
    inlineSecret?: boolean
    kmsId?: string
    name?: string
    parameterizedSecret?: boolean
    parameters?: EncryptedDataParams[]
    path?: string
    referencedSecret?: boolean
    runtimeParameters?: {
      [key: string]: string
    }
    scopedToAccount?: boolean
    usageRestrictions?: UsageRestrictions
    value?: string
  }
  export interface SecretUniqueIdentifier {
    kmsId?: string
  }
  export interface SecretUsageLog {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    encryptedDataId?: string
    entityName?: string
    envId?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    pipelineExecution?: boolean
    uuid: string
    validUntil?: string
    workflowExecutionId?: string
    workflowExecutionName?: string
  }
  export interface ServerInfo {
    zoneId?: ZoneId
  }
  export interface ServerlessInstance {
    accountId?: string
    appId: string
    appName?: string
    computeProviderId?: string
    computeProviderName?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    deleted?: boolean
    deletedAt?: number
    envId?: string
    envName?: string
    envType?: 'PROD' | 'NON_PROD' | 'ALL'
    infraMappingId?: string
    infraMappingName?: string
    infraMappingType?: string
    instanceInfo?: ServerlessInstanceInfo
    instanceType?: 'AWS_LAMBDA'
    lambdaInstanceKey?: AwsLambdaInstanceKey
    lastArtifactBuildNum?: string
    lastArtifactId?: string
    lastArtifactName?: string
    lastArtifactSourceName?: string
    lastArtifactStreamId?: string
    lastDeployedAt?: number
    lastDeployedById?: string
    lastDeployedByName?: string
    lastPipelineExecutionId?: string
    lastPipelineExecutionName?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    lastWorkflowExecutionId?: string
    lastWorkflowExecutionName?: string
    serviceId?: string
    serviceName?: string
    uuid: string
  }
  export interface ServerlessInstanceInfo {
    invocationCountMap?: {
      [key: string]: InvocationCount
    }
  }
  export interface ServerlessInstanceTimeline {
    points?: DataPoint[]
  }
  export interface Service {
    accountId?: string
    appContainer?: AppContainer
    appId: string
    artifactFromManifest?: boolean
    artifactStreamBindings?: ArtifactStreamBinding[]
    artifactStreamIds?: string[]
    artifactStreams?: ArtifactStream[]
    artifactType?:
      | 'JAR'
      | 'WAR'
      | 'TAR'
      | 'ZIP'
      | 'NUGET'
      | 'DOCKER'
      | 'RPM'
      | 'AWS_LAMBDA'
      | 'AWS_CODEDEPLOY'
      | 'PCF'
      | 'AMI'
      | 'AZURE_MACHINE_IMAGE'
      | 'AZURE_WEBAPP'
      | 'IIS'
      | 'OTHER'
      | 'IIS_APP'
      | 'IIS_VirtualDirectory'
    cfCliVersion?: 'V6' | 'V7'
    configFiles?: ConfigFile[]
    configMapYaml?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    customDeploymentName?: string
    deploymentType?:
      | 'SSH'
      | 'AWS_CODEDEPLOY'
      | 'ECS'
      | 'SPOTINST'
      | 'KUBERNETES'
      | 'HELM'
      | 'AWS_LAMBDA'
      | 'AMI'
      | 'WINRM'
      | 'PCF'
      | 'AZURE_VMSS'
      | 'AZURE_WEBAPP'
      | 'CUSTOM'
    deploymentTypeTemplateId?: string
    description?: string
    helmValueYaml?: string
    helmVersion?: 'V2' | 'V3'
    k8sV2?: boolean
    keywords?: string[]
    lastDeploymentActivity?: Activity
    lastProdDeploymentActivity?: Activity
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    pcfV2?: boolean
    sample?: boolean
    serviceCommands?: ServiceCommand[]
    serviceId?: string
    serviceVariables?: ServiceVariable[]
    setup?: Setup
    tagLinks?: HarnessTagLink[]
    uuid: string
    version?: number
  }
  export interface ServiceAccountConfig {
    apiKeyLimit?: number
    tokenLimit?: number
  }
  export interface ServiceCommand {
    accountId?: string
    appId: string
    command?: Command
    createdAt?: number
    createdBy?: EmbeddedUser
    defaultVersion?: number
    envIdVersionMap?: {
      [key: string]: EntityVersion
    }
    importedTemplateDetails?: ImportedTemplateDetails
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    serviceId?: string
    targetToAllEnv?: boolean
    templateMetadata?: TemplateMetadata
    templateUuid?: string
    templateVersion?: string
    uuid: string
  }
  export interface ServiceElement {
    description?: string
    elementType?:
      | 'SERVICE'
      | 'INFRAMAPPING'
      | 'SERVICE_TEMPLATE'
      | 'TAG'
      | 'SHELL'
      | 'HOST'
      | 'INSTANCE'
      | 'STANDARD'
      | 'PARAM'
      | 'PARTITION'
      | 'OTHER'
      | 'FORK'
      | 'CONTAINER_SERVICE'
      | 'CLUSTER'
      | 'AWS_LAMBDA_FUNCTION'
      | 'AMI_SERVICE_SETUP'
      | 'AMI_SERVICE_DEPLOY'
      | 'ECS_SERVICE_SETUP'
      | 'AMI_SWITCH_ROUTES'
      | 'PCF_SERVICE_SETUP'
      | 'PCF_SERVICE_DEPLOY'
      | 'PCF_ROUTE_SWAP_ROLLBACK'
      | 'PCF_INSTANCE'
      | 'SPOTINST_SERVICE_SETUP'
      | 'SPOTINST_SERVICE_DEPLOY'
      | 'ARTIFACT'
      | 'ARTIFACT_VARIABLE'
      | 'HELM_DEPLOY'
      | 'CLOUD_FORMATION_PROVISION'
      | 'CLOUD_FORMATION_ROLLBACK'
      | 'CLOUD_FORMATION_DEPROVISION'
      | 'TERRAFORM_PROVISION'
      | 'SHELL_SCRIPT_PROVISION'
      | 'K8S'
      | 'TERRAFORM_INHERIT_PLAN'
      | 'TERRAGRUNT_INHERIT_PLAN'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_WEBAPP_SETUP'
      | 'HELM_CHART'
      | 'MANIFEST_VARIABLE'
    name?: string
    uuid?: string
  }
  export interface ServiceGuardLimitDTO {
    serviceGuardLimit?: number
  }
  export interface ServiceGuardTimeSeries {
    timeSeriesSet?: TransactionTimeSeries[]
    totalRecords?: number
    transactionsInAnalysis?: string[]
  }
  export interface ServiceInfoSummary {
    envId?: string
    infraMappingId?: string
    infraMappingName?: string
    lastArtifactBuildNum?: string
    lastWorkflowExecutionId?: string
    lastWorkflowExecutionName?: string
    serviceName?: string
  }
  export interface ServiceInfraWorkflow {
    infraMappingId?: string
    infraMappingName?: string
    workflowId?: string
    workflowName?: string
    workflowType?: 'PIPELINE' | 'ORCHESTRATION'
  }
  export interface ServiceInstance {
    accountId?: string
    appId: string
    artifactDeployedOn?: number
    artifactDeploymentActivityId?: string
    artifactDeploymentStatus?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    artifactId?: string
    artifactName?: string
    artifactStreamId?: string
    artifactStreamName?: string
    commandName?: string
    commandType?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    displayName?: string
    envId?: string
    hostId?: string
    hostName?: string
    infraMappingId?: string
    infraMappingType?: string
    lastActivityCreatedAt?: number
    lastActivityId?: string
    lastActivityStatus?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    lastDeployedOn?: number
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    publicDns?: string
    serviceId?: string
    serviceName?: string
    serviceTemplateId?: string
    serviceTemplateName?: string
    uuid: string
  }
  export interface ServiceInstanceDashboard {
    currentActiveInstancesList?: CurrentActiveInstances[]
    deploymentHistoryList?: DeploymentHistory[]
    serviceSummary?: EntitySummary
  }
  export interface ServiceInstanceStatistics {
    statsMap?: {
      [key: string]: TopConsumer[]
    }
    type?: 'DEPLOYMENT' | 'SERVICE_INSTANCE_STATISTICS'
  }
  export interface ServiceSummary {
    appSummary?: EntitySummary
    id?: string
    name?: string
    type?: string
  }
  export interface ServiceTemplate {
    accountId?: string
    appId: string
    appSettingOverrideManifest?: ApplicationManifest
    appSettingsOverrideManifestFile?: ManifestFile
    configFilesOverrides?: ConfigFile[]
    configMapYamlOverride?: string
    connStringsOverrideManifest?: ApplicationManifest
    connStringsOverrideManifestFile?: ManifestFile
    createdAt?: number
    createdBy?: EmbeddedUser
    defaultServiceTemplate?: boolean
    description?: string
    envId?: string
    helmChartOverride?: ApplicationManifest
    helmValueYamlOverride?: string
    infrastructureMappings?: InfrastructureMapping[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    ocParamsOverrideAppManifest?: ApplicationManifest
    ocParamsOverrideFile?: ManifestFile
    serviceArtifactType?:
      | 'JAR'
      | 'WAR'
      | 'TAR'
      | 'ZIP'
      | 'NUGET'
      | 'DOCKER'
      | 'RPM'
      | 'AWS_LAMBDA'
      | 'AWS_CODEDEPLOY'
      | 'PCF'
      | 'AMI'
      | 'AZURE_MACHINE_IMAGE'
      | 'AZURE_WEBAPP'
      | 'IIS'
      | 'OTHER'
      | 'IIS_APP'
      | 'IIS_VirtualDirectory'
    serviceConfigFiles?: ConfigFile[]
    serviceId?: string
    serviceVariables?: ServiceVariable[]
    serviceVariablesOverrides?: ServiceVariable[]
    uuid: string
    valuesOverrideAppManifest?: ApplicationManifest
    valuesOverrideManifestFile?: ManifestFile
  }
  export interface ServiceTemplateElement {
    elementType?:
      | 'SERVICE'
      | 'INFRAMAPPING'
      | 'SERVICE_TEMPLATE'
      | 'TAG'
      | 'SHELL'
      | 'HOST'
      | 'INSTANCE'
      | 'STANDARD'
      | 'PARAM'
      | 'PARTITION'
      | 'OTHER'
      | 'FORK'
      | 'CONTAINER_SERVICE'
      | 'CLUSTER'
      | 'AWS_LAMBDA_FUNCTION'
      | 'AMI_SERVICE_SETUP'
      | 'AMI_SERVICE_DEPLOY'
      | 'ECS_SERVICE_SETUP'
      | 'AMI_SWITCH_ROUTES'
      | 'PCF_SERVICE_SETUP'
      | 'PCF_SERVICE_DEPLOY'
      | 'PCF_ROUTE_SWAP_ROLLBACK'
      | 'PCF_INSTANCE'
      | 'SPOTINST_SERVICE_SETUP'
      | 'SPOTINST_SERVICE_DEPLOY'
      | 'ARTIFACT'
      | 'ARTIFACT_VARIABLE'
      | 'HELM_DEPLOY'
      | 'CLOUD_FORMATION_PROVISION'
      | 'CLOUD_FORMATION_ROLLBACK'
      | 'CLOUD_FORMATION_DEPROVISION'
      | 'TERRAFORM_PROVISION'
      | 'SHELL_SCRIPT_PROVISION'
      | 'K8S'
      | 'TERRAFORM_INHERIT_PLAN'
      | 'TERRAGRUNT_INHERIT_PLAN'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_WEBAPP_SETUP'
      | 'HELM_CHART'
      | 'MANIFEST_VARIABLE'
    name?: string
    serviceElement?: ServiceElement
    uuid?: string
  }
  export interface ServiceVariable {
    accountId?: string
    allowedList?: string[]
    appId: string
    artifactStreamSummaries?: ArtifactStreamSummary[]
    createdAt?: number
    createdBy?: EmbeddedUser
    encryptedBy?: string
    encryptedValue?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    entityId?: string
    entityType:
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    envId?: string
    expression?: string
    instances?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    overriddenServiceVariable?: ServiceVariable
    overrideType?: 'ALL' | 'INSTANCES' | 'CUSTOM'
    parentServiceVariableId?: string
    secretTextName?: string
    serviceId?: string
    settingType?:
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
    templateId?: string
    type?: 'TEXT' | 'LB' | 'ENCRYPTED_TEXT' | 'ARTIFACT'
    uuid: string
    value?: string[]
  }
  export interface SettingAttribute {
    accountId?: string
    appId: string
    appIds?: string[]
    artifactStreamCount?: number
    artifactStreams?: ArtifactStreamSummary[]
    category?: 'CLOUD_PROVIDER' | 'CONNECTOR' | 'SETTING' | 'HELM_REPO' | 'AZURE_ARTIFACTS' | 'CE_CONNECTOR'
    connectivityError?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    encryptedBy?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    envId?: string
    lastUpdatedAt: number
    name?: string
    nextIteration?: number
    nextSecretMigrationIteration?: number
    sample?: boolean
    secretsMigrated?: boolean
    usageRestrictions?: UsageRestrictions
    uuid: string
    validationAttributes?: ConnectivityValidationAttributes
    value?: SettingValue
  }
  export interface SettingValue {
    certValidationRequired?: boolean
    settingType?:
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
    type?: string
  }
  export interface Setup {
    actions?: SetupAction[]
    setupStatus?: 'COMPLETE' | 'INCOMPLETE'
  }
  export interface SetupAction {
    code?: string
    displayText?: string
    errorType?: 'INFO' | 'ERROR'
    url?: string
  }
  export type ShellScriptInfrastructureProvisioner = InfrastructureProvisioner & {
    scriptBody?: string
  }
  export type ShellScriptTemplate = BaseTemplate & {
    outputVars?: string
    scriptString?: string
    scriptType?: string
    secretOutputVars?: string
    timeoutMillis?: number
  }
  export interface SlackNotificationSetting {
    name?: string
    outgoingWebhookUrl: string
  }
  export interface SmtpConfig {
    encryptedPassword?: string
    fromAddress?: string
    host?: string
    password?: string[]
    port?: number
    type?: string
    useSSL?: boolean
    username?: string
  }
  export interface SmtpConfigResponse {
    encryptionDetails?: EncryptedDataDetail[]
    smtpConfig?: SmtpConfig
  }
  export interface SplunkConnectorDTO {
    accountId: string
    delegateSelectors?: string[]
    passwordRef: string
    splunkUrl: string
    username?: string
  }
  export interface SplunkSampleResponse {
    errorMessage?: string
    rawSampleLogs?: SampleLog[]
    sample?: {
      [key: string]: string
    }
    splunkQuery?: string
  }
  export interface SplunkSavedSearch {
    searchQuery?: string
    title?: string
  }
  export interface SplunkSetupTestNodeData {
    advancedQuery?: boolean
    appId: string
    fromTime?: number
    guid?: string
    hostExpression?: string
    hostNameField?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    query: string
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    toTime?: number
    workflowId?: string
  }
  export interface SplunkValidationResponse {
    errorMessage?: string
    histogram?: Histogram
    queryDurationMillis?: number
    samples?: SplunkSampleResponse
  }
  export interface SpotinstElastigroupRunningCountData {
    elastigroupMax?: number
    elastigroupMin?: number
    elastigroupName?: string
    elastigroupTarget?: number
  }
  export type SshCommandTemplate = BaseTemplate & {
    commandType?: 'START' | 'STOP' | 'INSTALL' | 'ENABLE' | 'DISABLE' | 'VERIFY' | 'OTHER' | 'RESIZE' | 'SETUP'
    commandUnits?: CommandUnit[]
    commands?: Yaml[]
    referencedTemplateList?: ReferencedTemplate[]
  }
  export interface SsoRedirectRequest {
    jwtToken?: string
  }
  export interface StackDriverMetric {
    displayName?: string
    kind?: string
    metric?: string
    metricName?: string
    unit?: string
    valueType?: string
  }
  export interface StackDriverMetricDefinition {
    aggregation?: Aggregation
    filter?: string
    filterJson?: string
    metricName?: string
    metricType?: string
    txnName?: string
  }
  export interface StackDriverSetupTestNodeData {
    appId: string
    fromTime?: number
    guid?: string
    hostExpression?: string
    hostnameField?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    loadBalancerMetrics?: {
      [key: string]: StackDriverMetric[]
    }
    logConfiguration?: boolean
    messageField?: string
    metricDefinitions?: StackDriverMetricDefinition[]
    podMetrics?: StackDriverMetric[]
    query?: string
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    toTime?: number
    workflowId?: string
  }
  export interface StackTraceElement {
    className?: string
    fileName?: string
    lineNumber?: number
    methodName?: string
    nativeMethod?: boolean
  }
  export interface State {
    executeWithPreviousSteps?: boolean
    id?: string
    ignoreFailure?: boolean
    name?: string
    parentId?: string
    patternsForRequiredContextElementType?: string[]
    requiredContextElementType?:
      | 'SERVICE'
      | 'INFRAMAPPING'
      | 'SERVICE_TEMPLATE'
      | 'TAG'
      | 'SHELL'
      | 'HOST'
      | 'INSTANCE'
      | 'STANDARD'
      | 'PARAM'
      | 'PARTITION'
      | 'OTHER'
      | 'FORK'
      | 'CONTAINER_SERVICE'
      | 'CLUSTER'
      | 'AWS_LAMBDA_FUNCTION'
      | 'AMI_SERVICE_SETUP'
      | 'AMI_SERVICE_DEPLOY'
      | 'ECS_SERVICE_SETUP'
      | 'AMI_SWITCH_ROUTES'
      | 'PCF_SERVICE_SETUP'
      | 'PCF_SERVICE_DEPLOY'
      | 'PCF_ROUTE_SWAP_ROLLBACK'
      | 'PCF_INSTANCE'
      | 'SPOTINST_SERVICE_SETUP'
      | 'SPOTINST_SERVICE_DEPLOY'
      | 'ARTIFACT'
      | 'ARTIFACT_VARIABLE'
      | 'HELM_DEPLOY'
      | 'CLOUD_FORMATION_PROVISION'
      | 'CLOUD_FORMATION_ROLLBACK'
      | 'CLOUD_FORMATION_DEPROVISION'
      | 'TERRAFORM_PROVISION'
      | 'SHELL_SCRIPT_PROVISION'
      | 'K8S'
      | 'TERRAFORM_INHERIT_PLAN'
      | 'TERRAGRUNT_INHERIT_PLAN'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_WEBAPP_SETUP'
      | 'HELM_CHART'
      | 'MANIFEST_VARIABLE'
    requiredExecutionArgumentTypes?: (
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    )[]
    rollback?: boolean
    selectionLogsTrackingForTasksEnabled?: boolean
    stateType?: string
    templateExpressions?: TemplateExpression[]
    templateUuid?: string
    templateVariables?: Variable[]
    templateVersion?: string
    timeoutMillis?: number
    waitInterval?: number
  }
  export interface StateExecutionData {
    delegateMetaInfo?: DelegateMetaInfo
    element?: ContextElement
    endTs?: number
    errorMsg?: string
    executionDetails?: {
      [key: string]: ExecutionDataValue
    }
    executionSummary?: {
      [key: string]: ExecutionDataValue
    }
    startTs?: number
    stateName?: string
    stateParams?: {
      [key: string]: {
        [key: string]: any
      }
    }
    stateType?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    templateVariable?: {
      [key: string]: {
        [key: string]: any
      }
    }
    waitInterval?: number
  }
  export interface StateExecutionElement {
    executionContextElementId?: string
    name?: string
    progress?: number
    runningSteps?: string[]
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
  }
  export interface StateExecutionInstance {
    accountId?: string
    actionAfterManualInterventionTimeout?:
      | 'ABORT'
      | 'ABORT_ALL'
      | 'PAUSE'
      | 'PAUSE_FOR_INPUTS'
      | 'PAUSE_ALL'
      | 'RESUME'
      | 'RESUME_ALL'
      | 'RETRY'
      | 'IGNORE'
      | 'WAITING_FOR_MANUAL_INTERVENTION'
      | 'MARK_FAILED'
      | 'MARK_SUCCESS'
      | 'ROLLBACK'
      | 'NEXT_STEP'
      | 'END_EXECUTION'
      | 'ROLLBACK_DONE'
      | 'MARK_EXPIRED'
      | 'CONTINUE_WITH_DEFAULTS'
      | 'CONTINUE_PIPELINE_STAGE'
    actionOnTimeout?:
      | 'MANUAL_INTERVENTION'
      | 'ROLLBACK_WORKFLOW'
      | 'ROLLBACK_PHASE'
      | 'IGNORE'
      | 'RETRY'
      | 'END_EXECUTION'
      | 'CONTINUE_WITH_DEFAULTS'
      | 'ABORT_WORKFLOW_EXECUTION'
    appId?: string
    callback?: StateMachineExecutionCallback
    childStateMachineId?: string
    cloneInstanceId?: string
    contextElement?: ContextElement
    contextElements?: ContextElement[]
    contextTransition?: boolean
    continued?: boolean
    createdAt?: number
    dedicatedInterruptCount?: number
    delegateTaskId?: string
    delegateTasksDetails?: DelegateTaskDetails[]
    displayName?: string
    endTs?: number
    executionEventAdvisors?: ExecutionEventAdvisor[]
    executionName?: string
    executionType?: 'PIPELINE' | 'ORCHESTRATION'
    executionUuid?: string
    expiryTs?: number
    hasInspection?: boolean
    interruptHistory?: ExecutionInterruptEffect[]
    lastUpdatedAt?: number
    loopedStateParams?: LoopParams
    nextInstanceId?: string
    notifyElements?: ContextElement[]
    notifyId?: string
    orchestrationWorkflowType?: 'BUILD' | 'BASIC' | 'CANARY' | 'MULTI_SERVICE' | 'BLUE_GREEN' | 'ROLLING' | 'CUSTOM'
    parentInstanceId?: string
    parentLoopedState?: boolean
    phaseSubWorkflowId?: string
    pipelineStageElementId?: string
    pipelineStageParallelIndex?: number
    prevInstanceId?: string
    retry?: boolean
    retryCount?: number
    rollback?: boolean
    rollbackPhaseName?: string
    selectionLogsTrackingForTasksEnabled?: boolean
    stageName?: string
    startTs?: number
    stateExecutionDataHistory?: StateExecutionData[]
    stateExecutionMap?: {
      [key: string]: StateExecutionData
    }
    stateName?: string
    stateParams?: {
      [key: string]: {
        [key: string]: any
      }
    }
    stateTimeout?: number
    stateType?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    stepId?: string
    subGraphFilterId?: string
    uuid?: string
    waitingForInputs?: boolean
    waitingForManualIntervention?: boolean
    workflowId?: string
  }
  export interface StateExecutionInterrupt {
    interrupt?: ExecutionInterrupt
    tookAffectAt?: string
  }
  export interface StateInspection {
    data?: {
      [key: string]: StateInspectionData
    }
    stateExecutionInstanceId?: string
    validUntil?: string
  }
  export interface StateInspectionData {
    [key: string]: any
  }
  export interface StateMachine {
    accountId?: string
    appId: string
    cachedStatesMap?: {
      [key: string]: State
    }
    cachedTransitionFlowMap?: {
      [key: string]: {
        [key: string]: State[]
      }
    }
    childStateMachines?: {
      [key: string]: StateMachine
    }
    createdAt?: number
    initialState?: State
    initialStateName?: string
    name?: string
    orchestrationWorkflow?: OrchestrationWorkflow
    originId?: string
    originVersion?: number
    states?: State[]
    statesMap?: {
      [key: string]: State
    }
    transitionFlowMap?: {
      [key: string]: {
        [key: string]: State[]
      }
    }
    transitions?: Transition[]
    uuid?: string
    valid?: boolean
  }
  export interface StateMachineExecutionCallback {
    [key: string]: any
  }
  export interface StateReason {
    code?: string
    message?: string
  }
  export interface StaticLimit {
    count?: number
    limitType?: 'STATIC' | 'RATE_LIMIT'
  }
  export interface StatusInstanceBreakdown {
    instanceCount?: number
    instanceExecutionHistories?: InstanceExecutionHistory[]
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
  }
  export interface Stencil {
    displayOrder?: number
    jsonSchema?: JsonNode
    name?: string
    stencilCategory?:
      | 'BUILD'
      | 'CLOUD'
      | 'COLLABORATION'
      | 'COLLECTIONS'
      | 'COMMANDS'
      | 'COMMONS'
      | 'CONFIGURATIONS'
      | 'CONTAINERS'
      | 'CONTROLS'
      | 'COPY'
      | 'ENVIRONMENTS'
      | 'FLOW_CONTROLS'
      | 'KUBERNETES'
      | 'OTHERS'
      | 'PROVISIONERS'
      | 'SCRIPTS'
      | 'SUB_WORKFLOW'
      | 'VERIFICATIONS'
      | 'ECS'
      | 'SPOTINST'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AZURE_VMSS'
      | 'AZURE_WEBAPP'
      | 'AZURE_ARM'
      | 'TERRAGRUNT_PROVISION'
    type?: string
    uiSchema?: {
      [key: string]: any
    }
  }
  export interface StepSkipStrategy {
    assertionExpression: string
    phaseStep?: PhaseStep
    scope: 'ALL_STEPS' | 'SPECIFIC_STEPS'
    stepIds?: string[]
  }
  export interface StorageConfiguration {
    containerPath?: string
    hostSourcePath?: string
    readonly?: boolean
  }
  export interface Store {
    name?: string
  }
  export interface StreamingOutput {
    [key: string]: any
  }
  export interface SubdomainUrl {
    url?: string
  }
  export type SumoLogicConnectorDTO = ConnectorConfigDTO & {
    accessIdRef: string
    accessKeyRef: string
    delegateSelectors?: string[]
    url: string
  }
  export interface SumoLogicSetupTestNodedata {
    appId: string
    fromTime?: number
    guid?: string
    hostExpression?: string
    hostNameField?: string
    instanceElement?: Instance
    instanceName?: string
    isServiceLevel?: boolean
    query?: string
    serviceLevel?: boolean
    settingId: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    toTime?: number
    workflowId?: string
  }
  export interface SwitchAccountRequest {
    accountId?: string
  }
  export interface SyncStatus {
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    envId?: string
    infraMappingId?: string
    infraMappingName?: string
    lastSuccessfullySyncedAt?: number
    lastSyncedAt?: number
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    serviceId?: string
    syncFailureReason?: string
    uuid: string
  }
  export interface Tag {
    key?: string
    value?: string
  }
  export interface TagFilterCondition {
    name?: string
    operator?:
      | 'EQ'
      | 'NOT_EQ'
      | 'LT'
      | 'LT_EQ'
      | 'GE'
      | 'GT'
      | 'CONTAINS'
      | 'STARTS_WITH'
      | 'HAS'
      | 'IN'
      | 'NOT_IN'
      | 'EXISTS'
      | 'NOT_EXISTS'
      | 'HAS_ALL'
      | 'OR'
      | 'AND'
      | 'ELEMENT_MATCH'
    tagType?: 'USER' | 'HARNESS'
    values?: string[]
  }
  export interface TaskData {
    async?: boolean
    expressionFunctorToken?: number
    expressions?: {
      [key: string]: string
    }
    parameters?: {
      [key: string]: any
    }[]
    parked?: boolean
    taskType: string
    timeout?: number
  }
  export interface TaskSelectorMap {
    accountId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    selectors?: string[]
    taskGroup?:
      | 'SCRIPT'
      | 'HTTP'
      | 'SPLUNK'
      | 'APPDYNAMICS'
      | 'INSTANA'
      | 'NEWRELIC'
      | 'STACKDRIVER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'CLOUD_WATCH'
      | 'JENKINS'
      | 'COMMAND'
      | 'BAMBOO'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'GCS'
      | 'GCB'
      | 'GCP'
      | 'ACR'
      | 'NEXUS'
      | 'S3'
      | 'AZURE_ARTIFACTS'
      | 'AZURE_VMSS'
      | 'AZURE_APP_SERVICE'
      | 'AZURE_ARM'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'ARTIFACTORY'
      | 'HOST_VALIDATION'
      | 'KMS'
      | 'GIT'
      | 'CONTAINER'
      | 'AMI'
      | 'HELM'
      | 'COLLABORATION_PROVIDER'
      | 'PCF'
      | 'SPOTINST'
      | 'APM'
      | 'LOG'
      | 'CLOUD_FORMATION'
      | 'TERRAFORM'
      | 'TERRAGRUNT'
      | 'AWS'
      | 'LDAP'
      | 'K8S'
      | 'SMB'
      | 'SFTP'
      | 'TRIGGER'
      | 'JIRA'
      | 'CONNECTIVITY_VALIDATION'
      | 'BUILD_SOURCE'
      | 'CUSTOM'
      | 'SHELL_SCRIPT_PROVISION'
      | 'SERVICENOW'
      | 'HELM_REPO_CONFIG_VALIDATION'
      | 'HELM_VALUES_FETCH_TASK'
      | 'GUARD_24x7'
      | 'CI'
      | 'SLACK'
      | 'ARTIFACT_COLLECT_NG'
      | 'K8S_NG'
      | 'CAPABILITY_VALIDATION'
      | 'JIRA_NG'
      | 'CVNG'
      | 'NOTIFICATION'
      | 'HTTP_NG'
      | 'SHELL_SCRIPT_NG'
      | 'GIT_NG'
      | 'BATCH_CAPABILITY_CHECK'
      | 'CUSTOM_MANIFEST_VALUES_FETCH_TASK'
      | 'CUSTOM_MANIFEST_FETCH_TASK'
      | 'TERRAFORM_NG'
      | 'CE'
    uuid: string
  }
  export interface TechStack {
    category?: string
    technology?: string
  }
  export interface Template {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    folderId?: string
    folderPath?: string
    folderPathId?: string
    gallery?: string
    galleryId?: string
    importedTemplateDetails?: ImportedTemplateDetails
    keywords?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name: string
    referencedTemplateId?: string
    referencedTemplateUri?: string
    referencedTemplateVersion?: number
    templateMetadata?: TemplateMetadata
    templateObject: BaseTemplate
    type?: string
    uuid: string
    variables?: Variable[]
    version?: number
    versionDetails?: string
    versionedTemplate?: VersionedTemplate
  }
  export interface TemplateExpression {
    description?: string
    expression?: string
    expressionAllowed?: boolean
    fieldName?: string
    mandatory?: boolean
    metadata?: {
      [key: string]: {
        [key: string]: any
      }
    }
  }
  export interface TemplateFolder {
    accountId?: string
    appId: string
    children?: TemplateFolder[]
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    galleryId?: string
    keywords?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    nodeType?: string
    parentId?: string
    pathId?: string
    templatesCount?: number
    uuid: string
  }
  export interface TemplateGallery {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    galleryKey?: string
    global?: boolean
    keywords?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    referencedGalleryId?: string
    uuid: string
  }
  export interface TemplateMetadata {
    [key: string]: any
  }
  export interface TemplateReference {
    templateUuid?: string
    templateVersion?: number
  }
  export interface TemplateVariableYaml {
    description?: string
    name?: string
    value?: string
  }
  export interface TemplateVersion {
    accountId?: string
    appId: string
    changeType?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    galleryId?: string
    importedTemplateVersion?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    templateName?: string
    templateType?: string
    templateUuid?: string
    uuid: string
    version?: number
    versionDetails?: string
  }
  export interface TemporalUnit {
    dateBased?: boolean
    duration?: Duration
    durationEstimated?: boolean
    timeBased?: boolean
  }
  export type TerraformInfrastructureProvisioner = InfrastructureProvisioner & {
    backendConfigs?: NameValuePair[]
    commitId?: string
    environmentVariables?: NameValuePair[]
    kmsId?: string
    normalizedPath?: string
    path: string
    repoName?: string
    skipRefreshBeforeApplyingPlan?: boolean
    sourceRepoBranch?: string
    sourceRepoSettingId?: string
    templatized?: boolean
    workspaces?: string[]
  }
  export type TerragruntInfrastructureProvisioner = InfrastructureProvisioner & {
    commitId?: string
    normalizedPath?: string
    path: string
    repoName?: string
    secretManagerId?: string
    skipRefreshBeforeApplyingPlan?: boolean
    sourceRepoBranch?: string
    sourceRepoSettingId?: string
    templatized?: boolean
  }
  export interface ThirdPartyApiCallField {
    name?: string
    type?: 'JSON' | 'XML' | 'NUMBER' | 'URL' | 'TEXT' | 'TIMESTAMP'
    value?: string
  }
  export interface ThirdPartyApiCallLog {
    accountId?: string
    createdAt?: number
    delegateId?: string
    delegateTaskId?: string
    request?: ThirdPartyApiCallField[]
    requestTimeStamp?: number
    response?: ThirdPartyApiCallField[]
    responseTimeStamp?: number
    stateExecutionId?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    title?: string
    uuid?: string
    validUntil?: string
  }
  export interface Threshold {
    comparisonType?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
    customThresholdType?: 'ACCEPTABLE' | 'ANOMALOUS'
    ml?: number
    thresholdCriteria?: TimeSeriesCustomThresholdCriteria
    thresholdType?: 'ALERT_WHEN_LOWER' | 'ALERT_WHEN_HIGHER' | 'ALERT_HIGHER_OR_LOWER' | 'NO_ALERT'
  }
  export interface Throwable {
    cause?: Throwable
    localizedMessage?: string
    message?: string
    stackTrace?: StackTraceElement[]
    suppressed?: Throwable[]
  }
  export interface TimeRange {
    duration?: number
    durationBased?: boolean
    endTime?: number
    expires?: boolean
    freezeOccurrence?: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'ANNUAL'
    from?: number
    label?: string
    timeZone?: string
    to?: number
  }
  export interface TimeRangeBasedFreezeConfig {
    appIds?: string[]
    appSelections?: ApplicationFilter[]
    applicable?: boolean
    description?: string
    environmentTypes?: ('PROD' | 'NON_PROD' | 'ALL')[]
    freezeForAllApps?: boolean
    name?: string
    timeRange?: TimeRange
    userGroups?: string[]
    uuid?: string
  }
  export interface TimeSeries {
    metricName: string
    metricType: string
    txnName: string
    url: string
  }
  export interface TimeSeriesCustomThresholdCriteria {
    actionToTake?: 'FAIL_IMMEDIATELY' | 'FAIL_AFTER_OCCURRENCES' | 'FAIL_AFTER_CONSECUTIVE_OCCURRENCES'
    occurrences?: number
  }
  export interface TimeSeriesDataPoint {
    risk?: number
    timestamp?: number
    value?: number
  }
  export interface TimeSeriesFilter {
    cvConfigId?: string
    endTime?: number
    historyStartTime?: number
    metricNames?: string[]
    startTime?: number
    tags?: string[]
    txnNames?: string[]
  }
  export interface TimeSeriesKeyTransactions {
    accountId?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    cvConfigId?: string
    keyTransactions?: string[]
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    serviceId?: string
    uuid?: string
  }
  export interface TimeSeriesMLTransactionThresholds {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    customThresholdRefId?: string
    cvConfigId?: string
    groupName?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    metricName?: string
    serviceId?: string
    stateType?:
      | 'SUB_WORKFLOW'
      | 'REPEAT'
      | 'FORK'
      | 'WAIT'
      | 'PAUSE'
      | 'BARRIER'
      | 'RESOURCE_CONSTRAINT'
      | 'SHELL_SCRIPT'
      | 'HTTP'
      | 'TEMPLATIZED_SECRET_MANAGER'
      | 'EMAIL'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'NEW_RELIC_DEPLOYMENT_MARKER'
      | 'DYNA_TRACE'
      | 'PROMETHEUS'
      | 'SPLUNKV2'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'DATA_DOG_LOG'
      | 'CVNG'
      | 'CLOUD_WATCH'
      | 'AWS_LAMBDA_VERIFICATION'
      | 'APM_VERIFICATION'
      | 'LOG_VERIFICATION'
      | 'BUG_SNAG'
      | 'STACK_DRIVER'
      | 'STACK_DRIVER_LOG'
      | 'INSTANA'
      | 'SCALYR'
      | 'ENV_STATE'
      | 'ENV_LOOP_STATE'
      | 'ENV_RESUME_STATE'
      | 'ENV_LOOP_RESUME_STATE'
      | 'COMMAND'
      | 'APPROVAL'
      | 'APPROVAL_RESUME'
      | 'ELASTIC_LOAD_BALANCER'
      | 'JENKINS'
      | 'GCB'
      | 'BAMBOO'
      | 'ARTIFACT_COLLECTION'
      | 'ARTIFACT_CHECK'
      | 'AZURE_NODE_SELECT'
      | 'AZURE_VMSS_SETUP'
      | 'AZURE_VMSS_DEPLOY'
      | 'AZURE_VMSS_ROLLBACK'
      | 'AZURE_VMSS_SWITCH_ROUTES'
      | 'AZURE_VMSS_SWITCH_ROUTES_ROLLBACK'
      | 'AZURE_WEBAPP_SLOT_SETUP'
      | 'AZURE_WEBAPP_SLOT_SWAP'
      | 'AZURE_WEBAPP_SLOT_SHIFT_TRAFFIC'
      | 'AZURE_WEBAPP_SLOT_ROLLBACK'
      | 'AWS_NODE_SELECT'
      | 'DC_NODE_SELECT'
      | 'ROLLING_NODE_SELECT'
      | 'PHASE'
      | 'PHASE_STEP'
      | 'STAGING_ORIGINAL_EXECUTION'
      | 'AWS_CODEDEPLOY_STATE'
      | 'AWS_CODEDEPLOY_ROLLBACK'
      | 'AWS_LAMBDA_STATE'
      | 'AWS_LAMBDA_ROLLBACK'
      | 'AWS_AMI_SERVICE_SETUP'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_SETUP'
      | 'AWS_AMI_SERVICE_DEPLOY'
      | 'ASG_AMI_SERVICE_ALB_SHIFT_DEPLOY'
      | 'AWS_AMI_SWITCH_ROUTES'
      | 'ASG_AMI_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_ROLLBACK_SWITCH_ROUTES'
      | 'ASG_AMI_ROLLBACK_ALB_SHIFT_SWITCH_ROUTES'
      | 'AWS_AMI_SERVICE_ROLLBACK'
      | 'ECS_SERVICE_SETUP'
      | 'SPOTINST_SETUP'
      | 'SPOTINST_ALB_SHIFT_SETUP'
      | 'SPOTINST_DEPLOY'
      | 'SPOTINST_ALB_SHIFT_DEPLOY'
      | 'SPOTINST_LISTENER_UPDATE'
      | 'SPOTINST_LISTENER_ALB_SHIFT'
      | 'SPOTINST_ROLLBACK'
      | 'SPOTINST_LISTENER_UPDATE_ROLLBACK'
      | 'SPOTINST_LISTENER_ALB_SHIFT_ROLLBACK'
      | 'ECS_SERVICE_SETUP_ROLLBACK'
      | 'ECS_DAEMON_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP'
      | 'ECS_BG_SERVICE_SETUP_ROUTE53'
      | 'ECS_SERVICE_DEPLOY'
      | 'ECS_SERVICE_ROLLBACK'
      | 'ECS_LISTENER_UPDATE'
      | 'ECS_LISTENER_UPDATE_ROLLBACK'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE'
      | 'ECS_ROUTE53_DNS_WEIGHT_UPDATE_ROLLBACK'
      | 'KUBERNETES_SETUP'
      | 'KUBERNETES_SETUP_ROLLBACK'
      | 'KUBERNETES_DEPLOY'
      | 'KUBERNETES_DEPLOY_ROLLBACK'
      | 'KUBERNETES_STEADY_STATE_CHECK'
      | 'ECS_STEADY_STATE_CHECK'
      | 'ECS_RUN_TASK'
      | 'GCP_CLUSTER_SETUP'
      | 'HELM_DEPLOY'
      | 'HELM_ROLLBACK'
      | 'PCF_SETUP'
      | 'PCF_RESIZE'
      | 'PCF_ROLLBACK'
      | 'PCF_MAP_ROUTE'
      | 'PCF_UNMAP_ROUTE'
      | 'PCF_BG_MAP_ROUTE'
      | 'PCF_PLUGIN'
      | 'TERRAFORM_PROVISION'
      | 'TERRAFORM_APPLY'
      | 'TERRAGRUNT_PROVISION'
      | 'TERRAGRUNT_DESTROY'
      | 'TERRAGRUNT_ROLLBACK'
      | 'ARM_CREATE_RESOURCE'
      | 'ARM_ROLLBACK'
      | 'SHELL_SCRIPT_PROVISION'
      | 'TERRAFORM_DESTROY'
      | 'CLOUD_FORMATION_CREATE_STACK'
      | 'CLOUD_FORMATION_DELETE_STACK'
      | 'KUBERNETES_SWAP_SERVICE_SELECTORS'
      | 'CLOUD_FORMATION_ROLLBACK_STACK'
      | 'TERRAFORM_ROLLBACK'
      | 'K8S_DEPLOYMENT_ROLLING'
      | 'K8S_SCALE'
      | 'K8S_DEPLOYMENT_ROLLING_ROLLBACK'
      | 'K8S_BLUE_GREEN_DEPLOY'
      | 'K8S_CANARY_DEPLOY'
      | 'K8S_DELETE'
      | 'JIRA_CREATE_UPDATE'
      | 'SERVICENOW_CREATE_UPDATE'
      | 'K8S_TRAFFIC_SPLIT'
      | 'K8S_APPLY'
      | 'CUSTOM_DEPLOYMENT_FETCH_INSTANCES'
    thresholdType?: 'ACCEPTABLE' | 'ANOMALOUS'
    thresholds?: TimeSeriesMetricDefinition
    transactionName?: string
    uuid: string
    version?: number
    workflowId?: string
  }
  export interface TimeSeriesMetricDefinition {
    categorizedThresholds?: {
      [key: string]: Threshold[]
    }
    customThresholds?: Threshold[]
    metricName?: string
    metricType?: string
    tags?: string[]
    thresholds?: Threshold[]
  }
  export interface TimeSeriesOfMetric {
    lastSeenTime?: number
    longTermPattern?: boolean
    metricDeeplinkUrl?: string
    metricName?: string
    metricType?: string
    risk?: number
    risksForTimeSeries?: TimeSeriesRisk[]
    timeSeries?: TimeSeriesDataPoint[]
  }
  export interface TimeSeriesRisk {
    endTime?: number
    risk?: number
    startTime?: number
  }
  export interface TopConsumer {
    appId?: string
    appName?: string
    failedActivityCount?: number
    serviceId?: string
    serviceName?: string
    successfulActivityCount?: number
    totalCount?: number
  }
  export interface TrafficShiftMetadata {
    phaseIdsWithTrafficShift?: string[]
  }
  export interface TransactionTimeSeries {
    metricTimeSeries?: TimeSeriesOfMetric[]
    tag?: string
    transactionName?: string
  }
  export interface Transition {
    fromState?: State
    toState?: State
    transitionType?: 'SUCCESS' | 'FAILURE' | 'ABORT' | 'REPEAT' | 'FORK' | 'CONDITIONAL'
  }
  export interface TrialSignupOptions {
    assistedOption?: boolean
    productsSelected?: ('CD' | 'CE' | 'CI')[]
  }
  export interface Trigger {
    accountId?: string
    appId: string
    artifactSelections?: ArtifactSelection[]
    condition: TriggerCondition
    continueWithDefaultValues?: boolean
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    disabled?: boolean
    excludeHostsWithSameArtifact?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    manifestSelections?: ManifestSelection[]
    name?: string
    nextIterations?: number[]
    pipelineId?: string
    pipelineName?: string
    serviceInfraWorkflows?: ServiceInfraWorkflow[]
    tagLinks?: HarnessTagLink[]
    uuid: string
    workflowId?: string
    workflowName?: string
    workflowType?: 'PIPELINE' | 'ORCHESTRATION'
    workflowVariables?: {
      [key: string]: string
    }
  }
  export interface TriggerCondition {
    conditionDisplayName?: string
    conditionType: 'NEW_ARTIFACT' | 'PIPELINE_COMPLETION' | 'SCHEDULED' | 'WEBHOOK' | 'NEW_INSTANCE' | 'NEW_MANIFEST'
  }
  export interface TriggeredBy {
    email?: string
    name?: string
  }
  export interface TwoFactorAdminOverrideSettings {
    adminOverrideTwoFactorEnabled?: boolean
  }
  export interface TwoFactorAuthenticationSettings {
    email?: string
    mechanism?: 'TOTP'
    totpSecretKey?: string
    totpqrurl?: string
    twoFactorAuthenticationEnabled?: boolean
    userId?: string
  }
  export interface UpdatePasswordRequest {
    password?: string
  }
  export interface Usage {
    entityId?: string
    entityName?: string
    entityType?: string
    properties?: {
      [key: string]: string
    }
  }
  export interface UsageRestrictions {
    appEnvRestrictions?: AppEnvRestriction[]
  }
  export interface UsageRestrictionsReferenceSummary {
    numOfSecrets?: number
    numOfSettings?: number
    secrets?: IdNameReference[]
    settings?: IdNameReference[]
    total?: number
  }
  export interface User {
    accountIds?: string[]
    accountName?: string
    accounts?: Account[]
    appId: string
    companyName?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    defaultAccountId?: string
    disabled?: boolean
    email?: string
    emailVerified?: boolean
    familyName?: string
    firstLogin?: boolean
    givenName?: string
    imported?: boolean
    lastAccountId?: string
    lastAppId?: string
    lastLogin?: number
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    name?: string
    oauthProvider?: string
    password?: string[]
    passwordExpired?: boolean
    pendingAccounts?: Account[]
    reportedSegmentTracks?: string[]
    statsFetchedOn?: number
    supportAccounts?: Account[]
    token?: string
    twoFactorAuthenticationEnabled?: boolean
    twoFactorAuthenticationMechanism?: 'TOTP'
    twoFactorJwtToken?: string
    userGroups?: UserGroup[]
    userLocked?: boolean
    userLockoutInfo?: UserLockoutInfo
    utmInfo?: UtmInfo
    uuid: string
  }
  export interface UserDataSpecification {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    data: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    serviceId?: string
    uuid: string
  }
  export interface UserGroup {
    accountId?: string
    accountPermissions?: AccountPermissions
    appId: string
    appPermissions?: AppPermission[]
    createdAt?: number
    createdBy?: EmbeddedUser
    default?: boolean
    description?: string
    importedByScim?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    linkedSsoDisplayName?: string
    linkedSsoId?: string
    linkedSsoType?: 'SAML' | 'LDAP' | 'OAUTH'
    memberIds?: string[]
    members?: User[]
    name?: string
    notificationSettings?: NotificationSettings
    ssoGroupId?: string
    ssoGroupName?: string
    ssoLinked?: boolean
    uuid: string
  }
  export interface UserInvite {
    accountId?: string
    accountName?: string
    agreement?: boolean
    appId: string
    companyName?: string
    completed?: boolean
    country?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    createdFromNG?: boolean
    email?: string
    familyName?: string
    freemiumAssistedOption?: boolean
    freemiumProducts?: string[]
    givenName?: string
    importedByScim?: boolean
    intent?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    marketPlaceToken?: string
    name?: string
    password?: string[]
    phone?: string
    roles?: Role[]
    source?: UserInviteSource
    state?: string
    userGroups?: UserGroup[]
    utmInfo?: UtmInfo
    uuid: string
  }
  export interface UserInviteDTO {
    accountId: string
    email: string
    name: string
    password?: string
    token: string
  }
  export interface UserInviteSource {
    type?: 'MANUAL' | 'SSO' | 'TRIAL' | 'MARKETPLACE' | 'MARKETO_LINKEDIN' | 'AZURE_MARKETPLACE' | 'ONPREM'
    uuid?: string
  }
  export interface UserLockoutInfo {
    numberOfFailedLoginAttempts?: number
    userLockedAt?: number
  }
  export interface UserLockoutPolicy {
    enableLockoutPolicy?: boolean
    lockOutPeriod?: number
    notifyUser?: boolean
    numberOfFailedAttemptsBeforeLockout?: number
    userGroupsToNotify?: UserGroup[]
  }
  export interface UserPermissionInfo {
    accountId?: string
    accountPermissionSummary?: AccountPermissionSummary
    appPermissionMap?: {
      [key: string]: AppPermissionSummaryForUI
    }
    dashboardPermissions?: {
      [key: string]: ('READ' | 'UPDATE' | 'DELETE' | 'MANAGE')[]
    }
    hasAllAppAccess?: boolean
  }
  export interface UtmInfo {
    utmCampaign?: string
    utmContent?: string
    utmMedium?: string
    utmSource?: string
    utmTerm?: string
  }
  export interface UuidAware {
    uuid?: string
  }
  export interface ValidationResult {
    errorMessage?: string
    valid?: boolean
  }
  export interface Variable {
    allowMultipleValues?: boolean
    allowedList?: string[]
    allowedValues?: string
    artifactStreamSummaries?: ArtifactStreamSummary[]
    description?: string
    fixed?: boolean
    mandatory?: boolean
    metadata?: {
      [key: string]: {
        [key: string]: any
      }
    }
    name?: string
    runtimeInput?: boolean
    type?: 'TEXT' | 'NUMBER' | 'EMAIL' | 'ENTITY' | 'ARTIFACT' | 'MANIFEST'
    value?: string
  }
  export interface VaultConfig {
    accountId?: string
    appRoleId?: string
    authToken?: string
    basePath?: string
    certValidationRequired?: boolean
    createdAt?: number
    createdBy?: EmbeddedUser
    default?: boolean
    delegateSelectors?: string[]
    encryptedBy?: string
    encryptionType?:
      | 'LOCAL'
      | 'KMS'
      | 'GCP_KMS'
      | 'AWS_SECRETS_MANAGER'
      | 'AZURE_VAULT'
      | 'CYBERARK'
      | 'VAULT'
      | 'GCP_SECRETS_MANAGER'
      | 'CUSTOM'
      | 'VAULT_SSH'
    engineManuallyEntered?: boolean
    lastUpdatedAt?: number
    lastUpdatedBy?: EmbeddedUser
    manuallyEnteredSecretEngineMigrationIteration?: number
    name?: string
    namespace?: string
    nextTokenRenewIteration?: number
    numOfEncryptedValue?: number
    readOnly?: boolean
    renewIntervalHours?: number
    renewalInterval?: number
    renewedAt?: number
    scopedToAccount?: boolean
    secretEngineName?: string
    secretEngineVersion?: number
    secretId?: string
    sinkPath?: string
    templatized?: boolean
    templatizedFields?: string[]
    usageRestrictions?: UsageRestrictions
    useVaultAgent?: boolean
    uuid: string
    vaultUrl?: string
  }
  export type VaultConnectorDTO = ConnectorConfigDTO & {
    accessType?: 'APP_ROLE' | 'TOKEN'
    appRoleId?: string
    authToken?: string
    basePath?: string
    default?: boolean
    delegateSelectors?: string[]
    readOnly?: boolean
    renewalIntervalMinutes?: number
    secretEngineManuallyConfigured?: boolean
    secretEngineName?: string
    secretEngineVersion?: number
    secretId?: string
    vaultUrl?: string
  }
  export interface VerificationDataAnalysisResponse {
    executionStatus?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    stateExecutionData?: VerificationStateAnalysisExecutionData
  }
  export interface VerificationLoadResponse {
    loadPresent?: boolean
    loadResponse?: {
      [key: string]: any
    }
    totalHits?: number
    totalHitsThreshold?: number
  }
  export interface VerificationNodeDataSetupResponse {
    configurationCorrect?: boolean
    dataForNode?: {
      [key: string]: any
    }
    loadResponse?: VerificationLoadResponse
    providerReachable?: boolean
  }
  export interface VerificationStateAnalysisExecutionData {
    analysisMinute?: number
    baselineExecutionId?: string
    canaryNewHostNames?: string[]
    comparisonStrategy?: 'COMPARE_WITH_PREVIOUS' | 'COMPARE_WITH_CURRENT' | 'PREDICTIVE'
    correlationId?: string
    customThresholdRefId?: string
    delegateMetaInfo?: DelegateMetaInfo
    element?: ContextElement
    endTs?: number
    errorMsg?: string
    lastExecutionNodes?: string[]
    progressPercentage?: number
    query?: string
    remainingMinutes?: number
    serverConfigId?: string
    startTs?: number
    stateExecutionInstanceId?: string
    stateName?: string
    stateParams?: {
      [key: string]: {
        [key: string]: any
      }
    }
    stateType?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    templateVariable?: {
      [key: string]: {
        [key: string]: any
      }
    }
    waitInterval?: number
    wingsPersistence?: WingsPersistence
  }
  export interface Version {
    buildMetadata?: string
    majorVersion?: number
    minorVersion?: number
    normalVersion?: string
    patchVersion?: number
    preReleaseVersion?: string
  }
  export interface VersionInfo {
    buildNo?: string
    gitBranch?: string
    gitCommit?: string
    patch?: string
    timestamp?: string
    version?: string
  }
  export interface VersionPackage {
    runtimeInfo?: RuntimeInfo
    versionInfo?: VersionInfo
  }
  export interface VersionedTemplate {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    galleryId?: string
    importedTemplateVersion?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    templateId?: string
    templateObject: BaseTemplate
    uuid: string
    variables?: Variable[]
    version?: number
  }
  export interface ViewCondition {
    type?: string
  }
  export interface ViewCustomField {
    accountId?: string
    createdAt?: number
    description?: string
    displayFormula?: string
    lastUpdatedAt?: number
    name?: string
    sqlFormula?: string
    userDefinedExpression?: string
    uuid?: string
    viewFields?: ViewField[]
    viewId?: string
  }
  export interface ViewField {
    fieldId?: string
    fieldName?: string
    identifier?: 'CLUSTER' | 'AWS' | 'GCP' | 'AZURE' | 'COMMON' | 'CUSTOM' | 'LABEL'
    identifierName?: string
  }
  export type ViewIdCondition = ViewCondition & {
    values?: string[]
    viewField?: ViewField
    viewOperator?: 'IN' | 'NOT_IN' | 'NOT_NULL' | 'NULL'
  }
  export interface ViewRule {
    viewConditions?: ViewCondition[]
  }
  export interface ViewTimeRange {
    endTime?: number
    startTime?: number
    viewTimeRangeType?: 'LAST_7' | 'LAST_30' | 'LAST_MONTH' | 'CURRENT_MONTH' | 'CUSTOM'
  }
  export interface ViewVisualization {
    chartType?: 'STACKED_TIME_SERIES' | 'STACKED_LINE_CHART'
    granularity?: 'DAY' | 'MONTH'
    groupBy?: ViewField
  }
  export interface VirtualMachineScaleSetData {
    id?: string
    name?: string
    virtualMachineAdministratorUsername?: string
  }
  export interface Void {
    [key: string]: any
  }
  export interface WebHookEventConfig {
    headers?: KeyValuePair[]
    socketTimeoutMillis?: number
    tags?: string[]
    url?: string
    useProxy?: boolean
  }
  export interface WebHookRequest {
    application?: string
    artifacts?: {
      [key: string]: {
        [key: string]: any
      }
    }[]
    manifests?: {
      [key: string]: {
        [key: string]: any
      }
    }[]
    parameters?: {
      [key: string]: string
    }
  }
  export interface WebHookToken {
    httpMethod?: string
    payload?: string
    webHookToken?: string
  }
  export type WebHookTriggerCondition = TriggerCondition & {
    actions?: (
      | 'CLOSED'
      | 'EDITED'
      | 'OPENED'
      | 'REOPENED'
      | 'ASSIGNED'
      | 'UNASSIGNED'
      | 'LABELED'
      | 'UNLABELED'
      | 'SYNCHRONIZED'
      | 'REVIEW_REQUESTED'
      | 'REVIEW_REQUESTED_REMOVED'
      | 'PACKAGE_PUBLISHED'
    )[]
    artifactStreamId?: string
    bitBucketEvents?: (
      | 'PING'
      | 'DIAGNOSTICS_PING'
      | 'ALL'
      | 'PUSH_ANY'
      | 'ANY'
      | 'FORK'
      | 'UPDATED'
      | 'COMMIT_COMMENT_CREATED'
      | 'BUILD_STATUS_CREATED'
      | 'BUILD_STATUS_UPDATED'
      | 'PUSH'
      | 'REFS_CHANGED'
      | 'ISSUE_ANY'
      | 'ISSUE_CREATED'
      | 'ISSUE_UPDATED'
      | 'ISSUE_COMMENT_CREATED'
      | 'PULL_REQUEST_ANY'
      | 'PULL_REQUEST_CREATED'
      | 'PULL_REQUEST_UPDATED'
      | 'PULL_REQUEST_APPROVED'
      | 'PULL_REQUEST_APPROVAL_REMOVED'
      | 'PULL_REQUEST_MERGED'
      | 'PULL_REQUEST_DECLINED'
      | 'PULL_REQUEST_COMMENT_CREATED'
      | 'PULL_REQUEST_COMMENT_UPDATED'
      | 'PULL_REQUEST_COMMENT_DELETED'
    )[]
    branchName?: string
    branchRegex?: string
    checkFileContentChanged?: boolean
    eventTypes?: (
      | 'PULL_REQUEST'
      | 'PUSH'
      | 'REPO'
      | 'ISSUE'
      | 'PING'
      | 'DELETE'
      | 'ANY'
      | 'OTHER'
      | 'RELEASE'
      | 'PACKAGE'
    )[]
    filePaths?: string[]
    gitConnectorId?: string
    parameters?: {
      [key: string]: string
    }
    releaseActions?: ('CREATED' | 'PUBLISHED' | 'RELEASED' | 'UNPUBLISHED' | 'EDITED' | 'DELETED' | 'PRE_RELEASED')[]
    repoName?: string
    webHookSecret?: string
    webHookToken?: WebHookToken
    webhookSource?: 'GITHUB' | 'GITLAB' | 'BITBUCKET' | 'AZURE_DEVOPS'
  }
  export interface WebhookParameters {
    expressions?: string[]
    params?: string[]
  }
  export interface WeeklyFreezeConfig {
    appIds?: string[]
    appSelections?: ApplicationFilter[]
    applicable?: boolean
    description?: string
    environmentTypes?: ('PROD' | 'NON_PROD' | 'ALL')[]
    freezeForAllApps?: boolean
    name?: string
    userGroups?: string[]
    uuid?: string
    weeklyRange?: WeeklyRange
  }
  export interface WeeklyRange {
    endDay?: string
    endTime?: string
    startDay?: string
    startTime?: string
    timeZone?: string
  }
  export interface Whitelist {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    description?: string
    filter?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    status?: 'ACTIVE' | 'DISABLED'
    uuid: string
  }
  export interface WingsPersistence {
    classStores?: {
      [key: string]: Store
    }
  }
  export interface Workflow {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    creationFlags?: WorkflowCreationFlags
    defaultVersion?: number
    deploymentTypes?: (
      | 'SSH'
      | 'AWS_CODEDEPLOY'
      | 'ECS'
      | 'SPOTINST'
      | 'KUBERNETES'
      | 'HELM'
      | 'AWS_LAMBDA'
      | 'AMI'
      | 'WINRM'
      | 'PCF'
      | 'AZURE_VMSS'
      | 'AZURE_WEBAPP'
      | 'CUSTOM'
    )[]
    description?: string
    envId?: string
    envTemplatized?: boolean
    infraDefinitionId?: string
    infraMappingId?: string
    keywords?: string[]
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    linkedArtifactStreamIds?: string[]
    linkedTemplateUuids?: string[]
    name: string
    notes?: string
    orchestration?: OrchestrationWorkflow
    orchestrationWorkflow?: OrchestrationWorkflow
    sample?: boolean
    serviceId?: string
    services?: Service[]
    tagLinks?: HarnessTagLink[]
    templateExpressions?: TemplateExpression[]
    templatized?: boolean
    templatizedServiceIds?: string[]
    uuid: string
    workflowExecutions?: WorkflowExecution[]
    workflowType?: 'PIPELINE' | 'ORCHESTRATION'
  }
  export interface WorkflowCategorySteps {
    categories?: WorkflowCategoryStepsMeta[]
    steps?: {
      [key: string]: WorkflowStepMeta
    }
  }
  export interface WorkflowCategoryStepsMeta {
    id?: string
    name?: string
    stepIds?: string[]
  }
  export interface WorkflowCreationFlags {
    awsTrafficShiftAlbType?: boolean
    awsTrafficShiftType?: string
    ecsBGType?: string
    ecsBgDnsType?: boolean
  }
  export interface WorkflowExecution {
    accountId?: string
    appId: string
    appName?: string
    artifacts?: Artifact[]
    awsLambdaExecutionSummaries?: AwsLambdaExecutionSummary[]
    baseline?: boolean
    breakdown?: CountsByStatuses
    buildExecutionSummaries?: BuildExecutionSummary[]
    cdPageCandidate?: boolean
    cloudProviderIds?: string[]
    concurrencyStrategy?: ConcurrencyStrategy
    createdAt?: number
    createdBy?: EmbeddedUser
    createdByType?: 'USER' | 'API_KEY' | 'TRIGGER'
    deployedCloudProviders?: string[]
    deployedEnvironments?: EnvSummary[]
    deployedServices?: string[]
    deploymentTriggerId?: string
    duration?: number
    endTs?: number
    envId?: string
    envIds?: string[]
    envName?: string
    envType?: 'PROD' | 'NON_PROD' | 'ALL'
    environments?: EnvSummary[]
    errorStrategy?: 'CONTINUE' | 'FAIL' | 'PAUSE' | 'RETRY'
    executionArgs?: ExecutionArgs
    executionNode?: GraphNode
    failureDetails?: string
    graph?: Graph
    helmCharts?: HelmChart[]
    helmExecutionSummary?: HelmExecutionSummary
    infraDefinitionIds?: string[]
    infraMappingIds?: string[]
    keywords?: string[]
    latestPipelineResume?: boolean
    message?: string
    name?: string
    nextIteration?: number
    onDemandRollback?: boolean
    orchestrationType?: 'BUILD' | 'BASIC' | 'CANARY' | 'MULTI_SERVICE' | 'BLUE_GREEN' | 'ROLLING' | 'CUSTOM'
    originalExecution?: WorkflowExecutionInfo
    pipelineExecution?: PipelineExecution
    pipelineExecutionId?: string
    pipelineResumeId?: string
    pipelineSummary?: PipelineSummary
    releaseNo?: string
    rollbackArtifacts?: Artifact[]
    rollbackDuration?: number
    rollbackStartTs?: number
    serviceExecutionSummaries?: ElementExecutionSummary[]
    serviceIds?: string[]
    stageName?: string
    startTs?: number
    stateMachine?: StateMachine
    stateMachineId?: string
    status?:
      | 'ABORTED'
      | 'DISCONTINUING'
      | 'ERROR'
      | 'FAILED'
      | 'NEW'
      | 'PAUSED'
      | 'PAUSING'
      | 'QUEUED'
      | 'RESUMED'
      | 'RUNNING'
      | 'SCHEDULED'
      | 'STARTING'
      | 'SUCCESS'
      | 'WAITING'
      | 'SKIPPED'
      | 'ABORTING'
      | 'REJECTED'
      | 'EXPIRED'
      | 'PREPARING'
    statusInstanceBreakdownMap?: {
      [key: string]: StatusInstanceBreakdown
    }
    tags?: NameValuePair[]
    total?: number
    triggeredBy?: EmbeddedUser
    triggeringApiKeyInfo?: ApiKeyInfo
    useSweepingOutputs?: boolean
    uuid: string
    validUntil?: string
    workflowId?: string
    workflowIds?: string[]
    workflowType?: 'PIPELINE' | 'ORCHESTRATION'
  }
  export interface WorkflowExecutionBaseline {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    envId?: string
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    pipelineExecutionId?: string
    serviceId?: string
    uuid: string
    workflowExecutionId?: string
    workflowId?: string
  }
  export interface WorkflowExecutionInfo {
    accountId?: string
    appId?: string
    executionId?: string
    name?: string
    rollbackWorkflowExecutionInfo?: RollbackWorkflowExecutionInfo
    startTs?: number
    workflowId?: string
  }
  export type WorkflowFilter = Filter & {
    filterTypes?: string[]
  }
  export interface WorkflowPhase {
    computeProviderId?: string
    daemonSet?: boolean
    deploymentType?:
      | 'SSH'
      | 'AWS_CODEDEPLOY'
      | 'ECS'
      | 'SPOTINST'
      | 'KUBERNETES'
      | 'HELM'
      | 'AWS_LAMBDA'
      | 'AMI'
      | 'WINRM'
      | 'PCF'
      | 'AZURE_VMSS'
      | 'AZURE_WEBAPP'
      | 'CUSTOM'
    infraDefinitionId?: string
    infraDefinitionName?: string
    infraMappingId?: string
    infraMappingName?: string
    infraTemplatised?: boolean
    name?: string
    phaseNameForRollback?: string
    phaseSteps?: PhaseStep[]
    provisionNodes?: boolean
    rollback?: boolean
    serviceId?: string
    srvTemplatised?: boolean
    statefulSet?: boolean
    templateExpressions?: TemplateExpression[]
    uuid?: string
    valid?: boolean
    validationMessage?: string
    variableOverrides?: NameValuePair[]
  }
  export interface WorkflowRule {
    allEvents?: boolean
    allWorkflows?: boolean
    events?: string[]
    workflowIds?: string[]
  }
  export interface WorkflowStepMeta {
    available?: boolean
    favorite?: boolean
    name?: string
  }
  export interface WorkflowVariablesMetadata {
    changed?: boolean
    changedMessage?: string
    workflowVariables?: Variable[]
  }
  export interface WorkflowVersion {
    defaultVersion?: number
  }
  export interface Yaml {
    commandUnitType?: string
    deploymentType?: string
    name?: string
  }
  export interface YamlGitConfig {
    accountId?: string
    appId: string
    branchName?: string
    createdAt?: number
    createdBy?: EmbeddedUser
    enabled?: boolean
    encryptedPassword?: string
    entityId?: string
    entityName?: string
    entityType:
      | 'SERVICE'
      | 'PROVISIONER'
      | 'ENVIRONMENT'
      | 'HOST'
      | 'RELEASE'
      | 'ARTIFACT'
      | 'SSH_USER'
      | 'SSH_PASSWORD'
      | 'SSH_APP_ACCOUNT'
      | 'SSH_KEY_PASSPHRASE'
      | 'SSH_APP_ACCOUNT_PASSOWRD'
      | 'SIMPLE_DEPLOYMENT'
      | 'ORCHESTRATED_DEPLOYMENT'
      | 'PIPELINE'
      | 'WORKFLOW'
      | 'DEPLOYMENT'
      | 'INSTANCE'
      | 'APPLICATION'
      | 'COMMAND'
      | 'CONFIG'
      | 'SERVICE_TEMPLATE'
      | 'INFRASTRUCTURE_MAPPING'
      | 'INFRASTRUCTURE_DEFINITION'
      | 'USER'
      | 'ARTIFACT_STREAM'
      | 'APPDYNAMICS_CONFIGID'
      | 'APPDYNAMICS_APPID'
      | 'APPDYNAMICS_TIERID'
      | 'ELK_CONFIGID'
      | 'ELK_INDICES'
      | 'NEWRELIC_CONFIGID'
      | 'NEWRELIC_APPID'
      | 'SS_SSH_CONNECTION_ATTRIBUTE'
      | 'SS_WINRM_CONNECTION_ATTRIBUTE'
      | 'SUMOLOGIC_CONFIGID'
      | 'SPLUNK_CONFIGID'
      | 'NEWRELIC_MARKER_CONFIGID'
      | 'NEWRELIC_MARKER_APPID'
      | 'API_KEY'
      | 'ACCOUNT'
      | 'APPLICATION_MANIFEST'
      | 'USER_GROUP'
      | 'WHITELISTED_IP'
      | 'CF_AWS_CONFIG_ID'
      | 'VERIFICATION_CONFIGURATION'
      | 'HELM_GIT_CONFIG_ID'
      | 'NOTIFICATION_GROUP'
      | 'HELM_CHART_SPECIFICATION'
      | 'PCF_SERVICE_SPECIFICATION'
      | 'LAMBDA_SPECIFICATION'
      | 'USER_DATA_SPECIFICATION'
      | 'ECS_CONTAINER_SPECIFICATION'
      | 'ECS_SERVICE_SPECIFICATION'
      | 'K8S_CONTAINER_SPECIFICATION'
      | 'CONFIG_FILE'
      | 'SERVICE_COMMAND'
      | 'MANIFEST_FILE'
      | 'SERVICE_VARIABLE'
      | 'TRIGGER'
      | 'ROLE'
      | 'TEMPLATE'
      | 'TEMPLATE_FOLDER'
      | 'SETTING_ATTRIBUTE'
      | 'ENCRYPTED_RECORDS'
      | 'CV_CONFIGURATION'
      | 'TAG'
      | 'CUSTOM_DASHBOARD'
      | 'PIPELINE_GOVERNANCE_STANDARD'
      | 'WORKFLOW_EXECUTION'
      | 'SERVERLESS_INSTANCE'
      | 'USER_INVITE'
      | 'LOGIN_SETTINGS'
      | 'SSO_SETTINGS'
      | 'DELEGATE'
      | 'DELEGATE_SCOPE'
      | 'DELEGATE_PROFILE'
      | 'EXPORT_EXECUTIONS_REQUEST'
      | 'GCP_CONFIG'
      | 'GIT_CONFIG'
      | 'JENKINS_SERVER'
      | 'SECRETS_MANAGER'
      | 'HELM_CHART'
      | 'SECRET'
      | 'CONNECTOR'
      | 'CLOUD_PROVIDER'
      | 'GOVERNANCE_FREEZE_CONFIG'
      | 'GOVERNANCE_CONFIG'
    gitConnectorId?: string
    keyAuth?: boolean
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    password?: string[]
    repositoryName?: string
    settingType?:
      | 'HOST_CONNECTION_ATTRIBUTES'
      | 'BASTION_HOST_CONNECTION_ATTRIBUTES'
      | 'SMTP'
      | 'SFTP'
      | 'JENKINS'
      | 'BAMBOO'
      | 'STRING'
      | 'SPLUNK'
      | 'ELK'
      | 'LOGZ'
      | 'SUMO'
      | 'DATA_DOG'
      | 'APM_VERIFICATION'
      | 'BUG_SNAG'
      | 'LOG_VERIFICATION'
      | 'APP_DYNAMICS'
      | 'NEW_RELIC'
      | 'DYNA_TRACE'
      | 'INSTANA'
      | 'DATA_DOG_LOG'
      | 'CLOUD_WATCH'
      | 'SCALYR'
      | 'ELB'
      | 'SLACK'
      | 'AWS'
      | 'GCS'
      | 'GCP'
      | 'AZURE'
      | 'PCF'
      | 'DIRECT'
      | 'KUBERNETES_CLUSTER'
      | 'DOCKER'
      | 'ECR'
      | 'GCR'
      | 'ACR'
      | 'PHYSICAL_DATA_CENTER'
      | 'KUBERNETES'
      | 'NEXUS'
      | 'ARTIFACTORY'
      | 'SMB'
      | 'AMAZON_S3'
      | 'GIT'
      | 'SSH_SESSION_CONFIG'
      | 'SERVICE_VARIABLE'
      | 'CONFIG_FILE'
      | 'KMS'
      | 'GCP_KMS'
      | 'JIRA'
      | 'SERVICENOW'
      | 'SECRET_TEXT'
      | 'YAML_GIT_SYNC'
      | 'VAULT'
      | 'VAULT_SSH'
      | 'AWS_SECRETS_MANAGER'
      | 'CYBERARK'
      | 'WINRM_CONNECTION_ATTRIBUTES'
      | 'WINRM_SESSION_CONFIG'
      | 'PROMETHEUS'
      | 'INFRASTRUCTURE_MAPPING'
      | 'HTTP_HELM_REPO'
      | 'AMAZON_S3_HELM_REPO'
      | 'GCS_HELM_REPO'
      | 'SPOT_INST'
      | 'AZURE_ARTIFACTS_PAT'
      | 'CUSTOM'
      | 'CE_AWS'
      | 'CE_GCP'
      | 'CE_AZURE'
      | 'AZURE_VAULT'
      | 'KUBERNETES_CLUSTER_NG'
      | 'GIT_NG'
      | 'GCP_SECRETS_MANAGER'
      | 'TRIGGER'
    sshSettingId?: string
    syncMode?: 'GIT_TO_HARNESS' | 'HARNESS_TO_GIT' | 'BOTH' | 'NONE'
    url?: string
    username?: string
    uuid: string
    webhookToken?: string
  }
  export interface YamlHistory {
    [key: string]: any
  }
  export interface YamlOperationResponse {
    errorMessage?: string
    filesStatus?: FileOperationStatus[]
    responseStatus?: 'FAILED' | 'SUCCESS'
  }
  export interface YamlPayload {
    name?: string
    path?: string
    yaml?: string
  }
  export interface YamlVersion {
    accountId?: string
    appId: string
    createdAt?: number
    createdBy?: EmbeddedUser
    entityId?: string
    inEffectEnd?: number
    inEffectStart?: number
    lastUpdatedAt: number
    lastUpdatedBy?: EmbeddedUser
    type?:
      | 'SETUP'
      | 'APP'
      | 'SERVICE'
      | 'SERVICE_COMMAND'
      | 'CONFIG_FILE'
      | 'ENVIRONMENT'
      | 'CONFIG_FILE_OVERRIDE'
      | 'SETTING'
      | 'WORKFLOW'
      | 'PIPELINE'
      | 'PROVISIONER'
      | 'TRIGGER'
      | 'ARTIFACT_STREAM'
      | 'INFRA_MAPPING'
      | 'INFRA_DEFINITION'
      | 'DEPLOYMENT_SPEC'
      | 'APPLICATION_DEFAULTS'
      | 'ACCOUNT_DEFAULTS'
      | 'NOTIFICATION_GROUP'
      | 'APPLICATION_MANIFEST'
      | 'APPLICATION_MANIFEST_FILE'
      | 'SERVICE_CV_CONFIG'
      | 'TAGS'
      | 'GLOBAL_TEMPLATE_LIBRARY'
      | 'APPLICATION_TEMPLATE_LIBRARY'
      | 'GOVERNANCE_CONFIG'
    uuid: string
    version?: number
    yaml?: string
    yamlVersionId?: string
  }
  export interface ZendeskSsoLoginResponse {
    redirectUrl?: string
    userId?: string
  }
  export interface ZoneId {
    id?: string
    rules?: ZoneRules
  }
  export interface ZoneOffset {
    id?: string
    rules?: ZoneRules
    totalSeconds?: number
  }
  export interface ZoneOffsetTransition {
    dateTimeAfter?: string
    dateTimeBefore?: string
    duration?: Duration
    gap?: boolean
    instant?: number
    offsetAfter?: ZoneOffset
    offsetBefore?: ZoneOffset
    overlap?: boolean
  }
  export interface ZoneOffsetTransitionRule {
    dayOfMonthIndicator?: number
    dayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
    localTime?: LocalTime
    midnightEndOfDay?: boolean
    month?:
      | 'JANUARY'
      | 'FEBRUARY'
      | 'MARCH'
      | 'APRIL'
      | 'MAY'
      | 'JUNE'
      | 'JULY'
      | 'AUGUST'
      | 'SEPTEMBER'
      | 'OCTOBER'
      | 'NOVEMBER'
      | 'DECEMBER'
    offsetAfter?: ZoneOffset
    offsetBefore?: ZoneOffset
    standardOffset?: ZoneOffset
    timeDefinition?: 'UTC' | 'WALL' | 'STANDARD'
  }
  export interface ZoneRules {
    fixedOffset?: boolean
    transitionRules?: ZoneOffsetTransitionRule[]
    transitions?: ZoneOffsetTransition[]
  }
  export type AccessRequestDTORequestBody = AccessRequestDTO
  export type AccountRequestBody = Account
  export type AlertNotificationRuleRequestBody = AlertNotificationRule
  export type ApiKeyEntryRequestBody = ApiKeyEntry
  export type ApplicationManifestRequestBody = ApplicationManifest
  export type ArtifactRequestBody = Artifact
  export type ArtifactStreamRequestBody = ArtifactStream
  export type ArtifactStreamBindingRequestBody = ArtifactStreamBinding
  export type AzureVaultConfigRequestBody = AzureVaultConfig
  export type BudgetRequestBody = Budget
  export type BuildDetailsRequestBody = BuildDetails
  export type CEReportScheduleRequestBody = CEReportSchedule
  export type CEViewRequestBody = CEView
  export type CVConfigurationRequestBody = CVConfiguration
  export type CVFeedbackRecordRequestBody = CVFeedbackRecord
  export type CgEventConfigRequestBody = CgEventConfig
  export type CloneMetadataRequestBody = CloneMetadata
  export type ContainerTaskRequestBody = ContainerTask
  export type ContinuousVerificationAlertDataRequestBody = ContinuousVerificationAlertData
  export type CustomSecretsManagerConfigRequestBody = CustomSecretsManagerConfig
  export type DashboardSettingsRequestBody = DashboardSettings
  export type DataCollectionConnectorBundleRequestBody = DataCollectionConnectorBundle
  export type DelegateRequestBody = Delegate
  export type DelegateGroupDetailsRequestBody = DelegateGroupDetails
  export type DelegateParamsRequestBody = DelegateParams
  export type DelegateProfileRequestBody = DelegateProfile
  export type DelegateProfileDetailsRequestBody = DelegateProfileDetails
  export type DelegateResponseDataRequestBody = DelegateResponseData
  export type DelegateScopeRequestBody = DelegateScope
  export type DelegateScopesRequestBody = DelegateScopes
  export type DelegateSetupDetailsRequestBody = DelegateSetupDetails
  export type DelegateTagsRequestBody = DelegateTags
  export type EcsServiceSpecificationRequestBody = EcsServiceSpecification
  export type EnvironmentRequestBody = Environment
  export type ExecutionArgsRequestBody = ExecutionArgs
  export type FailureStrategyArrayRequestBody = FailureStrategy[]
  export type GcpBillingAccountRequestBody = GcpBillingAccount
  export type GcpOrganizationRequestBody = GcpOrganization
  export type HarnessTagRequestBody = HarnessTag
  export type HarnessTagLinkRequestBody = HarnessTagLink
  export type HarnessUserGroupDTORequestBody = HarnessUserGroupDTO
  export type HelmChartSpecificationRequestBody = HelmChartSpecification
  export type InfrastructureDefinitionRequestBody = InfrastructureDefinition
  export type InfrastructureMappingRequestBody = InfrastructureMapping
  export type InfrastructureProvisionerRequestBody = InfrastructureProvisioner
  export type K8sEventCollectionBundleRequestBody = K8sEventCollectionBundle
  export type KmsConfigRequestBody = KmsConfig
  export type KubernetesPayloadRequestBody = KubernetesPayload
  export type LDAPTestAuthenticationRequestRequestBody = LDAPTestAuthenticationRequest
  export type LambdaSpecificationRequestBody = LambdaSpecification
  export type LdapSettingsRequestBody = LdapSettings
  export type LicenseInfoRequestBody = LicenseInfo
  export type LogMLFeedbackRequestBody = LogMLFeedback
  export type LoginRequestRequestBody = LoginRequest
  export type ManifestFileRequestBody = ManifestFile
  export type ModuleLicenseDTORequestBody = ModuleLicenseDTO
  export type NotificationGroupRequestBody = NotificationGroup
  export type OauthSettingsRequestBody = OauthSettings
  export type PatchRequestRequestBody = PatchRequest
  export type PcfServiceSpecificationRequestBody = PcfServiceSpecification
  export type PhaseStepRequestBody = PhaseStep
  export type PipelineRequestBody = Pipeline
  export type PreferenceRequestBody = Preference
  export type ResourceConstraintRequestBody = ResourceConstraint
  export type RoleRequestBody = Role
  export type SSHVaultConfigRequestBody = SSHVaultConfig
  export type ScimGroupRequestBody = ScimGroup
  export type ScimUserRequestBody = ScimUser
  export type SecretTextRequestBody = SecretText
  export type ServiceRequestBody = Service
  export type ServiceTemplateRequestBody = ServiceTemplate
  export type ServiceVariableRequestBody = ServiceVariable
  export type SettingAttributeRequestBody = SettingAttribute
  export type SplunkConnectorDTORequestBody = SplunkConnectorDTO
  export type StackDriverSetupTestNodeDataRequestBody = StackDriverSetupTestNodeData
  export type TaskSelectorMapRequestBody = TaskSelectorMap
  export type TemplateRequestBody = Template
  export type TemplateFolderRequestBody = TemplateFolder
  export type TemplateGalleryRequestBody = TemplateGallery
  export type TriggerRequestBody = Trigger
  export type UserRequestBody = User
  export type UserDataSpecificationRequestBody = UserDataSpecification
  export type UserGroupRequestBody = UserGroup
  export type UserInviteRequestBody = UserInvite
  export type VaultConfigRequestBody = VaultConfig
  export type ViewCustomFieldRequestBody = ViewCustomField
  export type WebHookRequestRequestBody = WebHookRequest
  export type WhitelistRequestBody = Whitelist
  export type WorkflowRequestBody = Workflow
  export type WorkflowPhaseRequestBody = WorkflowPhase
  export type YamlGitConfigRequestBody = YamlGitConfig
  export type YamlPayloadRequestBody = YamlPayload
  export type GcpSignUpRequestBody = void
  export type GetDelegatePropertiesBodyRequestBody = string[]
  export type ImportAccountDataRequestBody = void
  export type SaveGcpSecretsManagerConfigRequestBody = void
  export type SaveGcpSecretsManagerConfig1RequestBody = void
  export interface SaveMessageComparisonListBodyRequestBody {
    [key: string]: string
  }
  export interface UpdateAccountPreferenceBodyRequestBody {
    [key: string]: any
  }
  export type UpdateWhitelistedDomainsBodyRequestBody = string[]
  export type Update29RequestBody = void
  export type UploadPlatformRequestBody = void
  export type UploadSamlMetaDataRequestBody = void
  export type ValidateBodyRequestBody = string
  export interface GetListApplicationsQueryParams {
    offset?: string
    limit?: string
    fieldsIncluded?: string[]
    fieldsExcluded?: string[]
    accountId?: string
    appIds?: string[]
    details?: boolean
    tagFilter?: string
    withTags?: boolean
  }
  export type GetListApplicationsProps = Omit<
    GetProps<RestResponsePageResponseApplication, unknown, GetListApplicationsQueryParams, void>,
    'path'
  >
  export const GetListApplications: (props: GetListApplicationsProps) => JSX.Element
  export type UseGetListApplicationsProps = Omit<
    UseGetProps<RestResponsePageResponseApplication, unknown, GetListApplicationsQueryParams, void>,
    'path'
  >
  export const useGetListApplications: (
    props: UseGetListApplicationsProps
  ) => import('restful-react').UseGetReturn<
    RestResponsePageResponseApplication,
    unknown,
    GetListApplicationsQueryParams,
    unknown
  >
  export interface SaveQueryParams {
    accountId?: string
  }
  export type SaveProps = Omit<
    MutateProps<RestResponseApplication, unknown, SaveQueryParams, Application, void>,
    'path' | 'verb'
  >
  export const Save: (props: SaveProps) => JSX.Element
  export type UseSaveProps = Omit<
    UseMutateProps<RestResponseApplication, unknown, SaveQueryParams, Application, void>,
    'path' | 'verb'
  >
  export const useSave: (
    props: UseSaveProps
  ) => import('restful-react').UseMutateReturn<RestResponseApplication, unknown, Application, SaveQueryParams, void>
  export interface ListAwsRegionsQueryParams {
    accountId?: string
  }
  export type ListAwsRegionsProps = Omit<
    GetProps<RestResponseListNameValuePair, unknown, ListAwsRegionsQueryParams, void>,
    'path'
  >
  export const ListAwsRegions: (props: ListAwsRegionsProps) => JSX.Element
  export type UseListAwsRegionsProps = Omit<
    UseGetProps<RestResponseListNameValuePair, unknown, ListAwsRegionsQueryParams, void>,
    'path'
  >
  export const useListAwsRegions: (
    props: UseListAwsRegionsProps
  ) => import('restful-react').UseGetReturn<RestResponseListNameValuePair, unknown, ListAwsRegionsQueryParams, unknown>
  export interface GetDelegateProfilesQueryParams {
    offset?: string
    limit?: string
    fieldsIncluded?: string[]
    fieldsExcluded?: string[]
    accountId: string
  }
  export type GetDelegateProfilesProps = Omit<
    GetProps<RestResponsePageResponseDelegateProfile, unknown, GetDelegateProfilesQueryParams, void>,
    'path'
  >
  export const GetDelegateProfiles: (props: GetDelegateProfilesProps) => JSX.Element
  export type UseGetDelegateProfilesProps = Omit<
    UseGetProps<RestResponsePageResponseDelegateProfile, unknown, GetDelegateProfilesQueryParams, void>,
    'path'
  >
  export const useGetDelegateProfiles: (
    props: UseGetDelegateProfilesProps
  ) => import('restful-react').UseGetReturn<
    RestResponsePageResponseDelegateProfile,
    unknown,
    GetDelegateProfilesQueryParams,
    unknown
  >
  export interface GetDelegateProfilesV2QueryParams {
    offset?: string
    limit?: string
    fieldsIncluded?: string[]
    fieldsExcluded?: string[]
    accountId?: string
  }
  export type GetDelegateProfilesV2Props = Omit<
    GetProps<RestResponsePageResponseDelegateProfileDetails, unknown, GetDelegateProfilesV2QueryParams, void>,
    'path'
  >
  export const GetDelegateProfilesV2: (props: GetDelegateProfilesV2Props) => JSX.Element
  export type UseGetDelegateProfilesV2Props = Omit<
    UseGetProps<RestResponsePageResponseDelegateProfileDetails, unknown, GetDelegateProfilesV2QueryParams, void>,
    'path'
  >
  export const useGetDelegateProfilesV2: (
    props: UseGetDelegateProfilesV2Props
  ) => import('restful-react').UseGetReturn<
    RestResponsePageResponseDelegateProfileDetails,
    unknown,
    GetDelegateProfilesV2QueryParams,
    unknown
  >
  export interface DeleteDelegateProfileQueryParams {
    accountId?: string
  }
  export type DeleteDelegateProfileProps = Omit<
    MutateProps<RestResponseVoid, unknown, DeleteDelegateProfileQueryParams, string, void>,
    'path' | 'verb'
  >
  export const DeleteDelegateProfile: (props: DeleteDelegateProfileProps) => JSX.Element
  export type UseDeleteDelegateProfileProps = Omit<
    UseMutateProps<RestResponseVoid, unknown, DeleteDelegateProfileQueryParams, string, void>,
    'path' | 'verb'
  >
  export const useDeleteDelegateProfile: (
    props: UseDeleteDelegateProfileProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseVoid,
    unknown,
    string,
    DeleteDelegateProfileQueryParams,
    void
  >
  export interface GetV2QueryParams {
    accountId?: string
  }
  export interface GetV2PathParams {
    delegateProfileId: string
  }
  export type GetV2Props = Omit<
    GetProps<RestResponseDelegateProfileDetails, unknown, GetV2QueryParams, GetV2PathParams>,
    'path'
  > &
    GetV2PathParams
  export const GetV2: ({ delegateProfileId, ...props }: GetV2Props) => JSX.Element
  export type UseGetV2Props = Omit<
    UseGetProps<RestResponseDelegateProfileDetails, unknown, GetV2QueryParams, GetV2PathParams>,
    'path'
  > &
    GetV2PathParams
  export const useGetV2: ({
    delegateProfileId,
    ...props
  }: UseGetV2Props) => import('restful-react').UseGetReturn<
    RestResponseDelegateProfileDetails,
    unknown,
    GetV2QueryParams,
    unknown
  >
  export interface UpdateV2QueryParams {
    accountId?: string
  }
  export interface UpdateV2PathParams {
    delegateProfileId: string
  }
  export type UpdateV2Props = Omit<
    MutateProps<
      RestResponseDelegateProfileDetails,
      unknown,
      UpdateV2QueryParams,
      DelegateProfileDetailsRequestBody,
      UpdateV2PathParams
    >,
    'path' | 'verb'
  > &
    UpdateV2PathParams
  export const UpdateV2: ({ delegateProfileId, ...props }: UpdateV2Props) => JSX.Element
  export type UseUpdateV2Props = Omit<
    UseMutateProps<
      RestResponseDelegateProfileDetails,
      unknown,
      UpdateV2QueryParams,
      DelegateProfileDetailsRequestBody,
      UpdateV2PathParams
    >,
    'path' | 'verb'
  > &
    UpdateV2PathParams
  export const useUpdateV2: ({
    delegateProfileId,
    ...props
  }: UseUpdateV2Props) => import('restful-react').UseMutateReturn<
    RestResponseDelegateProfileDetails,
    unknown,
    DelegateProfileDetails,
    UpdateV2QueryParams,
    UpdateV2PathParams
  >
  export interface GetDelegateConfigFromIdQueryParams {
    accountId?: string
  }
  export interface GetDelegateConfigFromIdPathParams {
    delegateProfileId: string
  }
  export type GetDelegateConfigFromIdProps = Omit<
    GetProps<
      RestResponseDelegateProfile,
      unknown,
      GetDelegateConfigFromIdQueryParams,
      GetDelegateConfigFromIdPathParams
    >,
    'path'
  > &
    GetDelegateConfigFromIdPathParams
  export const GetDelegateConfigFromId: ({ delegateProfileId, ...props }: GetDelegateConfigFromIdProps) => JSX.Element
  export type UseGetDelegateConfigFromIdProps = Omit<
    UseGetProps<
      RestResponseDelegateProfile,
      unknown,
      GetDelegateConfigFromIdQueryParams,
      GetDelegateConfigFromIdPathParams
    >,
    'path'
  > &
    GetDelegateConfigFromIdPathParams
  export const useGetDelegateConfigFromId: ({
    delegateProfileId,
    ...props
  }: UseGetDelegateConfigFromIdProps) => import('restful-react').UseGetReturn<
    RestResponseDelegateProfile,
    unknown,
    GetDelegateConfigFromIdQueryParams,
    unknown
  >
  export interface GetDelegatesHeartbeatDetailsQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
    sessionId?: string
  }
  export type GetDelegatesHeartbeatDetailsProps = Omit<
    GetProps<RestResponseDelegateHeartbeatDetails, unknown, GetDelegatesHeartbeatDetailsQueryParams, void>,
    'path'
  >
  export const GetDelegatesHeartbeatDetails: (props: GetDelegatesHeartbeatDetailsProps) => JSX.Element
  export type UseGetDelegatesHeartbeatDetailsProps = Omit<
    UseGetProps<RestResponseDelegateHeartbeatDetails, unknown, GetDelegatesHeartbeatDetailsQueryParams, void>,
    'path'
  >
  export const useGetDelegatesHeartbeatDetails: (
    props: UseGetDelegatesHeartbeatDetailsProps
  ) => import('restful-react').UseGetReturn<
    RestResponseDelegateHeartbeatDetails,
    unknown,
    GetDelegatesHeartbeatDetailsQueryParams,
    unknown
  >
  export interface GetDelegatesInitializationDetailsQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
    sessionId?: string
  }
  export type GetDelegatesInitializationDetailsProps = Omit<
    GetProps<
      RestResponseListDelegateInitializationDetails,
      unknown,
      GetDelegatesInitializationDetailsQueryParams,
      void
    >,
    'path'
  >
  export const GetDelegatesInitializationDetails: (props: GetDelegatesInitializationDetailsProps) => JSX.Element
  export type UseGetDelegatesInitializationDetailsProps = Omit<
    UseGetProps<
      RestResponseListDelegateInitializationDetails,
      unknown,
      GetDelegatesInitializationDetailsQueryParams,
      void
    >,
    'path'
  >
  export const useGetDelegatesInitializationDetails: (
    props: UseGetDelegatesInitializationDetailsProps
  ) => import('restful-react').UseGetReturn<
    RestResponseListDelegateInitializationDetails,
    unknown,
    GetDelegatesInitializationDetailsQueryParams,
    unknown
  >
  export interface GetListEnvironmentsQueryParams {
    appId?: string[]
    offset?: string
    limit?: string
    fieldsIncluded?: string[]
    fieldsExcluded?: string[]
    details?: boolean
    tagFilter?: string
    withTags?: boolean
  }
  export type GetListEnvironmentsProps = Omit<
    GetProps<RestResponsePageResponseEnvironment, unknown, GetListEnvironmentsQueryParams, void>,
    'path'
  >
  export const GetListEnvironments: (props: GetListEnvironmentsProps) => JSX.Element
  export type UseGetListEnvironmentsProps = Omit<
    UseGetProps<RestResponsePageResponseEnvironment, unknown, GetListEnvironmentsQueryParams, void>,
    'path'
  >
  export const useGetListEnvironments: (
    props: UseGetListEnvironmentsProps
  ) => import('restful-react').UseGetReturn<
    RestResponsePageResponseEnvironment,
    unknown,
    GetListEnvironmentsQueryParams,
    unknown
  >
  export interface Save6QueryParams {
    appId?: string
  }
  export type Save6Props = Omit<
    MutateProps<RestResponseEnvironment, unknown, Save6QueryParams, EnvironmentRequestBody, void>,
    'path' | 'verb'
  >
  export const Save6: (props: Save6Props) => JSX.Element
  export type UseSave6Props = Omit<
    UseMutateProps<RestResponseEnvironment, unknown, Save6QueryParams, EnvironmentRequestBody, void>,
    'path' | 'verb'
  >
  export const useSave6: (
    props: UseSave6Props
  ) => import('restful-react').UseMutateReturn<RestResponseEnvironment, unknown, Environment, Save6QueryParams, void>
  export interface GetSelectionLogsV2QueryParams {
    accountId?: string
    taskId?: string
  }
  export type GetSelectionLogsV2Props = Omit<
    GetProps<RestResponseDelegateSelectionLogResponse, unknown, GetSelectionLogsV2QueryParams, void>,
    'path'
  >
  export const GetSelectionLogsV2: (props: GetSelectionLogsV2Props) => JSX.Element
  export type UseGetSelectionLogsV2Props = Omit<
    UseGetProps<RestResponseDelegateSelectionLogResponse, unknown, GetSelectionLogsV2QueryParams, void>,
    'path'
  >
  export const useGetSelectionLogsV2: (
    props: UseGetSelectionLogsV2Props
  ) => import('restful-react').UseGetReturn<
    RestResponseDelegateSelectionLogResponse,
    unknown,
    GetSelectionLogsV2QueryParams,
    unknown
  >
  export interface GetListServicesQueryParams {
    appId?: string[]
    tagFilter?: string
    withTags?: boolean
    offset?: string
    limit?: string
    fieldsIncluded?: string[]
    fieldsExcluded?: string[]
    details?: boolean
  }
  export type GetListServicesProps = Omit<
    GetProps<RestResponsePageResponseService, unknown, GetListServicesQueryParams, void>,
    'path'
  >
  export const GetListServices: (props: GetListServicesProps) => JSX.Element
  export type UseGetListServicesProps = Omit<
    UseGetProps<RestResponsePageResponseService, unknown, GetListServicesQueryParams, void>,
    'path'
  >
  export const useGetListServices: (
    props: UseGetListServicesProps
  ) => import('restful-react').UseGetReturn<
    RestResponsePageResponseService,
    unknown,
    GetListServicesQueryParams,
    unknown
  >
  export interface Save14QueryParams {
    appId?: string
  }
  export type Save14Props = Omit<
    MutateProps<RestResponseService, unknown, Save14QueryParams, ServiceRequestBody, void>,
    'path' | 'verb'
  >
  export const Save14: (props: Save14Props) => JSX.Element
  export type UseSave14Props = Omit<
    UseMutateProps<RestResponseService, unknown, Save14QueryParams, ServiceRequestBody, void>,
    'path' | 'verb'
  >
  export const useSave14: (
    props: UseSave14Props
  ) => import('restful-react').UseMutateReturn<RestResponseService, unknown, Service, Save14QueryParams, void>
  export interface GetDelegatesQueryParams {
    offset?: string
    limit?: string
    fieldsIncluded?: string[]
    fieldsExcluded?: string[]
    accountId: string
  }
  export type GetDelegatesProps = Omit<
    GetProps<RestResponsePageResponseDelegate, unknown, GetDelegatesQueryParams, void>,
    'path'
  >
  export const GetDelegates: (props: GetDelegatesProps) => JSX.Element
  export type UseGetDelegatesProps = Omit<
    UseGetProps<RestResponsePageResponseDelegate, unknown, GetDelegatesQueryParams, void>,
    'path'
  >
  export const useGetDelegates: (
    props: UseGetDelegatesProps
  ) => import('restful-react').UseGetReturn<RestResponsePageResponseDelegate, unknown, GetDelegatesQueryParams, unknown>
  export interface GetDelegateSelectorsQueryParams {
    accountId?: string
  }
  export type GetDelegateSelectorsProps = Omit<
    GetProps<RestResponseSetString, unknown, GetDelegateSelectorsQueryParams, void>,
    'path'
  >
  export const GetDelegateSelectors: (props: GetDelegateSelectorsProps) => JSX.Element
  export type UseGetDelegateSelectorsProps = Omit<
    UseGetProps<RestResponseSetString, unknown, GetDelegateSelectorsQueryParams, void>,
    'path'
  >
  export const useGetDelegateSelectors: (
    props: UseGetDelegateSelectorsProps
  ) => import('restful-react').UseGetReturn<RestResponseSetString, unknown, GetDelegateSelectorsQueryParams, unknown>
  export interface GetDelegateSelectorsUpTheHierarchyQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type GetDelegateSelectorsUpTheHierarchyProps = Omit<
    GetProps<RestResponseSetString, unknown, GetDelegateSelectorsUpTheHierarchyQueryParams, void>,
    'path'
  >
  export const GetDelegateSelectorsUpTheHierarchy: (props: GetDelegateSelectorsUpTheHierarchyProps) => JSX.Element
  export type UseGetDelegateSelectorsUpTheHierarchyProps = Omit<
    UseGetProps<RestResponseSetString, unknown, GetDelegateSelectorsUpTheHierarchyQueryParams, void>,
    'path'
  >
  export const useGetDelegateSelectorsUpTheHierarchy: (
    props: UseGetDelegateSelectorsUpTheHierarchyProps
  ) => import('restful-react').UseGetReturn<
    RestResponseSetString,
    unknown,
    GetDelegateSelectorsUpTheHierarchyQueryParams,
    unknown
  >
  export interface GetDelegateSizesQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type GetDelegateSizesProps = Omit<
    GetProps<RestResponseListDelegateSizeDetails, unknown, GetDelegateSizesQueryParams, void>,
    'path'
  >
  export const GetDelegateSizes: (props: GetDelegateSizesProps) => JSX.Element
  export type UseGetDelegateSizesProps = Omit<
    UseGetProps<RestResponseListDelegateSizeDetails, unknown, GetDelegateSizesQueryParams, void>,
    'path'
  >
  export const useGetDelegateSizes: (
    props: UseGetDelegateSizesProps
  ) => import('restful-react').UseGetReturn<
    RestResponseListDelegateSizeDetails,
    unknown,
    GetDelegateSizesQueryParams,
    unknown
  >
  export interface GetDelegateTagsQueryParams {
    accountId?: string
  }
  export type GetDelegateTagsProps = Omit<
    GetProps<RestResponseSetString, unknown, GetDelegateTagsQueryParams, void>,
    'path'
  >
  export const GetDelegateTags: (props: GetDelegateTagsProps) => JSX.Element
  export type UseGetDelegateTagsProps = Omit<
    UseGetProps<RestResponseSetString, unknown, GetDelegateTagsQueryParams, void>,
    'path'
  >
  export const useGetDelegateTags: (
    props: UseGetDelegateTagsProps
  ) => import('restful-react').UseGetReturn<RestResponseSetString, unknown, GetDelegateTagsQueryParams, unknown>
  export interface GetDelegatesDownloadUrlQueryParams {
    accountId?: string
  }
  export type GetDelegatesDownloadUrlProps = Omit<
    GetProps<RestResponseMapStringString, unknown, GetDelegatesDownloadUrlQueryParams, void>,
    'path'
  >
  export const GetDelegatesDownloadUrl: (props: GetDelegatesDownloadUrlProps) => JSX.Element
  export type UseGetDelegatesDownloadUrlProps = Omit<
    UseGetProps<RestResponseMapStringString, unknown, GetDelegatesDownloadUrlQueryParams, void>,
    'path'
  >
  export const useGetDelegatesDownloadUrl: (
    props: UseGetDelegatesDownloadUrlProps
  ) => import('restful-react').UseGetReturn<
    RestResponseMapStringString,
    unknown,
    GetDelegatesDownloadUrlQueryParams,
    unknown
  >
  export interface GenerateKubernetesYamlQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type GenerateKubernetesYamlProps = Omit<
    MutateProps<void, void, GenerateKubernetesYamlQueryParams, DelegateSetupDetailsRequestBody, void>,
    'path' | 'verb'
  >
  export const GenerateKubernetesYaml: (props: GenerateKubernetesYamlProps) => JSX.Element
  export type UseGenerateKubernetesYamlProps = Omit<
    UseMutateProps<void, void, GenerateKubernetesYamlQueryParams, DelegateSetupDetailsRequestBody, void>,
    'path' | 'verb'
  >
  export const useGenerateKubernetesYaml: (
    props: UseGenerateKubernetesYamlProps
  ) => import('restful-react').UseMutateReturn<
    void,
    void,
    DelegateSetupDetails,
    GenerateKubernetesYamlQueryParams,
    void
  >
  export interface DeleteDelegateGroupQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type DeleteDelegateGroupProps = Omit<
    MutateProps<RestResponseVoid, unknown, DeleteDelegateGroupQueryParams, string, void>,
    'path' | 'verb'
  >
  export const DeleteDelegateGroup: (props: DeleteDelegateGroupProps) => JSX.Element
  export type UseDeleteDelegateGroupProps = Omit<
    UseMutateProps<RestResponseVoid, unknown, DeleteDelegateGroupQueryParams, string, void>,
    'path' | 'verb'
  >
  export const useDeleteDelegateGroup: (
    props: UseDeleteDelegateGroupProps
  ) => import('restful-react').UseMutateReturn<RestResponseVoid, unknown, string, DeleteDelegateGroupQueryParams, void>
  export interface GetKubernetesDelegateNamesQueryParams {
    accountId?: string
  }
  export type GetKubernetesDelegateNamesProps = Omit<
    GetProps<RestResponseListString, unknown, GetKubernetesDelegateNamesQueryParams, void>,
    'path'
  >
  export const GetKubernetesDelegateNames: (props: GetKubernetesDelegateNamesProps) => JSX.Element
  export type UseGetKubernetesDelegateNamesProps = Omit<
    UseGetProps<RestResponseListString, unknown, GetKubernetesDelegateNamesQueryParams, void>,
    'path'
  >
  export const useGetKubernetesDelegateNames: (
    props: UseGetKubernetesDelegateNamesProps
  ) => import('restful-react').UseGetReturn<
    RestResponseListString,
    unknown,
    GetKubernetesDelegateNamesQueryParams,
    unknown
  >
  export interface GetDelegateGroupsNGV2QueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type GetDelegateGroupsNGV2Props = Omit<
    GetProps<RestResponseDelegateGroupListing, unknown, GetDelegateGroupsNGV2QueryParams, void>,
    'path'
  >
  export const GetDelegateGroupsNGV2: (props: GetDelegateGroupsNGV2Props) => JSX.Element
  export type UseGetDelegateGroupsNGV2Props = Omit<
    UseGetProps<RestResponseDelegateGroupListing, unknown, GetDelegateGroupsNGV2QueryParams, void>,
    'path'
  >
  export const useGetDelegateGroupsNGV2: (
    props: UseGetDelegateGroupsNGV2Props
  ) => import('restful-react').UseGetReturn<
    RestResponseDelegateGroupListing,
    unknown,
    GetDelegateGroupsNGV2QueryParams,
    unknown
  >
  export interface GetDelegateGroupByIdentifierQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export interface GetDelegateGroupByIdentifierPathParams {
    identifier: string
  }
  export type GetDelegateGroupByIdentifierProps = Omit<
    GetProps<
      RestResponseDelegateGroupDetails,
      unknown,
      GetDelegateGroupByIdentifierQueryParams,
      GetDelegateGroupByIdentifierPathParams
    >,
    'path'
  > &
    GetDelegateGroupByIdentifierPathParams
  export const GetDelegateGroupByIdentifier: ({
    identifier,
    ...props
  }: GetDelegateGroupByIdentifierProps) => JSX.Element
  export type UseGetDelegateGroupByIdentifierProps = Omit<
    UseGetProps<
      RestResponseDelegateGroupDetails,
      unknown,
      GetDelegateGroupByIdentifierQueryParams,
      GetDelegateGroupByIdentifierPathParams
    >,
    'path'
  > &
    GetDelegateGroupByIdentifierPathParams
  export const useGetDelegateGroupByIdentifier: ({
    identifier,
    ...props
  }: UseGetDelegateGroupByIdentifierProps) => import('restful-react').UseGetReturn<
    RestResponseDelegateGroupDetails,
    unknown,
    GetDelegateGroupByIdentifierQueryParams,
    unknown
  >
  export interface GetDelegatesStatusQueryParams {
    accountId?: string
  }
  export type GetDelegatesStatusProps = Omit<
    GetProps<RestResponseDelegateStatus, unknown, GetDelegatesStatusQueryParams, void>,
    'path'
  >
  export const GetDelegatesStatus: (props: GetDelegatesStatusProps) => JSX.Element
  export type UseGetDelegatesStatusProps = Omit<
    UseGetProps<RestResponseDelegateStatus, unknown, GetDelegatesStatusQueryParams, void>,
    'path'
  >
  export const useGetDelegatesStatus: (
    props: UseGetDelegatesStatusProps
  ) => import('restful-react').UseGetReturn<RestResponseDelegateStatus, unknown, GetDelegatesStatusQueryParams, unknown>
  export interface GetDelegatesStatusV2QueryParams {
    accountId?: string
  }
  export type GetDelegatesStatusV2Props = Omit<
    GetProps<RestResponseDelegateStatus, unknown, GetDelegatesStatusV2QueryParams, void>,
    'path'
  >
  export const GetDelegatesStatusV2: (props: GetDelegatesStatusV2Props) => JSX.Element
  export type UseGetDelegatesStatusV2Props = Omit<
    UseGetProps<RestResponseDelegateStatus, unknown, GetDelegatesStatusV2QueryParams, void>,
    'path'
  >
  export const useGetDelegatesStatusV2: (
    props: UseGetDelegatesStatusV2Props
  ) => import('restful-react').UseGetReturn<
    RestResponseDelegateStatus,
    unknown,
    GetDelegatesStatusV2QueryParams,
    unknown
  >
  export interface GetDelegateGroupsV2QueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type GetDelegateGroupsV2Props = Omit<
    GetProps<RestResponseDelegateGroupListing, unknown, GetDelegateGroupsV2QueryParams, void>,
    'path'
  >
  export const GetDelegateGroupsV2: (props: GetDelegateGroupsV2Props) => JSX.Element
  export type UseGetDelegateGroupsV2Props = Omit<
    UseGetProps<RestResponseDelegateGroupListing, unknown, GetDelegateGroupsV2QueryParams, void>,
    'path'
  >
  export const useGetDelegateGroupsV2: (
    props: UseGetDelegateGroupsV2Props
  ) => import('restful-react').UseGetReturn<
    RestResponseDelegateGroupListing,
    unknown,
    GetDelegateGroupsV2QueryParams,
    unknown
  >
  export interface GetDelegatesUpTheHierarchyQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type GetDelegatesUpTheHierarchyProps = Omit<
    GetProps<RestResponseDelegateGroupListing, unknown, GetDelegatesUpTheHierarchyQueryParams, void>,
    'path'
  >
  export const GetDelegatesUpTheHierarchy: (props: GetDelegatesUpTheHierarchyProps) => JSX.Element
  export type UseGetDelegatesUpTheHierarchyProps = Omit<
    UseGetProps<RestResponseDelegateGroupListing, unknown, GetDelegatesUpTheHierarchyQueryParams, void>,
    'path'
  >
  export const useGetDelegatesUpTheHierarchy: (
    props: UseGetDelegatesUpTheHierarchyProps
  ) => import('restful-react').UseGetReturn<
    RestResponseDelegateGroupListing,
    unknown,
    GetDelegatesUpTheHierarchyQueryParams,
    unknown
  >
  export interface GetDelegateGroupFromIdV2QueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export interface GetDelegateGroupFromIdV2PathParams {
    delegateGroupId: string
  }
  export type GetDelegateGroupFromIdV2Props = Omit<
    GetProps<
      RestResponseDelegateGroupDetails,
      unknown,
      GetDelegateGroupFromIdV2QueryParams,
      GetDelegateGroupFromIdV2PathParams
    >,
    'path'
  > &
    GetDelegateGroupFromIdV2PathParams
  export const GetDelegateGroupFromIdV2: ({ delegateGroupId, ...props }: GetDelegateGroupFromIdV2Props) => JSX.Element
  export type UseGetDelegateGroupFromIdV2Props = Omit<
    UseGetProps<
      RestResponseDelegateGroupDetails,
      unknown,
      GetDelegateGroupFromIdV2QueryParams,
      GetDelegateGroupFromIdV2PathParams
    >,
    'path'
  > &
    GetDelegateGroupFromIdV2PathParams
  export const useGetDelegateGroupFromIdV2: ({
    delegateGroupId,
    ...props
  }: UseGetDelegateGroupFromIdV2Props) => import('restful-react').UseGetReturn<
    RestResponseDelegateGroupDetails,
    unknown,
    GetDelegateGroupFromIdV2QueryParams,
    unknown
  >
  export interface DeleteDelegateGroupByIdentifierQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type DeleteDelegateGroupByIdentifierProps = Omit<
    MutateProps<RestResponseVoid, unknown, DeleteDelegateGroupByIdentifierQueryParams, string, void>,
    'path' | 'verb'
  >
  export const DeleteDelegateGroupByIdentifier: (props: DeleteDelegateGroupByIdentifierProps) => JSX.Element
  export type UseDeleteDelegateGroupByIdentifierProps = Omit<
    UseMutateProps<RestResponseVoid, unknown, DeleteDelegateGroupByIdentifierQueryParams, string, void>,
    'path' | 'verb'
  >
  export const useDeleteDelegateGroupByIdentifier: (
    props: UseDeleteDelegateGroupByIdentifierProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseVoid,
    unknown,
    string,
    DeleteDelegateGroupByIdentifierQueryParams,
    void
  >
  export interface ValidateKubernetesYamlQueryParams {
    accountId?: string
    orgId?: string
    projectId?: string
  }
  export type ValidateKubernetesYamlProps = Omit<
    MutateProps<
      RestResponseDelegateSetupDetails,
      unknown,
      ValidateKubernetesYamlQueryParams,
      DelegateSetupDetailsRequestBody,
      void
    >,
    'path' | 'verb'
  >
  export const ValidateKubernetesYaml: (props: ValidateKubernetesYamlProps) => JSX.Element
  export type UseValidateKubernetesYamlProps = Omit<
    UseMutateProps<
      RestResponseDelegateSetupDetails,
      unknown,
      ValidateKubernetesYamlQueryParams,
      DelegateSetupDetailsRequestBody,
      void
    >,
    'path' | 'verb'
  >
  export const useValidateKubernetesYaml: (
    props: UseValidateKubernetesYamlProps
  ) => import('restful-react').UseMutateReturn<
    RestResponseDelegateSetupDetails,
    unknown,
    DelegateSetupDetails,
    ValidateKubernetesYamlQueryParams,
    void
  >
  export interface DeleteDelegateQueryParams {
    accountId?: string
  }
  export type DeleteDelegateProps = Omit<
    MutateProps<RestResponseVoid, unknown, DeleteDelegateQueryParams, string, void>,
    'path' | 'verb'
  >
  export const DeleteDelegate: (props: DeleteDelegateProps) => JSX.Element
  export type UseDeleteDelegateProps = Omit<
    UseMutateProps<RestResponseVoid, unknown, DeleteDelegateQueryParams, string, void>,
    'path' | 'verb'
  >
  export const useDeleteDelegate: (
    props: UseDeleteDelegateProps
  ) => import('restful-react').UseMutateReturn<RestResponseVoid, unknown, string, DeleteDelegateQueryParams, void>
  export interface GetDelegateFromIdQueryParams {
    accountId?: string
  }
  export interface GetDelegateFromIdPathParams {
    delegateId: string
  }
  export type GetDelegateFromIdProps = Omit<
    GetProps<RestResponseDelegate, unknown, GetDelegateFromIdQueryParams, GetDelegateFromIdPathParams>,
    'path'
  > &
    GetDelegateFromIdPathParams
  export const GetDelegateFromId: ({ delegateId, ...props }: GetDelegateFromIdProps) => JSX.Element
  export type UseGetDelegateFromIdProps = Omit<
    UseGetProps<RestResponseDelegate, unknown, GetDelegateFromIdQueryParams, GetDelegateFromIdPathParams>,
    'path'
  > &
    GetDelegateFromIdPathParams
  export const useGetDelegateFromId: ({
    delegateId,
    ...props
  }: UseGetDelegateFromIdProps) => import('restful-react').UseGetReturn<
    RestResponseDelegate,
    unknown,
    GetDelegateFromIdQueryParams,
    unknown
  >
  export interface GetFeatureFlagsPathParams {
    accountId: string
  }
  export type GetFeatureFlagsProps = Omit<
    GetProps<RestResponseCollectionFeatureFlag, unknown, void, GetFeatureFlagsPathParams>,
    'path'
  > &
    GetFeatureFlagsPathParams
  export const GetFeatureFlags: ({ accountId, ...props }: GetFeatureFlagsProps) => JSX.Element
  export type UseGetFeatureFlagsProps = Omit<
    UseGetProps<RestResponseCollectionFeatureFlag, unknown, void, GetFeatureFlagsPathParams>,
    'path'
  > &
    GetFeatureFlagsPathParams
  export const useGetFeatureFlags: ({
    accountId,
    ...props
  }: UseGetFeatureFlagsProps) => import('restful-react').UseGetReturn<
    RestResponseCollectionFeatureFlag,
    unknown,
    void,
    unknown
  >
  export type TrialSignupProps = Omit<
    MutateProps<RestResponseBoolean, unknown, void, UserInviteRequestBody, void>,
    'path' | 'verb'
  >
  export const TrialSignup: (props: TrialSignupProps) => JSX.Element
  export type UseTrialSignupProps = Omit<
    UseMutateProps<RestResponseBoolean, unknown, void, UserInviteRequestBody, void>,
    'path' | 'verb'
  >
  export const useTrialSignup: (
    props: UseTrialSignupProps
  ) => import('restful-react').UseMutateReturn<RestResponseBoolean, unknown, UserInvite, void, void>
  export type RefreshTokenProps = Omit<GetProps<RestResponseString, unknown, void, void>, 'path'>
  export const RefreshToken: (props: RefreshTokenProps) => JSX.Element
  export type UseRefreshTokenProps = Omit<UseGetProps<RestResponseString, unknown, void, void>, 'path'>
  export const useRefreshToken: (
    props: UseRefreshTokenProps
  ) => import('restful-react').UseGetReturn<RestResponseString, unknown, void, unknown>
  export interface SetDefaultAccountForCurrentUserPathParams {
    accountId: string
  }
  export type SetDefaultAccountForCurrentUserProps = Omit<
    MutateProps<RestResponseBoolean, unknown, void, void, SetDefaultAccountForCurrentUserPathParams>,
    'path' | 'verb'
  > &
    SetDefaultAccountForCurrentUserPathParams
  export const SetDefaultAccountForCurrentUser: ({
    accountId,
    ...props
  }: SetDefaultAccountForCurrentUserProps) => JSX.Element
  export type UseSetDefaultAccountForCurrentUserProps = Omit<
    UseMutateProps<RestResponseBoolean, unknown, void, void, SetDefaultAccountForCurrentUserPathParams>,
    'path' | 'verb'
  > &
    SetDefaultAccountForCurrentUserPathParams
  export const useSetDefaultAccountForCurrentUser: ({
    accountId,
    ...props
  }: UseSetDefaultAccountForCurrentUserProps) => import('restful-react').UseMutateReturn<
    RestResponseBoolean,
    unknown,
    void,
    void,
    SetDefaultAccountForCurrentUserPathParams
  >
  export interface SwitchAccountQueryParams {
    accountId?: string
  }
  export type SwitchAccountProps = Omit<GetProps<RestResponseUser, unknown, SwitchAccountQueryParams, void>, 'path'>
  export const SwitchAccount: (props: SwitchAccountProps) => JSX.Element
  export type UseSwitchAccountProps = Omit<
    UseGetProps<RestResponseUser, unknown, SwitchAccountQueryParams, void>,
    'path'
  >
  export const useSwitchAccount: (
    props: UseSwitchAccountProps
  ) => import('restful-react').UseGetReturn<RestResponseUser, unknown, SwitchAccountQueryParams, unknown>
  export type NewSwitchAccountProps = Omit<
    MutateProps<RestResponseBoolean, unknown, void, SwitchAccountRequest, void>,
    'path' | 'verb'
  >
  export const NewSwitchAccount: (props: NewSwitchAccountProps) => JSX.Element
  export type UseNewSwitchAccountProps = Omit<
    UseMutateProps<RestResponseBoolean, unknown, void, SwitchAccountRequest, void>,
    'path' | 'verb'
  >
  export const useNewSwitchAccount: (
    props: UseNewSwitchAccountProps
  ) => import('restful-react').UseMutateReturn<RestResponseBoolean, unknown, SwitchAccountRequest, void, void>
  export type GetUserProps = Omit<GetProps<RestResponseUser, unknown, void, void>, 'path'>
  export const GetUser: (props: GetUserProps) => JSX.Element
  export type UseGetUserProps = Omit<UseGetProps<RestResponseUser, unknown, void, void>, 'path'>
  export const useGetUser: (
    props: UseGetUserProps
  ) => import('restful-react').UseGetReturn<RestResponseUser, unknown, void, unknown>
  export interface Logout1PathParams {
    userId: string
  }
  export type Logout1Props = Omit<MutateProps<RestResponse, unknown, void, void, Logout1PathParams>, 'path' | 'verb'> &
    Logout1PathParams
  export const Logout1: ({ userId, ...props }: Logout1Props) => JSX.Element
  export type UseLogout1Props = Omit<
    UseMutateProps<RestResponse, unknown, void, void, Logout1PathParams>,
    'path' | 'verb'
  > &
    Logout1PathParams
  export const useLogout1: ({
    userId,
    ...props
  }: UseLogout1Props) => import('restful-react').UseMutateReturn<RestResponse, unknown, void, void, Logout1PathParams>
}
declare module 'stringTypes' {
  /**
   * This file is auto-generated. Please do not modify this file manually.
   * Use the command `yarn strings` to regenerate this file.
   */
  export interface StringsMap {
    'common.ID': string
    'common.My': string
    'common.PermissibleActions': string
    'common.accViewer': string
    'common.accessKey': string
    'common.account.checkLatestStatus': string
    'common.account.licenseCount': string
    'common.account.subscribedModules': string
    'common.account.visitSubscriptions.description': string
    'common.account.visitSubscriptions.link': string
    'common.accountDetails': string
    'common.accountId': string
    'common.accountName': string
    'common.accountOverview': string
    'common.accountResources': string
    'common.accountResourcesPage.line1': string
    'common.accountResourcesPage.line2': string
    'common.accountSettings': string
    'common.accountSetup': string
    'common.addAccountName': string
    'common.addVariable': string
    'common.advanced': string
    'common.apiKeys': string
    'common.apikey': string
    'common.approve': string
    'common.artifactTag': string
    'common.at': string
    'common.aws': string
    'common.azure': string
    'common.banners.email.description': string
    'common.banners.email.resend': string
    'common.banners.email.success': string
    'common.banners.trial.contactSales': string
    'common.banners.trial.contactSalesForm.companySize': string
    'common.banners.trial.contactSalesForm.companySizeItems.above5000': string
    'common.banners.trial.contactSalesForm.companySizeItems.below100': string
    'common.banners.trial.contactSalesForm.companySizeItems.below2000': string
    'common.banners.trial.contactSalesForm.companySizeItems.below500': string
    'common.banners.trial.contactSalesForm.companySizeItems.below5000': string
    'common.banners.trial.contactSalesForm.companySizeValidation': string
    'common.banners.trial.contactSalesForm.country': string
    'common.banners.trial.contactSalesForm.countryValidation': string
    'common.banners.trial.contactSalesForm.description': string
    'common.banners.trial.contactSalesForm.email': string
    'common.banners.trial.contactSalesForm.fullName': string
    'common.banners.trial.contactSalesForm.orgName': string
    'common.banners.trial.contactSalesForm.orgNameValidation': string
    'common.banners.trial.contactSalesForm.phone': string
    'common.banners.trial.contactSalesForm.phonePlaceHolder': string
    'common.banners.trial.contactSalesForm.phoneValidation.number': string
    'common.banners.trial.contactSalesForm.phoneValidation.required': string
    'common.banners.trial.contactSalesForm.role': string
    'common.banners.trial.contactSalesForm.roleItems.devOps': string
    'common.banners.trial.contactSalesForm.roleItems.devSecOps': string
    'common.banners.trial.contactSalesForm.roleItems.engineeringDirector': string
    'common.banners.trial.contactSalesForm.roleItems.engineeringManager': string
    'common.banners.trial.contactSalesForm.roleItems.it': string
    'common.banners.trial.contactSalesForm.roleItems.others': string
    'common.banners.trial.contactSalesForm.roleItems.softwareArchitect': string
    'common.banners.trial.contactSalesForm.roleItems.softwareDeveloper': string
    'common.banners.trial.contactSalesForm.roleItems.vp': string
    'common.banners.trial.contactSalesForm.roleValidation': string
    'common.banners.trial.contactSalesForm.success': string
    'common.banners.trial.description': string
    'common.banners.trial.expired.description': string
    'common.banners.trial.expired.extendTrial': string
    'common.banners.trial.feedbackSuccess': string
    'common.banners.trial.provideFeedback': string
    'common.banners.trial.success': string
    'common.bash': string
    'common.billed': string
    'common.blank': string
    'common.capsAll': string
    'common.ce.autostopping': string
    'common.ce.cost': string
    'common.ce.optimization': string
    'common.ce.visibility': string
    'common.ce.visibilityLaunchButton': string
    'common.ce.visibilityWarning': string
    'common.cgLaunchText': string
    'common.changeDefaultAccountMessage': string
    'common.changeDefaultAccountTitle': string
    'common.changeIntelligence': string
    'common.changesUnsaved': string
    'common.channel': string
    'common.clearSelection': string
    'common.clientId': string
    'common.cluster': string
    'common.comingSoon': string
    'common.comments': string
    'common.confictOccured': string
    'common.configureOptions.advancedHelp': string
    'common.configureOptions.configureOptions': string
    'common.configureOptions.defaultValue': string
    'common.configureOptions.enterTags': string
    'common.configureOptions.jexlLabel': string
    'common.configureOptions.notValidExpression': string
    'common.configureOptions.regex': string
    'common.configureOptions.requiredDuringExecution': string
    'common.configureOptions.returnToBasic': string
    'common.configureOptions.validation': string
    'common.configureOptions.validationErrors.defaultAllowedValid': string
    'common.configureOptions.validationErrors.defaultRegExValid': string
    'common.configureOptions.validationErrors.jexlExpressionRequired': string
    'common.configureOptions.validationErrors.minOneAllowedValue': string
    'common.configureOptions.validationErrors.regExIsRequired': string
    'common.configureOptions.validationErrors.regExNotValid': string
    'common.configureOptions.values': string
    'common.confirmText': string
    'common.createPipeline': string
    'common.creating': string
    'common.current': string
    'common.daily': string
    'common.dashboards': string
    'common.datePickerShortcuts.Last2Days': string
    'common.datePickerShortcuts.Last2Months': string
    'common.datePickerShortcuts.Last3Days': string
    'common.datePickerShortcuts.LastMonth': string
    'common.datePickerShortcuts.LastWeek': string
    'common.datePickerShortcuts.Today': string
    'common.datePickerShortcuts.Yesterday': string
    'common.deactivate': string
    'common.default': string
    'common.defaultExperience': string
    'common.delegateForTask': string
    'common.descriptionPlaceholder': string
    'common.disable': string
    'common.discard': string
    'common.duplicateId': string
    'common.durationPrefix': string
    'common.editVariable': string
    'common.editVariableType': string
    'common.editYaml': string
    'common.enableGitSyncPipeline': string
    'common.environmentCreated': string
    'common.environmentUpdated': string
    'common.errorCount': string
    'common.errorHandler.issueCouldBe': string
    'common.errorHandler.tryTheseSuggestions': string
    'common.execute': string
    'common.expiryDate': string
    'common.extendTrial.description': string
    'common.extendTrial.doItLater': string
    'common.extendTrial.expiryDate': string
    'common.extendTrial.feedback.answers.improve': string
    'common.extendTrial.feedback.answers.needMore': string
    'common.extendTrial.feedback.answers.useful': string
    'common.extendTrial.feedback.ifUseful': string
    'common.extendTrial.feedback.suggestion': string
    'common.extendTrial.feedback.title': string
    'common.extendTrial.heading': string
    'common.failureRate': string
    'common.filters.clearFilters': string
    'common.filters.noFilterSaved': string
    'common.filters.noMatchingFilterData': string
    'common.filters.saveNewFilter': string
    'common.filters.unsavedFilter': string
    'common.frequency': string
    'common.genericErrors.inviteExpired': string
    'common.genericErrors.licenseCallFailed': string
    'common.genericErrors.unauthorized': string
    'common.git.APIAccessDescription': string
    'common.git.APIAuthentication': string
    'common.git.addUserCredentialLabel': string
    'common.git.applicationId': string
    'common.git.bitbucketAccountUrl': string
    'common.git.bitbucketPlaceholderSSH': string
    'common.git.bitbucketRepoUrl': string
    'common.git.bitbucketUrlPlaceholder': string
    'common.git.branchName': string
    'common.git.branchSelectHeader': string
    'common.git.commitMessage': string
    'common.git.connectionType': string
    'common.git.currentUserLabel': string
    'common.git.enableAPIAccess': string
    'common.git.existingBranchCommitLabel': string
    'common.git.filePath': string
    'common.git.gitAccountUrl': string
    'common.git.gitHubAccountUrl': string
    'common.git.gitHubApp': string
    'common.git.gitHubRepoUrl': string
    'common.git.gitHubUrlPlaceholder': string
    'common.git.gitHubUrlPlaceholderSSH': string
    'common.git.gitLabAccountUrl': string
    'common.git.gitLabRepoUrl': string
    'common.git.gitLabUrlPlaceholder': string
    'common.git.gitLabUrlPlaceholderSSH': string
    'common.git.gitRepoUrl': string
    'common.git.installationId': string
    'common.git.newBranchCommitLabel': string
    'common.git.noBranchesFound': string
    'common.git.noUserLabel': string
    'common.git.onlyDefaultBranchFound': string
    'common.git.privateKey': string
    'common.git.saveResourceLabel': string
    'common.git.selectRepoLabel': string
    'common.git.startPRLabel': string
    'common.git.testRepository': string
    'common.git.testRepositoryDescription': string
    'common.git.urlType': string
    'common.git.validation.branchRequired': string
    'common.git.validation.commitMessage': string
    'common.git.validation.filePath': string
    'common.git.validation.repoRequired': string
    'common.git.validation.sameBranches': string
    'common.git.validation.targetBranch': string
    'common.gitSync.allRepositories': string
    'common.gitSync.commitDetailsLabel': string
    'common.gitSync.createResource': string
    'common.gitSync.creatingPR': string
    'common.gitSync.defaultBranches': string
    'common.gitSync.gitRepositoryDetails': string
    'common.gitSync.harnessFolderLabel': string
    'common.gitSync.pushingChangestoBranch': string
    'common.gitSync.repoDetails': string
    'common.gitSync.resourceLabel': string
    'common.gitSync.rootFolderLabel': string
    'common.gitSync.savingInProgress': string
    'common.gitSync.selectBranchLabel': string
    'common.gitSync.settingUpNewBranch': string
    'common.gitSync.sync': string
    'common.gitSync.syncStartSuccess': string
    'common.gitSync.syncing.header': string
    'common.gitSync.syncing.message': string
    'common.gitSync.unSynced.header': string
    'common.gitSync.unSynced.message1': string
    'common.gitSync.unSynced.message2': string
    'common.gitSync.unableToCreatePR': string
    'common.gitSync.updateResource': string
    'common.harnessClusterHostingAccount': string
    'common.harnessFirstGeneration': string
    'common.harnessFirstGenerationDescription': string
    'common.harnessNextGeneration': string
    'common.harnessNextGenerationDescription': string
    'common.headerAccountEdition': string
    'common.headerAccountName': string
    'common.headerCompanyName': string
    'common.headerDefaultAccount': string
    'common.headers': string
    'common.home': string
    'common.hourly': string
    'common.in': string
    'common.input': string
    'common.instanceLabel': string
    'common.instanceValidation.maximumCountInstance': string
    'common.instanceValidation.maximumCountPercentage': string
    'common.instanceValidation.minimumCountInstance': string
    'common.instanceValidation.minimumCountPercentage': string
    'common.instanceValidation.required': string
    'common.jexlExpression': string
    'common.labelTestConnection': string
    'common.last7days': string
    'common.lastModifiedTime': string
    'common.latest': string
    'common.launchFirstGen': string
    'common.letsGetYouStarted': string
    'common.link': string
    'common.loading': string
    'common.local': string
    'common.location': string
    'common.logs.delegateSelectionLogs': string
    'common.logs.noLogsText': string
    'common.manage': string
    'common.member': string
    'common.modified': string
    'common.monthly': string
    'common.moreInfo': string
    'common.moreRefineSearch': string
    'common.move': string
    'common.myProfile': string
    'common.namePlaceholder': string
    'common.namespace': string
    'common.new': string
    'common.newLines': string
    'common.newVersion': string
    'common.noRefData': string
    'common.note': string
    'common.notificationPreferences': string
    'common.ok': string
    'common.on': string
    'common.optionalConfig': string
    'common.optionalLabel': string
    'common.options': string
    'common.orgSetup': string
    'common.orgViewer': string
    'common.other': string
    'common.overSubscribed': string
    'common.pagerDuty': string
    'common.paste': string
    'common.path': string
    'common.pendingInvitation': string
    'common.performAction': string
    'common.pipeline': string
    'common.pipelineDetails': string
    'common.plans.faq': string
    'common.plans.featureComparison': string
    'common.plans.title': string
    'common.plusNumber': string
    'common.plusNumberNoSpace': string
    'common.production': string
    'common.projectSetup': string
    'common.projectViewer': string
    'common.provisioner': string
    'common.purpose.cd.1stGen.description': string
    'common.purpose.cd.1stGen.title': string
    'common.purpose.cd.continuous': string
    'common.purpose.cd.delivery': string
    'common.purpose.cd.description': string
    'common.purpose.cd.newGen.description': string
    'common.purpose.cd.newGen.title': string
    'common.purpose.cd.subtitle': string
    'common.purpose.cd.supportedStack': string
    'common.purpose.ce.cloudCost': string
    'common.purpose.ce.continuous': string
    'common.purpose.ce.description': string
    'common.purpose.ce.descriptionOnly': string
    'common.purpose.ce.efficiency': string
    'common.purpose.ce.management': string
    'common.purpose.ce.optimizationCard.description': string
    'common.purpose.ce.subtitle': string
    'common.purpose.ce.visibilityCard.description': string
    'common.purpose.cf.continuous': string
    'common.purpose.cf.description': string
    'common.purpose.cf.feature': string
    'common.purpose.cf.features': string
    'common.purpose.cf.flags': string
    'common.purpose.cf.subtitle': string
    'common.purpose.change': string
    'common.purpose.changeSelection': string
    'common.purpose.ci.continuous': string
    'common.purpose.ci.description': string
    'common.purpose.ci.integration': string
    'common.purpose.ci.subtitle': string
    'common.purpose.continuous': string
    'common.purpose.cv.continuous': string
    'common.purpose.cv.description': string
    'common.purpose.cv.subtitle': string
    'common.purpose.cv.verification': string
    'common.purpose.howToProceed': string
    'common.purpose.moduleSuccess': string
    'common.purpose.selectAModule': string
    'common.purpose.setup': string
    'common.purpose.startATrial': string
    'common.purpose.welcome': string
    'common.readOnly': string
    'common.readonlyPermissions': string
    'common.recommended': string
    'common.references': string
    'common.refresh': string
    'common.reject': string
    'common.releaseName': string
    'common.remove': string
    'common.removeThisVariable': string
    'common.repo_provider.awscodecommit': string
    'common.repo_provider.azureDev': string
    'common.repo_provider.bitbucketLabel': string
    'common.repo_provider.codecommit': string
    'common.repo_provider.customLabel': string
    'common.repo_provider.githubLabel': string
    'common.repo_provider.gitlabLabel': string
    'common.reportName': string
    'common.reportNameRequired': string
    'common.resolveConflict': string
    'common.role': string
    'common.saveAndClose': string
    'common.savedSuccessfully': string
    'common.searchPlaceholder': string
    'common.seconds': string
    'common.secretKey': string
    'common.secrets': string
    'common.seeDetails': string
    'common.seeWhatChanged': string
    'common.selectAChannel': string
    'common.selectBranch': string
    'common.selectDefaultExperience': string
    'common.selectUserGroups': string
    'common.selectVersion': string
    'common.serviceCreated': string
    'common.serviceUpdated': string
    'common.setAsDefault': string
    'common.shell': string
    'common.showLess': string
    'common.showMore': string
    'common.sidecarArtifactsText': string
    'common.slack': string
    'common.specify': string
    'common.startTrial': string
    'common.submittingRequest': string
    'common.submittingRequestToGitViaDelegate': string
    'common.subscribed': string
    'common.subscriptions.banner.enterprise': string
    'common.subscriptions.ccm.cloudSpend': string
    'common.subscriptions.cd.services': string
    'common.subscriptions.ci.developers': string
    'common.subscriptions.enterprisePaid': string
    'common.subscriptions.enterpriseTrial': string
    'common.subscriptions.expired': string
    'common.subscriptions.expiryCountdown': string
    'common.subscriptions.featureFlags.mau': string
    'common.subscriptions.featureFlags.users': string
    'common.subscriptions.noActiveSubscription': string
    'common.subscriptions.overview.details': string
    'common.subscriptions.overview.expiry': string
    'common.subscriptions.overview.plan': string
    'common.subscriptions.overview.subscribe': string
    'common.subscriptions.tabs.billing': string
    'common.subscriptions.tabs.overview': string
    'common.subscriptions.tabs.plans': string
    'common.subscriptions.title': string
    'common.subscriptions.usage.ccmUsers': string
    'common.subscriptions.usage.cdUsers': string
    'common.subscriptions.usage.ciUsers': string
    'common.subscriptions.usage.cloudSpend': string
    'common.subscriptions.usage.developers': string
    'common.subscriptions.usage.ffUsers': string
    'common.subscriptions.usage.header': string
    'common.subscriptions.usage.last60days': string
    'common.subscriptions.usage.monthlyUsers': string
    'common.subscriptions.usage.services': string
    'common.subscriptions.usage.srvcInst': string
    'common.successfullCreate': string
    'common.successfullUpdate': string
    'common.supportedModals': string
    'common.switchAccount': string
    'common.switchAccountError': string
    'common.switchAccountSearch': string
    'common.templates': string
    'common.test.connectionFailed': string
    'common.test.connectionSuccessful': string
    'common.test.inProgress': string
    'common.test.retest': string
    'common.tokens': string
    'common.totalHarnessUser': string
    'common.totalLines': string
    'common.totalSelected': string
    'common.trialInProgress': string
    'common.trialInProgressDescription': string
    'common.unlimited': string
    'common.unsavedChanges': string
    'common.updating': string
    'common.useTemplate': string
    'common.userGroup': string
    'common.userGroups': string
    'common.validation.email.format': string
    'common.validation.email.required': string
    'common.validation.fieldCannotbeLongerThanN': string
    'common.validation.fieldMustBeAlphanumeric': string
    'common.validation.fileIsRequired': string
    'common.validation.formatMustBeAlphanumeric': string
    'common.validation.groupAttributeIsRequired': string
    'common.validation.harnessFolderNamePatternIsNotValid': string
    'common.validation.identifierIsRequired': string
    'common.validation.keyIsRequired': string
    'common.validation.nameIsRequired': string
    'common.validation.namePatternIsNotValid': string
    'common.validation.repositoryName': string
    'common.validation.testRepoIsRequired': string
    'common.validation.typeIsRequired': string
    'common.validation.urlIsRequired': string
    'common.validation.valueIsRequired': string
    'common.validation.valueMustBeANumber': string
    'common.validation.valueMustBeGreaterThanOrEqualToN': string
    'common.validation.valueMustBeLessThanOrEqualToN': string
    'common.validation.variableAlreadyExists': string
    'common.validation.yamlFilePath': string
    'common.valuePlaceholder': string
    'common.videoNotSupportedError': string
    'common.webhookURL': string
    'common.welcome': string
    'common.yearly': string
    'notifications.buttonSend': string
    'notifications.emailOrAlias': string
    'notifications.emailRecipients': string
    'notifications.emailTestSuccess': string
    'notifications.helpPagerDuty': string
    'notifications.helpSlack': string
    'notifications.infoPagerDuty': string
    'notifications.infoSlack': string
    'notifications.labelBody': string
    'notifications.labelEmailUserGroups': string
    'notifications.labelMS': string
    'notifications.labelMSTeam': string
    'notifications.labelPDKey': string
    'notifications.labelPDUserGroups': string
    'notifications.labelPagerDuty': string
    'notifications.labelSlackUserGroups': string
    'notifications.labelSubject': string
    'notifications.labelTo': string
    'notifications.labelWebhookUrl': string
    'notifications.msTestSuccess': string
    'notifications.name': string
    'notifications.nameOftheRule': string
    'notifications.notificationMethod': string
    'notifications.notificationName': string
    'notifications.notificationRules': string
    'notifications.pagerDutyTestSuccess': string
    'notifications.pagerDutykey': string
    'notifications.pagerDutyuserGroups': string
    'notifications.pipelineEvents': string
    'notifications.selectPipelineEvents': string
    'notifications.selectStagesPlaceholder': string
    'notifications.slackTestSuccess': string
    'notifications.slackuserGroups': string
    'notifications.slackwebhookUrl': string
    'notifications.titleEmail': string
    'notifications.titlePagerDuty': string
    'notifications.titleSlack': string
    'notifications.userGroupsPlaceholder': string
    'notifications.validationBody': string
    'notifications.validationPDKey': string
    'notifications.validationSubject': string
    'notifications.validationTo': string
    'notifications.validationWebhook': string
    'rbac.account': string
    'rbac.accountScope': string
    'rbac.activeUsers': string
    'rbac.addResourceModal.selectedText': string
    'rbac.addRole': string
    'rbac.addUser': string
    'rbac.allResources': string
    'rbac.apiKey.confirmDelete': string
    'rbac.apiKey.confirmDeleteTitle': string
    'rbac.apiKey.createLabel': string
    'rbac.apiKey.editLabel': string
    'rbac.apiKey.form.createSuccess': string
    'rbac.apiKey.form.editSuccess': string
    'rbac.apiKey.successMessage': string
    'rbac.categoryLabels.sharedResources': string
    'rbac.generateToken': string
    'rbac.in': string
    'rbac.myApiKeys': string
    'rbac.org': string
    'rbac.pendingUsers': string
    'rbac.permissionLabels.access': string
    'rbac.permissionLabels.create': string
    'rbac.permissionLabels.createEdit': string
    'rbac.permissionLabels.delete': string
    'rbac.permissionLabels.execute': string
    'rbac.permissionLabels.invite': string
    'rbac.permissionLabels.manage': string
    'rbac.permissionLabels.pipelineExecution': string
    'rbac.permissionLabels.view': string
    'rbac.project': string
    'rbac.resourceGroup.add': string
    'rbac.resourceGroup.all': string
    'rbac.resourceGroup.builtInResourceGroup': string
    'rbac.resourceGroup.color': string
    'rbac.resourceGroup.confirmDelete': string
    'rbac.resourceGroup.confirmDeleteTitle': string
    'rbac.resourceGroup.createSuccess': string
    'rbac.resourceGroup.deletedMessage': string
    'rbac.resourceGroup.dragAndDropData': string
    'rbac.resourceGroup.limitAccess': string
    'rbac.resourceGroup.newResourceGroup': string
    'rbac.resourceGroup.noResourceGroup': string
    'rbac.resourceGroup.noResourceGroupFound': string
    'rbac.resourceGroup.noResourceGroupTypes': string
    'rbac.resourceGroup.resourceGroupColumn': string
    'rbac.resourceGroup.selectResourceGroup': string
    'rbac.resourceGroup.summary': string
    'rbac.resourceGroup.updateResourceGroupDialogTitle': string
    'rbac.resourceGroup.updateSuccess': string
    'rbac.roleAssignment.assignmentValidation': string
    'rbac.roleAssignment.deleteFailure': string
    'rbac.roleAssignment.deleteSuccess': string
    'rbac.roleAssignment.userPlaceHolder': string
    'rbac.roleBinding': string
    'rbac.roleCard.confirmDelete': string
    'rbac.roleCard.confirmDeleteTitle': string
    'rbac.roleCard.successMessage': string
    'rbac.roleDetails.noDataText': string
    'rbac.roleDetails.permissionUpdatedSuccess': string
    'rbac.roleDetails.updateRolePermissions': string
    'rbac.roleForm.createSuccess': string
    'rbac.roleForm.updateSuccess': string
    'rbac.serviceAccounts.confirmDelete': string
    'rbac.serviceAccounts.confirmDeleteTitle': string
    'rbac.serviceAccounts.email': string
    'rbac.serviceAccounts.form.createSuccess': string
    'rbac.serviceAccounts.form.editServiceAccount': string
    'rbac.serviceAccounts.form.editSuccess': string
    'rbac.serviceAccounts.form.noDataText': string
    'rbac.serviceAccounts.label': string
    'rbac.serviceAccounts.newServiceAccount': string
    'rbac.serviceAccounts.noDataDescription': string
    'rbac.serviceAccounts.noServiceAccounts': string
    'rbac.serviceAccounts.successMessage': string
    'rbac.token.confirmDelete': string
    'rbac.token.confirmDeleteTitle': string
    'rbac.token.createLabel': string
    'rbac.token.editLabel': string
    'rbac.token.forToken': string
    'rbac.token.form.createSuccess': string
    'rbac.token.form.editSuccess': string
    'rbac.token.form.expiry': string
    'rbac.token.form.expiryDate': string
    'rbac.token.form.rotateSuccess': string
    'rbac.token.form.rotateTokenExpiryMessage': string
    'rbac.token.form.setexpiryTo': string
    'rbac.token.form.tokenMessage': string
    'rbac.token.rotateLabel': string
    'rbac.token.scheduledToExpire': string
    'rbac.token.successMessage': string
    'rbac.updateNotificationSuccess': string
    'rbac.user': string
    'rbac.userDetails.linkToSSOProviderModal.btnDisabledTooltipText': string
    'rbac.userDetails.linkToSSOProviderModal.delinkLabel': string
    'rbac.userDetails.linkToSSOProviderModal.delinkText': string
    'rbac.userDetails.linkToSSOProviderModal.group': string
    'rbac.userDetails.linkToSSOProviderModal.groupNameLabel': string
    'rbac.userDetails.linkToSSOProviderModal.linkLabel': string
    'rbac.userDetails.linkToSSOProviderModal.retainMembersLabel': string
    'rbac.userDetails.linkToSSOProviderModal.saml': string
    'rbac.userDetails.linkToSSOProviderModal.selectSSOSetting': string
    'rbac.userDetails.linkToSSOProviderModal.validation.groupNameRequired': string
    'rbac.userDetails.linkToSSOProviderModal.validation.ssoIdRequired': string
    'rbac.userDetails.noMembersMessage': string
    'rbac.userDetails.userGroup.addToGroup': string
    'rbac.userDetails.userGroup.confirmDeleteText': string
    'rbac.userDetails.userGroup.deleteSuccessMessage': string
    'rbac.userDetails.userGroup.deleteTitle': string
    'rbac.userGroupForm.addMemberSuccess': string
    'rbac.userGroupForm.createSuccess': string
    'rbac.userGroupForm.editSuccess': string
    'rbac.userGroupPage.addMembers': string
    'rbac.userGroupPage.addUsers': string
    'rbac.userGroupPage.confirmDelete': string
    'rbac.userGroupPage.confirmDeleteTitle': string
    'rbac.userGroupPage.editUserGroup': string
    'rbac.userGroupPage.newUserGroup': string
    'rbac.userGroupPage.noDataText': string
    'rbac.userGroupPage.noRoleAssignmentsText': string
    'rbac.userGroupPage.noUserGroups': string
    'rbac.userGroupPage.search': string
    'rbac.userGroupPage.successMessage': string
    'rbac.userGroupPage.userList.deleteConfirmation': string
    'rbac.userGroupPage.userList.deleteFailureMessage': string
    'rbac.userGroupPage.userList.deleteSuccessMessage': string
    'rbac.userGroupPage.userList.deleteTitle': string
    'rbac.usersPage.assignRoles': string
    'rbac.usersPage.deleteConfirmation': string
    'rbac.usersPage.deleteSuccessMessage': string
    'rbac.usersPage.deleteTitle': string
    'rbac.usersPage.forUser': string
    'rbac.usersPage.invitationError': string
    'rbac.usersPage.invitationSuccess': string
    'rbac.usersPage.lockedOutLabel': string
    'rbac.usersPage.noDataDescription': string
    'rbac.usersPage.noDataText': string
    'rbac.usersPage.noUsersFound': string
    'rbac.usersPage.pendingInvitation': string
    'rbac.usersPage.resendInvite': string
    'rbac.usersPage.resendInviteSuccess': string
    'rbac.usersPage.roleAssignSuccess': string
    'rbac.usersPage.roleBinding': string
    'rbac.usersPage.search': string
    'rbac.usersPage.selectResourceGroup': string
    'rbac.usersPage.selectRole': string
    'rbac.usersPage.unlockConfirmation': string
    'rbac.usersPage.unlockSuccessMessage': string
    'rbac.usersPage.unlockTitle': string
    'rbac.usersPage.userAlreadyAdded': string
    'rbac.usersPage.userAlreadyInvited': string
    'rbac.usersPage.validation.resourceGroup': string
    'rbac.usersPage.validation.role': string
    'rbac.youAreMissingTheFollowingPermission': string
    'rbac.youAreNotAuthorizedTo': string
    'authSettings.SAMLProvider': string
    'authSettings.WhitelistedDomainsUpdated': string
    'authSettings.accountOrOAuthLogin': string
    'authSettings.accountOrOAuthLoginEnabledSuccessfully': string
    'authSettings.addSAMLProvider': string
    'authSettings.allowLoginFromTheseDomains': string
    'authSettings.allowUsersWithEmails': string
    'authSettings.atLeastNChars': string
    'authSettings.authenticationSettings': string
    'authSettings.authorizationEnabledFor': string
    'authSettings.authorizationNotEnabled': string
    'authSettings.azure': string
    'authSettings.changeLoginToHarnessAccountOrOauth': string
    'authSettings.changeLoginToHarnessAccountOrOauthDescription': string
    'authSettings.chooseFile': string
    'authSettings.confirmDisableLockoutPolicy': string
    'authSettings.confirmDisableOAuthLogin': string
    'authSettings.confirmDisablePasswordExpiration': string
    'authSettings.confirmDisablePasswordStrength': string
    'authSettings.confirmDisableUserPasswordLogin': string
    'authSettings.confirmDisableWhitelistedDomains': string
    'authSettings.daysBeforePasswordExpires': string
    'authSettings.daysBeforeUserNotified': string
    'authSettings.deleteSamlProvider': string
    'authSettings.deleteSamlProviderDescription': string
    'authSettings.disableLockoutPolicy': string
    'authSettings.disableOAuthLogin': string
    'authSettings.disablePasswordExpiration': string
    'authSettings.disablePasswordStrength': string
    'authSettings.disableTwoFAEnforcement': string
    'authSettings.disableUserPasswordLogin': string
    'authSettings.disableWhitelistedDomains': string
    'authSettings.doYouWantToEnforceTwoFAForAllMembers': string
    'authSettings.domainNameRequired': string
    'authSettings.editSAMLProvider': string
    'authSettings.enableAtLeastOneSsoBeforeDisablingUserPasswordLogin': string
    'authSettings.enableAuthorization': string
    'authSettings.enableHarnessAccountOrOauthLogin': string
    'authSettings.enableSamlProvider': string
    'authSettings.enableSamlProviderDescription': string
    'authSettings.enablingAuthorization': string
    'authSettings.enablingAuthorizationDescription': string
    'authSettings.enforceLockoutPolicy': string
    'authSettings.enforcePasswordStrength': string
    'authSettings.enforceTwoFA': string
    'authSettings.enterSAMLEndPoint': string
    'authSettings.existingMembersWillReceiveAnEmailWithQRCode': string
    'authSettings.failedLoginsBeforeLocked': string
    'authSettings.failedLoginsBeforeLockedAccount': string
    'authSettings.friendlyReminder': string
    'authSettings.friendlyReminderDescription': string
    'authSettings.goToSettings': string
    'authSettings.groupAttributeName': string
    'authSettings.haveOneDigit': string
    'authSettings.haveOneLowercase': string
    'authSettings.haveOneSpecialChar': string
    'authSettings.haveOneUppercase': string
    'authSettings.identityProvider': string
    'authSettings.keepAtLeastOneProviderEnabled': string
    'authSettings.lockoutDuration': string
    'authSettings.lockoutPolicy': string
    'authSettings.lockoutPolicyDisabled': string
    'authSettings.lockoutPolicyEnabled': string
    'authSettings.lockoutPolicyUpdated': string
    'authSettings.loginSettingsHaveBeenUpdated': string
    'authSettings.loginViaSAML': string
    'authSettings.minLength': string
    'authSettings.newMembersWillNeedToSetUpTwoFADuringSignup': string
    'authSettings.notifyUsersWhenTheyLocked': string
    'authSettings.notifyUsersWhenUserLocked': string
    'authSettings.oauthSettingsHaveBeenUpdated': string
    'authSettings.okta': string
    'authSettings.oneLogin': string
    'authSettings.passwordExpiration': string
    'authSettings.passwordExpirationDisabled': string
    'authSettings.passwordExpirationEnabled': string
    'authSettings.passwordExpirationUpdated': string
    'authSettings.passwordMustFulfillReq': string
    'authSettings.passwordStrength': string
    'authSettings.passwordStrengthDisabled': string
    'authSettings.passwordStrengthEnabled': string
    'authSettings.passwordStrengthUpdated': string
    'authSettings.periodicallyExpirePassword': string
    'authSettings.periodicallyExpirePasswordNote': string
    'authSettings.pleaseRemoveSAMLOrLDAPToEnableOauth': string
    'authSettings.plusSAMLProvider': string
    'authSettings.publicOAuthLoginDisabled': string
    'authSettings.publicOAuthLoginEnabled': string
    'authSettings.restrictUsersToEmailDomains': string
    'authSettings.samlLoginEnabled': string
    'authSettings.samlProviderAddedSuccessfully': string
    'authSettings.samlProviderDeleted': string
    'authSettings.samlProviderUpdatedSuccessfully': string
    'authSettings.samlTestFailed': string
    'authSettings.samlTestSuccessful': string
    'authSettings.selectSAMLProvider': string
    'authSettings.sureToDisableTwoFAEnforcement': string
    'authSettings.testingSSO': string
    'authSettings.testingSSODescription': string
    'authSettings.twoFAEnforcementDisabled': string
    'authSettings.twoFAEnforcementEnabled': string
    'authSettings.typeAndPressEnterToAddADomain': string
    'authSettings.updating': string
    'authSettings.uploadIdentityProvider': string
    'authSettings.useHarnessUsernameAndPassword': string
    'authSettings.usePublicOAuth': string
    'authSettings.whitelistedDomainsDisabled': string
    'authSettings.yourAccountWillBeLockedOut': string
    'delegates.delSetup': string
    'delegates.delegateDeleted': string
    'delegates.delegateIdentifier': string
    'delegates.delegateInstances': string
    'delegates.delegateNameRegexIssue': string
    'delegates.delegateNamespaceRequired': string
    'delegates.delegateNotInstalled.CPUorMemError': string
    'delegates.delegateNotInstalled.applicationError': string
    'delegates.delegateNotInstalled.checkCanClusterConnectToRegistry': string
    'delegates.delegateNotInstalled.checkClusterConfig': string
    'delegates.delegateNotInstalled.checkClusterConfig2': string
    'delegates.delegateNotInstalled.checkClusterPermission': string
    'delegates.delegateNotInstalled.checkClusterPermission2': string
    'delegates.delegateNotInstalled.checkFirewallPorts': string
    'delegates.delegateNotInstalled.checkProxy': string
    'delegates.delegateNotInstalled.contactHarness': string
    'delegates.delegateNotInstalled.crashloopError': string
    'delegates.delegateNotInstalled.curlHarnessIO': string
    'delegates.delegateNotInstalled.curlHarnessIO2': string
    'delegates.delegateNotInstalled.curlHarnessIO3': string
    'delegates.delegateNotInstalled.doYouHaveProxy': string
    'delegates.delegateNotInstalled.eventErrorBlock': string
    'delegates.delegateNotInstalled.goodToGo': string
    'delegates.delegateNotInstalled.harnessErrorValidation': string
    'delegates.delegateNotInstalled.permissionError': string
    'delegates.delegateNotInstalled.podComeUp': string
    'delegates.delegateNotInstalled.podCommand': string
    'delegates.delegateNotInstalled.pullError': string
    'delegates.delegateNotInstalled.statusOfCluster': string
    'delegates.delegateNotInstalled.tabs.commonProblems.checkEndPoint': string
    'delegates.delegateNotInstalled.tabs.commonProblems.checkTheDelegateLogs': string
    'delegates.delegateNotInstalled.tabs.commonProblems.description1': string
    'delegates.delegateNotInstalled.tabs.commonProblems.description2': string
    'delegates.delegateNotInstalled.tabs.commonProblems.hereIsWhatYouCanDo': string
    'delegates.delegateNotInstalled.tabs.commonProblems.title': string
    'delegates.delegateNotInstalled.tabs.commonProblems.troubleshoot': string
    'delegates.delegateNotInstalled.tabs.troubleshooting': string
    'delegates.delegateNotInstalled.title': string
    'delegates.delegateNotInstalled.verifyField2': string
    'delegates.delegateNotInstalled.verifyField3': string
    'delegates.delegatePermissions.clusterReadContent': string
    'delegates.delegatePermissions.clusterReadTitle': string
    'delegates.delegatePermissions.clusterWriteContent': string
    'delegates.delegatePermissions.clusterWriteTitle': string
    'delegates.delegatePermissions.specificNamespaceContent': string
    'delegates.delegatePermissions.specificNamespaceTitle': string
    'delegates.delegatePermissions.title': string
    'delegates.delegateSizeUpTo': string
    'delegates.downloadYAMLFile': string
    'delegates.harnessDocs': string
    'delegates.lastUpdated': string
    'delegates.newDelegateConfigWizard.matchAllEnvs': string
    'delegates.newDelegateConfigWizard.nonprodEnv': string
    'delegates.newDelegateConfigWizard.overviewTitle': string
    'delegates.newDelegateConfigWizard.prodEnv': string
    'delegates.newDelegateConfigWizard.scopeSubtitle': string
    'delegates.newDelegateConfigWizard.scriptTitle': string
    'delegates.newDelegateConfigWizard.specEnvNotPossible': string
    'delegates.newDelegateConfigWizard.specifyEnvs': string
    'delegates.newDelegateConfigWizard.successMessage': string
    'delegates.openTroubleshooter': string
    'delegates.permissionRequired': string
    'delegates.questionForceDeleteDelegate': string
    'delegates.replicaText': string
    'delegates.reviewScript.copyYamlError': string
    'delegates.reviewScript.docLink': string
    'delegates.reviewScript.docLinkAfter': string
    'delegates.reviewScript.docLinkBefore': string
    'delegates.reviewYAML': string
    'delegates.searchDelegateName': string
    'delegates.totalMemUnit': string
    'delegates.troubleshootOption': string
    'delegates.usedBy': string
    'delegates.verification': string
    'secrets.blank': string
    'secrets.confirmDelete': string
    'secrets.confirmDeleteTitle': string
    'secrets.createSSHCredWizard.btnSaving': string
    'secrets.createSSHCredWizard.btnVerifyConnection': string
    'secrets.createSSHCredWizard.hostnameInfo': string
    'secrets.createSSHCredWizard.labelHostname': string
    'secrets.createSSHCredWizard.titleAuth': string
    'secrets.createSSHCredWizard.titleDetails': string
    'secrets.createSSHCredWizard.validId': string
    'secrets.createSSHCredWizard.validIdRegex': string
    'secrets.createSSHCredWizard.validName': string
    'secrets.createSSHCredWizard.validateKeypath': string
    'secrets.createSSHCredWizard.validatePort': string
    'secrets.createSSHCredWizard.validatePrincipal': string
    'secrets.createSSHCredWizard.validateRealm': string
    'secrets.createSSHCredWizard.validateSshKey': string
    'secrets.createSSHCredWizard.validateUsername': string
    'secrets.createSSHCredWizard.verifyRetest': string
    'secrets.createSSHCredWizard.verifyStepOne': string
    'secrets.createSSHCredWizard.verifyStepTwo': string
    'secrets.incompleteSecret': string
    'secrets.labelPath': string
    'secrets.labelSecretName': string
    'secrets.labelSecretsManager': string
    'secrets.labelType': string
    'secrets.labelValue': string
    'secrets.selectSecret': string
    'secrets.sshAuthFormFields.labelFile': string
    'secrets.sshAuthFormFields.labelKeyFilePath': string
    'secrets.sshAuthFormFields.labelKeyReference': string
    'secrets.sshAuthFormFields.labelKeyTab': string
    'secrets.sshAuthFormFields.labelPassphrase': string
    'secrets.sshAuthFormFields.labelPrincipal': string
    'secrets.sshAuthFormFields.labelRealm': string
    'secrets.sshAuthFormFields.labelSSHPort': string
    'secrets.sshAuthFormFields.labelTGT': string
    'secrets.sshAuthFormFields.labelType': string
    'secrets.sshAuthFormFields.optionKerbNone': string
    'secrets.sshAuthFormFields.optionKey': string
    'secrets.sshAuthFormFields.optionKeypath': string
    'secrets.sshAuthFormFields.optionPassword': string
    'secrets.stepTitleVerify': string
    'secrets.titleCreate': string
    'secrets.titleSelect': string
    'secrets.typeSSH': string
    'connectors.ECR.fullName': string
    'connectors.ECR.name': string
    'connectors.GCP.delegateInClusterInfo': string
    'connectors.GCP.delegateOutClusterInfo': string
    'connectors.GCR.artifactServer': string
    'connectors.GCR.fullName': string
    'connectors.GCR.name': string
    'connectors.GCR.registryHostname': string
    'connectors.GCR.stepTwoName': string
    'connectors.GCS.fullName': string
    'connectors.GCS.name': string
    'connectors.S3': string
    'connectors.addConnectorDetails': string
    'connectors.apiKey': string
    'connectors.appD.accountName': string
    'connectors.appD.apiClient': string
    'connectors.appD.clientId': string
    'connectors.appD.clientSecret': string
    'connectors.appD.connectionDetailsHeader': string
    'connectors.appD.controllerURL': string
    'connectors.appD.validation.clientId': string
    'connectors.appD.validation.clientSecret': string
    'connectors.appD.validation.controllerURL': string
    'connectors.appDynamicsDetails': string
    'connectors.appdLabel': string
    'connectors.artifactRepoType': string
    'connectors.artifactRepository': string
    'connectors.artifactory.artifactoryServerUrl': string
    'connectors.aws.accessKey': string
    'connectors.aws.assumeIAMRole': string
    'connectors.aws.awsAccessKey': string
    'connectors.aws.crossAccURN': string
    'connectors.aws.enableCrossAcc': string
    'connectors.aws.externalId': string
    'connectors.aws.secretKey': string
    'connectors.aws.validation.accessKey': string
    'connectors.aws.validation.crossAccountRoleArn': string
    'connectors.aws.validation.delegateSelector': string
    'connectors.aws.validation.secretKeyRef': string
    'connectors.awsCodeCommit.repoUrl': string
    'connectors.awsKms.accessKeyLabel': string
    'connectors.awsKms.arnLabel': string
    'connectors.awsKms.assumedRoleDuration': string
    'connectors.awsKms.awsSTS': string
    'connectors.awsKms.loggedAt': string
    'connectors.awsKms.roleArnLabel': string
    'connectors.awsKms.secretKeyLabel': string
    'connectors.awsKms.validation.durationError': string
    'connectors.awsKms.validation.durationNumber': string
    'connectors.awsKms.validation.externalIdLengthError': string
    'connectors.awsKms.validation.externalIdRegexError': string
    'connectors.awsKms.validation.selectAWSArn': string
    'connectors.awsKms.validation.selectDelegate': string
    'connectors.awsKms.validation.selectRegion': string
    'connectors.awsSecretManager.secretNamePrefix': string
    'connectors.azureKeyVault.labels.fetchVault': string
    'connectors.azureKeyVault.labels.subscription': string
    'connectors.azureKeyVault.labels.tenantId': string
    'connectors.azureKeyVault.labels.vaultName': string
    'connectors.azureKeyVault.validation.clientId': string
    'connectors.azureKeyVault.validation.subscription': string
    'connectors.azureKeyVault.validation.tenantId': string
    'connectors.azureKeyVault.validation.vaultName': string
    'connectors.cdng.artifactTag': string
    'connectors.cdng.baseline': string
    'connectors.cdng.baselineDefaultLabel.lastSuccess': string
    'connectors.cdng.continousVerificationStep': string
    'connectors.cdng.continousVerificationType': string
    'connectors.cdng.createCVJob': string
    'connectors.cdng.defineVerificationJob': string
    'connectors.cdng.displayName': string
    'connectors.cdng.error': string
    'connectors.cdng.healthSources.label': string
    'connectors.cdng.healthSources.noHealthSourcesDefined': string
    'connectors.cdng.jobName': string
    'connectors.cdng.jobTypes.blueGreen': string
    'connectors.cdng.jobTypes.canary': string
    'connectors.cdng.jobTypes.health': string
    'connectors.cdng.jobTypes.test': string
    'connectors.cdng.loadingJobs': string
    'connectors.cdng.monitoredService.autoCreateMonitoredService': string
    'connectors.cdng.monitoredService.backToVerifyStep': string
    'connectors.cdng.monitoredService.creatingMonitoredService': string
    'connectors.cdng.monitoredService.creatingMonitoredServiceError': string
    'connectors.cdng.monitoredService.fetchingMonitoredService': string
    'connectors.cdng.monitoredService.fetchingMonitoredServiceError': string
    'connectors.cdng.monitoredService.label': string
    'connectors.cdng.monitoredService.monitoredServiceText': string
    'connectors.cdng.noJobsConfigured': string
    'connectors.cdng.runTimeMonitoredService.backToRunPipeline': string
    'connectors.cdng.runTimeMonitoredService.fetchingMonitoredServiceError': string
    'connectors.cdng.runTimeMonitoredService.noHealthSourcePresent': string
    'connectors.cdng.runTimeMonitoredService.noMonitoringSercvicePresent': string
    'connectors.cdng.runTimeMonitoredService.pleaseSpecify': string
    'connectors.cdng.runTimeMonitoredService.toFetchMonitoredService': string
    'connectors.cdng.selectTheJobNameFirst': string
    'connectors.cdng.trafficsplit': string
    'connectors.cdng.validations.deploymentTagRequired': string
    'connectors.cdng.validations.durationRequired': string
    'connectors.cdng.validations.healthSourceRequired': string
    'connectors.cdng.validations.jobNameRequired': string
    'connectors.cdng.validations.monitoringServiceRequired': string
    'connectors.cdng.validations.sensitivityRequired': string
    'connectors.cdng.validations.verificationTypeRequired': string
    'connectors.cdng.verificationSensitivityLabel.high': string
    'connectors.cdng.verificationSensitivityLabel.low': string
    'connectors.cdng.verificationSensitivityLabel.medium': string
    'connectors.ceAws.crossAccountRoleExtention.heading': string
    'connectors.ceAws.crossAccountRoleExtention.step1.p1': string
    'connectors.ceAws.crossAccountRoleExtention.step1.p2': string
    'connectors.ceAws.crossAccountRoleExtention.step1.p3': string
    'connectors.ceAws.crossAccountRoleExtention.step2.heading': string
    'connectors.ceAws.crossAccountRoleExtention.step2.subStep1': string
    'connectors.ceAws.crossAccountRoleExtention.step2.subStep2.p1': string
    'connectors.ceAws.crossAccountRoleExtention.step2.subStep2.p2': string
    'connectors.ceAws.crossAccountRoleExtention.step3.p1': string
    'connectors.ceAws.crossAccountRoleExtention.step3.p2': string
    'connectors.ceAws.crossAccountRoleExtention.step3.p3': string
    'connectors.ceAws.crossAccountRoleExtention.step3.p4': string
    'connectors.ceAws.crossAccountRoleExtention.step4': string
    'connectors.ceAws.crossAccountRoleExtention.step5': string
    'connectors.ceAws.crossAccountRoleExtention.subHeading': string
    'connectors.ceAws.crossAccountRoleStep1.choosePermissions': string
    'connectors.ceAws.crossAccountRoleStep1.cost': string
    'connectors.ceAws.crossAccountRoleStep1.default.feat1': string
    'connectors.ceAws.crossAccountRoleStep1.default.footer': string
    'connectors.ceAws.crossAccountRoleStep1.description': string
    'connectors.ceAws.crossAccountRoleStep1.heading': string
    'connectors.ceAws.crossAccountRoleStep1.info': string
    'connectors.ceAws.crossAccountRoleStep1.optimization': string
    'connectors.ceAws.crossAccountRoleStep1.optimizationDes': string
    'connectors.ceAws.crossAccountRoleStep1.optimize.feat1': string
    'connectors.ceAws.crossAccountRoleStep1.optimize.footer': string
    'connectors.ceAws.crossAccountRoleStep1.optimize.prefix': string
    'connectors.ceAws.crossAccountRoleStep1.subHeading': string
    'connectors.ceAws.crossAccountRoleStep1.visibility': string
    'connectors.ceAws.crossAccountRoleStep1.visibilityDes': string
    'connectors.ceAws.crossAccountRoleStep1.visible.feat1': string
    'connectors.ceAws.crossAccountRoleStep1.visible.feat2': string
    'connectors.ceAws.crossAccountRoleStep1.visible.heading': string
    'connectors.ceAws.crossAccountRoleStep1.visible.prefix': string
    'connectors.ceAws.crossAccountRoleStep2.createRole': string
    'connectors.ceAws.crossAccountRoleStep2.dontHaveAccess': string
    'connectors.ceAws.crossAccountRoleStep2.extId': string
    'connectors.ceAws.crossAccountRoleStep2.followInstructions': string
    'connectors.ceAws.crossAccountRoleStep2.heading': string
    'connectors.ceAws.crossAccountRoleStep2.launchTemplate': string
    'connectors.ceAws.crossAccountRoleStep2.roleArn': string
    'connectors.ceAws.crossAccountRoleStep2.subHeading': string
    'connectors.ceAws.crossAccountRoleStep2.validation.roleArnPattern': string
    'connectors.ceAws.crossAccountRoleStep2.validation.roleArnRequired': string
    'connectors.ceAws.cur.bucketName': string
    'connectors.ceAws.cur.createNew': string
    'connectors.ceAws.cur.followInstruction': string
    'connectors.ceAws.cur.heading': string
    'connectors.ceAws.cur.launchTemplate': string
    'connectors.ceAws.cur.login': string
    'connectors.ceAws.cur.reportName': string
    'connectors.ceAws.cur.subheading': string
    'connectors.ceAws.cur.validation.bucketRequired': string
    'connectors.ceAws.cur.validation.reportRequired': string
    'connectors.ceAws.curExising.accountID': string
    'connectors.ceAws.curExising.subHeading': string
    'connectors.ceAws.curExtention.heading': string
    'connectors.ceAws.curExtention.moreHelp.heading': string
    'connectors.ceAws.curExtention.moreHelp.step1': string
    'connectors.ceAws.curExtention.moreHelp.step2': string
    'connectors.ceAws.curExtention.moreHelp.step3': string
    'connectors.ceAws.curExtention.moreHelp.step4': string
    'connectors.ceAws.curExtention.stepA.heading': string
    'connectors.ceAws.curExtention.stepA.step1.p1': string
    'connectors.ceAws.curExtention.stepA.step1.p2': string
    'connectors.ceAws.curExtention.stepA.step2': string
    'connectors.ceAws.curExtention.stepA.step3': string
    'connectors.ceAws.curExtention.stepB.heading': string
    'connectors.ceAws.curExtention.stepB.step1.p1': string
    'connectors.ceAws.curExtention.stepB.step1.p2': string
    'connectors.ceAws.curExtention.stepB.step2': string
    'connectors.ceAws.curExtention.stepB.step3.p1': string
    'connectors.ceAws.curExtention.stepB.step4': string
    'connectors.ceAws.curExtention.stepB.step5.heading': string
    'connectors.ceAws.curExtention.stepB.step5.subStep1.p1': string
    'connectors.ceAws.curExtention.stepB.step5.subStep1.p2': string
    'connectors.ceAws.curExtention.stepB.step5.subStep2.p1': string
    'connectors.ceAws.curExtention.stepB.step5.subStep2.p2': string
    'connectors.ceAws.curExtention.stepB.step5.subStep3': string
    'connectors.ceAws.curExtention.stepB.step5.subStep4.p1': string
    'connectors.ceAws.curExtention.stepB.step5.subStep4.p2': string
    'connectors.ceAws.curExtention.stepB.step6.p1': string
    'connectors.ceAws.curExtention.stepB.step6.p2': string
    'connectors.ceAws.curExtention.stepB.step7': string
    'connectors.ceAws.curExtention.subtext': string
    'connectors.ceAws.overview.alreadyExist': string
    'connectors.ceAws.overview.alreadyExistInfo': string
    'connectors.ceAws.overview.awsAccountId': string
    'connectors.ceAws.overview.editConnector': string
    'connectors.ceAws.overview.heading': string
    'connectors.ceAws.overview.ifReq': string
    'connectors.ceAws.overview.trySuggestion': string
    'connectors.ceAws.overview.validation.numeric': string
    'connectors.ceAws.overview.validation.positive': string
    'connectors.ceAws.overview.validation.required': string
    'connectors.ceAws.steps.cur': string
    'connectors.ceAws.steps.overview': string
    'connectors.ceAws.steps.req': string
    'connectors.ceAws.steps.roleARN': string
    'connectors.ceAws.steps.test': string
    'connectors.ceAws.testConnection.heading': string
    'connectors.ceAws.testConnection.step1': string
    'connectors.ceAws.testConnection.step2': string
    'connectors.ceAws.testConnection.step3': string
    'connectors.ceAzure.billing.containerName': string
    'connectors.ceAzure.billing.directoryName': string
    'connectors.ceAzure.billing.extension.createBillingExportGuide': string
    'connectors.ceAzure.billing.extension.createExport': string
    'connectors.ceAzure.billing.extension.docs': string
    'connectors.ceAzure.billing.extension.links': string
    'connectors.ceAzure.billing.extension.soon': string
    'connectors.ceAzure.billing.extension.step0': string
    'connectors.ceAzure.billing.extension.step1': string
    'connectors.ceAzure.billing.extension.step10': string
    'connectors.ceAzure.billing.extension.step11': string
    'connectors.ceAzure.billing.extension.step12': string
    'connectors.ceAzure.billing.extension.step13': string
    'connectors.ceAzure.billing.extension.step14': string
    'connectors.ceAzure.billing.extension.step15': string
    'connectors.ceAzure.billing.extension.step16': string
    'connectors.ceAzure.billing.extension.step17': string
    'connectors.ceAzure.billing.extension.step2': string
    'connectors.ceAzure.billing.extension.step3': string
    'connectors.ceAzure.billing.extension.step4': string
    'connectors.ceAzure.billing.extension.step5': string
    'connectors.ceAzure.billing.extension.step6': string
    'connectors.ceAzure.billing.extension.step7': string
    'connectors.ceAzure.billing.extension.step8': string
    'connectors.ceAzure.billing.extension.step9': string
    'connectors.ceAzure.billing.extension.video': string
    'connectors.ceAzure.billing.heading': string
    'connectors.ceAzure.billing.instruction': string
    'connectors.ceAzure.billing.launchAzureConsole': string
    'connectors.ceAzure.billing.login': string
    'connectors.ceAzure.billing.reportName': string
    'connectors.ceAzure.billing.storageAccountName': string
    'connectors.ceAzure.billing.storageAccountNameRegexError': string
    'connectors.ceAzure.billing.subHeading': string
    'connectors.ceAzure.billing.subscriptionId': string
    'connectors.ceAzure.billing.tooltipBtn': string
    'connectors.ceAzure.billing.tooltipInstruction': string
    'connectors.ceAzure.chooseRequirements.featureDesc': string
    'connectors.ceAzure.chooseRequirements.heading': string
    'connectors.ceAzure.chooseRequirements.info': string
    'connectors.ceAzure.chooseRequirements.optimization.feat1': string
    'connectors.ceAzure.chooseRequirements.optimization.feat2': string
    'connectors.ceAzure.chooseRequirements.optimization.feat3': string
    'connectors.ceAzure.chooseRequirements.optimization.feat4': string
    'connectors.ceAzure.chooseRequirements.optimization.footer1': string
    'connectors.ceAzure.chooseRequirements.optimization.footer2': string
    'connectors.ceAzure.chooseRequirements.optimization.prefix': string
    'connectors.ceAzure.chooseRequirements.optimizationCardDesc': string
    'connectors.ceAzure.chooseRequirements.subHeading': string
    'connectors.ceAzure.chooseRequirements.visibility.feat1': string
    'connectors.ceAzure.chooseRequirements.visibility.feat2': string
    'connectors.ceAzure.chooseRequirements.visibility.feat3': string
    'connectors.ceAzure.chooseRequirements.visibility.feat4': string
    'connectors.ceAzure.chooseRequirements.visibility.feat5': string
    'connectors.ceAzure.chooseRequirements.visibility.footer': string
    'connectors.ceAzure.chooseRequirements.visibilityCardDesc': string
    'connectors.ceAzure.existingExports.createNewExportBtn': string
    'connectors.ceAzure.existingExports.instruction': string
    'connectors.ceAzure.existingExports.subscriptionId': string
    'connectors.ceAzure.existingExports.tenantId': string
    'connectors.ceAzure.guidPlaceholder': string
    'connectors.ceAzure.guidRegexError': string
    'connectors.ceAzure.overview.alreadyExist': string
    'connectors.ceAzure.overview.editConnector': string
    'connectors.ceAzure.overview.existingConnectorInfo': string
    'connectors.ceAzure.overview.heading': string
    'connectors.ceAzure.overview.required': string
    'connectors.ceAzure.overview.subscriptionId': string
    'connectors.ceAzure.overview.tenantId': string
    'connectors.ceAzure.overview.trySuggestion': string
    'connectors.ceAzure.servicePrincipal.heading': string
    'connectors.ceAzure.servicePrincipal.subHeading': string
    'connectors.ceAzure.steps.billingExports': string
    'connectors.ceAzure.steps.overview': string
    'connectors.ceAzure.steps.requirements': string
    'connectors.ceAzure.steps.servicePrincipal': string
    'connectors.ceAzure.steps.testConnection': string
    'connectors.ceAzure.testConnection.heading': string
    'connectors.ceAzure.testConnection.validatePermission': string
    'connectors.ceAzure.testConnection.verifyExport': string
    'connectors.ceAzure.validation.containerName': string
    'connectors.ceAzure.validation.directoryName': string
    'connectors.ceAzure.validation.reportName': string
    'connectors.ceAzure.validation.storageAccountName': string
    'connectors.ceAzure.validation.subscriptionId': string
    'connectors.ceAzure.validation.tenantId': string
    'connectors.ceGcp.billingExport.datasetIdLabel': string
    'connectors.ceGcp.billingExport.description': string
    'connectors.ceGcp.billingExport.followInstruction': string
    'connectors.ceGcp.billingExport.heading': string
    'connectors.ceGcp.billingExport.launchTemplate': string
    'connectors.ceGcp.billingExtention.heading': string
    'connectors.ceGcp.billingExtention.link1': string
    'connectors.ceGcp.billingExtention.link2': string
    'connectors.ceGcp.billingExtention.otherLinks': string
    'connectors.ceGcp.billingExtention.prerequisite': string
    'connectors.ceGcp.billingExtention.readMore': string
    'connectors.ceGcp.billingExtention.step1': string
    'connectors.ceGcp.billingExtention.step2': string
    'connectors.ceGcp.billingExtention.step3.p1': string
    'connectors.ceGcp.billingExtention.step3.p2': string
    'connectors.ceGcp.billingExtention.step3.p3': string
    'connectors.ceGcp.billingExtention.step4': string
    'connectors.ceGcp.billingExtention.step5': string
    'connectors.ceGcp.billingExtention.step6': string
    'connectors.ceGcp.billingExtention.step7': string
    'connectors.ceGcp.grantPermission.bigQueryButtonText': string
    'connectors.ceGcp.grantPermission.heading': string
    'connectors.ceGcp.grantPermission.step1': string
    'connectors.ceGcp.grantPermission.step2': string
    'connectors.ceGcp.grantPermission.step3': string
    'connectors.ceGcp.grantPermission.step4': string
    'connectors.ceGcp.grantPermission.step5': string
    'connectors.ceGcp.grantPermission.step6': string
    'connectors.ceGcp.grantPermission.step7': string
    'connectors.ceGcp.overview.heading': string
    'connectors.ceGcp.overview.projectIdLabel': string
    'connectors.ceGcp.testConnection.error': string
    'connectors.ceGcp.testConnection.heading': string
    'connectors.ceGcp.testConnection.step1': string
    'connectors.ceGcp.testConnection.step2': string
    'connectors.ceGcp.testConnection.step3': string
    'connectors.ceK8.infoText': string
    'connectors.ceK8.selectConnectorLabel': string
    'connectors.ceK8S.chooseRequirements.description': string
    'connectors.ceK8S.chooseRequirements.fixFeaturesDescription': string
    'connectors.ceK8S.chooseRequirements.heading': string
    'connectors.ceK8S.chooseRequirements.optimization.description': string
    'connectors.ceK8S.chooseRequirements.optimization.heading': string
    'connectors.ceK8S.chooseRequirements.optimization.subheading': string
    'connectors.ceK8S.chooseRequirements.subheading': string
    'connectors.ceK8S.chooseRequirements.visibility.description': string
    'connectors.ceK8S.chooseRequirements.visibility.heading': string
    'connectors.ceK8S.chooseRequirements.visibility.subheading': string
    'connectors.click': string
    'connectors.confirmDelete': string
    'connectors.confirmDeleteTitle': string
    'connectors.connectAndSave': string
    'connectors.connectorAlreadyExist': string
    'connectors.connectorDetails': string
    'connectors.connectorDetailsHeader': string
    'connectors.connectorNotFound': string
    'connectors.costVisibility': string
    'connectors.createFromYaml': string
    'connectors.createNewConnector': string
    'connectors.createdSuccessfully': string
    'connectors.creating': string
    'connectors.datadog.encryptedAPPKeyLabel': string
    'connectors.datadog.encryptedAPPKeyValidation': string
    'connectors.datadog.urlValidation': string
    'connectors.datadogConnectorDetails': string
    'connectors.delegate.configure': string
    'connectors.delegate.couldNotFetch': string
    'connectors.delegate.delegateSelectorAny': string
    'connectors.delegate.delegateSelectorSelective': string
    'connectors.delegate.delegateSelectors': string
    'connectors.delegate.delegateselectionPlaceholder': string
    'connectors.delegate.hearbeat': string
    'connectors.delegate.matchesSelectors': string
    'connectors.delegate.matchingDelegates': string
    'connectors.delegate.noDelegates': string
    'connectors.delegate.noMatchingDelegate': string
    'connectors.delegate.noMatchingDelegatesActive': string
    'connectors.delegate.testDelegateConnectivity': string
    'connectors.delegate.waitingForConnection': string
    'connectors.delegateInClusterInfo': string
    'connectors.docker.dockerHub': string
    'connectors.docker.dockerProvideType': string
    'connectors.docker.dockerRegistryURL': string
    'connectors.docker.dockerRepository': string
    'connectors.docker.harbour': string
    'connectors.docker.other': string
    'connectors.docker.quay': string
    'connectors.dynatrace.apiToken': string
    'connectors.dynatrace.apiTokenValidation': string
    'connectors.dynatrace.urlValidation': string
    'connectors.dynatraceConnectorDetails': string
    'connectors.dynatraceLabel': string
    'connectors.editConnector': string
    'connectors.encryptedAPIKeyLabel': string
    'connectors.encryptedAPIKeyValidation': string
    'connectors.gcrConnectorDetails': string
    'connectors.hashiCorpVault.appRoleId': string
    'connectors.hashiCorpVault.baseSecretPath': string
    'connectors.hashiCorpVault.default': string
    'connectors.hashiCorpVault.defaultVault': string
    'connectors.hashiCorpVault.engineName': string
    'connectors.hashiCorpVault.engineVersion': string
    'connectors.hashiCorpVault.readOnly': string
    'connectors.hashiCorpVault.readOnlyVault': string
    'connectors.hashiCorpVault.renewal': string
    'connectors.hashiCorpVault.secretId': string
    'connectors.hashiCorpVault.stepTwoName': string
    'connectors.hashiCorpVault.vaultUrl': string
    'connectors.hashicorpVaultDetails': string
    'connectors.helmRepo.helmRepoUrl': string
    'connectors.httpHelm.httpHelmRepoUrl': string
    'connectors.ifReq': string
    'connectors.jira.jiraUrl': string
    'connectors.k8.OIDCClientId': string
    'connectors.k8.OIDCIssuerUrl': string
    'connectors.k8.OIDCPassword': string
    'connectors.k8.OIDCScopes': string
    'connectors.k8.OIDCSecret': string
    'connectors.k8.OIDCUsername': string
    'connectors.k8.authLabels.OIDC': string
    'connectors.k8.authLabels.clientKeyCertificate': string
    'connectors.k8.clientCertificate': string
    'connectors.k8.clientKey': string
    'connectors.k8.clientKeyAlgorithm': string
    'connectors.k8.clientKeyAlgorithmPlaceholder': string
    'connectors.k8.clientKeyCACertificate': string
    'connectors.k8.clientKeyPassphrase': string
    'connectors.k8.clientSecretOptional': string
    'connectors.k8.delegateInClusterInfo': string
    'connectors.k8.delegateOutClusterInfo': string
    'connectors.k8.masterUrlLabel': string
    'connectors.k8.placeholder.masterUrl': string
    'connectors.k8.serviceAccountKey': string
    'connectors.k8.serviceAccountToken': string
    'connectors.k8.skipDefaultValidation': string
    'connectors.k8.validation.clientKeyAlgo': string
    'connectors.loginToMasterAccount': string
    'connectors.name': string
    'connectors.name_labels.AWS': string
    'connectors.name_labels.AppDynamics': string
    'connectors.name_labels.Artifactory': string
    'connectors.name_labels.Bitbucket': string
    'connectors.name_labels.Docker': string
    'connectors.name_labels.ECR': string
    'connectors.name_labels.GCP': string
    'connectors.name_labels.Git': string
    'connectors.name_labels.Github': string
    'connectors.name_labels.Gitlab': string
    'connectors.name_labels.HttpHelmRepo': string
    'connectors.name_labels.Kubernetes': string
    'connectors.name_labels.Nexus': string
    'connectors.name_labels.SecretManager': string
    'connectors.name_labels.Splunk': string
    'connectors.newArtifactRepository': string
    'connectors.newRelic.accountIdFieldLabel': string
    'connectors.newRelic.accountIdTooltip': string
    'connectors.newRelic.accountIdValidation': string
    'connectors.newRelic.products.fullStackObservability': string
    'connectors.newRelic.subTitle': string
    'connectors.newRelic.urlFieldLabel': string
    'connectors.newRelic.urlValidation': string
    'connectors.newRelicConnectorDetails': string
    'connectors.newRelicLabel': string
    'connectors.nexus.nexusServerUrl': string
    'connectors.prometheus.urlValidation': string
    'connectors.prometheusConnectorDetails': string
    'connectors.prometheusLabel': string
    'connectors.reportNameRequired': string
    'connectors.roleARN': string
    'connectors.scopeError': string
    'connectors.secretManagerDetails': string
    'connectors.selectConnector': string
    'connectors.selectConnectorLabel': string
    'connectors.showInstructions': string
    'connectors.specifyArtifactRepo': string
    'connectors.specifyArtifactRepoType': string
    'connectors.splunk.connectorDetailsHeader': string
    'connectors.splunkConnectorDetails': string
    'connectors.splunkLabel': string
    'connectors.stepFourName': string
    'connectors.stepThreeName': string
    'connectors.successfullCreate': string
    'connectors.successfullUpdate': string
    'connectors.successfullyCreated': string
    'connectors.sumoLogicConnectorDetails': string
    'connectors.sumologic.encryptedAccessIdLabel': string
    'connectors.sumologic.encryptedAccessIdValidation': string
    'connectors.sumologic.encryptedAccessKeyLabel': string
    'connectors.sumologic.encryptedAccessKeyValidation': string
    'connectors.sumologic.urlLabel': string
    'connectors.sumologic.urlValidation': string
    'connectors.tenantId': string
    'connectors.tenantIdRequired': string
    'connectors.testConnectionStep.errorDetails': string
    'connectors.testConnectionStep.executingOn': string
    'connectors.testConnectionStep.installNewDelegate': string
    'connectors.testConnectionStep.noDelegate': string
    'connectors.testConnectionStep.placeholderError': string
    'connectors.testConnectionStep.url.appD': string
    'connectors.testConnectionStep.url.artifactory': string
    'connectors.testConnectionStep.url.bitbucket': string
    'connectors.testConnectionStep.url.docker': string
    'connectors.testConnectionStep.url.gcr': string
    'connectors.testConnectionStep.url.k8s': string
    'connectors.testConnectionStep.url.nexus': string
    'connectors.testConnectionStep.url.splunk': string
    'connectors.testConnectionStep.url.vault': string
    'connectors.testConnectionStep.validationText.appD': string
    'connectors.testConnectionStep.validationText.artifactory': string
    'connectors.testConnectionStep.validationText.aws': string
    'connectors.testConnectionStep.validationText.awsSecretManager': string
    'connectors.testConnectionStep.validationText.azure': string
    'connectors.testConnectionStep.validationText.azureKeyVault': string
    'connectors.testConnectionStep.validationText.bitbucket': string
    'connectors.testConnectionStep.validationText.datadog': string
    'connectors.testConnectionStep.validationText.docker': string
    'connectors.testConnectionStep.validationText.gcp': string
    'connectors.testConnectionStep.validationText.gcr': string
    'connectors.testConnectionStep.validationText.git': string
    'connectors.testConnectionStep.validationText.github': string
    'connectors.testConnectionStep.validationText.gitlab': string
    'connectors.testConnectionStep.validationText.jira': string
    'connectors.testConnectionStep.validationText.k8s': string
    'connectors.testConnectionStep.validationText.nexus': string
    'connectors.testConnectionStep.validationText.splunk': string
    'connectors.testConnectionStep.validationText.sumologic': string
    'connectors.testConnectionStep.validationText.vault': string
    'connectors.testConnectionStep.verificationSuccessful': string
    'connectors.testConnectionStep.viewPermissions': string
    'connectors.testInProgress': string
    'connectors.title.appdynamics': string
    'connectors.title.artifactory': string
    'connectors.title.aws': string
    'connectors.title.awsCodeCommit': string
    'connectors.title.awsKms': string
    'connectors.title.awsSecretManager': string
    'connectors.title.azureKeyVault': string
    'connectors.title.bitbucketConnector': string
    'connectors.title.ceAws': string
    'connectors.title.ceAzureConnector': string
    'connectors.title.datadog': string
    'connectors.title.delegateSelection': string
    'connectors.title.gcpConnector': string
    'connectors.title.gitConnector': string
    'connectors.title.githubConnector': string
    'connectors.title.gitlabConnector': string
    'connectors.title.hashicorpVault': string
    'connectors.title.helmConnector': string
    'connectors.title.jira': string
    'connectors.title.k8sCluster': string
    'connectors.title.nexus': string
    'connectors.title.secretManager': string
    'connectors.title.splunk': string
    'connectors.title.sumologic': string
    'connectors.unableToCreateConnector': string
    'connectors.unableToUpdateConnector': string
    'connectors.updatedSuccessfully': string
    'connectors.updating': string
    'connectors.verifyConnection': string
    'userProfile.addSCM': string
    'userProfile.awsCredentials': string
    'userProfile.basicInformation': string
    'userProfile.changeDefaultAccountMessage': string
    'userProfile.changePassword': string
    'userProfile.confirmDelete': string
    'userProfile.confirmDeleteTitle': string
    'userProfile.confirmPassword': string
    'userProfile.currentPassword': string
    'userProfile.editProfile': string
    'userProfile.myGroups': string
    'userProfile.myProjects': string
    'userProfile.myTools': string
    'userProfile.mysourceCodeManagers': string
    'userProfile.newPassword': string
    'userProfile.newPasswordShouldMeetTheRequirements': string
    'userProfile.newPasswordShouldNotBeCurrentPassword': string
    'userProfile.passwordChangedSuccessfully': string
    'userProfile.passwordMatch': string
    'userProfile.passwordMustBeBetweenMinAndMax': string
    'userProfile.passwordReqs': string
    'userProfile.plusSCM': string
    'userProfile.qrCode': string
    'userProfile.requiredField': string
    'userProfile.scmCreateFail': string
    'userProfile.scmCreateSuccess': string
    'userProfile.scmDeleteFailure': string
    'userProfile.scmDeleteSuccess': string
    'userProfile.scmUpdateFail': string
    'userProfile.scmUpdateSuccess': string
    'userProfile.scmValidation.accessKey': string
    'userProfile.scmValidation.secretKey': string
    'userProfile.selectSCM': string
    'userProfile.selectedSCM': string
    'userProfile.twoFactor.description': string
    'userProfile.twoFactor.disableSuccess': string
    'userProfile.twoFactor.disableText': string
    'userProfile.twoFactor.disableTitle': string
    'userProfile.twoFactor.enableSuccess': string
    'userProfile.twoFactor.enableTitle': string
    'userProfile.twoFactor.resetTitle': string
    'userProfile.twofactorAuth': string
    'userProfile.userEditFail': string
    'userProfile.userEditSuccess': string
    'userProfile.yourCurrentPasswordIncorrect': string
    'gitsync.addFolder': string
    'gitsync.addNewHarnessFolderLabel': string
    'gitsync.configureHarnessFolder': string
    'gitsync.connectThroughDelegate': string
    'gitsync.connectThroughDelegateLabel': string
    'gitsync.connectThroughManager': string
    'gitsync.connectThroughManagerLabel': string
    'gitsync.connectToGitProvider': string
    'gitsync.connectivityModeLabel': string
    'gitsync.defaultBranch': string
    'gitsync.defaultFolder': string
    'gitsync.entitiesByRepositories': string
    'gitsync.fetchingBranches': string
    'gitsync.folderDetails': string
    'gitsync.gitEnabledBlockedTooltip': string
    'gitsync.harnessFolderHeader': string
    'gitsync.harnessFolderText': string
    'gitsync.label': string
    'gitsync.learnMore': string
    'gitsync.markAsDefault': string
    'gitsync.markAsDefaultLabel': string
    'gitsync.moveFolder': string
    'gitsync.pathToHarnessFolder': string
    'gitsync.rootFolderListHeader': string
    'gitsync.rootFolderUpdatedSuccessfully': string
    'gitsync.rootfolderLabel': string
    'gitsync.seeLess': string
    'gitsync.seeMore': string
    'gitsync.selectConnectivityMode': string
    'gitsync.selectDefaultBranch': string
    'gitsync.selectHarnessFolder': string
    'gitsync.successfullCreate': string
    'gitsync.successfullySavedConnectivityMode': string
    'dashboards.createFolder.folderDescriptionPlaceholder': string
    'dashboards.createFolder.folderNameValidation': string
    'dashboards.createFolder.folderPlaceholder': string
    'dashboards.createFolder.folderSubmitFail': string
    'dashboards.createFolder.stepOne': string
    'dashboards.createModal.dataSource': string
    'dashboards.createModal.descriptionPlaceholder': string
    'dashboards.createModal.fav': string
    'dashboards.createModal.namePlaceholder': string
    'dashboards.createModal.nameValidation': string
    'dashboards.createModal.sampleDesc': string
    'dashboards.createModal.sampleTitle': string
    'dashboards.createModal.stepOne': string
    'dashboards.createModal.submitFail': string
    'dashboards.createModal.view': string
    'dashboards.deleteFolder.confirmDeleteText': string
    'dashboards.deleteFolder.confirmDeleteTitle': string
    'dashboards.deleteFolder.success': string
    'dashboards.getStarted.subTextVideo1': string
    'dashboards.getStarted.subTextVideo2': string
    'dashboards.getStarted.subTextVideo3': string
    'dashboards.getStarted.title': string
    'dashboards.getStarted.video1Title': string
    'dashboards.getStarted.video2Title': string
    'dashboards.getStarted.video3Title': string
    'dashboards.homePage.folders': string
    'dashboards.homePage.noDashboardsAvailable': string
    'dashboards.homePage.noFolderAvailable': string
    'dashboards.homePage.noTags': string
    'dashboards.homePage.searchPlaceholder': string
    'dashboards.modules.harness': string
    'dashboards.resourceModal.folderDetail': string
    'dashboards.resourceModal.folders': string
    'dashboards.sideNav.byHarness': string
    'dashboards.sideNav.custom': string
    'dashboards.sideNav.noDashboard': string
    'projectsOrgs.aboutProject': string
    'projectsOrgs.aboutTitle': string
    'projectsOrgs.blank': string
    'projectsOrgs.capsAllValue': string
    'projectsOrgs.collaborator': string
    'projectsOrgs.collaboratorsTitle': string
    'projectsOrgs.confirmDelete': string
    'projectsOrgs.confirmDeleteTitle': string
    'projectsOrgs.createANewProject': string
    'projectsOrgs.createAProject': string
    'projectsOrgs.createOrSelectAProject': string
    'projectsOrgs.createOrgLoader': string
    'projectsOrgs.createProject': string
    'projectsOrgs.createProjectLoader': string
    'projectsOrgs.editTitle': string
    'projectsOrgs.enableModules': string
    'projectsOrgs.getStarted': string
    'projectsOrgs.goto': string
    'projectsOrgs.gotoBuilds': string
    'projectsOrgs.gotoCD': string
    'projectsOrgs.gotoCE': string
    'projectsOrgs.gotoCF': string
    'projectsOrgs.gotoCI': string
    'projectsOrgs.gotoCV': string
    'projectsOrgs.gotoCloudCosts': string
    'projectsOrgs.gotoDeployments': string
    'projectsOrgs.gotoFeatureFlags': string
    'projectsOrgs.invite': string
    'projectsOrgs.inviteCollab': string
    'projectsOrgs.manageAProject': string
    'projectsOrgs.manageOrg': string
    'projectsOrgs.manageProject': string
    'projectsOrgs.moduleSuccess': string
    'projectsOrgs.modulesEnabled': string
    'projectsOrgs.noCollaborators': string
    'projectsOrgs.noDataMessage': string
    'projectsOrgs.noModules': string
    'projectsOrgs.noOrganizations': string
    'projectsOrgs.noProjectRole': string
    'projectsOrgs.notAvailableForBeta': string
    'projectsOrgs.orgAccessControl': string
    'projectsOrgs.orgCreateSuccess': string
    'projectsOrgs.orgDeletedMessage': string
    'projectsOrgs.orgEditSuccess': string
    'projectsOrgs.orgName': string
    'projectsOrgs.orgResources.description1': string
    'projectsOrgs.orgResources.description2': string
    'projectsOrgs.orgResources.label': string
    'projectsOrgs.pendingInvitation': string
    'projectsOrgs.pendingUsers': string
    'projectsOrgs.placeholder': string
    'projectsOrgs.projectCreateSuccess': string
    'projectsOrgs.projectDeleteSuccess': string
    'projectsOrgs.projectEdit': string
    'projectsOrgs.projectEditSuccess': string
    'projectsOrgs.projectInviteSuccess': string
    'projectsOrgs.projectsInOrg': string
    'projectsOrgs.purposeList.cd': string
    'projectsOrgs.purposeList.ce': string
    'projectsOrgs.purposeList.cf': string
    'projectsOrgs.purposeList.change': string
    'projectsOrgs.purposeList.ci': string
    'projectsOrgs.purposeList.continuous': string
    'projectsOrgs.purposeList.cv': string
    'projectsOrgs.purposeList.delivery': string
    'projectsOrgs.purposeList.descriptionCD': string
    'projectsOrgs.purposeList.descriptionCE': string
    'projectsOrgs.purposeList.descriptionCF': string
    'projectsOrgs.purposeList.descriptionCI': string
    'projectsOrgs.purposeList.descriptionCV': string
    'projectsOrgs.purposeList.efficiency': string
    'projectsOrgs.purposeList.features': string
    'projectsOrgs.purposeList.integration': string
    'projectsOrgs.purposeList.linkcv': string
    'projectsOrgs.purposeList.linkcvChangeSources': string
    'projectsOrgs.purposeList.moduleSuccess': string
    'projectsOrgs.purposeList.name': string
    'projectsOrgs.purposeList.selectAModule': string
    'projectsOrgs.purposeList.time': string
    'projectsOrgs.purposeList.verification': string
    'projectsOrgs.recentActivities': string
    'projectsOrgs.requestAccess': string
    'projectsOrgs.roleAssigned': string
    'projectsOrgs.roleLabel': string
    'projectsOrgs.saveAndClose': string
    'projectsOrgs.search': string
    'projectsOrgs.searchPlaceHolder': string
    'projectsOrgs.searchProjectPlaceHolder': string
    'projectsOrgs.selectAnExistingProject': string
    'projectsOrgs.tabOrgs': string
    'projectsOrgs.urlMessageOrg': string
    'projectsOrgs.urlMessageProject': string
    'projectsOrgs.viewAllProjects': string
    'projectsOrgs.viewProjects': string
    'projectsOrgs.welcome': string
    'projectsOrgs.welcomeSecondLine': string
    'projectsOrgs.youHaveNoProjects': string
    'pipeline.aboutYourStage.stageNamePlaceholder': string
    'pipeline.addStage.description': string
    'pipeline.addStage.title': string
    'pipeline.and': string
    'pipeline.approvalStage.settingUpStage': string
    'pipeline.approvalStep.addApproverInputs': string
    'pipeline.approvalStep.addUserGroups': string
    'pipeline.approvalStep.approverInputs': string
    'pipeline.approvalStep.approvers': string
    'pipeline.approvalStep.approversWithColon': string
    'pipeline.approvalStep.disallowPipelineExecutor': string
    'pipeline.approvalStep.disallowedApproverExecution': string
    'pipeline.approvalStep.ensureUserGroups': string
    'pipeline.approvalStep.execution.inputsTitle': string
    'pipeline.approvalStep.execution.statusMsg': string
    'pipeline.approvalStep.fetchUserGroupsFailed': string
    'pipeline.approvalStep.fetchingUserGroups': string
    'pipeline.approvalStep.includePipelineExecutionHistory': string
    'pipeline.approvalStep.message': string
    'pipeline.approvalStep.minimumCount': string
    'pipeline.approvalStep.notAuthorizedExecution': string
    'pipeline.approvalStep.status.APPROVE': string
    'pipeline.approvalStep.status.REJECT': string
    'pipeline.approvalStep.validation.approvalMessage': string
    'pipeline.approvalStep.validation.minimumCountOne': string
    'pipeline.approvalStep.validation.minimumCountRequired': string
    'pipeline.approvalStep.validation.userGroups': string
    'pipeline.artifactsSelection.artifactDetails': string
    'pipeline.artifactsSelection.artifactTyperequired': string
    'pipeline.artifactsSelection.existingDocker.enterTagRegex': string
    'pipeline.artifactsSelection.existingDocker.imageNamePlaceholder': string
    'pipeline.artifactsSelection.existingDocker.sidecarId': string
    'pipeline.artifactsSelection.existingDocker.sidecarIdPlaceholder': string
    'pipeline.artifactsSelection.validation.imagePath': string
    'pipeline.artifactsSelection.validation.region': string
    'pipeline.artifactsSelection.validation.sidecarId': string
    'pipeline.artifactsSelection.validation.tag': string
    'pipeline.artifactsSelection.validation.tagRegex': string
    'pipeline.barrierStep.barrierReference': string
    'pipeline.barrierStep.barrierReferencePlaceholder': string
    'pipeline.barrierStep.barrierReferenceRequired': string
    'pipeline.barriers.addBarrier': string
    'pipeline.barriers.flowControl': string
    'pipeline.barriers.syncBarriers': string
    'pipeline.barriers.tooltips.barrierWaiting': string
    'pipeline.barriers.tooltips.timeout': string
    'pipeline.barriers.validation.barrierNamerequired': string
    'pipeline.buildRepo': string
    'pipeline.ciCodebase.prCloneStrategy': string
    'pipeline.clickHere': string
    'pipeline.closeStepConfig': string
    'pipeline.collapseIsDisabledWhileStageIsRunning': string
    'pipeline.conditionalExecution.belowExpression': string
    'pipeline.conditionalExecution.condition': string
    'pipeline.conditionalExecution.statusOption.all': string
    'pipeline.conditionalExecution.statusOption.failure': string
    'pipeline.conditionalExecution.statusOption.success': string
    'pipeline.conditionalExecution.subTitle': string
    'pipeline.conditionalExecution.title': string
    'pipeline.conditionalExecution.toolTip.resolvedVariables': string
    'pipeline.conditionalExecution.toolTip.stageTitle': string
    'pipeline.conditionalExecution.toolTip.stepTitle': string
    'pipeline.createANewPipeline': string
    'pipeline.createPipeline.learnMore': string
    'pipeline.createPipeline.setupHeader': string
    'pipeline.createPipeline.setupLater': string
    'pipeline.createPipeline.setupSubtitle': string
    'pipeline.dashboards.activeBuilds': string
    'pipeline.dashboards.activeDeployments': string
    'pipeline.dashboards.buildExecutions': string
    'pipeline.dashboards.buildHealth': string
    'pipeline.dashboards.failedBuilds': string
    'pipeline.dashboards.failedDeployments': string
    'pipeline.dashboards.meanDuration': string
    'pipeline.dashboards.medianDuration': string
    'pipeline.dashboards.noActiveBuilds': string
    'pipeline.dashboards.noActiveDeployments': string
    'pipeline.dashboards.noFailedBuilds': string
    'pipeline.dashboards.noFailedDeployments': string
    'pipeline.dashboards.noPendingDeployments': string
    'pipeline.dashboards.noRepositories': string
    'pipeline.dashboards.noWorkloads': string
    'pipeline.dashboards.pendingDeployments': string
    'pipeline.dashboards.pipelineHealth': string
    'pipeline.dashboards.successRate': string
    'pipeline.dashboards.successfulBuilds': string
    'pipeline.dashboards.testCycleTimeSaved': string
    'pipeline.dashboards.totalBuilds': string
    'pipeline.dashboards.totalExecutions': string
    'pipeline.dashboards.workloads': string
    'pipeline.depth': string
    'pipeline.discard': string
    'pipeline.duration': string
    'pipeline.enableVerificationOptions': string
    'pipeline.estimatedTimeRemaining': string
    'pipeline.execution.actions.abortPipeline': string
    'pipeline.execution.actions.abortStage': string
    'pipeline.execution.actions.downloadLogs': string
    'pipeline.execution.actions.pausePipeline': string
    'pipeline.execution.actions.pauseStage': string
    'pipeline.execution.actions.rerunPipeline': string
    'pipeline.execution.actions.rerunStage': string
    'pipeline.execution.actions.resumePipeline': string
    'pipeline.execution.actions.resumeStage': string
    'pipeline.execution.currentExecution': string
    'pipeline.execution.ignoreFailedWarningText': string
    'pipeline.execution.iotab.noInputText': string
    'pipeline.execution.iotab.noOutputText': string
    'pipeline.execution.layouts.bottom': string
    'pipeline.execution.layouts.float': string
    'pipeline.execution.layouts.minimize': string
    'pipeline.execution.layouts.right': string
    'pipeline.execution.noInputsText': string
    'pipeline.execution.pipelineActionMessages.abortedMessage': string
    'pipeline.execution.pipelineActionMessages.pausedMessage': string
    'pipeline.execution.pipelineActionMessages.resumedMessage': string
    'pipeline.execution.retryStepCount': string
    'pipeline.execution.stageActionMessages.abortedMessage': string
    'pipeline.execution.stageActionMessages.pausedMessage': string
    'pipeline.execution.stageActionMessages.resumedMessage': string
    'pipeline.execution.stageTitlePrefix': string
    'pipeline.execution.stagesExecuted': string
    'pipeline.execution.stepTitlePrefix': string
    'pipeline.execution.timePrefix': string
    'pipeline.execution.upcomingStagesPrefix': string
    'pipeline.executionFilters.labels.Aborted': string
    'pipeline.executionFilters.labels.ApprovalRejected': string
    'pipeline.executionFilters.labels.ApprovalWaiting': string
    'pipeline.executionFilters.labels.Expired': string
    'pipeline.executionFilters.labels.Failed': string
    'pipeline.executionFilters.labels.InterventionWaiting': string
    'pipeline.executionFilters.labels.Paused': string
    'pipeline.executionFilters.labels.Running': string
    'pipeline.executionFilters.labels.Success': string
    'pipeline.executionFilters.labels.Waiting': string
    'pipeline.executionStatus.Aborted': string
    'pipeline.executionStatus.Aborting': string
    'pipeline.executionStatus.ApprovalRejected': string
    'pipeline.executionStatus.Error': string
    'pipeline.executionStatus.Expired': string
    'pipeline.executionStatus.Failed': string
    'pipeline.executionStatus.NotStarted': string
    'pipeline.executionStatus.Paused': string
    'pipeline.executionStatus.Pausing': string
    'pipeline.executionStatus.Queued': string
    'pipeline.executionStatus.Running': string
    'pipeline.executionStatus.Skipped': string
    'pipeline.executionStatus.Starting': string
    'pipeline.executionStatus.Success': string
    'pipeline.executionStatus.Suspended': string
    'pipeline.executionStatus.Unknown': string
    'pipeline.executionStatus.Waiting': string
    'pipeline.executionStrategy.executionStrategies': string
    'pipeline.executionStrategy.strategies.blueGreen.description': string
    'pipeline.executionStrategy.strategies.blueGreen.learnMoreLink': string
    'pipeline.executionStrategy.strategies.blueGreen.steps.step1.description': string
    'pipeline.executionStrategy.strategies.blueGreen.steps.step2.description': string
    'pipeline.executionStrategy.strategies.blueGreen.steps.step3.description': string
    'pipeline.executionStrategy.strategies.canary.description': string
    'pipeline.executionStrategy.strategies.canary.learnMoreLink': string
    'pipeline.executionStrategy.strategies.canary.steps.step1.description': string
    'pipeline.executionStrategy.strategies.canary.steps.step1.title': string
    'pipeline.executionStrategy.strategies.canary.steps.step2.description': string
    'pipeline.executionStrategy.strategies.canary.steps.step2.title': string
    'pipeline.executionStrategy.strategies.canary.steps.step3.description': string
    'pipeline.executionStrategy.strategies.canary.steps.step3.title': string
    'pipeline.executionStrategy.strategies.common.steps.step1.title': string
    'pipeline.executionStrategy.strategies.common.steps.step2.title': string
    'pipeline.executionStrategy.strategies.common.steps.step3.title': string
    'pipeline.executionStrategy.strategies.default.actualName': string
    'pipeline.executionStrategy.strategies.default.description': string
    'pipeline.executionStrategy.strategies.default.displayName': string
    'pipeline.executionStrategy.strategies.default.learnMoreLink': string
    'pipeline.executionStrategy.strategies.rolling.description': string
    'pipeline.executionStrategy.strategies.rolling.learnMoreLink': string
    'pipeline.executionStrategy.strategies.rolling.steps.step1.description': string
    'pipeline.executionStrategy.strategies.rolling.steps.step2.description': string
    'pipeline.executionStrategy.strategies.rolling.steps.step3.description': string
    'pipeline.executionStrategy.useStrategy': string
    'pipeline.executionTarget': string
    'pipeline.failureStrategies.addedAllStrategies': string
    'pipeline.failureStrategies.errorTypeLabels.AllErrors': string
    'pipeline.failureStrategies.errorTypeLabels.Authentication': string
    'pipeline.failureStrategies.errorTypeLabels.Authorization': string
    'pipeline.failureStrategies.errorTypeLabels.Connectivity': string
    'pipeline.failureStrategies.errorTypeLabels.DelegateProvisioning': string
    'pipeline.failureStrategies.errorTypeLabels.Timeout': string
    'pipeline.failureStrategies.errorTypeLabels.Unknown': string
    'pipeline.failureStrategies.errorTypeLabels.Verification': string
    'pipeline.failureStrategies.fieldLabels.onRetryFailureLabel': string
    'pipeline.failureStrategies.fieldLabels.onTimeoutLabel': string
    'pipeline.failureStrategies.fieldLabels.retryCountLabel': string
    'pipeline.failureStrategies.fieldLabels.retryIntervalsLabel': string
    'pipeline.failureStrategies.helpText': string
    'pipeline.failureStrategies.onFailureOfType': string
    'pipeline.failureStrategies.performAction': string
    'pipeline.failureStrategies.strategiesLabel.Abort': string
    'pipeline.failureStrategies.strategiesLabel.Ignore': string
    'pipeline.failureStrategies.strategiesLabel.ManualIntervention': string
    'pipeline.failureStrategies.strategiesLabel.MarkAsSuccess': string
    'pipeline.failureStrategies.strategiesLabel.Retry': string
    'pipeline.failureStrategies.strategiesLabel.StageRollback': string
    'pipeline.failureStrategies.strategiesLabel.StepGroupRollback': string
    'pipeline.failureStrategies.tabHasErrors': string
    'pipeline.failureStrategies.title': string
    'pipeline.failureStrategies.validation.actionRequired': string
    'pipeline.failureStrategies.validation.errorsMinimum': string
    'pipeline.failureStrategies.validation.errorsRequired': string
    'pipeline.failureStrategies.validation.onRetryFailureRequired': string
    'pipeline.failureStrategies.validation.onTimeoutRequired': string
    'pipeline.failureStrategies.validation.retryCountInteger': string
    'pipeline.failureStrategies.validation.retryCountMaximum': string
    'pipeline.failureStrategies.validation.retryCountMinimum': string
    'pipeline.failureStrategies.validation.retryCountRequired': string
    'pipeline.failureStrategies.validation.retryIntervalMaxmimum': string
    'pipeline.failureStrategies.validation.retryIntervalMinimum': string
    'pipeline.failureStrategies.validation.retryIntervalRequired': string
    'pipeline.failureStrategies.validation.timeoutRequired': string
    'pipeline.filters.builtTypePlaceholder': string
    'pipeline.filters.deploymentTypePlaceholder': string
    'pipeline.filters.environmentPlaceholder': string
    'pipeline.filters.pipelineNamePlaceholder': string
    'pipeline.filters.servicePlaceholder': string
    'pipeline.gitDetails': string
    'pipeline.gitExperience.noPipelineFound': string
    'pipeline.gitExperience.selectDiffBranch': string
    'pipeline.gitExperience.selectRepoBranch': string
    'pipeline.gitExperience.skipNow': string
    'pipeline.gitRepos': string
    'pipeline.imagePathLabel': string
    'pipeline.infraSpecifications.initTimeout': string
    'pipeline.infraSpecifications.initTimeoutPlaceholder': string
    'pipeline.infraSpecifications.namespacePlaceholder': string
    'pipeline.infraSpecifications.serviceAccountName': string
    'pipeline.infraSpecifications.serviceAccountNamePlaceholder': string
    'pipeline.inputSets.aboutInputSets': string
    'pipeline.inputSets.applyInputSet': string
    'pipeline.inputSets.applyInputSets': string
    'pipeline.inputSets.applyingInputSets': string
    'pipeline.inputSets.inputSetPlaceholder': string
    'pipeline.inputSets.noRuntimeInputsCurrently': string
    'pipeline.inputSets.noRuntimeInputsWhileExecution': string
    'pipeline.inputSets.selectPlaceholder': string
    'pipeline.jiraApprovalStep.allConditions': string
    'pipeline.jiraApprovalStep.anyCondition': string
    'pipeline.jiraApprovalStep.approvalCriteria': string
    'pipeline.jiraApprovalStep.connectToJira': string
    'pipeline.jiraApprovalStep.connectorRef': string
    'pipeline.jiraApprovalStep.execution.allConditionsMsg': string
    'pipeline.jiraApprovalStep.execution.anyConditionsMsg': string
    'pipeline.jiraApprovalStep.execution.conditions.equals': string
    'pipeline.jiraApprovalStep.execution.conditions.in': string
    'pipeline.jiraApprovalStep.execution.conditions.not_equals': string
    'pipeline.jiraApprovalStep.execution.conditions.not_in': string
    'pipeline.jiraApprovalStep.execution.criteriaMsg': string
    'pipeline.jiraApprovalStep.execution.jiraTicket': string
    'pipeline.jiraApprovalStep.execution.wasApproved': string
    'pipeline.jiraApprovalStep.execution.wasRejected': string
    'pipeline.jiraApprovalStep.fetchIssueTypesError': string
    'pipeline.jiraApprovalStep.fetchProjectsError': string
    'pipeline.jiraApprovalStep.fetchingFields': string
    'pipeline.jiraApprovalStep.fetchingIssueTypePlaceholder': string
    'pipeline.jiraApprovalStep.fetchingProjectsPlaceholder': string
    'pipeline.jiraApprovalStep.issueKey': string
    'pipeline.jiraApprovalStep.issueKeyPlaceholder': string
    'pipeline.jiraApprovalStep.issueType': string
    'pipeline.jiraApprovalStep.issueTypePlaceholder': string
    'pipeline.jiraApprovalStep.jexlExpressionApprovalCriteria': string
    'pipeline.jiraApprovalStep.jexlExpressionLabelApproval': string
    'pipeline.jiraApprovalStep.jexlExpressionLabelRejection': string
    'pipeline.jiraApprovalStep.jexlExpressionPlaceholder': string
    'pipeline.jiraApprovalStep.jexlExpressionRejectionCriteria': string
    'pipeline.jiraApprovalStep.jiraConnectorPlaceholder': string
    'pipeline.jiraApprovalStep.jiraField': string
    'pipeline.jiraApprovalStep.match': string
    'pipeline.jiraApprovalStep.project': string
    'pipeline.jiraApprovalStep.rejectionCriteria': string
    'pipeline.jiraApprovalStep.rejectionCriteriaOptional': string
    'pipeline.jiraApprovalStep.validations.approvalCriteriaCondition': string
    'pipeline.jiraApprovalStep.validations.connectorRef': string
    'pipeline.jiraApprovalStep.validations.expression': string
    'pipeline.jiraApprovalStep.validations.issueKey': string
    'pipeline.jiraApprovalStep.validations.issueType': string
    'pipeline.jiraApprovalStep.validations.project': string
    'pipeline.jiraCreateStep.addFields': string
    'pipeline.jiraCreateStep.fetchingFields': string
    'pipeline.jiraCreateStep.fieldSelectorAdd': string
    'pipeline.jiraCreateStep.fields': string
    'pipeline.jiraCreateStep.fieldsSelectorPlaceholder': string
    'pipeline.jiraCreateStep.provideFieldList': string
    'pipeline.jiraCreateStep.selectFieldListHelp': string
    'pipeline.jiraCreateStep.selectFieldsHeading': string
    'pipeline.jiraCreateStep.selectFromFieldList': string
    'pipeline.jiraCreateStep.selectProject': string
    'pipeline.jiraCreateStep.summaryPlaceholder': string
    'pipeline.jiraCreateStep.validations.summary': string
    'pipeline.jiraUpdateStep.fetchingStatus': string
    'pipeline.jiraUpdateStep.projectIssueTypeDisclaimer': string
    'pipeline.jiraUpdateStep.selectStatus': string
    'pipeline.jiraUpdateStep.statusTransitionAccordion': string
    'pipeline.jiraUpdateStep.transitionLabel': string
    'pipeline.jiraUpdateStep.transitionPlaceholder': string
    'pipeline.jiraUpdateStep.validations.status': string
    'pipeline.keyPlaceholder': string
    'pipeline.lastSevenDays': string
    'pipeline.logs.errorText': string
    'pipeline.logs.retry': string
    'pipeline.logs.sectionName': string
    'pipeline.manifestToConnectorLabelMap.AWSLabel': string
    'pipeline.manifestToConnectorLabelMap.GCPLabel': string
    'pipeline.manifestType.bitBucketLabel': string
    'pipeline.manifestType.branchPlaceholder': string
    'pipeline.manifestType.bucketName': string
    'pipeline.manifestType.bucketNamePlaceholder': string
    'pipeline.manifestType.bucketNameRequired': string
    'pipeline.manifestType.bucketPlaceHolder': string
    'pipeline.manifestType.chartPathPlaceholder': string
    'pipeline.manifestType.chartPathRequired': string
    'pipeline.manifestType.commandFlagRequired': string
    'pipeline.manifestType.commitId': string
    'pipeline.manifestType.commitPlaceholder': string
    'pipeline.manifestType.filePathPlaceholder': string
    'pipeline.manifestType.folderPathRequired': string
    'pipeline.manifestType.gitConnectorLabel': string
    'pipeline.manifestType.gitFetchTypeLabel': string
    'pipeline.manifestType.helmCommandFlagLabel': string
    'pipeline.manifestType.helmCommandFlags': string
    'pipeline.manifestType.helmCommandType': string
    'pipeline.manifestType.helmCommandTypePlaceholder': string
    'pipeline.manifestType.helmSkipResourceVersion': string
    'pipeline.manifestType.helmVersionRequired': string
    'pipeline.manifestType.http.chartName': string
    'pipeline.manifestType.http.chartNamePlaceHolder': string
    'pipeline.manifestType.http.chartNameRequired': string
    'pipeline.manifestType.http.chartVersion': string
    'pipeline.manifestType.http.chartVersionPlaceHolder': string
    'pipeline.manifestType.http.chartVersionRequired': string
    'pipeline.manifestType.httpHelmRepoConnectorLabel': string
    'pipeline.manifestType.kustomizeFolderPath': string
    'pipeline.manifestType.kustomizeFolderPathPlaceholder': string
    'pipeline.manifestType.kustomizeFolderPathRequired': string
    'pipeline.manifestType.kustomizePathHelperText': string
    'pipeline.manifestType.kustomizePathRequired': string
    'pipeline.manifestType.kustomizePluginPathPlaceholder': string
    'pipeline.manifestType.manifestDetails': string
    'pipeline.manifestType.manifestIdentifier': string
    'pipeline.manifestType.manifestPathPlaceholder': string
    'pipeline.manifestType.manifestPlaceholder': string
    'pipeline.manifestType.manifestRepoType': string
    'pipeline.manifestType.manifestSource': string
    'pipeline.manifestType.manifestTyperequired': string
    'pipeline.manifestType.osTemplatePath': string
    'pipeline.manifestType.osTemplatePathPlaceHolder': string
    'pipeline.manifestType.osTemplatePathRequired': string
    'pipeline.manifestType.path': string
    'pipeline.manifestType.pathPlaceholder': string
    'pipeline.manifestType.pathRequired': string
    'pipeline.manifestType.pluginPathHelperText': string
    'pipeline.manifestType.repoNamePlaceholder': string
    'pipeline.manifestType.selectManifestStore': string
    'pipeline.manifestType.specifyManifestRepoType': string
    'pipeline.manifestType.specifyManifestStore': string
    'pipeline.manifestTypeLabels.HelmChartLabel': string
    'pipeline.manifestTypeLabels.K8sManifest': string
    'pipeline.manifestTypeLabels.KustomizeLabel': string
    'pipeline.manifestTypeLabels.OpenshiftParam': string
    'pipeline.manifestTypeLabels.OpenshiftTemplate': string
    'pipeline.manifestTypeLabels.ValuesYaml': string
    'pipeline.moveStage.description': string
    'pipeline.moveStage.title': string
    'pipeline.myBuildsText': string
    'pipeline.myDeploymentsText': string
    'pipeline.neverRan': string
    'pipeline.noBuckets': string
    'pipeline.noBuildsText': string
    'pipeline.noDeploymentText': string
    'pipeline.noPipelineText': string
    'pipeline.onlyPositiveInteger': string
    'pipeline.operatorPlaceholder': string
    'pipeline.outOf': string
    'pipeline.overrideSets.configure': string
    'pipeline.overrideSets.createOverrideSet': string
    'pipeline.overrideSets.createOverrideSetPlus': string
    'pipeline.overrideSets.overrideSetError': string
    'pipeline.overrideSets.overrideSetInfo': string
    'pipeline.overrideSets.overrideSetPlaceholder': string
    'pipeline.pipelineSteps.approvalStageDescription': string
    'pipeline.pipelineSteps.chainedPipeline': string
    'pipeline.pipelineSteps.customStage': string
    'pipeline.pipelineSteps.deployStageDescription': string
    'pipeline.pipelineSteps.featureStageDescription': string
    'pipeline.poweredByHarness': string
    'pipeline.progressPercentage': string
    'pipeline.provisionerSteps': string
    'pipeline.regionPlaceholder': string
    'pipeline.repositoryUrlPlaceholder': string
    'pipeline.resourceConstraints.currentlyExecuting': string
    'pipeline.resourceConstraints.infoText': string
    'pipeline.resourceConstraints.title': string
    'pipeline.resourceConstraints.yourPipeline': string
    'pipeline.runAPipeline': string
    'pipeline.runModalNoPipelineText': string
    'pipeline.savingInProgress': string
    'pipeline.scriptInputVariables': string
    'pipeline.scriptOutputVariables': string
    'pipeline.selectOrCreateForm.description': string
    'pipeline.selectOrCreatePipeline.pipelineNameRequired': string
    'pipeline.selectOrCreatePipeline.selectAPipeline': string
    'pipeline.selectOrCreatePipeline.setupHeader': string
    'pipeline.selectStagePlaceholder': string
    'pipeline.serviceDependenciesText': string
    'pipeline.serviceDependencyText': string
    'pipeline.sslVerify': string
    'pipeline.startTime': string
    'pipeline.startedOn': string
    'pipeline.stepCommonFields.ifNotPresent': string
    'pipeline.stepCommonFields.runAsUser': string
    'pipeline.stepCommonFields.validation.mustBeANumber': string
    'pipeline.stepConfigHasChanges': string
    'pipeline.stepDescription.Barrier': string
    'pipeline.stepDescription.DockerHub': string
    'pipeline.stepDescription.ECR': string
    'pipeline.stepDescription.FlagConfiguration': string
    'pipeline.stepDescription.GCR': string
    'pipeline.stepDescription.GCS': string
    'pipeline.stepDescription.HTTP': string
    'pipeline.stepDescription.HarnessApproval': string
    'pipeline.stepDescription.JFrogArtifactory': string
    'pipeline.stepDescription.JiraApproval': string
    'pipeline.stepDescription.JiraCreate': string
    'pipeline.stepDescription.JiraUpdate': string
    'pipeline.stepDescription.K8sApply': string
    'pipeline.stepDescription.K8sBGSwapServices': string
    'pipeline.stepDescription.K8sBlueGreenDeploy': string
    'pipeline.stepDescription.K8sCanaryDelete': string
    'pipeline.stepDescription.K8sCanaryDeploy': string
    'pipeline.stepDescription.K8sDelete': string
    'pipeline.stepDescription.K8sRollingDeploy': string
    'pipeline.stepDescription.K8sRollingRollback': string
    'pipeline.stepDescription.K8sScale': string
    'pipeline.stepDescription.Plugin': string
    'pipeline.stepDescription.ResourceConstraint': string
    'pipeline.stepDescription.RestoreCacheGCS': string
    'pipeline.stepDescription.RestoreCacheS3': string
    'pipeline.stepDescription.Run': string
    'pipeline.stepDescription.RunTests': string
    'pipeline.stepDescription.S3': string
    'pipeline.stepDescription.SHELLSCRIPT': string
    'pipeline.stepDescription.SaveCacheGCS': string
    'pipeline.stepDescription.SaveCacheS3': string
    'pipeline.stepDescription.TerraformApply': string
    'pipeline.stepDescription.TerraformDestroy': string
    'pipeline.stepDescription.TerraformPlan': string
    'pipeline.stepDescription.TerraformRollback': string
    'pipeline.stepDescription.Verify': string
    'pipeline.stepDetails': string
    'pipeline.stepLabel': string
    'pipeline.tagDependencyRequired': string
    'pipeline.targets.title': string
    'pipeline.testsReports.callgraphField.class': string
    'pipeline.testsReports.callgraphField.file': string
    'pipeline.testsReports.callgraphField.method': string
    'pipeline.testsReports.callgraphField.package': string
    'pipeline.testsReports.callgraphField.params': string
    'pipeline.testsReports.callgraphField.type': string
    'pipeline.testsReports.callgraphTitle': string
    'pipeline.testsReports.calls': string
    'pipeline.testsReports.changedSourceMethods': string
    'pipeline.testsReports.changedTestMethods': string
    'pipeline.testsReports.className': string
    'pipeline.testsReports.codeChanges': string
    'pipeline.testsReports.commitId': string
    'pipeline.testsReports.consoleOutput': string
    'pipeline.testsReports.correlatedWithCodeChanges': string
    'pipeline.testsReports.coverage': string
    'pipeline.testsReports.coverageInfo': string
    'pipeline.testsReports.description': string
    'pipeline.testsReports.directCall': string
    'pipeline.testsReports.executionOverview': string
    'pipeline.testsReports.expandGraph': string
    'pipeline.testsReports.failedTests': string
    'pipeline.testsReports.failedWithColon': string
    'pipeline.testsReports.failureMessage': string
    'pipeline.testsReports.filename': string
    'pipeline.testsReports.hangTight': string
    'pipeline.testsReports.indirectCall': string
    'pipeline.testsReports.learnMore': string
    'pipeline.testsReports.newTests': string
    'pipeline.testsReports.noFailedTestsFound': string
    'pipeline.testsReports.notfound': string
    'pipeline.testsReports.nothing': string
    'pipeline.testsReports.numberOfSelectedTests': string
    'pipeline.testsReports.onlyUncoveredFiles': string
    'pipeline.testsReports.resource': string
    'pipeline.testsReports.result': string
    'pipeline.testsReports.resultInfo': string
    'pipeline.testsReports.resultLabel': string
    'pipeline.testsReports.selectedTestMethods': string
    'pipeline.testsReports.selectionBreakdown': string
    'pipeline.testsReports.selectionBreakdownInfo': string
    'pipeline.testsReports.showOnlyFailedTests': string
    'pipeline.testsReports.skipped': string
    'pipeline.testsReports.skippedWithColon': string
    'pipeline.testsReports.sortBy': string
    'pipeline.testsReports.sourceMethod': string
    'pipeline.testsReports.sourceMethods': string
    'pipeline.testsReports.stackTrace': string
    'pipeline.testsReports.status': string
    'pipeline.testsReports.successWithColon': string
    'pipeline.testsReports.testCaseName': string
    'pipeline.testsReports.testCasesExecution': string
    'pipeline.testsReports.testCasesExecutionInfo': string
    'pipeline.testsReports.testDuration': string
    'pipeline.testsReports.testExecutions': string
    'pipeline.testsReports.testMethods': string
    'pipeline.testsReports.testSuite': string
    'pipeline.testsReports.timeSaved': string
    'pipeline.testsReports.totalDuration': string
    'pipeline.testsReports.totalExecutedTest': string
    'pipeline.testsReports.totalTests': string
    'pipeline.testsReports.totalWithColon': string
    'pipeline.testsReports.type': string
    'pipeline.testsReports.unchangedMethods': string
    'pipeline.testsReports.updatedTests': string
    'pipeline.testsReports.viewCallgraph': string
    'pipeline.testsReports.willBeDisplayedIfAvailable': string
    'pipeline.timeRemainingSuffix': string
    'pipeline.triggers.aboutTriggers': string
    'pipeline.triggers.activityActivation': string
    'pipeline.triggers.activityDays': string
    'pipeline.triggers.addNewTrigger': string
    'pipeline.triggers.artifactTriggerConfigPanel.artifact': string
    'pipeline.triggers.artifactTriggerConfigPanel.artifactRepository': string
    'pipeline.triggers.artifactTriggerConfigPanel.buildTag': string
    'pipeline.triggers.artifactTriggerConfigPanel.chartVersionRuntimeInput': string
    'pipeline.triggers.artifactTriggerConfigPanel.configureArtifactRuntimeInputs': string
    'pipeline.triggers.artifactTriggerConfigPanel.configureInput': string
    'pipeline.triggers.artifactTriggerConfigPanel.configureInputs': string
    'pipeline.triggers.artifactTriggerConfigPanel.hasRuntimeInputs': string
    'pipeline.triggers.artifactTriggerConfigPanel.listenOnNewArtifact': string
    'pipeline.triggers.artifactTriggerConfigPanel.noArtifacts': string
    'pipeline.triggers.artifactTriggerConfigPanel.noSelectableArtifactsFound': string
    'pipeline.triggers.artifactTriggerConfigPanel.plusSelect': string
    'pipeline.triggers.artifactTriggerConfigPanel.runtimeInput': string
    'pipeline.triggers.artifactTriggerConfigPanel.selectAManifest': string
    'pipeline.triggers.artifactTriggerConfigPanel.selectAnArtifact': string
    'pipeline.triggers.cannotParseInputValues': string
    'pipeline.triggers.cannotParseTriggersData': string
    'pipeline.triggers.conditionsPanel.artifactBuild': string
    'pipeline.triggers.conditionsPanel.attribute': string
    'pipeline.triggers.conditionsPanel.branchName': string
    'pipeline.triggers.conditionsPanel.changedFiles': string
    'pipeline.triggers.conditionsPanel.headerConditions': string
    'pipeline.triggers.conditionsPanel.jexlCondition': string
    'pipeline.triggers.conditionsPanel.jexlConditionPlaceholder': string
    'pipeline.triggers.conditionsPanel.manifestVersion': string
    'pipeline.triggers.conditionsPanel.matchesValue': string
    'pipeline.triggers.conditionsPanel.matchesValuePlaceholder': string
    'pipeline.triggers.conditionsPanel.operator': string
    'pipeline.triggers.conditionsPanel.payloadConditions': string
    'pipeline.triggers.conditionsPanel.sourceBranch': string
    'pipeline.triggers.conditionsPanel.sourceBranchPlaceholder': string
    'pipeline.triggers.conditionsPanel.subtitle': string
    'pipeline.triggers.conditionsPanel.subtitleManifest': string
    'pipeline.triggers.conditionsPanel.tagName': string
    'pipeline.triggers.conditionsPanel.targetBranch': string
    'pipeline.triggers.conditionsPanel.targetBranchPlaceholder': string
    'pipeline.triggers.confirmDelete': string
    'pipeline.triggers.copyAsCurl': string
    'pipeline.triggers.copyAsUrl': string
    'pipeline.triggers.createTrigger': string
    'pipeline.triggers.cronLabel': string
    'pipeline.triggers.deleteTrigger': string
    'pipeline.triggers.lastActivationAt': string
    'pipeline.triggers.lastActivationDetails': string
    'pipeline.triggers.lastActivationLabel': string
    'pipeline.triggers.newArtifactLabel': string
    'pipeline.triggers.newManifestLabel': string
    'pipeline.triggers.newTrigger': string
    'pipeline.triggers.noTriggersFound': string
    'pipeline.triggers.onNewArtifactTitle': string
    'pipeline.triggers.onNewArtifactTitleWhole': string
    'pipeline.triggers.onNewManifestTitleWhole': string
    'pipeline.triggers.onNewScheduleTitle': string
    'pipeline.triggers.onNewWebhookTitle': string
    'pipeline.triggers.onScheduleLabel': string
    'pipeline.triggers.pageNotFound': string
    'pipeline.triggers.pipelineExecutionInput': string
    'pipeline.triggers.pipelineInputLabel': string
    'pipeline.triggers.pipelineInputPanel.automaticallyExtractedFromText': string
    'pipeline.triggers.pipelineInputPanel.existing': string
    'pipeline.triggers.pipelineInputPanel.noRuntimeInputs': string
    'pipeline.triggers.pipelineInputPanel.provide': string
    'pipeline.triggers.pipelineInputPanel.selectedExisitingOrProvide': string
    'pipeline.triggers.pipelineInputPanel.whatAreInputsets': string
    'pipeline.triggers.schedulePanel.FRI': string
    'pipeline.triggers.schedulePanel.MON': string
    'pipeline.triggers.schedulePanel.SAT': string
    'pipeline.triggers.schedulePanel.SUN': string
    'pipeline.triggers.schedulePanel.THU': string
    'pipeline.triggers.schedulePanel.TUE': string
    'pipeline.triggers.schedulePanel.WED': string
    'pipeline.triggers.schedulePanel.cronExpression': string
    'pipeline.triggers.schedulePanel.dailyTabTitle': string
    'pipeline.triggers.schedulePanel.dayOfMonthLabel': string
    'pipeline.triggers.schedulePanel.dayOfWeekLabel': string
    'pipeline.triggers.schedulePanel.enterCustomCron': string
    'pipeline.triggers.schedulePanel.expressionBreakdown': string
    'pipeline.triggers.schedulePanel.hourlyTabTitle': string
    'pipeline.triggers.schedulePanel.hoursAnd': string
    'pipeline.triggers.schedulePanel.hoursLabel': string
    'pipeline.triggers.schedulePanel.minutesAfterTheHour': string
    'pipeline.triggers.schedulePanel.minutesLabel': string
    'pipeline.triggers.schedulePanel.minutesParentheses': string
    'pipeline.triggers.schedulePanel.monthLabel': string
    'pipeline.triggers.schedulePanel.monthlyTabTitle': string
    'pipeline.triggers.schedulePanel.monthsParentheses': string
    'pipeline.triggers.schedulePanel.ofEvery': string
    'pipeline.triggers.schedulePanel.onThe': string
    'pipeline.triggers.schedulePanel.runAt': string
    'pipeline.triggers.schedulePanel.runDailyAt': string
    'pipeline.triggers.schedulePanel.runEvery': string
    'pipeline.triggers.schedulePanel.runOn': string
    'pipeline.triggers.schedulePanel.runOnSpecificDay': string
    'pipeline.triggers.schedulePanel.runOnSpecificDayMonth': string
    'pipeline.triggers.schedulePanel.startingWith': string
    'pipeline.triggers.schedulePanel.title': string
    'pipeline.triggers.schedulePanel.weeklyTabTitle': string
    'pipeline.triggers.schedulePanel.yearlyTabTitle': string
    'pipeline.triggers.scheduledLabel': string
    'pipeline.triggers.searchPlaceholder': string
    'pipeline.triggers.showAllTriggers': string
    'pipeline.triggers.toast.successfulCreate': string
    'pipeline.triggers.toast.successfulUpdate': string
    'pipeline.triggers.toast.toggleEnable': string
    'pipeline.triggers.toast.webhookCurlCopied': string
    'pipeline.triggers.toast.webhookUrlCopied': string
    'pipeline.triggers.triggerConfigurationLabel': string
    'pipeline.triggers.triggerConfigurationPanel.actions': string
    'pipeline.triggers.triggerConfigurationPanel.anyActions': string
    'pipeline.triggers.triggerConfigurationPanel.autoAbortIssueComment': string
    'pipeline.triggers.triggerConfigurationPanel.autoAbortPR': string
    'pipeline.triggers.triggerConfigurationPanel.autoAbortPush': string
    'pipeline.triggers.triggerConfigurationPanel.event': string
    'pipeline.triggers.triggerConfigurationPanel.eventPlaceholder': string
    'pipeline.triggers.triggerConfigurationPanel.listenOnNewWebhook': string
    'pipeline.triggers.triggerConfigurationPanel.payloadType': string
    'pipeline.triggers.triggerConfigurationPanel.title': string
    'pipeline.triggers.triggerConfigurationPanel.triggerName': string
    'pipeline.triggers.triggerLabel': string
    'pipeline.triggers.triggerOverviewPanel.title': string
    'pipeline.triggers.triggersLabel': string
    'pipeline.triggers.triggersSubLabel': string
    'pipeline.triggers.updateTrigger': string
    'pipeline.triggers.validation.actions': string
    'pipeline.triggers.validation.connector': string
    'pipeline.triggers.validation.cronExpression': string
    'pipeline.triggers.validation.event': string
    'pipeline.triggers.validation.eventConditions': string
    'pipeline.triggers.validation.headerConditions': string
    'pipeline.triggers.validation.identifier': string
    'pipeline.triggers.validation.matchesValue': string
    'pipeline.triggers.validation.operator': string
    'pipeline.triggers.validation.payloadConditions': string
    'pipeline.triggers.validation.repoName': string
    'pipeline.triggers.validation.selectedArtifact': string
    'pipeline.triggers.validation.triggerName': string
    'pipeline.uniqueIdentifier': string
    'pipeline.variable.typePlaceholder': string
    'pipeline.variable.variableNamePlaceholder': string
    'pipeline.verification.analysisTab.logs': string
    'pipeline.verification.analysisTab.metrics': string
    'pipeline.verification.anomalousLogClusters': string
    'pipeline.verification.anomalousMetrics': string
    'pipeline.verification.baselineTest': string
    'pipeline.verification.currentTest': string
    'pipeline.verification.healthSourcePlaceholder': string
    'pipeline.verification.logClustersInViolation': string
    'pipeline.verification.logs.actions': string
    'pipeline.verification.logs.clusterType': string
    'pipeline.verification.logs.copyURL': string
    'pipeline.verification.logs.filterByClusterType': string
    'pipeline.verification.logs.knownEvent': string
    'pipeline.verification.logs.logCluster': string
    'pipeline.verification.logs.messageCount': string
    'pipeline.verification.logs.messageFrequency': string
    'pipeline.verification.logs.noAnalysis': string
    'pipeline.verification.logs.risk': string
    'pipeline.verification.logs.sampleEvent': string
    'pipeline.verification.logs.sampleMessage': string
    'pipeline.verification.logs.share': string
    'pipeline.verification.logs.trend': string
    'pipeline.verification.logs.unexpectedFrequency': string
    'pipeline.verification.logs.unknownEvent': string
    'pipeline.verification.logs.urlCopied': string
    'pipeline.verification.metricViewPlaceholder': string
    'pipeline.verification.metricsInViolation': string
    'pipeline.verification.noMetrics': string
    'pipeline.verification.refreshViewForNewData': string
    'pipeline.verification.testsRan': string
    'pipeline.verification.toGetLatest': string
    'pipeline.verification.waitForAnalysis': string
    'pipeline.verificationResult': string
    'templatesLibrary.addNewTemplate': string
    'templatesLibrary.copyToNewPipeline': string
    'templatesLibrary.createNewModal.defaultLabel': string
    'templatesLibrary.createNewModal.headingPrefix': string
    'templatesLibrary.createNewModal.headingSuffix': string
    'templatesLibrary.createNewModal.label': string
    'templatesLibrary.createNewModal.validation.name': string
    'templatesLibrary.openEditTemplate': string
    'templatesLibrary.previewTemplate': string
    'templatesLibrary.referencedBy': string
    'templatesLibrary.selectTemplateToPreview': string
    'templatesLibrary.stageTemplate': string
    'templatesLibrary.templateInputs': string
    'templatesLibrary.templateSettings': string
    'templatesLibrary.useTemplate': string
    'templatesLibrary.versionLog': string
    'cd.addInline': string
    'cd.addRemote': string
    'cd.addTFVarFileLabel': string
    'cd.allowSimultaneousDeployments': string
    'cd.backEndConfig': string
    'cd.cdLaunchText': string
    'cd.cdTrialHomePage.startTrial.description': string
    'cd.cdTrialHomePage.startTrial.startBtn.description': string
    'cd.chooseProvisionerText': string
    'cd.configFilePlaceHolder': string
    'cd.configIdentifer': string
    'cd.configurationFile': string
    'cd.contentRequired': string
    'cd.continuous': string
    'cd.dashboard.createProject': string
    'cd.dashboard.orSelectExisting': string
    'cd.dashboard.subHeading': string
    'cd.dynamicProvisioning': string
    'cd.environmentCreated': string
    'cd.environmentUpdated': string
    'cd.filePathPlaceholder': string
    'cd.filePathRequired': string
    'cd.folderPath': string
    'cd.gitFetchTypeRequired': string
    'cd.gitOps': string
    'cd.learnMore': string
    'cd.manifestPathsCannotBeEmpty': string
    'cd.namespaceValidation': string
    'cd.newProvider': string
    'cd.pathCannotBeEmpty': string
    'cd.pipelineSteps.infraTab.deploymentType': string
    'cd.pipelineSteps.serviceTab.deploymentTypeRequired': string
    'cd.pipelineSteps.serviceTab.differentService': string
    'cd.pipelineSteps.serviceTab.overrideChanges': string
    'cd.pipelineSteps.serviceTab.propagateFrom': string
    'cd.pipelineSteps.serviceTab.propagateStage': string
    'cd.pipelineSteps.serviceTab.stageOverrides': string
    'cd.releaseNameValidation': string
    'cd.resourceCannotBeEmpty': string
    'cd.scriptRequired': string
    'cd.secretManagerRequired': string
    'cd.serviceCreated': string
    'cd.serviceDashboard.3months': string
    'cd.serviceDashboard.6monthTrend': string
    'cd.serviceDashboard.6months': string
    'cd.serviceDashboard.activeServiceInstancesLabel': string
    'cd.serviceDashboard.artifact': string
    'cd.serviceDashboard.buildName': string
    'cd.serviceDashboard.deployedAt': string
    'cd.serviceDashboard.deployedBy': string
    'cd.serviceDashboard.envName': string
    'cd.serviceDashboard.executionId': string
    'cd.serviceDashboard.frequency': string
    'cd.serviceDashboard.in': string
    'cd.serviceDashboard.instanceCountHistory': string
    'cd.serviceDashboard.instanceDetails': string
    'cd.serviceDashboard.lastDeployment': string
    'cd.serviceDashboard.month': string
    'cd.serviceDashboard.mostActiveServices': string
    'cd.serviceDashboard.noActiveServiceInstances': string
    'cd.serviceDashboard.noDeployments': string
    'cd.serviceDashboard.noPipelines': string
    'cd.serviceDashboard.noServiceDetails': string
    'cd.serviceDashboard.noServiceInstances': string
    'cd.serviceDashboard.noServices': string
    'cd.serviceDashboard.nonProd': string
    'cd.serviceDashboard.pod': string
    'cd.serviceDashboard.prod': string
    'cd.serviceDashboard.seeMore': string
    'cd.serviceDashboard.serviceInstances': string
    'cd.serviceDashboard.serviceInstancesInLast': string
    'cd.serviceDashboard.servicesInLast': string
    'cd.serviceDashboard.totalPipelines': string
    'cd.serviceDashboard.totalServices': string
    'cd.serviceDashboard.year': string
    'cd.serviceUpdated': string
    'cd.setUpProvisionerBtnText': string
    'cd.specifyTfVarStore': string
    'cd.stepName': string
    'cd.steps.common.clusterDetails': string
    'cd.steps.common.releaseNamePlaceholder': string
    'cd.steps.common.selectOrEnterClusterPlaceholder': string
    'cd.steps.kubernetesGcpStep.stepName': string
    'cd.terraformVarFiles': string
    'cd.tfVarStore': string
    'cd.varFile': string
    'cd.varFileDetails': string
    'cd.workloadRequired': string
    'ce.ceTrialHomePage.modal.description': string
    'ce.ceTrialHomePage.modal.title': string
    'ce.ceTrialHomePage.modal.welcome': string
    'ce.ceTrialHomePage.startTrial.description': string
    'ce.ceTrialHomePage.startTrial.startBtn.description': string
    'ce.co.accessPoint.ap': string
    'ce.co.accessPoint.aps': string
    'ce.co.accessPoint.asssociatedRules': string
    'ce.co.accessPoint.cloudAccount': string
    'ce.co.accessPoint.cloudConnector': string
    'ce.co.accessPoint.create': string
    'ce.co.accessPoint.createNewALB': string
    'ce.co.accessPoint.delete.success': string
    'ce.co.accessPoint.delete.withResource': string
    'ce.co.accessPoint.dnsProvider': string
    'ce.co.accessPoint.domainName': string
    'ce.co.accessPoint.enterDomain': string
    'ce.co.accessPoint.error': string
    'ce.co.accessPoint.hostedZone.noResult': string
    'ce.co.accessPoint.landingPageTitle': string
    'ce.co.accessPoint.lastActivity': string
    'ce.co.accessPoint.loadbalancer': string
    'ce.co.accessPoint.loadbalancers': string
    'ce.co.accessPoint.mapDomain': string
    'ce.co.accessPoint.new': string
    'ce.co.accessPoint.newAppGateway': string
    'ce.co.accessPoint.others': string
    'ce.co.accessPoint.proceed': string
    'ce.co.accessPoint.route53': string
    'ce.co.accessPoint.select.aCertificate': string
    'ce.co.accessPoint.select.accessPoint': string
    'ce.co.accessPoint.select.account': string
    'ce.co.accessPoint.select.certificate': string
    'ce.co.accessPoint.select.connector': string
    'ce.co.accessPoint.select.dnsProvider': string
    'ce.co.accessPoint.select.existingALB': string
    'ce.co.accessPoint.select.regionToInstall': string
    'ce.co.accessPoint.select.route53': string
    'ce.co.accessPoint.select.route53zone': string
    'ce.co.accessPoint.select.securityGroups': string
    'ce.co.accessPoint.select.vpc': string
    'ce.co.accessPoint.status': string
    'ce.co.accessPoint.success': string
    'ce.co.accessPoint.validation.connector': string
    'ce.co.accessPoint.validation.domainRequired': string
    'ce.co.accessPoint.validation.name': string
    'ce.co.accessPoint.validation.nonValidDomain': string
    'ce.co.accessPoint.validation.securityGroup': string
    'ce.co.accessPoint.validation.subnets': string
    'ce.co.accessPoint.validation.vpc': string
    'ce.co.autoStopping': string
    'ce.co.autoStoppingRule.configuration.asgSelectionInfoText': string
    'ce.co.autoStoppingRule.configuration.instanceModal.description': string
    'ce.co.autoStoppingRule.configuration.step1.form.idleTime.label': string
    'ce.co.autoStoppingRule.configuration.step1.idleTimeInputPlaceholder': string
    'ce.co.autoStoppingRule.configuration.step1.nameInputPlaceholder': string
    'ce.co.autoStoppingRule.configuration.step1.subTitle': string
    'ce.co.autoStoppingRule.configuration.step1.title': string
    'ce.co.autoStoppingRule.configuration.step2.addResourceCta.asg': string
    'ce.co.autoStoppingRule.configuration.step2.addResourceCta.instance': string
    'ce.co.autoStoppingRule.configuration.step2.addResourceCta.kubernetes': string
    'ce.co.autoStoppingRule.configuration.step2.additionalResourceInfo.asg': string
    'ce.co.autoStoppingRule.configuration.step2.additionalResourceInfo.instance': string
    'ce.co.autoStoppingRule.configuration.step2.additionalResourceInfo.kubernetes': string
    'ce.co.autoStoppingRule.configuration.step2.subTitle': string
    'ce.co.autoStoppingRule.configuration.step2.title': string
    'ce.co.autoStoppingRule.configuration.step3.asgSubTitle': string
    'ce.co.autoStoppingRule.configuration.step3.asgTitle': string
    'ce.co.autoStoppingRule.configuration.step3.policyNotEnabled': string
    'ce.co.autoStoppingRule.configuration.step3.subTitle': string
    'ce.co.autoStoppingRule.configuration.step3.title': string
    'ce.co.autoStoppingRule.configuration.step4.advancedConfiguration': string
    'ce.co.autoStoppingRule.configuration.step4.setup': string
    'ce.co.autoStoppingRule.confirm.deleteDialogText': string
    'ce.co.autoStoppingRule.confirm.deleteServiceTitle': string
    'ce.co.autoStoppingRule.confirm.disable': string
    'ce.co.autoStoppingRule.confirm.disableDialogText': string
    'ce.co.autoStoppingRule.confirm.disableTitle': string
    'ce.co.autoStoppingRule.confirm.enableDialogText': string
    'ce.co.autoStoppingRule.confirm.enableTitle': string
    'ce.co.autoStoppingRule.helpText.readMore': string
    'ce.co.autoStoppingRule.helpText.step1.description': string
    'ce.co.autoStoppingRule.helpText.step1.title': string
    'ce.co.autoStoppingRule.helpText.step2.description.heading': string
    'ce.co.autoStoppingRule.helpText.step2.description.resourceList.asg': string
    'ce.co.autoStoppingRule.helpText.step2.description.resourceList.kubernetes': string
    'ce.co.autoStoppingRule.helpText.step2.description.resourceList.vms': string
    'ce.co.autoStoppingRule.helpText.step2.title': string
    'ce.co.autoStoppingRule.helpText.step3.description.additionalInfo': string
    'ce.co.autoStoppingRule.helpText.step3.description.info': string
    'ce.co.autoStoppingRule.helpText.step3.title': string
    'ce.co.autoStoppingRule.providerSelector.description': string
    'ce.co.autoStoppingRule.providerSelector.helpText.selectProvider': string
    'ce.co.autoStoppingRule.review.configDetails': string
    'ce.co.autoStoppingRule.save': string
    'ce.co.autoStoppingRule.setupAccess.autogeneratedHelpText': string
    'ce.co.autoStoppingRule.setupAccess.chooseLbText': string
    'ce.co.autoStoppingRule.setupAccess.customDomain.helpText': string
    'ce.co.autoStoppingRule.setupAccess.customDomain.noHostedZones': string
    'ce.co.autoStoppingRule.setupAccess.erroredAccessPointSelectionText': string
    'ce.co.autoStoppingRule.setupAccess.helpText.bgTasks.info': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.info': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.mapToDNS.description': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.mapToDNS.step1': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.mapToDNS.step2': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.mapToDNS.step3': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.mapToDNS.title': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.step1.description': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.step1.title': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.step2.description': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.step2.title': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.step3.description': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.step3.title': string
    'ce.co.autoStoppingRule.setupAccess.helpText.dns.setup.title': string
    'ce.co.autoStoppingRule.setupAccess.helpText.ip.info': string
    'ce.co.autoStoppingRule.setupAccess.helpText.rdp.info': string
    'ce.co.autoStoppingRule.setupAccess.helpText.ssh.info': string
    'ce.co.autoStoppingRule.setupAccess.helpText.ssh.setup.description': string
    'ce.co.autoStoppingRule.setupAccess.helpText.ssh.setup.download': string
    'ce.co.autoStoppingRule.setupAccess.helpText.ssh.setup.title': string
    'ce.co.autoStoppingRule.setupAccess.noSetupRequired': string
    'ce.co.autoStoppingRule.setupAccess.pageName': string
    'ce.co.autoStoppingRule.setupAccess.selectAppGateway': string
    'ce.co.autoStoppingRule.setupAccess.selectLb': string
    'ce.co.autoStoppingRule.setupAccess.selectLbHelpText': string
    'ce.co.breadCrumb.rules': string
    'ce.co.cloudProviders.aws': string
    'ce.co.dnsSetup.autoURL': string
    'ce.co.dnsSetup.customURL': string
    'ce.co.dnsSetup.isURLaccessible': string
    'ce.co.gatewayAccess.accessDescription': string
    'ce.co.gatewayAccess.backgroundTasks': string
    'ce.co.gatewayAccess.dnsLink': string
    'ce.co.gatewayAccess.dnsLinkHeader': string
    'ce.co.gatewayAccess.ip': string
    'ce.co.gatewayAccess.rdp': string
    'ce.co.gatewayAccess.sshRdp': string
    'ce.co.gatewayAccess.subtitle': string
    'ce.co.gatewayBasics.connect': string
    'ce.co.gatewayBasics.new': string
    'ce.co.gatewayBasics.select': string
    'ce.co.gatewayConfig.addDependency': string
    'ce.co.gatewayConfig.addInstanceLabel': string
    'ce.co.gatewayConfig.addPortLabel': string
    'ce.co.gatewayConfig.addSchedule': string
    'ce.co.gatewayConfig.advancedConfigDescription': string
    'ce.co.gatewayConfig.allowTraffic': string
    'ce.co.gatewayConfig.configHeading': string
    'ce.co.gatewayConfig.customDomain': string
    'ce.co.gatewayConfig.customDomainHelp': string
    'ce.co.gatewayConfig.disable': string
    'ce.co.gatewayConfig.healthCheck': string
    'ce.co.gatewayConfig.healthCheckDescription': string
    'ce.co.gatewayConfig.info': string
    'ce.co.gatewayConfig.k8sroutingDescription': string
    'ce.co.gatewayConfig.name': string
    'ce.co.gatewayConfig.routingDescription': string
    'ce.co.gatewayConfig.scheduleDescription': string
    'ce.co.gatewayConfig.usePrivateIP': string
    'ce.co.gatewayReview.configurationDetails': string
    'ce.co.gatewayReview.gatewayDetails': string
    'ce.co.gatewayReview.idleTime': string
    'ce.co.gatewayReview.instance': string
    'ce.co.gatewayReview.instanceType': string
    'ce.co.gatewayReview.ipAddress': string
    'ce.co.gatewayReview.launchTime': string
    'ce.co.gatewayReview.listenPort': string
    'ce.co.gatewayReview.listenProtocol': string
    'ce.co.gatewayReview.nameAndID': string
    'ce.co.gatewayReview.nameYourGateway': string
    'ce.co.gatewayReview.region': string
    'ce.co.gatewayReview.routing': string
    'ce.co.gatewayReview.selectCloudAccount': string
    'ce.co.gatewayReview.tags': string
    'ce.co.gatewayReview.type': string
    'ce.co.getStarted': string
    'ce.co.instanceSelector.ipAddress': string
    'ce.co.instanceSelector.launchTime': string
    'ce.co.instanceSelector.name': string
    'ce.co.ipAddressSetup': string
    'ce.co.landingPageText': string
    'ce.co.newAutoStoppingRule': string
    'ce.co.noData': string
    'ce.co.rulesTableHeaders.fulfilment': string
    'ce.co.rulesTableHeaders.idleTime': string
    'ce.co.rulesTableHeaders.lastActivity': string
    'ce.co.rulesTableHeaders.mangedResources': string
    'ce.co.rulesTableHeaders.name': string
    'ce.co.rulesTableHeaders.savings': string
    'ce.co.rulesTableHeaders.status': string
    'ce.co.setupCloudProvider': string
    'ce.co.sshSetup': string
    'ce.connector.AWS.crossAccountRole.arn': string
    'ce.connector.AWS.crossAccountRole.externalID': string
    'ce.connector.AWS.crossAccountRole.instructionLabel': string
    'ce.connector.AWS.crossAccountRole.requirementExplanation': string
    'ce.connector.AWS.crossAccountRole.submitText': string
    'ce.connector.AWS.crossAccountRole.templateLaunchText': string
    'ce.connector.AWS.crossAccountRole.text': string
    'ce.connector.AWS.crossAccountRole.title': string
    'ce.connector.AWS.crossAccountRole.validation.arnRequired': string
    'ce.connector.AWS.crossAccountRole.validation.extIDRequired': string
    'ce.connector.AWS.event.description': string
    'ce.connector.AWS.event.title': string
    'ce.connector.AWS.optimization.description': string
    'ce.connector.AWS.overview.featureSelection': string
    'ce.connector.AWS.overview.label': string
    'ce.connector.AWS.overview.permission.billing.description': string
    'ce.connector.AWS.overview.permission.billing.label': string
    'ce.connector.AWS.overview.permission.events.description': string
    'ce.connector.AWS.overview.permission.events.label': string
    'ce.connector.AWS.overview.permission.optimization.description': string
    'ce.connector.AWS.overview.permission.optimization.label': string
    'ce.connector.AWS.overview.placeholder': string
    'ce.connector.AWS.overview.reqirementLabel': string
    'ce.connector.AWS.overview.submitText': string
    'ce.connector.AWS.overview.title': string
    'ce.connector.AWS.overview.validation.identifier.format': string
    'ce.connector.AWS.overview.validation.identifier.required': string
    'ce.connector.AWS.overview.validation.name': string
    'ce.connector.AWS.testConnection.auth.valid': string
    'ce.connector.AWS.testConnection.cancel': string
    'ce.connector.AWS.testConnection.crossARN.valid': string
    'ce.connector.AWS.testConnection.cur.valid': string
    'ce.connector.AWS.testConnection.finish': string
    'ce.connector.AWS.testConnection.title': string
    'ce.connector.AWS.title': string
    'ce.connector.AWS.visibility.description': string
    'ce.continuous': string
    'ce.dashboardPage.description': string
    'ce.dashboardPage.welcome': string
    'ce.gridColumnSelector': string
    'ce.homepage.slogan': string
    'ce.learnMore': string
    'ce.nodeRecommendation.aks': string
    'ce.nodeRecommendation.compare': string
    'ce.nodeRecommendation.costPerHour': string
    'ce.nodeRecommendation.cpus': string
    'ce.nodeRecommendation.distribution': string
    'ce.nodeRecommendation.eks': string
    'ce.nodeRecommendation.estimatedSavings': string
    'ce.nodeRecommendation.gke': string
    'ce.nodeRecommendation.howItWorks': string
    'ce.nodeRecommendation.instanceFam': string
    'ce.nodeRecommendation.maxNode': string
    'ce.nodeRecommendation.mem': string
    'ce.nodeRecommendation.memory': string
    'ce.nodeRecommendation.minNode': string
    'ce.nodeRecommendation.monthlyCost': string
    'ce.nodeRecommendation.nodeCount': string
    'ce.nodeRecommendation.nodepool': string
    'ce.nodeRecommendation.onDemand': string
    'ce.nodeRecommendation.poolDetails': string
    'ce.nodeRecommendation.recommended': string
    'ce.nodeRecommendation.resourceNeed': string
    'ce.nodeRecommendation.rightSize': string
    'ce.nodeRecommendation.spot': string
    'ce.nodeRecommendation.suitable.prod': string
    'ce.nodeRecommendation.suitable.qa': string
    'ce.nodeRecommendation.text1': string
    'ce.nodeRecommendation.text2': string
    'ce.overview.addClusterBtn': string
    'ce.overview.addClusterDesc': string
    'ce.overview.cardtitles.aws': string
    'ce.overview.cardtitles.azure': string
    'ce.overview.cardtitles.clusterBreakdown': string
    'ce.overview.cardtitles.costByProviders': string
    'ce.overview.cardtitles.efficiencyScore': string
    'ce.overview.cardtitles.gcp': string
    'ce.overview.cardtitles.multipleCloud': string
    'ce.overview.cardtitles.topClusters': string
    'ce.overview.cardtitles.topRecommendation': string
    'ce.overview.noData.autoStopping': string
    'ce.overview.noData.connector': string
    'ce.overview.noData.explore': string
    'ce.overview.noData.info': string
    'ce.overview.noData.ngDocs': string
    'ce.overview.savings': string
    'ce.overview.seeAll': string
    'ce.overview.title': string
    'ce.overview.totalCost': string
    'ce.overview.workload': string
    'ce.pageErrorMsg.noDataMsg': string
    'ce.pageErrorMsg.perspectiveNoData': string
    'ce.pageErrorMsg.recommendationNoData': string
    'ce.perspectives.budgets.actualSpend': string
    'ce.perspectives.budgets.configureAlerts.actual': string
    'ce.perspectives.budgets.configureAlerts.basedOn': string
    'ce.perspectives.budgets.configureAlerts.budgetAmount': string
    'ce.perspectives.budgets.configureAlerts.createAlert': string
    'ce.perspectives.budgets.configureAlerts.exceeds': string
    'ce.perspectives.budgets.configureAlerts.forecasted': string
    'ce.perspectives.budgets.configureAlerts.percent': string
    'ce.perspectives.budgets.configureAlerts.subTitle': string
    'ce.perspectives.budgets.configureAlerts.title': string
    'ce.perspectives.budgets.createNew': string
    'ce.perspectives.budgets.desc': string
    'ce.perspectives.budgets.forecastedCost': string
    'ce.perspectives.budgets.sendAlerts': string
    'ce.perspectives.budgets.setBudgetAmount.budgetType': string
    'ce.perspectives.budgets.setBudgetAmount.lastMonthCost': string
    'ce.perspectives.budgets.setBudgetAmount.lastMonthSpend': string
    'ce.perspectives.budgets.setBudgetAmount.projectedCost': string
    'ce.perspectives.budgets.setBudgetAmount.specifiedAmount': string
    'ce.perspectives.budgets.setBudgetAmount.specifyAmount': string
    'ce.perspectives.budgets.setBudgetAmount.title': string
    'ce.perspectives.budgets.title': string
    'ce.perspectives.budgets.wizardTitle': string
    'ce.perspectives.createPerspective.createCustomField': string
    'ce.perspectives.createPerspective.filters.addRuleText': string
    'ce.perspectives.createPerspective.filters.operator': string
    'ce.perspectives.createPerspective.filters.rulesText1': string
    'ce.perspectives.createPerspective.filters.rulesText2': string
    'ce.perspectives.createPerspective.filters.rulesTitle': string
    'ce.perspectives.createPerspective.filters.searchText': string
    'ce.perspectives.createPerspective.filters.selectOperator': string
    'ce.perspectives.createPerspective.filters.selectValues': string
    'ce.perspectives.createPerspective.filters.selectValuesText': string
    'ce.perspectives.createPerspective.learnMoreCustomField': string
    'ce.perspectives.createPerspective.name': string
    'ce.perspectives.createPerspective.nameLabel': string
    'ce.perspectives.createPerspective.nextButton': string
    'ce.perspectives.createPerspective.operatorLabels.in': string
    'ce.perspectives.createPerspective.operatorLabels.notIn': string
    'ce.perspectives.createPerspective.operatorLabels.opNotNull': string
    'ce.perspectives.createPerspective.operatorLabels.opNull': string
    'ce.perspectives.createPerspective.prevButton': string
    'ce.perspectives.createPerspective.preview.groupBy': string
    'ce.perspectives.createPerspective.preview.title': string
    'ce.perspectives.createPerspective.proTipText': string
    'ce.perspectives.createPerspective.title': string
    'ce.perspectives.createPerspective.validationErrors.nameError': string
    'ce.perspectives.createPerspective.validationErrors.ruleError': string
    'ce.perspectives.reports.createNew': string
    'ce.perspectives.reports.cronLabel': string
    'ce.perspectives.reports.desc': string
    'ce.perspectives.reports.emailPlaceholder': string
    'ce.perspectives.reports.frequency': string
    'ce.perspectives.reports.msg': string
    'ce.perspectives.reports.recipientLabel': string
    'ce.perspectives.reports.recipients': string
    'ce.perspectives.reports.reportName': string
    'ce.perspectives.reports.searchTimezonePlaceholder': string
    'ce.perspectives.reports.title': string
    'ce.perspectives.save': string
    'ce.perspectives.searchPerspectives': string
    'ce.perspectives.sideNavText': string
    'ce.perspectives.timeAggregation.daily': string
    'ce.perspectives.timeAggregation.hourly': string
    'ce.perspectives.timeAggregation.monthly': string
    'ce.perspectives.timeRange.calendarMonths': string
    'ce.perspectives.timeRange.recommended': string
    'ce.perspectives.timeRange.relativeDates': string
    'ce.perspectives.timeRange.selectCustomRange': string
    'ce.perspectives.timeRangeConstants.last12Months': string
    'ce.perspectives.timeRangeConstants.last30Days': string
    'ce.perspectives.timeRangeConstants.last3Months': string
    'ce.perspectives.timeRangeConstants.last6Months': string
    'ce.perspectives.timeRangeConstants.last7Days': string
    'ce.perspectives.timeRangeConstants.lastMonth': string
    'ce.perspectives.timeRangeConstants.lastQuarter': string
    'ce.perspectives.timeRangeConstants.lastYear': string
    'ce.perspectives.timeRangeConstants.thisMonth': string
    'ce.perspectives.timeRangeConstants.thisQuarter': string
    'ce.perspectives.timeRangeConstants.thisYear': string
    'ce.perspectives.validations.emailRequired': string
    'ce.perspectives.validations.invalidEmails': string
    'ce.perspectives.validations.reportNameRequired': string
    'ce.perspectives.workloadDetails.aggregation.absolute': string
    'ce.perspectives.workloadDetails.aggregation.text': string
    'ce.perspectives.workloadDetails.aggregation.timeWeighted': string
    'ce.perspectives.workloadDetails.costDetailsText': string
    'ce.perspectives.workloadDetails.fieldNames.clusterName': string
    'ce.perspectives.workloadDetails.fieldNames.namespace': string
    'ce.perspectives.workloadDetails.fieldNames.workload': string
    'ce.perspectives.workloadDetails.fieldNames.workloadType': string
    'ce.perspectives.workloadDetails.workloadDetailsText': string
    'ce.recommendation.detailsPage.costOptimized': string
    'ce.recommendation.detailsPage.costOptimizedCaps': string
    'ce.recommendation.detailsPage.costOptimizedDetails': string
    'ce.recommendation.detailsPage.currentResources': string
    'ce.recommendation.detailsPage.customDetails': string
    'ce.recommendation.detailsPage.histogramText': string
    'ce.recommendation.detailsPage.histogramTextDetails1': string
    'ce.recommendation.detailsPage.histogramTextDetails2': string
    'ce.recommendation.detailsPage.howItWorks': string
    'ce.recommendation.detailsPage.idleCost': string
    'ce.recommendation.detailsPage.limitPercentileLegendText': string
    'ce.recommendation.detailsPage.percentileOfReqAndLimit': string
    'ce.recommendation.detailsPage.performanceOptimized': string
    'ce.recommendation.detailsPage.performanceOptimizedCaps': string
    'ce.recommendation.detailsPage.performanceOptimizedDetails': string
    'ce.recommendation.detailsPage.recommendationComputation': string
    'ce.recommendation.detailsPage.recommendedResources': string
    'ce.recommendation.detailsPage.reqPercentileLegendText': string
    'ce.recommendation.detailsPage.resetRecommendationText': string
    'ce.recommendation.detailsPage.resizeText': string
    'ce.recommendation.detailsPage.resourceChanges': string
    'ce.recommendation.detailsPage.timeChangeText': string
    'ce.recommendation.detailsPage.totalCost': string
    'ce.recommendation.detailsPage.viewMoreDetailsText': string
    'ce.recommendation.listPage.filterHereText': string
    'ce.recommendation.listPage.filters.clusterName': string
    'ce.recommendation.listPage.filters.enterCost': string
    'ce.recommendation.listPage.filters.minCost': string
    'ce.recommendation.listPage.filters.minSaving': string
    'ce.recommendation.listPage.filters.name': string
    'ce.recommendation.listPage.filters.namespace': string
    'ce.recommendation.listPage.filters.resourceType': string
    'ce.recommendation.listPage.forecatedCostSubText': string
    'ce.recommendation.listPage.listTableHeaders.details': string
    'ce.recommendation.listPage.listTableHeaders.monthlyCost': string
    'ce.recommendation.listPage.listTableHeaders.monthlySavings': string
    'ce.recommendation.listPage.listTableHeaders.recommendationType': string
    'ce.recommendation.listPage.listTableHeaders.resourceName': string
    'ce.recommendation.listPage.listTableHeaders.resourceType': string
    'ce.recommendation.listPage.monthlyForcastedCostText': string
    'ce.recommendation.listPage.monthlySavingsText': string
    'ce.recommendation.listPage.recommendationDetails.resize': string
    'ce.recommendation.listPage.recommendationTypes.resizing': string
    'ce.recommendation.listPage.recommendationTypes.rightSizing': string
    'ce.recommendation.listPage.recommnedationBreakdown': string
    'ce.recommendation.listPage.uptoText': string
    'ce.recommendation.recommendationChart.cpuPlaceholder': string
    'ce.recommendation.recommendationChart.memoryLabel': string
    'ce.recommendation.recommendationChart.memoryLabelRegular': string
    'ce.recommendation.recommendationChart.memoryUsagePlaceholder': string
    'ce.recommendation.recommendationChart.noOfSamples': string
    'ce.recommendation.sideNavText': string
    'ce.savedYamlSuccess': string
    'ce.sideNav.perspective': string
    'ce.trialCta': string
    'ce.uploadCertiHeader': string
    'cf.addPrerequisites.addPrerequisitesDesc': string
    'cf.addPrerequisites.addPrerequisitesHeading': string
    'cf.addPrerequisites.editPrerequisitesHeading': string
    'cf.addPrerequisites.selectFlag': string
    'cf.addPrerequisites.selectVariation': string
    'cf.auditLogs.action': string
    'cf.auditLogs.changeDetails': string
    'cf.auditLogs.createdMessageFF': string
    'cf.auditLogs.createdMessageFFUpdate': string
    'cf.auditLogs.createdMessageSegment': string
    'cf.auditLogs.empty': string
    'cf.auditLogs.eventSummary': string
    'cf.auditLogs.events.addPrerequisite': string
    'cf.auditLogs.events.addRule': string
    'cf.auditLogs.events.addSegmentToVariationTargetMap': string
    'cf.auditLogs.events.addTargetsToVariationTargetMap': string
    'cf.auditLogs.events.addVariation': string
    'cf.auditLogs.events.clearVariationTargetMapping': string
    'cf.auditLogs.events.deleteVariation': string
    'cf.auditLogs.events.removeClause': string
    'cf.auditLogs.events.removePrerequisite': string
    'cf.auditLogs.events.removeRule': string
    'cf.auditLogs.events.removeTargetsToVariationTargetMap': string
    'cf.auditLogs.events.reorderRules': string
    'cf.auditLogs.events.setDefaultOffVariation': string
    'cf.auditLogs.events.setDefaultOnVariation': string
    'cf.auditLogs.events.setFeatureFlagStateOff': string
    'cf.auditLogs.events.setFeatureFlagStateOn': string
    'cf.auditLogs.events.tagUpdated': string
    'cf.auditLogs.events.updateClause': string
    'cf.auditLogs.events.updateDefaultServe.bucketBy': string
    'cf.auditLogs.events.updateDefaultServe.variation': string
    'cf.auditLogs.events.updateDescription': string
    'cf.auditLogs.events.updateName': string
    'cf.auditLogs.events.updateOffVariation': string
    'cf.auditLogs.events.updatePermanent': string
    'cf.auditLogs.events.updatePrerequisite': string
    'cf.auditLogs.events.updateRule': string
    'cf.auditLogs.events.updateVariation': string
    'cf.auditLogs.flagCreated': string
    'cf.auditLogs.flagUpdated': string
    'cf.auditLogs.moduleFF': string
    'cf.auditLogs.searchPlaceholder': string
    'cf.auditLogs.segmentCreated': string
    'cf.auditLogs.summaryHeading': string
    'cf.auditLogs.timePST': string
    'cf.auditLogs.title': string
    'cf.auditLogs.unknown': string
    'cf.auditLogs.updateMessageSegment': string
    'cf.auditLogs.user': string
    'cf.auditLogs.viewEventSummary': string
    'cf.auditLogs.yamlDifference': string
    'cf.boolean': string
    'cf.cfTrialHomePage.startTrial.description': string
    'cf.cfTrialHomePage.startTrial.startBtn.description': string
    'cf.clause.operators.and': string
    'cf.clause.operators.contains': string
    'cf.clause.operators.endsWith': string
    'cf.clause.operators.equal': string
    'cf.clause.operators.equalSensitive': string
    'cf.clause.operators.in': string
    'cf.clause.operators.match': string
    'cf.clause.operators.matchSegment': string
    'cf.clause.operators.startsWith': string
    'cf.continuous': string
    'cf.creationModal.aboutFlag.aboutFlagHeading': string
    'cf.creationModal.aboutFlag.ffNamePlaceholder': string
    'cf.creationModal.aboutFlag.ffRegex': string
    'cf.creationModal.aboutFlag.idRequired': string
    'cf.creationModal.aboutFlag.nameRequired': string
    'cf.creationModal.aboutFlag.permaFlag': string
    'cf.creationModal.aboutFlag.permaFlagTooltip': string
    'cf.creationModal.aboutFlag.tagsOptional': string
    'cf.creationModal.aboutFlag.tagsPlaceholder': string
    'cf.creationModal.dataType': string
    'cf.creationModal.defaultRules': string
    'cf.creationModal.defaultRulesTooltip': string
    'cf.creationModal.defaultVariationIsRequired': string
    'cf.creationModal.flagOff': string
    'cf.creationModal.flagOn': string
    'cf.creationModal.flagType': string
    'cf.creationModal.idIsRequired': string
    'cf.creationModal.jsonType': string
    'cf.creationModal.mustBeNumber': string
    'cf.creationModal.mustBeValidJSON': string
    'cf.creationModal.nameIsRequired': string
    'cf.creationModal.saveAndClose': string
    'cf.creationModal.testFlagOption': string
    'cf.creationModal.valueIsRequired': string
    'cf.creationModal.variationSettingsHeading': string
    'cf.editDetails.editDetailsHeading': string
    'cf.editDetails.permaFlag': string
    'cf.editVariation.add': string
    'cf.editVariation.applyToExistingEnvironments': string
    'cf.editVariation.defaultRulesDesc': string
    'cf.editVariation.envNote': string
    'cf.editVariation.subTitle': string
    'cf.editVariation.title': string
    'cf.environments.adminEnvironments': string
    'cf.environments.apiKeys.addKey': string
    'cf.environments.apiKeys.addKeyTitle': string
    'cf.environments.apiKeys.clientType': string
    'cf.environments.apiKeys.deleteMessage': string
    'cf.environments.apiKeys.deleteSuccess': string
    'cf.environments.apiKeys.deleteTitle': string
    'cf.environments.apiKeys.emptyName': string
    'cf.environments.apiKeys.keyType': string
    'cf.environments.apiKeys.message': string
    'cf.environments.apiKeys.noKeysFound': string
    'cf.environments.apiKeys.serverType': string
    'cf.environments.apiKeys.title': string
    'cf.environments.create.description': string
    'cf.environments.create.envTypeLabel': string
    'cf.environments.create.nameLabel': string
    'cf.environments.create.title': string
    'cf.environments.delete.message': string
    'cf.environments.delete.title': string
    'cf.environments.empty': string
    'cf.environments.modifiedBy': string
    'cf.environments.title': string
    'cf.featureFlagDetail.variationCount': string
    'cf.featureFlags.activity': string
    'cf.featureFlags.andClause': string
    'cf.featureFlags.archiveFlag': string
    'cf.featureFlags.archiveFlagMessage': string
    'cf.featureFlags.booleanBtnText': string
    'cf.featureFlags.bucketBy': string
    'cf.featureFlags.bucketOverflow': string
    'cf.featureFlags.commaSeparator': string
    'cf.featureFlags.createdDate': string
    'cf.featureFlags.customRuleMessage': string
    'cf.featureFlags.customRuleOnRequest': string
    'cf.featureFlags.defaultServedOff': string
    'cf.featureFlags.defaultServedOn': string
    'cf.featureFlags.defaultWillBeServed': string
    'cf.featureFlags.deleteFlag': string
    'cf.featureFlags.deleteFlagMessage': string
    'cf.featureFlags.flagFilters.any': string
    'cf.featureFlags.flagFilters.apply': string
    'cf.featureFlags.flagFilters.cancel': string
    'cf.featureFlags.flagFilters.createFilter': string
    'cf.featureFlags.flagFilters.createdDate': string
    'cf.featureFlags.flagFilters.creator': string
    'cf.featureFlags.flagFilters.defaultFilter': string
    'cf.featureFlags.flagFilters.defaultFilterText': string
    'cf.featureFlags.flagFilters.envDefault': string
    'cf.featureFlags.flagFilters.environment': string
    'cf.featureFlags.flagFilters.everyone': string
    'cf.featureFlags.flagFilters.filterVisible': string
    'cf.featureFlags.flagFilters.flagsBy': string
    'cf.featureFlags.flagFilters.individualTargets': string
    'cf.featureFlags.flagFilters.modifiedDate': string
    'cf.featureFlags.flagFilters.onlyMe': string
    'cf.featureFlags.flagFilters.overwriteRadio': string
    'cf.featureFlags.flagFilters.owner': string
    'cf.featureFlags.flagFilters.ownerOrPinPlaceholder': string
    'cf.featureFlags.flagFilters.save': string
    'cf.featureFlags.flagFilters.saveFilters': string
    'cf.featureFlags.flagFilters.status': string
    'cf.featureFlags.flagFilters.switchOnOff': string
    'cf.featureFlags.flagFilters.tagsPlaceholder': string
    'cf.featureFlags.flagFilters.target': string
    'cf.featureFlags.flagFilters.term': string
    'cf.featureFlags.flagOff': string
    'cf.featureFlags.flagOn': string
    'cf.featureFlags.flagWillTurnOff': string
    'cf.featureFlags.flagWillTurnOn': string
    'cf.featureFlags.ifClause': string
    'cf.featureFlags.ifClauseServe': string
    'cf.featureFlags.ifClauseServePercentageRollout': string
    'cf.featureFlags.ifFlagOffServe': string
    'cf.featureFlags.ifFlagOnServe': string
    'cf.featureFlags.makeSure': string
    'cf.featureFlags.metrics.evaluationStatistics': string
    'cf.featureFlags.metrics.evaluations': string
    'cf.featureFlags.metrics.flagEvaluations': string
    'cf.featureFlags.metrics.noData': string
    'cf.featureFlags.metrics.noMetrics': string
    'cf.featureFlags.metrics.targetServed': string
    'cf.featureFlags.metrics.title': string
    'cf.featureFlags.metrics.totalEvaluations': string
    'cf.featureFlags.modifiedDate': string
    'cf.featureFlags.multi': string
    'cf.featureFlags.multiBtnText': string
    'cf.featureFlags.newFlag': string
    'cf.featureFlags.percentageRollout': string
    'cf.featureFlags.prerequisitesDesc': string
    'cf.featureFlags.results': string
    'cf.featureFlags.rules.add': string
    'cf.featureFlags.rules.customRules': string
    'cf.featureFlags.rules.defaultRules': string
    'cf.featureFlags.rules.editRules': string
    'cf.featureFlags.rules.flagOff': string
    'cf.featureFlags.rules.flagOn': string
    'cf.featureFlags.rules.following': string
    'cf.featureFlags.rules.onRequest': string
    'cf.featureFlags.rules.onRequestVariation': string
    'cf.featureFlags.rules.serveToFollowing': string
    'cf.featureFlags.rules.serveVariationToTarget': string
    'cf.featureFlags.rules.toTarget': string
    'cf.featureFlags.serve': string
    'cf.featureFlags.servePercentageRollout': string
    'cf.featureFlags.serveVariationToTarget': string
    'cf.featureFlags.serveVariationToTargetLabel': string
    'cf.featureFlags.startVariation': string
    'cf.featureFlags.targeting': string
    'cf.featureFlags.toTarget': string
    'cf.featureFlags.turnOffHeading': string
    'cf.featureFlags.turnOffMessage': string
    'cf.featureFlags.turnOnHeading': string
    'cf.featureFlags.turnOnMessage': string
    'cf.featureFlags.typeOfFlag': string
    'cf.featureNotReady': string
    'cf.homepage.learnMore': string
    'cf.homepage.slogan': string
    'cf.learnMore': string
    'cf.messages.flagArchived': string
    'cf.messages.flagCreated': string
    'cf.messages.flagDeleted': string
    'cf.messages.flagUpdated': string
    'cf.messages.segmentCreated': string
    'cf.messages.segmentDeleted': string
    'cf.messages.segmentUpdated': string
    'cf.messages.targetCreated': string
    'cf.messages.targetDeleted': string
    'cf.messages.targetUpdated': string
    'cf.multivariate': string
    'cf.noEnvironment.message': string
    'cf.noEnvironment.title': string
    'cf.noFlag': string
    'cf.noResultMatch': string
    'cf.noTarget': string
    'cf.noTargetForEnv': string
    'cf.onboarding.allSet': string
    'cf.onboarding.backToStart': string
    'cf.onboarding.behindTheSenes': string
    'cf.onboarding.clientKey': string
    'cf.onboarding.connected': string
    'cf.onboarding.createAFlag': string
    'cf.onboarding.createEnv': string
    'cf.onboarding.envCreated': string
    'cf.onboarding.help.getStarted': string
    'cf.onboarding.help.heading1': string
    'cf.onboarding.help.heading2': string
    'cf.onboarding.help.test.heading': string
    'cf.onboarding.help.test.readmore': string
    'cf.onboarding.help.test.text1': string
    'cf.onboarding.help.test.text2': string
    'cf.onboarding.help.text1': string
    'cf.onboarding.help.text2': string
    'cf.onboarding.inputLabel': string
    'cf.onboarding.keyDescriptionClient': string
    'cf.onboarding.keyDescriptionServer': string
    'cf.onboarding.letsStart': string
    'cf.onboarding.listenToEvent': string
    'cf.onboarding.listeningToEvent': string
    'cf.onboarding.otherTypes': string
    'cf.onboarding.readme.android': string
    'cf.onboarding.readme.dotnet': string
    'cf.onboarding.readme.golang': string
    'cf.onboarding.readme.ios': string
    'cf.onboarding.readme.java': string
    'cf.onboarding.readme.javascript': string
    'cf.onboarding.sdkButtonLabel': string
    'cf.onboarding.sdkKeyLabel': string
    'cf.onboarding.secret': string
    'cf.onboarding.selectEnvironment': string
    'cf.onboarding.selectLanguage': string
    'cf.onboarding.setUpApp': string
    'cf.onboarding.setUpYourCode': string
    'cf.onboarding.setupLabel': string
    'cf.onboarding.simpliestFlag': string
    'cf.onboarding.simpliestFlagDescription': string
    'cf.onboarding.subTitle': string
    'cf.onboarding.successLabel': string
    'cf.onboarding.testYourFlag': string
    'cf.onboarding.title': string
    'cf.onboarding.toggleLabel': string
    'cf.onboarding.tryItOut': string
    'cf.onboarding.tryTarget': string
    'cf.onboarding.upAndRunning': string
    'cf.onboarding.waitForConnect': string
    'cf.pipeline.advanced.title': string
    'cf.pipeline.flagConfiguration.addConditionalRules': string
    'cf.pipeline.flagConfiguration.addEditMapping': string
    'cf.pipeline.flagConfiguration.addNewMapping': string
    'cf.pipeline.flagConfiguration.addOrEdit': string
    'cf.pipeline.flagConfiguration.addVariationMappingTitle': string
    'cf.pipeline.flagConfiguration.allRuntimeInput': string
    'cf.pipeline.flagConfiguration.conditionRuntime': string
    'cf.pipeline.flagConfiguration.conditionalRules': string
    'cf.pipeline.flagConfiguration.configureMore': string
    'cf.pipeline.flagConfiguration.editVariationMappingTitle': string
    'cf.pipeline.flagConfiguration.environmentRequired': string
    'cf.pipeline.flagConfiguration.fixedInput': string
    'cf.pipeline.flagConfiguration.flagRequired': string
    'cf.pipeline.flagConfiguration.flagState': string
    'cf.pipeline.flagConfiguration.flagSwitch': string
    'cf.pipeline.flagConfiguration.flagSwitchRuntime': string
    'cf.pipeline.flagConfiguration.remove': string
    'cf.pipeline.flagConfiguration.removeMapping': string
    'cf.pipeline.flagConfiguration.runtimeInput': string
    'cf.pipeline.flagConfiguration.selectEnvironment': string
    'cf.pipeline.flagConfiguration.selectFlag': string
    'cf.pipeline.flagConfiguration.serve': string
    'cf.pipeline.flagConfiguration.serveMapping': string
    'cf.pipeline.flagConfiguration.stepName': string
    'cf.pipeline.flagConfiguration.switchTo': string
    'cf.pipeline.flagConfiguration.toGroups': string
    'cf.pipeline.flagConfiguration.variationMappingRuntime': string
    'cf.pipeline.flagConfiguration.viewDetail': string
    'cf.pipeline.flagConfiguration.whatToConfigure': string
    'cf.pipeline.listing': string
    'cf.pipeline.rollloutStrategy.title': string
    'cf.pipeline.variationMapping.placeholder': string
    'cf.pipeline.variationMapping.selectVariation': string
    'cf.pipeline.variationMapping.targetTargetGroup': string
    'cf.pipeline.variationMapping.targetTargetGroupRequired': string
    'cf.pipeline.variationMapping.variationRequired': string
    'cf.rbac.category': string
    'cf.rbac.featureflag.delete': string
    'cf.rbac.featureflag.edit': string
    'cf.rbac.featureflag.label': string
    'cf.rbac.featureflag.toggle': string
    'cf.rbac.targetgroup.delete': string
    'cf.rbac.targetgroup.edit': string
    'cf.rbac.targetgroup.label': string
    'cf.segmentDetail.addSegmentToFlag': string
    'cf.segmentDetail.addToFlag': string
    'cf.segmentDetail.autoAdded': string
    'cf.segmentDetail.directlyAdded': string
    'cf.segmentDetail.noFlagsUseThisSegment': string
    'cf.segmentDetail.removeFomFlag': string
    'cf.segments.create': string
    'cf.segments.delete.message': string
    'cf.segments.delete.title': string
    'cf.segments.displayIcon': string
    'cf.segments.idRequired': string
    'cf.segments.modalTitle': string
    'cf.segments.nameRequired': string
    'cf.segments.noSegment': string
    'cf.segments.noSegmentForEnv': string
    'cf.segments.pageDescription': string
    'cf.segments.targetDefinition': string
    'cf.segments.uploadImage': string
    'cf.segments.usingSegment': string
    'cf.segments.usingSegmentWithCount': string
    'cf.selectFlagsModal.empty': string
    'cf.selectFlagsModal.searchPlaceholder': string
    'cf.selectSegmentModal.empty': string
    'cf.selectSegmentModal.flagsUsingSegment': string
    'cf.selectSegmentModal.flagsUsingThisSegment': string
    'cf.selectSegmentModal.searchSegmentPlaceholder': string
    'cf.shared.archived': string
    'cf.shared.environment': string
    'cf.shared.evaluations': string
    'cf.shared.flags': string
    'cf.shared.getStarted': string
    'cf.shared.individual': string
    'cf.shared.lastEvaluated': string
    'cf.shared.off': string
    'cf.shared.on': string
    'cf.shared.pleaseSelectVariation': string
    'cf.shared.prerequisites': string
    'cf.shared.quickGuide': string
    'cf.shared.rules': string
    'cf.shared.segment': string
    'cf.shared.segments': string
    'cf.shared.selectEnvironment': string
    'cf.shared.selected': string
    'cf.shared.target': string
    'cf.shared.targetManagement': string
    'cf.shared.targets': string
    'cf.shared.variation': string
    'cf.shared.variations': string
    'cf.targetDetail.addTargetToSegment': string
    'cf.targetDetail.addToSegment': string
    'cf.targetDetail.attribute': string
    'cf.targetDetail.attributes': string
    'cf.targetDetail.autoAdded': string
    'cf.targetDetail.createdOnDate': string
    'cf.targetDetail.deleteTargetSuccess': string
    'cf.targetDetail.environmentLine': string
    'cf.targetDetail.exclude': string
    'cf.targetDetail.excludeTargetFromSegment': string
    'cf.targetDetail.excludefromSegment': string
    'cf.targetDetail.exclusionList': string
    'cf.targetDetail.flagSetting': string
    'cf.targetDetail.learnMore': string
    'cf.targetDetail.manuallyAdded': string
    'cf.targetDetail.noFlagConfigured': string
    'cf.targetDetail.noSegmentAdded': string
    'cf.targetDetail.noSegmentExcluded': string
    'cf.targetDetail.noSegmentMatched': string
    'cf.targetDetail.removeFromExcludeList': string
    'cf.targetDetail.removeFromExcludeListTitle': string
    'cf.targetDetail.removeFromIncludeList': string
    'cf.targetDetail.removeFromIncludeListTitle': string
    'cf.targetDetail.removeSegment': string
    'cf.targetDetail.searchPlaceholder': string
    'cf.targetDetail.targetSetting': string
    'cf.targetDetail.title': string
    'cf.targets.ID': string
    'cf.targets.addTargets': string
    'cf.targets.addTargetsLabel': string
    'cf.targets.create': string
    'cf.targets.createdDate': string
    'cf.targets.deleteTarget': string
    'cf.targets.deleteTargetMessage': string
    'cf.targets.deleteTargetSuccess': string
    'cf.targets.enterName': string
    'cf.targets.enterValue': string
    'cf.targets.lastActivity': string
    'cf.targets.list': string
    'cf.targets.name': string
    'cf.targets.noSegmentFound': string
    'cf.targets.noTargetFound': string
    'cf.targets.noneDefined': string
    'cf.targets.pageDescription': string
    'cf.targets.targetSegment': string
    'cf.targets.upload': string
    'cf.targets.uploadHeadline': string
    'cf.targets.uploadHelp': string
    'cf.targets.uploadStats': string
    'cf.targets.uploadYourFile': string
    'cf.testTheFlag.codeSample': string
    'cf.testTheFlag.codeSampleNote': string
    'cf.testTheFlag.confirmClose': string
    'cf.testTheFlag.initClient': string
    'cf.testTheFlag.installNode': string
    'cf.testTheFlag.sdkClient': string
    'cf.testTheFlag.sdkServer': string
    'cf.testTheFlag.selectSdk': string
    'cf.testTheFlag.selectSdkLanguage': string
    'cf.testTheFlag.setupAppText': string
    'cf.testTheFlag.testFlagHeading': string
    'cf.testTheFlag.testFlagTargetHeading': string
    'cf.testTheFlag.verify': string
    'cf.testTheFlag.verifyText': string
    'ci.advancedLabel': string
    'ci.annotations': string
    'ci.ciTrialHomePage.startTrial.description': string
    'ci.ciTrialHomePage.startTrial.startBtn.description': string
    'ci.clipboardCopyFail': string
    'ci.clipboardCopySuccess': string
    'ci.commitsOn': string
    'ci.committed': string
    'ci.connectors': string
    'ci.continuous': string
    'ci.createPipeline': string
    'ci.dashboard.createProject': string
    'ci.dashboard.subHeading': string
    'ci.delegates': string
    'ci.description': string
    'ci.executionLabel': string
    'ci.fileStore': string
    'ci.infraLabel': string
    'ci.labels': string
    'ci.learnMore': string
    'ci.moreCommitsLabel': string
    'ci.newConnectorButton': string
    'ci.newItem': string
    'ci.next': string
    'ci.noData': string
    'ci.optimize': string
    'ci.prSymbol': string
    'ci.previous': string
    'ci.privileged': string
    'ci.remoteCacheImage.dockerInfo': string
    'ci.remoteCacheImage.label': string
    'ci.remoteCacheImage.placeholder': string
    'ci.remoteCacheRepository.label': string
    'ci.save': string
    'ci.secrets': string
    'ci.templates': string
    'ci.titleGovernance': string
    'ci.titleResources': string
    'ci.titleSettings': string
    'ci.welcome': string
    'cv.abbreviatedCategories.errors': string
    'cv.abbreviatedCategories.infrastructure': string
    'cv.abbreviatedCategories.performance': string
    'cv.activityChanges.cumulative': string
    'cv.activityChanges.minRemaining': string
    'cv.activityChanges.minutesRemaining': string
    'cv.activityChanges.postDeployVerifications': string
    'cv.activityChanges.postProdDeployment': string
    'cv.activityChanges.preProdVerifications': string
    'cv.activityChanges.preProduction': string
    'cv.activityChanges.prodVerifications': string
    'cv.activityChanges.productionDeployment': string
    'cv.activityChanges.riskAfterChange': string
    'cv.activityChanges.riskBeforeChange': string
    'cv.activitySources.harnessCD.application.infoText': string
    'cv.activitySources.harnessCD.application.noData': string
    'cv.activitySources.harnessCD.application.searchPlaceholder': string
    'cv.activitySources.harnessCD.application.servicesToBeImported': string
    'cv.activitySources.harnessCD.defaultName': string
    'cv.activitySources.harnessCD.environment.env': string
    'cv.activitySources.harnessCD.environment.harnessEnv': string
    'cv.activitySources.harnessCD.environment.infoText': string
    'cv.activitySources.harnessCD.environment.noData': string
    'cv.activitySources.harnessCD.environment.searchPlaceholder': string
    'cv.activitySources.harnessCD.harnessApps': string
    'cv.activitySources.harnessCD.iconLabel': string
    'cv.activitySources.harnessCD.select': string
    'cv.activitySources.harnessCD.selectActivitySource': string
    'cv.activitySources.harnessCD.selectApplication': string
    'cv.activitySources.harnessCD.selectEnvironment': string
    'cv.activitySources.harnessCD.selectService': string
    'cv.activitySources.harnessCD.service.harnessServices': string
    'cv.activitySources.harnessCD.service.infoText': string
    'cv.activitySources.harnessCD.service.noData': string
    'cv.activitySources.harnessCD.service.searchPlaceholder': string
    'cv.activitySources.harnessCD.service.services': string
    'cv.activitySources.harnessCD.validation.applicationValidation': string
    'cv.activitySources.harnessCD.validation.environmentValidation': string
    'cv.activitySources.harnessCD.validation.serviceValidation': string
    'cv.activitySources.kubernetes.defaultName': string
    'cv.activitySources.kubernetes.mapWorkloadsToServices': string
    'cv.activitySources.kubernetes.missingWorkloadMapping': string
    'cv.activitySources.kubernetes.namespaceMapping.headingText': string
    'cv.activitySources.kubernetes.namespaceMapping.noNamespaces': string
    'cv.activitySources.kubernetes.namespaceMapping.searchNamespacePlaceholder': string
    'cv.activitySources.kubernetes.namespaceMapping.validateNamespace': string
    'cv.activitySources.kubernetes.noWorkloads': string
    'cv.activitySources.kubernetes.reviewPage.heading': string
    'cv.activitySources.kubernetes.reviewPage.reviewTableColumns.namespace': string
    'cv.activitySources.kubernetes.reviewPage.reviewTableColumns.service': string
    'cv.activitySources.kubernetes.reviewPage.reviewTableColumns.workload': string
    'cv.activitySources.kubernetes.searchWorkloadPlaceholder': string
    'cv.activitySources.kubernetes.selectKubernetesSource.connectorOptionHeading': string
    'cv.activitySources.kubernetes.selectKubernetesSource.connectorTypeValidation': string
    'cv.activitySources.kubernetes.selectKubernetesSource.createConnectorText': string
    'cv.activitySources.kubernetes.selectKubernetesSource.firstTimeSetupText': string
    'cv.activitySources.kubernetes.selectKubernetesSource.infraSpecification': string
    'cv.activitySources.kubernetes.selectKubernetesSource.infraType': string
    'cv.activitySources.kubernetes.selectKubernetesSource.nameActivitySourceValidation': string
    'cv.activitySources.kubernetes.selectKubernetesSource.nameValidation': string
    'cv.activitySources.kubernetes.selectKubernetesSource.selectConnectorHeading': string
    'cv.activitySources.kubernetes.tabNames.tab1': string
    'cv.activitySources.kubernetes.tabNames.tab2': string
    'cv.activitySources.kubernetes.tabNames.tab3': string
    'cv.activitySources.kubernetes.workloadToServiceTableColumns.mapToEnvironment': string
    'cv.activitySources.kubernetes.workloadToServiceTableColumns.mapToService': string
    'cv.activitySources.kubernetes.workloadToServiceTableColumns.workload': string
    'cv.activitySources.name': string
    'cv.activityTimeline.beforeChange': string
    'cv.activityTimeline.noChanges': string
    'cv.activityTimeline.otherChanges': string
    'cv.addNew': string
    'cv.admin.activitySources.addActivitySource': string
    'cv.admin.activitySources.dialogDeleteContent': string
    'cv.admin.activitySources.dialogDeleteTitle': string
    'cv.admin.activitySources.noDataMessage': string
    'cv.admin.activitySources.searchBoxPlaceholder': string
    'cv.admin.activitySources.tableColumnNames.createdOn': string
    'cv.admin.activitySources.tableColumnNames.lastUpdatedOn': string
    'cv.admin.mapsTo': string
    'cv.admin.monitoringSources.applicationsImported': string
    'cv.admin.monitoringSources.confirmDeleteContent': string
    'cv.admin.monitoringSources.confirmDeleteTitle': string
    'cv.admin.monitoringSources.environmentsImported': string
    'cv.admin.monitoringSources.importStatus': string
    'cv.admin.monitoringSources.importedOn': string
    'cv.admin.monitoringSources.newMonitoringSource': string
    'cv.admin.monitoringSources.noDataMessage': string
    'cv.admin.monitoringSources.searchPlaceholder': string
    'cv.admin.notifications.create.details': string
    'cv.admin.notifications.create.method': string
    'cv.admin.notifications.create.stepOne.heading': string
    'cv.admin.notifications.create.stepOne.name': string
    'cv.admin.notifications.create.stepThree.activityType': string
    'cv.admin.notifications.create.stepThree.configChange': string
    'cv.admin.notifications.create.stepThree.duringDeployment': string
    'cv.admin.notifications.create.stepThree.headingOne': string
    'cv.admin.notifications.create.stepThree.headingTwo': string
    'cv.admin.notifications.create.stepThree.infrastructureChange': string
    'cv.admin.notifications.create.stepThree.notifyRisk': string
    'cv.admin.notifications.create.stepThree.notifyVerification': string
    'cv.admin.notifications.create.stepThree.postDeployment': string
    'cv.admin.notifications.create.stepThree.preDeployment': string
    'cv.admin.notifications.create.stepThree.verification': string
    'cv.admin.notifications.create.stepThree.verificationStatus': string
    'cv.admin.notifications.create.type': string
    'cv.admin.notifications.create.validation.type': string
    'cv.admin.notifications.createSuccess': string
    'cv.admin.notifications.deleteSuccess': string
    'cv.admin.notifications.method': string
    'cv.admin.notifications.name': string
    'cv.admin.notifications.newNotification': string
    'cv.admin.notifications.updateSuccess': string
    'cv.admin.verificationJobs.cantBeCopied': string
    'cv.admin.verificationJobs.confirmDeleteContent': string
    'cv.admin.verificationJobs.confirmDeleteTitle': string
    'cv.admin.verificationJobs.jobTypes.blueGreen': string
    'cv.admin.verificationJobs.jobTypes.canary': string
    'cv.admin.verificationJobs.jobTypes.health': string
    'cv.admin.verificationJobs.jobTypes.test': string
    'cv.admin.verificationJobs.newVerificationJob': string
    'cv.admin.verificationJobs.noDataMessage': string
    'cv.allMetrics': string
    'cv.allServices': string
    'cv.analysisScreens.totalClusters': string
    'cv.anomalous': string
    'cv.anomalousMetrics': string
    'cv.changeTimeline': string
    'cv.changesPage.changeSourceDetails': string
    'cv.changesPage.changeSummary': string
    'cv.changesPage.eventCount': string
    'cv.changesPage.viewKubernetesEvents': string
    'cv.clusterType': string
    'cv.continuous': string
    'cv.copyURL': string
    'cv.currentProductionRisk': string
    'cv.cvTrialHomePage.startTrial.description': string
    'cv.cvTrialHomePage.startTrial.startBtn.description': string
    'cv.dashboard.createProject': string
    'cv.dashboard.notStarted': string
    'cv.dashboard.subHeading': string
    'cv.evaluationPeriod': string
    'cv.failures': string
    'cv.filter': string
    'cv.getRiskAssessment': string
    'cv.harnessEnvironment': string
    'cv.harnessService': string
    'cv.healthSource.addHealthSource': string
    'cv.healthSource.backtoMonitoredService': string
    'cv.healthSource.connectHealthSource': string
    'cv.healthSource.connectors.AppDynamics.applicationLabel': string
    'cv.healthSource.connectors.AppDynamics.applicationPlaceholder': string
    'cv.healthSource.connectors.AppDynamics.applicationsAndTiers': string
    'cv.healthSource.connectors.AppDynamics.metricPackLabel': string
    'cv.healthSource.connectors.AppDynamics.tierPlaceholder': string
    'cv.healthSource.connectors.AppDynamics.trierLabel': string
    'cv.healthSource.connectors.AppDynamics.validation.application': string
    'cv.healthSource.connectors.AppDynamics.validation.tier': string
    'cv.healthSource.connectors.NewRelic.applicationLabel': string
    'cv.healthSource.connectors.gco.selectDashboardTab': string
    'cv.healthSource.connectors.selectConnector': string
    'cv.healthSource.customizeHealthSource': string
    'cv.healthSource.defineHealthSource': string
    'cv.healthSource.defineYourSource': string
    'cv.healthSource.deleteHealthSource': string
    'cv.healthSource.deleteHealthSourceWarning': string
    'cv.healthSource.editHealthSource': string
    'cv.healthSource.environmentLabel': string
    'cv.healthSource.featureLabel': string
    'cv.healthSource.featurePlaceholder': string
    'cv.healthSource.nameLabel': string
    'cv.healthSource.namePlaceholder': string
    'cv.healthSource.noData': string
    'cv.healthSource.noDataPresentHealthSource': string
    'cv.healthSource.selectHealthSource': string
    'cv.healthSource.seriveEnvironmentNote': string
    'cv.healthSource.serviceLabel': string
    'cv.healthSource.table.environmentMapping': string
    'cv.healthSource.table.serviceMapping': string
    'cv.hostNamePlaceholder': string
    'cv.initiated': string
    'cv.jobNamePlaceholder': string
    'cv.known': string
    'cv.lastSuccessfulRun': string
    'cv.learnMore': string
    'cv.logCluster': string
    'cv.logsCluster': string
    'cv.messageFrequency': string
    'cv.methodLabel': string
    'cv.metricVerificationModal.modalTitle': string
    'cv.metricVerificationModal.viewCalls': string
    'cv.monitoredServices.addNewMonitoredServices': string
    'cv.monitoredServices.deleteMonitoredService': string
    'cv.monitoredServices.deleteMonitoredServiceWarning': string
    'cv.monitoredServices.editMonitoredServices': string
    'cv.monitoredServices.environmentValidation': string
    'cv.monitoredServices.filterlabel': string
    'cv.monitoredServices.monitoredServiceCreated': string
    'cv.monitoredServices.monitoredServiceDetails': string
    'cv.monitoredServices.monitoredServiceName': string
    'cv.monitoredServices.monitoredServiceTabs.configurations': string
    'cv.monitoredServices.monitoredServiceTabs.serviceHealth': string
    'cv.monitoredServices.monitoredServiceTabs.slos': string
    'cv.monitoredServices.monitoredServiceToggle': string
    'cv.monitoredServices.monitoredServiceUpdated': string
    'cv.monitoredServices.nameValidation': string
    'cv.monitoredServices.newMonitoredServices': string
    'cv.monitoredServices.noData': string
    'cv.monitoredServices.riskLabel.highRisk': string
    'cv.monitoredServices.riskLabel.lowRisk': string
    'cv.monitoredServices.riskLabel.mediumRisk': string
    'cv.monitoredServices.serviceAndEnvironment': string
    'cv.monitoredServices.serviceCount': string
    'cv.monitoredServices.serviceHealth.last24Hrs': string
    'cv.monitoredServices.serviceHealth.last3Days': string
    'cv.monitoredServices.serviceHealth.last4Hrs': string
    'cv.monitoredServices.serviceHealth.last7Days': string
    'cv.monitoredServices.serviceHealth.noDataAvailableForHealthScore': string
    'cv.monitoredServices.serviceHealth.overallHealthScore': string
    'cv.monitoredServices.serviceValidation': string
    'cv.monitoredServices.table.healthMonitoring': string
    'cv.monitoredServices.table.lastestHealthTrend': string
    'cv.monitoredServices.table.serviceHealthScore': string
    'cv.monitoredServices.table.serviceName': string
    'cv.monitoredServices.title': string
    'cv.monitoringSources.addMetric': string
    'cv.monitoringSources.addQuery': string
    'cv.monitoringSources.appD.appDApplications': string
    'cv.monitoringSources.appD.appDTier': string
    'cv.monitoringSources.appD.connectToMonitoringSource': string
    'cv.monitoringSources.appD.createConnectorText': string
    'cv.monitoringSources.appD.envDescription': string
    'cv.monitoringSources.appD.errorsFound': string
    'cv.monitoringSources.appD.firstTimeSetupText': string
    'cv.monitoringSources.appD.harnessEnv': string
    'cv.monitoringSources.appD.harnessServices': string
    'cv.monitoringSources.appD.infoPanel.applicationsDesc': string
    'cv.monitoringSources.appD.infoPanel.mapDashboards': string
    'cv.monitoringSources.appD.infoPanel.mapDashboardsMsg': string
    'cv.monitoringSources.appD.infoPanel.tiers': string
    'cv.monitoringSources.appD.mapApplicationsToEnv': string
    'cv.monitoringSources.appD.mapTiersToServices': string
    'cv.monitoringSources.appD.mapToHarnessEnvironment': string
    'cv.monitoringSources.appD.mappedToHarnessEnvironment': string
    'cv.monitoringSources.appD.mappedToHarnessService': string
    'cv.monitoringSources.appD.mappingToHarnessService': string
    'cv.monitoringSources.appD.noAppsMsg': string
    'cv.monitoringSources.appD.noData': string
    'cv.monitoringSources.appD.noTiersMsg': string
    'cv.monitoringSources.appD.product.applicationMonitoring': string
    'cv.monitoringSources.appD.product.businessMonitoring': string
    'cv.monitoringSources.appD.product.endUserMonitoring': string
    'cv.monitoringSources.appD.product.machineMonitoring': string
    'cv.monitoringSources.appD.searchPlaceholderApplications': string
    'cv.monitoringSources.appD.searchTiersPlaceHolder': string
    'cv.monitoringSources.appD.selectProduct': string
    'cv.monitoringSources.appD.status': string
    'cv.monitoringSources.appD.tiersMappedToServices': string
    'cv.monitoringSources.appD.validation': string
    'cv.monitoringSources.appD.validationMsg': string
    'cv.monitoringSources.appD.validations.selectApp': string
    'cv.monitoringSources.appD.validations.selectMetricPack': string
    'cv.monitoringSources.appD.validations.selectTier': string
    'cv.monitoringSources.appD.validationsFailed': string
    'cv.monitoringSources.appD.validationsPassed': string
    'cv.monitoringSources.appD.verificationsInProgress': string
    'cv.monitoringSources.backToMapping': string
    'cv.monitoringSources.baselineDeviation': string
    'cv.monitoringSources.buildYourQuery': string
    'cv.monitoringSources.envValidation': string
    'cv.monitoringSources.gco.addManualInputQuery': string
    'cv.monitoringSources.gco.connectToMonitoringSource': string
    'cv.monitoringSources.gco.createConnectorText': string
    'cv.monitoringSources.gco.defaultName': string
    'cv.monitoringSources.gco.firstTimeSetupText': string
    'cv.monitoringSources.gco.manualInputQueryModal.exampleString': string
    'cv.monitoringSources.gco.manualInputQueryModal.modalTitle': string
    'cv.monitoringSources.gco.manualInputQueryModal.subtitle1': string
    'cv.monitoringSources.gco.manualInputQueryModal.subtitle2': string
    'cv.monitoringSources.gco.manualInputQueryModal.subtitle3': string
    'cv.monitoringSources.gco.manualInputQueryModal.validation.query': string
    'cv.monitoringSources.gco.manualInputQueryModal.validation.uniqueMetricName': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.configureRiskProfile': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.enterQueryForValidation': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.manuallyInputQueriesLabel': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.mapMetricToServiceAndEnvironment': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.metricTagsLabel': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.noDataForQuery': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.operationsQueryLabel': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.querySpecifications': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.validation.baseline': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.validation.mainSetupValidation': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.validation.riskCategory': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.validation.tags': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.validation.tooManyMetrics': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.validation.validJSON': string
    'cv.monitoringSources.gco.mapMetricsToServicesPage.viewQuery': string
    'cv.monitoringSources.gco.product.logs': string
    'cv.monitoringSources.gco.product.metrics': string
    'cv.monitoringSources.gco.productValidationText': string
    'cv.monitoringSources.gco.reviewPage.gcoMetrics': string
    'cv.monitoringSources.gco.reviewPage.mappedMetrics': string
    'cv.monitoringSources.gco.searchForDashboardsPlaceholder': string
    'cv.monitoringSources.gco.selectDashboardsPage.dashboardColumnName': string
    'cv.monitoringSources.gco.selectDashboardsPage.noDataText': string
    'cv.monitoringSources.gco.selectProduct': string
    'cv.monitoringSources.gcoLogs.addQueryTooltip': string
    'cv.monitoringSources.gcoLogs.customizeQuery': string
    'cv.monitoringSources.gcoLogs.fetchRecords': string
    'cv.monitoringSources.gcoLogs.gcoLogsMessageIdentifer': string
    'cv.monitoringSources.gcoLogs.gcoLogsQuery': string
    'cv.monitoringSources.gcoLogs.gcoLogsServiceInstance': string
    'cv.monitoringSources.gcoLogs.messageIdentifier': string
    'cv.monitoringSources.gcoLogs.newGCOLogsMessage': string
    'cv.monitoringSources.gcoLogs.newGCOLogsMessageIdentifier': string
    'cv.monitoringSources.gcoLogs.newGCOLogsServiceInstance': string
    'cv.monitoringSources.gcoLogs.noRecordsForQuery': string
    'cv.monitoringSources.gcoLogs.query': string
    'cv.monitoringSources.gcoLogs.querySpecificationsAndMappings': string
    'cv.monitoringSources.gcoLogs.records': string
    'cv.monitoringSources.gcoLogs.selectPathForMessageIdentifier': string
    'cv.monitoringSources.gcoLogs.selectPathForServiceInstance': string
    'cv.monitoringSources.gcoLogs.selectRecords': string
    'cv.monitoringSources.gcoLogs.serviceInstance': string
    'cv.monitoringSources.gcoLogs.submitQueryToSeeRecords': string
    'cv.monitoringSources.gcoLogs.validation.messageIdentifier': string
    'cv.monitoringSources.gcoLogs.validation.messageIdentifierUniqueName': string
    'cv.monitoringSources.gcoLogs.validation.queryNameUnique': string
    'cv.monitoringSources.gcoLogs.validation.serviceInstance': string
    'cv.monitoringSources.gcoLogs.validation.serviceInstanceUniqueName': string
    'cv.monitoringSources.higherCounts': string
    'cv.monitoringSources.lowerCounts': string
    'cv.monitoringSources.mapMetricsToServices': string
    'cv.monitoringSources.mapQueriesToServices': string
    'cv.monitoringSources.metricNameLabel': string
    'cv.monitoringSources.metricNameValidation': string
    'cv.monitoringSources.metricPackValidation': string
    'cv.monitoringSources.nameYourMonitoringSource': string
    'cv.monitoringSources.newRelic.mapNewRelicAppsToServicesAndEnvs': string
    'cv.monitoringSources.newRelic.mappingServiceAndEnvSubheading': string
    'cv.monitoringSources.newRelic.newRelicAppColumn': string
    'cv.monitoringSources.newRelic.oneMetricMappingValidationSubtext': string
    'cv.monitoringSources.newRelic.selectedApplications': string
    'cv.monitoringSources.newRelic.totalMappedApplications': string
    'cv.monitoringSources.oneMetricMappingValidation': string
    'cv.monitoringSources.oneMetricMappingValidationSubtext': string
    'cv.monitoringSources.oneMetricPackValidation': string
    'cv.monitoringSources.optionalServiceInstanceLabel': string
    'cv.monitoringSources.prometheus.addMetricTooltip': string
    'cv.monitoringSources.prometheus.additionalFilter': string
    'cv.monitoringSources.prometheus.aggregator': string
    'cv.monitoringSources.prometheus.avgAggregator': string
    'cv.monitoringSources.prometheus.chartAndRecords': string
    'cv.monitoringSources.prometheus.countAggregator': string
    'cv.monitoringSources.prometheus.customizeQuery': string
    'cv.monitoringSources.prometheus.environmentFilter': string
    'cv.monitoringSources.prometheus.groupName': string
    'cv.monitoringSources.prometheus.isManualQuery': string
    'cv.monitoringSources.prometheus.mapPrometheusMetricsToServicesAndEnvs': string
    'cv.monitoringSources.prometheus.mappingValidation': string
    'cv.monitoringSources.prometheus.maxAggregator': string
    'cv.monitoringSources.prometheus.minAggregator': string
    'cv.monitoringSources.prometheus.newPrometheusGroupName': string
    'cv.monitoringSources.prometheus.noRecordsForQuery': string
    'cv.monitoringSources.prometheus.prometheusMetric': string
    'cv.monitoringSources.prometheus.prometheusMetrics': string
    'cv.monitoringSources.prometheus.provideQueryToSeeRecords': string
    'cv.monitoringSources.prometheus.querySettingsNotEditable': string
    'cv.monitoringSources.prometheus.querySettingsSubtext': string
    'cv.monitoringSources.prometheus.querySpecificationsAndMappings': string
    'cv.monitoringSources.prometheus.serviceFilter': string
    'cv.monitoringSources.prometheus.stddevAggregator': string
    'cv.monitoringSources.prometheus.stdvarAggregator': string
    'cv.monitoringSources.prometheus.sumAggregator': string
    'cv.monitoringSources.prometheus.undoManualQuery': string
    'cv.monitoringSources.prometheus.validation.aggregator': string
    'cv.monitoringSources.prometheus.validation.deviation': string
    'cv.monitoringSources.prometheus.validation.filterOnEnvironment': string
    'cv.monitoringSources.prometheus.validation.filterOnService': string
    'cv.monitoringSources.prometheus.validation.groupName': string
    'cv.monitoringSources.prometheus.validation.metricNameUnique': string
    'cv.monitoringSources.prometheus.validation.promethusMetric': string
    'cv.monitoringSources.prometheus.validation.recordCount': string
    'cv.monitoringSources.prometheus.validation.serviceInstanceIdentifier': string
    'cv.monitoringSources.prometheus.validation.uniqueName': string
    'cv.monitoringSources.queryName': string
    'cv.monitoringSources.queryNameLabel': string
    'cv.monitoringSources.queryNameValidation': string
    'cv.monitoringSources.reviewPageSubHeading': string
    'cv.monitoringSources.riskCategoryLabel': string
    'cv.monitoringSources.riskProfile': string
    'cv.monitoringSources.serviceInstanceIdentifier': string
    'cv.monitoringSources.serviceValidation': string
    'cv.monitoringSources.splunk.savedSearchQuery': string
    'cv.monitoringSources.splunk.splunkLogsQuery': string
    'cv.monitoringSources.splunk.staleRecordsWarning': string
    'cv.monitoringSources.splunk.submitQueryToSeeRecords': string
    'cv.monitoringSources.totalMappedQueries': string
    'cv.navLinks.activities': string
    'cv.navLinks.adminSideNavLinks.activitySources': string
    'cv.navLinks.adminSideNavLinks.monitoringSources': string
    'cv.navLinks.adminSideNavLinks.setup': string
    'cv.noAnalysis': string
    'cv.noAnomalies': string
    'cv.nonAnomalous': string
    'cv.onboarding.activitySources.addMoreSources': string
    'cv.onboarding.activitySources.addedStatus': string
    'cv.onboarding.activitySources.changeSourceInfo': string
    'cv.onboarding.activitySources.dontHaveChangeSource': string
    'cv.onboarding.activitySources.infrastructureProvider': string
    'cv.onboarding.changeSourceTypes.HarnessCDNextGen.icon': string
    'cv.onboarding.changeSourceTypes.HarnessCDNextGen.name': string
    'cv.onboarding.defaultChangeSource': string
    'cv.onboarding.monitoringSources.addConnector': string
    'cv.onboarding.monitoringSources.addMoreSources': string
    'cv.onboarding.monitoringSources.addedStatus': string
    'cv.onboarding.monitoringSources.defineMonitoringSource': string
    'cv.onboarding.monitoringSources.firstTimeSetupText': string
    'cv.onboarding.monitoringSources.metricPacksToMonitor': string
    'cv.onboarding.monitoringSources.monitoringSourceInfo': string
    'cv.onboarding.monitoringSources.monitoringSourceSubheading': string
    'cv.onboarding.monitoringSources.select': string
    'cv.onboarding.monitoringSources.selectConnector': string
    'cv.onboarding.monitoringSources.selectMetricPacks': string
    'cv.onboarding.monitoringSources.selectProduct': string
    'cv.onboarding.monitoringSources.skipToMonitoringSource': string
    'cv.onboarding.monitoringSources.specifyConnector': string
    'cv.onboarding.progress.heading': string
    'cv.onboarding.progress.mapServices': string
    'cv.onboarding.progress.multiServiceUsedInMonitoringSources': string
    'cv.onboarding.progress.multiServicesUsedInActivitySources': string
    'cv.onboarding.progress.multipleServicesUndergoingHealthVerification': string
    'cv.onboarding.progress.serviceEnvCount': string
    'cv.onboarding.progress.serviceUsedInMonitoringSources': string
    'cv.onboarding.progress.servicesUndergoingHealthVerification': string
    'cv.onboarding.progress.servicesUsedInActivitySources': string
    'cv.onboarding.selectProductScreen.validationText.connectorRef': string
    'cv.onboarding.selectProductScreen.validationText.identifier': string
    'cv.onboarding.selectProductScreen.validationText.name': string
    'cv.onboarding.selectProductScreen.validationText.product': string
    'cv.onboarding.selectProductScreen.validationText.source': string
    'cv.onboarding.selectProductScreen.validationText.validIdRegex': string
    'cv.onboarding.verificationJobs.createJob': string
    'cv.onboarding.verificationJobs.createJobQues': string
    'cv.onboarding.verificationJobs.heading': string
    'cv.onboarding.verificationJobs.infoText': string
    'cv.onboarding.verificationJobs.keepGoing': string
    'cv.onboarding.verificationJobs.setupInfo': string
    'cv.onboarding.verificationJobs.subHeading': string
    'cv.overall': string
    'cv.overviewPage.recentChangeVerifications': string
    'cv.perHeatMapCell': string
    'cv.pinABaseline': string
    'cv.postDeployment': string
    'cv.preProductionTests': string
    'cv.proceedToEdit': string
    'cv.queries': string
    'cv.query': string
    'cv.request': string
    'cv.response': string
    'cv.responseBody': string
    'cv.responseTime': string
    'cv.riskCardTooltip.allServicesGreen': string
    'cv.riskCardTooltip.header': string
    'cv.riskScore': string
    'cv.riskTimeline': string
    'cv.sampleEvent': string
    'cv.sampleMessage': string
    'cv.searchForAService': string
    'cv.selectCreateService': string
    'cv.selectOrCreateEnv': string
    'cv.selectQuery': string
    'cv.selectedTimeInterval': string
    'cv.serviceDashboardPage.fifteenMinutes': string
    'cv.serviceDashboardPage.fiveMinutes': string
    'cv.serviceDashboardPage.fourHours': string
    'cv.serviceDashboardPage.goToMonitoringSources': string
    'cv.serviceDashboardPage.noServicesConfigured': string
    'cv.serviceDashboardPage.oneDay': string
    'cv.serviceDashboardPage.oneHour': string
    'cv.serviceDashboardPage.sevenDays': string
    'cv.serviceDashboardPage.thirtyDays': string
    'cv.serviceDashboardPage.twelveHours': string
    'cv.setup': string
    'cv.share': string
    'cv.showLess': string
    'cv.showMore': string
    'cv.statusCode': string
    'cv.thirdPartyCalls.modalTitle': string
    'cv.thirdPartyCalls.noCallsWereMade': string
    'cv.thirdPartyCalls.requestMade': string
    'cv.thirdPartyCalls.timeTaken': string
    'cv.throughput': string
    'cv.timeline': string
    'cv.trafficSplit': string
    'cv.trend': string
    'cv.turnService': string
    'cv.unexpected': string
    'cv.unknown': string
    'cv.urlCopied': string
    'cv.verificationErrored': string
    'cv.verificationJobs.configure.heading': string
    'cv.verificationJobs.configure.postDepText': string
    'cv.verificationJobs.configure.preDepText': string
    'cv.verificationJobs.configure.prodDepText': string
    'cv.verificationJobs.configure.tabName': string
    'cv.verificationJobs.details.heading': string
    'cv.verificationJobs.details.name': string
    'cv.verificationJobs.details.postDeploymentTests': string
    'cv.verificationJobs.details.preDeploymentTests': string
    'cv.verificationJobs.details.productionDep': string
    'cv.verificationJobs.details.selectType': string
    'cv.verificationJobs.details.tabName': string
    'cv.verificationJobs.details.verificationMonitoringSource': string
    'cv.verificationJobs.validation.baseline': string
    'cv.verificationJobs.validation.changeSource': string
    'cv.verificationJobs.validation.dataSource': string
    'cv.verificationJobs.validation.duration': string
    'cv.verificationJobs.validation.environment': string
    'cv.verificationJobs.validation.sensitivity': string
    'cv.verificationJobs.validation.service': string
    'cv.verificationJobs.validation.type': string
    'cv.verificationStatus': string
    'cv.verifications': string
    /**
     * @deprecated migrate this string to module level file
     */
    AZ09: string
    /**
     * @deprecated migrate this string to module level file
     */
    HTTP: string
    /**
     * @deprecated migrate this string to module level file
     */
    HTTPS: string
    /**
     * @deprecated migrate this string to module level file
     */
    SSH: string
    /**
     * @deprecated migrate this string to module level file
     */
    SSH_KEY: string
    /**
     * @deprecated migrate this string to module level file
     */
    UrlLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    ZA90: string
    /**
     * @deprecated migrate this string to module level file
     */
    abort: string
    /**
     * @deprecated migrate this string to module level file
     */
    accessControl: string
    /**
     * @deprecated migrate this string to module level file
     */
    account: string
    /**
     * @deprecated migrate this string to module level file
     */
    action: string
    /**
     * @deprecated migrate this string to module level file
     */
    active: string
    /**
     * @deprecated migrate this string to module level file
     */
    activity: string
    /**
     * @deprecated migrate this string to module level file
     */
    'activityHistory.connectivityCheck': string
    /**
     * @deprecated migrate this string to module level file
     */
    'activityHistory.connectivityCheckFailed': string
    /**
     * @deprecated migrate this string to module level file
     */
    'activityHistory.createdSuccessfully': string
    /**
     * @deprecated migrate this string to module level file
     */
    'activityHistory.failedActivity': string
    /**
     * @deprecated migrate this string to module level file
     */
    'activityHistory.heartbeatFailure': string
    /**
     * @deprecated migrate this string to module level file
     */
    'activityHistory.noData': string
    /**
     * @deprecated migrate this string to module level file
     */
    'activityHistory.successfulActivity': string
    /**
     * @deprecated migrate this string to module level file
     */
    'activityHistory.updatedSuccessfully': string
    /**
     * @deprecated migrate this string to module level file
     */
    activityHistoryLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    activityLog: string
    /**
     * @deprecated migrate this string to module level file
     */
    add: string
    /**
     * @deprecated migrate this string to module level file
     */
    addFile: string
    /**
     * @deprecated migrate this string to module level file
     */
    addFileText: string
    /**
     * @deprecated migrate this string to module level file
     */
    addInputVar: string
    /**
     * @deprecated migrate this string to module level file
     */
    addNotification: string
    /**
     * @deprecated migrate this string to module level file
     */
    addOutputVar: string
    /**
     * @deprecated migrate this string to module level file
     */
    addOverrideSet: string
    /**
     * @deprecated migrate this string to module level file
     */
    addPipeline: string
    /**
     * @deprecated migrate this string to module level file
     */
    addRepository: string
    /**
     * @deprecated migrate this string to module level file
     */
    addStage: string
    /**
     * @deprecated migrate this string to module level file
     */
    addStep: string
    /**
     * @deprecated migrate this string to module level file
     */
    addStepGroup: string
    /**
     * @deprecated migrate this string to module level file
     */
    addressErrorFields: string
    /**
     * @deprecated migrate this string to module level file
     */
    adminFunctions: string
    /**
     * @deprecated migrate this string to module level file
     */
    adminLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    adminResources: string
    /**
     * @deprecated migrate this string to module level file
     */
    advancedTitle: string
    /**
     * @deprecated migrate this string to module level file
     */
    all: string
    /**
     * @deprecated migrate this string to module level file
     */
    allNotificationFormat: string
    /**
     * @deprecated migrate this string to module level file
     */
    allowedValues: string
    /**
     * @deprecated migrate this string to module level file
     */
    and: string
    /**
     * @deprecated migrate this string to module level file
     */
    anonymous: string
    /**
     * @deprecated migrate this string to module level file
     */
    applications: string
    /**
     * @deprecated migrate this string to module level file
     */
    applyChanges: string
    /**
     * @deprecated migrate this string to module level file
     */
    'approvalStage.approvalTypeHeading': string
    /**
     * @deprecated migrate this string to module level file
     */
    'approvalStage.setupShellExecution': string
    /**
     * @deprecated migrate this string to module level file
     */
    'approvalStage.setupShellOverview': string
    /**
     * @deprecated migrate this string to module level file
     */
    'approvalStage.stageNameRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'approvalStage.title': string
    /**
     * @deprecated migrate this string to module level file
     */
    archive: string
    /**
     * @deprecated migrate this string to module level file
     */
    archiveFormat: string
    /**
     * @deprecated migrate this string to module level file
     */
    argsLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    artifactDisplay: string
    /**
     * @deprecated migrate this string to module level file
     */
    artifactOrArtifacts: string
    /**
     * @deprecated migrate this string to module level file
     */
    artifactRepositories: string
    /**
     * @deprecated migrate this string to module level file
     */
    artifactRepository: string
    /**
     * @deprecated migrate this string to module level file
     */
    artifacts: string
    /**
     * @deprecated migrate this string to module level file
     */
    assertionLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    assessment: string
    /**
     * @deprecated migrate this string to module level file
     */
    authentication: string
    /**
     * @deprecated migrate this string to module level file
     */
    back: string
    /**
     * @deprecated migrate this string to module level file
     */
    basic: string
    /**
     * @deprecated migrate this string to module level file
     */
    blueGreen: string
    /**
     * @deprecated migrate this string to module level file
     */
    buildText: string
    /**
     * @deprecated migrate this string to module level file
     */
    buildToolLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    buildsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    canary: string
    /**
     * @deprecated migrate this string to module level file
     */
    cancel: string
    /**
     * @deprecated migrate this string to module level file
     */
    'canvasButtons.zoomIn': string
    /**
     * @deprecated migrate this string to module level file
     */
    'canvasButtons.zoomOut': string
    /**
     * @deprecated migrate this string to module level file
     */
    'canvasButtons.zoomToFit': string
    /**
     * @deprecated migrate this string to module level file
     */
    categories: string
    /**
     * @deprecated migrate this string to module level file
     */
    'cdDashboard.description': string
    /**
     * @deprecated migrate this string to module level file
     */
    'cdDashboard.welcome': string
    /**
     * @deprecated migrate this string to module level file
     */
    change: string
    /**
     * @deprecated migrate this string to module level file
     */
    changeHistory: string
    /**
     * @deprecated migrate this string to module level file
     */
    changeSource: string
    /**
     * @deprecated migrate this string to module level file
     */
    changeVerificationText: string
    /**
     * @deprecated migrate this string to module level file
     */
    changes: string
    /**
     * @deprecated migrate this string to module level file
     */
    characters: string
    /**
     * @deprecated migrate this string to module level file
     */
    chartPath: string
    /**
     * @deprecated migrate this string to module level file
     */
    ciCodebase: string
    /**
     * @deprecated migrate this string to module level file
     */
    clickHere: string
    /**
     * @deprecated migrate this string to module level file
     */
    clickToCopy: string
    /**
     * @deprecated migrate this string to module level file
     */
    clipboardCopyFail: string
    /**
     * @deprecated migrate this string to module level file
     */
    clipboardCopySuccess: string
    /**
     * @deprecated migrate this string to module level file
     */
    cloneCodebaseLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    close: string
    /**
     * @deprecated migrate this string to module level file
     */
    closeSelection: string
    /**
     * @deprecated migrate this string to module level file
     */
    cloudCostsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    cloudProviders: string
    /**
     * @deprecated migrate this string to module level file
     */
    codeRepositories: string
    /**
     * @deprecated migrate this string to module level file
     */
    codebase: string
    /**
     * @deprecated migrate this string to module level file
     */
    collaboratorsLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    color: string
    /**
     * @deprecated migrate this string to module level file
     */
    commandLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    commandPlaceholder: string
    /**
     * @deprecated migrate this string to module level file
     */
    commits: string
    /**
     * @deprecated migrate this string to module level file
     */
    commonError: string
    /**
     * @deprecated migrate this string to module level file
     */
    conditions: string
    /**
     * @deprecated migrate this string to module level file
     */
    configuration: string
    /**
     * @deprecated migrate this string to module level file
     */
    confirm: string
    /**
     * @deprecated migrate this string to module level file
     */
    confirmation: string
    /**
     * @deprecated migrate this string to module level file
     */
    connecectorHelpHeader: string
    /**
     * @deprecated migrate this string to module level file
     */
    connecectorHelpText: string
    /**
     * @deprecated migrate this string to module level file
     */
    connected: string
    /**
     * @deprecated migrate this string to module level file
     */
    connection: string
    /**
     * @deprecated migrate this string to module level file
     */
    connectionMode: string
    /**
     * @deprecated migrate this string to module level file
     */
    connectivityStatus: string
    /**
     * @deprecated migrate this string to module level file
     */
    connector: string
    /**
     * @deprecated migrate this string to module level file
     */
    connectorCreated: string
    /**
     * @deprecated migrate this string to module level file
     */
    connectorsLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    consoleView: string
    /**
     * @deprecated migrate this string to module level file
     */
    continue: string
    /**
     * @deprecated migrate this string to module level file
     */
    continueWithoutSavingText: string
    /**
     * @deprecated migrate this string to module level file
     */
    continueWithoutSavingTitle: string
    /**
     * @deprecated migrate this string to module level file
     */
    copiedToClipboard: string
    /**
     * @deprecated migrate this string to module level file
     */
    create: string
    /**
     * @deprecated migrate this string to module level file
     */
    createOrSelectSecret: string
    /**
     * @deprecated migrate this string to module level file
     */
    'createPipeline.pipelineNameRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    createProject: string
    /**
     * @deprecated migrate this string to module level file
     */
    'createSecretYAML.create': string
    /**
     * @deprecated migrate this string to module level file
     */
    'createSecretYAML.createSecret': string
    /**
     * @deprecated migrate this string to module level file
     */
    'createSecretYAML.invalidSecret': string
    /**
     * @deprecated migrate this string to module level file
     */
    'createSecretYAML.newSecret': string
    /**
     * @deprecated migrate this string to module level file
     */
    'createSecretYAML.secretCreated': string
    /**
     * @deprecated migrate this string to module level file
     */
    createViaYaml: string
    /**
     * @deprecated migrate this string to module level file
     */
    created: string
    /**
     * @deprecated migrate this string to module level file
     */
    createdAt: string
    /**
     * @deprecated migrate this string to module level file
     */
    createdBy: string
    /**
     * @deprecated migrate this string to module level file
     */
    creationTimestamp: string
    /**
     * @deprecated migrate this string to module level file
     */
    credType: string
    /**
     * @deprecated migrate this string to module level file
     */
    credentials: string
    /**
     * @deprecated migrate this string to module level file
     */
    customText: string
    /**
     * @deprecated migrate this string to module level file
     */
    'customVariables.pipelineVariablesDescription': string
    /**
     * @deprecated migrate this string to module level file
     */
    'customVariables.pipelineVariablesTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'customVariables.title': string
    /**
     * @deprecated migrate this string to module level file
     */
    'customVariables.variableAndType': string
    /**
     * @deprecated migrate this string to module level file
     */
    dashboardLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    dateLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.CONFIGURATION_NAME': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.DelegateName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.DelegateSelector': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.DelegateSelectorErrMsgSplChars': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.DelegateSelectorErrorMessage': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.Delegate_Selector_placeholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.DelegateselectionConnectorText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.DelegateselectionLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.Init_Script': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.LastHeartBeat': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.NEW_DELEGATE': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.ReturnToDelegates': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.Scope': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.amazonECS.icon': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.amazonECS.name': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.amazonECS.text': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.amazonECS.value': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.docker.icon': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.docker.name': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.docker.text': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.docker.value': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.kubernetes.icon': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.kubernetes.text': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.kubernetes.value': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.linux.icon': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.linux.name': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.linux.text': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.cardData.linux.value': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.configNameRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateCPU': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateConfigRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateConfiguration': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateConfigurations': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateDISK': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateMEM': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateNameRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateSize': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateSizeLarge': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateSizeLower': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateSizeRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateSizeUndefined': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateSizeUpto': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateSpecificTags': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateTagDescription': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateTags': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegateType': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegates': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegatesConfigurations': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.delegates_4_ways_title': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.deleteDelegate': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.deleteDelegateConfiguration': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.deleteDelegateConfigurationQuestion': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.deleteDelegateConfigurationSuccess': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.enterTags': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.envTypes': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.hostName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.initScriptPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.instancesCount': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.kubernetes.permissions_info1': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.kubernetes.permissions_info2': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.kubernetes.permissions_title': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.kubernetes.prerequisites': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.kubernetes.prerequisites_info1': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.kubernetes.prerequisites_info2': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.kubernetes.prerequisites_info3': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.kubernetes.prerequisites_worload': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.kubernetes.url': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.newConfiguration': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.notConnected': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.numberOfDelegates': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.pendingApproval': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.productionWorkloads': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.reviewScript.configProxySettings': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.reviewScript.descriptionProxySettings': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.selectEnvType': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.selectEnvs': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.stepOneWizard': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.successVerification.applyYAMLTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.successVerification.checkDelegateInstalled': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.successVerification.delegateInitialized': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.successVerification.delegateInstalled': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.successVerification.description1': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.successVerification.description2': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.successVerification.heartbeatReceived': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.successfullyUpdatedConfig': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.tagsFromDelegateConfig': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.totalCpu': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.totalMem': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.useExistingSelectors': string
    /**
     * @deprecated migrate this string to module level file
     */
    'delegate.verifyDelegateYamlCmnd': string
    /**
     * @deprecated migrate this string to module level file
     */
    delete: string
    /**
     * @deprecated migrate this string to module level file
     */
    deleteError: string
    /**
     * @deprecated migrate this string to module level file
     */
    deletePipelineStage: string
    /**
     * @deprecated migrate this string to module level file
     */
    deleteStageFailure: string
    /**
     * @deprecated migrate this string to module level file
     */
    deleteStageSuccess: string
    /**
     * @deprecated migrate this string to module level file
     */
    deleted: string
    /**
     * @deprecated migrate this string to module level file
     */
    dependencyImagePlaceholder: string
    /**
     * @deprecated migrate this string to module level file
     */
    dependencyNameLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    deploymentText: string
    /**
     * @deprecated migrate this string to module level file
     */
    deploymentTypeText: string
    /**
     * @deprecated migrate this string to module level file
     */
    deploymentsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    description: string
    /**
     * @deprecated migrate this string to module level file
     */
    descriptionLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    details: string
    /**
     * @deprecated migrate this string to module level file
     */
    dockerRegistry: string
    /**
     * @deprecated migrate this string to module level file
     */
    done: string
    /**
     * @deprecated migrate this string to module level file
     */
    duplicate: string
    /**
     * @deprecated migrate this string to module level file
     */
    duration: string
    /**
     * @deprecated migrate this string to module level file
     */
    edit: string
    /**
     * @deprecated migrate this string to module level file
     */
    editCredentials: string
    /**
     * @deprecated migrate this string to module level file
     */
    editDetails: string
    /**
     * @deprecated migrate this string to module level file
     */
    editEnvironment: string
    /**
     * @deprecated migrate this string to module level file
     */
    editNotification: string
    /**
     * @deprecated migrate this string to module level file
     */
    editPipeline: string
    /**
     * @deprecated migrate this string to module level file
     */
    editRole: string
    /**
     * @deprecated migrate this string to module level file
     */
    editService: string
    /**
     * @deprecated migrate this string to module level file
     */
    email: string
    /**
     * @deprecated migrate this string to module level file
     */
    emptyDeployments: string
    /**
     * @deprecated migrate this string to module level file
     */
    enable: string
    /**
     * @deprecated migrate this string to module level file
     */
    enableGitExperience: string
    /**
     * @deprecated migrate this string to module level file
     */
    enabledLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    encrypted: string
    /**
     * @deprecated migrate this string to module level file
     */
    encryptedFile: string
    /**
     * @deprecated migrate this string to module level file
     */
    encryptedKeyLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    endedAt: string
    /**
     * @deprecated migrate this string to module level file
     */
    entities: string
    /**
     * @deprecated migrate this string to module level file
     */
    entity: string
    /**
     * @deprecated migrate this string to module level file
     */
    'entityReference.apply': string
    /**
     * @deprecated migrate this string to module level file
     */
    'entityReference.noRecordFound': string
    /**
     * @deprecated migrate this string to module level file
     */
    entryPointLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    envType: string
    /**
     * @deprecated migrate this string to module level file
     */
    environment: string
    /**
     * @deprecated migrate this string to module level file
     */
    environmentOrEnvironments: string
    /**
     * @deprecated migrate this string to module level file
     */
    environmentVariables: string
    /**
     * @deprecated migrate this string to module level file
     */
    environments: string
    /**
     * @deprecated migrate this string to module level file
     */
    error: string
    /**
     * @deprecated migrate this string to module level file
     */
    errorDetails: string
    /**
     * @deprecated migrate this string to module level file
     */
    errorHelp: string
    /**
     * @deprecated migrate this string to module level file
     */
    errorSubtitle: string
    /**
     * @deprecated migrate this string to module level file
     */
    errorSummaryText: string
    /**
     * @deprecated migrate this string to module level file
     */
    errorTag: string
    /**
     * @deprecated migrate this string to module level file
     */
    errorTitle: string
    /**
     * @deprecated migrate this string to module level file
     */
    errorWhileSaving: string
    /**
     * @deprecated migrate this string to module level file
     */
    errors: string
    /**
     * @deprecated migrate this string to module level file
     */
    events: string
    /**
     * @deprecated migrate this string to module level file
     */
    'execution.consoleLogs': string
    /**
     * @deprecated migrate this string to module level file
     */
    'execution.pipelineIdentifierTextCD': string
    /**
     * @deprecated migrate this string to module level file
     */
    'execution.pipelineIdentifierTextCI': string
    /**
     * @deprecated migrate this string to module level file
     */
    'execution.stepLogs': string
    /**
     * @deprecated migrate this string to module level file
     */
    'execution.triggerType.MANUAL': string
    /**
     * @deprecated migrate this string to module level file
     */
    'execution.triggerType.WEBHOOK': string
    /**
     * @deprecated migrate this string to module level file
     */
    executionHeaderText: string
    /**
     * @deprecated migrate this string to module level file
     */
    'executionList.servicesDeployedText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'executionStrategy.preview': string
    /**
     * @deprecated migrate this string to module level file
     */
    'executionStrategy.strategyType': string
    /**
     * @deprecated migrate this string to module level file
     */
    executionText: string
    /**
     * @deprecated migrate this string to module level file
     */
    executionsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    failIfKeyNotFound: string
    /**
     * @deprecated migrate this string to module level file
     */
    failed: string
    /**
     * @deprecated migrate this string to module level file
     */
    featureFlagsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    featureNA: string
    /**
     * @deprecated migrate this string to module level file
     */
    fetching: string
    /**
     * @deprecated migrate this string to module level file
     */
    fieldRequired: string
    /**
     * @deprecated migrate this string to module level file
     */
    fileFolderPathText: string
    /**
     * @deprecated migrate this string to module level file
     */
    filePaths: string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.apply': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.clearAll': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.confirmDelete': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.deleteFilterForEveryone': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.deleteFilterForUser': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.executions.buildType': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.executions.pipelineName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.executions.pullOrMergeRequest': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.executions.selectBuildTypeLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.executions.tagPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.filterDeleted': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.filterDuplicated': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.filterVisibility': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.filtersLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.invalidCriteria': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.invalidSelection': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.name': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.nameRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.newFilter': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.noDataFound': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.noFilterFound': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.saveFilter': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.selectFilter': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.typeFilterName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.visibileToOnlyMe': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.visibilityRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.visibilityTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'filters.visibleToEveryone': string
    /**
     * @deprecated migrate this string to module level file
     */
    finish: string
    /**
     * @deprecated migrate this string to module level file
     */
    flag: string
    /**
     * @deprecated migrate this string to module level file
     */
    functions: string
    /**
     * @deprecated migrate this string to module level file
     */
    generalSettings: string
    /**
     * @deprecated migrate this string to module level file
     */
    getStarted: string
    /**
     * @deprecated migrate this string to module level file
     */
    gitBranch: string
    /**
     * @deprecated migrate this string to module level file
     */
    gitExperienceNewUserText: string
    /**
     * @deprecated migrate this string to module level file
     */
    'gitFetchTypes.fromBranch': string
    /**
     * @deprecated migrate this string to module level file
     */
    'gitFetchTypes.fromCommit': string
    /**
     * @deprecated migrate this string to module level file
     */
    gitManagement: string
    /**
     * @deprecated migrate this string to module level file
     */
    gitTag: string
    /**
     * @deprecated migrate this string to module level file
     */
    goToHome: string
    /**
     * @deprecated migrate this string to module level file
     */
    governance: string
    /**
     * @deprecated migrate this string to module level file
     */
    harness: string
    /**
     * @deprecated migrate this string to module level file
     */
    health: string
    /**
     * @deprecated migrate this string to module level file
     */
    helmVersion: string
    /**
     * @deprecated migrate this string to module level file
     */
    hours: string
    /**
     * @deprecated migrate this string to module level file
     */
    idLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    identifier: string
    /**
     * @deprecated migrate this string to module level file
     */
    image: string
    /**
     * @deprecated migrate this string to module level file
     */
    imageLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    imageNameLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    imagePlaceholder: string
    /**
     * @deprecated migrate this string to module level file
     */
    inProgress: string
    /**
     * @deprecated migrate this string to module level file
     */
    inactive: string
    /**
     * @deprecated migrate this string to module level file
     */
    infrastructureText: string
    /**
     * @deprecated migrate this string to module level file
     */
    infrastructureTypeText: string
    /**
     * @deprecated migrate this string to module level file
     */
    inline: string
    /**
     * @deprecated migrate this string to module level file
     */
    inputName: string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.aboutInputSets': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.addInputSet': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.addInputSetPlus': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.confirmDeleteText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.confirmDeleteTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.editOverlayTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.editTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.helpTextForMultiSelect': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.inputFieldSummary': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.inputSetDeleted': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.inputSetIsRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.inputSetLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.inputSetName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.inputSetSaved': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.inputSetSavedError': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.nameIsRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.newInputSet': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.newInputSetLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.newOverlayInputSet': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.noRecord': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.overlayInputSet': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.overlayInputSetSaved': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.overlayInputSetSavedError': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.overlaySetName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.saveAsInputSet': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.searchInputSet': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.selectInputSets': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.selectInputSetsHelp': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputSets.selectMultipleInputSets': string
    /**
     * @deprecated migrate this string to module level file
     */
    inputSetsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputTypes.EXPRESSION': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputTypes.FIXED': string
    /**
     * @deprecated migrate this string to module level file
     */
    'inputTypes.RUNTIME': string
    /**
     * @deprecated migrate this string to module level file
     */
    inputValue: string
    /**
     * @deprecated migrate this string to module level file
     */
    inputs: string
    /**
     * @deprecated migrate this string to module level file
     */
    'instanceFieldOptions.instanceHolder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'instanceFieldOptions.instanceText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'instanceFieldOptions.instances': string
    /**
     * @deprecated migrate this string to module level file
     */
    'instanceFieldOptions.percentage': string
    /**
     * @deprecated migrate this string to module level file
     */
    'instanceFieldOptions.percentagePlaceHolder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'instanceFieldOptions.percentageText': string
    /**
     * @deprecated migrate this string to module level file
     */
    invalidText: string
    /**
     * @deprecated migrate this string to module level file
     */
    invalidYaml: string
    /**
     * @deprecated migrate this string to module level file
     */
    invalidYamlText: string
    /**
     * @deprecated migrate this string to module level file
     */
    kerberos: string
    /**
     * @deprecated migrate this string to module level file
     */
    keyLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    kind: string
    /**
     * @deprecated migrate this string to module level file
     */
    kubernetesDirectText: string
    /**
     * @deprecated migrate this string to module level file
     */
    kubernetesText: string
    /**
     * @deprecated migrate this string to module level file
     */
    languageLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    lastActivity: string
    /**
     * @deprecated migrate this string to module level file
     */
    lastConnectionSuccess: string
    /**
     * @deprecated migrate this string to module level file
     */
    lastExecutionTs: string
    /**
     * @deprecated migrate this string to module level file
     */
    lastRunAtDate: string
    /**
     * @deprecated migrate this string to module level file
     */
    lastStatusCheckAt: string
    /**
     * @deprecated migrate this string to module level file
     */
    lastSuccessfulStatusCheckAt: string
    /**
     * @deprecated migrate this string to module level file
     */
    lastTested: string
    /**
     * @deprecated migrate this string to module level file
     */
    lastUpdated: string
    /**
     * @deprecated migrate this string to module level file
     */
    lastUpdatedBy: string
    /**
     * @deprecated migrate this string to module level file
     */
    lastUpdatedSort: string
    /**
     * @deprecated migrate this string to module level file
     */
    launchStudio: string
    /**
     * @deprecated migrate this string to module level file
     */
    learnMore: string
    /**
     * @deprecated migrate this string to module level file
     */
    list: string
    /**
     * @deprecated migrate this string to module level file
     */
    loading: string
    /**
     * @deprecated migrate this string to module level file
     */
    location: string
    /**
     * @deprecated migrate this string to module level file
     */
    logView: string
    /**
     * @deprecated migrate this string to module level file
     */
    loggedAt: string
    /**
     * @deprecated migrate this string to module level file
     */
    lowercase: string
    /**
     * @deprecated migrate this string to module level file
     */
    manifestSelectionInfo: string
    /**
     * @deprecated migrate this string to module level file
     */
    manifests: string
    /**
     * @deprecated migrate this string to module level file
     */
    manifestsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    map: string
    /**
     * @deprecated migrate this string to module level file
     */
    mapApplications: string
    /**
     * @deprecated migrate this string to module level file
     */
    mapApplicationsToEnvs: string
    /**
     * @deprecated migrate this string to module level file
     */
    members: string
    /**
     * @deprecated migrate this string to module level file
     */
    message: string
    /**
     * @deprecated migrate this string to module level file
     */
    methodLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    metricPacks: string
    /**
     * @deprecated migrate this string to module level file
     */
    'moduleRenderer.monitoringSources': string
    /**
     * @deprecated migrate this string to module level file
     */
    'moduleRenderer.newPipeLine': string
    /**
     * @deprecated migrate this string to module level file
     */
    'moduleRenderer.setupChanges': string
    /**
     * @deprecated migrate this string to module level file
     */
    'moduleRenderer.start': string
    /**
     * @deprecated migrate this string to module level file
     */
    'moduleRenderer.viewPipelines': string
    /**
     * @deprecated migrate this string to module level file
     */
    modules: string
    /**
     * @deprecated migrate this string to module level file
     */
    monitoringAndLoggingSystems: string
    /**
     * @deprecated migrate this string to module level file
     */
    monitoringSource: string
    /**
     * @deprecated migrate this string to module level file
     */
    more: string
    /**
     * @deprecated migrate this string to module level file
     */
    multipleFilesHelpText: string
    /**
     * @deprecated migrate this string to module level file
     */
    multipleService: string
    /**
     * @deprecated migrate this string to module level file
     */
    na: string
    /**
     * @deprecated migrate this string to module level file
     */
    name: string
    /**
     * @deprecated migrate this string to module level file
     */
    nameLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    navigationCheckText: string
    /**
     * @deprecated migrate this string to module level file
     */
    navigationCheckTitle: string
    /**
     * @deprecated migrate this string to module level file
     */
    navigationYamlError: string
    /**
     * @deprecated migrate this string to module level file
     */
    navigationYamlErrorTitle: string
    /**
     * @deprecated migrate this string to module level file
     */
    newArtifactServer: string
    /**
     * @deprecated migrate this string to module level file
     */
    newConnector: string
    /**
     * @deprecated migrate this string to module level file
     */
    newEnvironment: string
    /**
     * @deprecated migrate this string to module level file
     */
    newLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    newNotification: string
    /**
     * @deprecated migrate this string to module level file
     */
    newRole: string
    /**
     * @deprecated migrate this string to module level file
     */
    newService: string
    /**
     * @deprecated migrate this string to module level file
     */
    newUser: string
    /**
     * @deprecated migrate this string to module level file
     */
    next: string
    /**
     * @deprecated migrate this string to module level file
     */
    no: string
    /**
     * @deprecated migrate this string to module level file
     */
    noArtifact: string
    /**
     * @deprecated migrate this string to module level file
     */
    noBuildsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    noConnectorFound: string
    /**
     * @deprecated migrate this string to module level file
     */
    noData: string
    /**
     * @deprecated migrate this string to module level file
     */
    noDeploymentText: string
    /**
     * @deprecated migrate this string to module level file
     */
    noDetails: string
    /**
     * @deprecated migrate this string to module level file
     */
    noPermission: string
    /**
     * @deprecated migrate this string to module level file
     */
    noProjects: string
    /**
     * @deprecated migrate this string to module level file
     */
    noReferencesData: string
    /**
     * @deprecated migrate this string to module level file
     */
    noRoles: string
    /**
     * @deprecated migrate this string to module level file
     */
    noSearchResultsFoundPeriod: string
    /**
     * @deprecated migrate this string to module level file
     */
    noUserGroupsFound: string
    /**
     * @deprecated migrate this string to module level file
     */
    nonProduction: string
    /**
     * @deprecated migrate this string to module level file
     */
    none: string
    /**
     * @deprecated migrate this string to module level file
     */
    notificationMethod: string
    /**
     * @deprecated migrate this string to module level file
     */
    number: string
    /**
     * @deprecated migrate this string to module level file
     */
    of: string
    /**
     * @deprecated migrate this string to module level file
     */
    optionalField: string
    /**
     * @deprecated migrate this string to module level file
     */
    or: string
    /**
     * @deprecated migrate this string to module level file
     */
    orSelectExisting: string
    /**
     * @deprecated migrate this string to module level file
     */
    order: string
    /**
     * @deprecated migrate this string to module level file
     */
    'orgDetails.accessControlDescription': string
    /**
     * @deprecated migrate this string to module level file
     */
    'orgDetails.gitSyncDescription': string
    /**
     * @deprecated migrate this string to module level file
     */
    'orgDetails.governanceDescription': string
    /**
     * @deprecated migrate this string to module level file
     */
    'orgDetails.resourcesDescription': string
    /**
     * @deprecated migrate this string to module level file
     */
    orgLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    orgsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    otherWorkloads: string
    /**
     * @deprecated migrate this string to module level file
     */
    outputLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    outputName: string
    /**
     * @deprecated migrate this string to module level file
     */
    outputValue: string
    /**
     * @deprecated migrate this string to module level file
     */
    override: string
    /**
     * @deprecated migrate this string to module level file
     */
    'overrideSet.helpTextForMultiSelect': string
    /**
     * @deprecated migrate this string to module level file
     */
    'overrideSet.inputSet': string
    /**
     * @deprecated migrate this string to module level file
     */
    'overrideSet.noRecord': string
    /**
     * @deprecated migrate this string to module level file
     */
    'overrideSet.order': string
    /**
     * @deprecated migrate this string to module level file
     */
    'overrideSet.placeholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'overrideSet.searchInputSet': string
    /**
     * @deprecated migrate this string to module level file
     */
    'overrideSet.selectMultipleInputSets': string
    /**
     * @deprecated migrate this string to module level file
     */
    overview: string
    /**
     * @deprecated migrate this string to module level file
     */
    packagesLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    parallelSteps: string
    /**
     * @deprecated migrate this string to module level file
     */
    passed: string
    /**
     * @deprecated migrate this string to module level file
     */
    password: string
    /**
     * @deprecated migrate this string to module level file
     */
    pathStyle: string
    /**
     * @deprecated migrate this string to module level file
     */
    performance: string
    /**
     * @deprecated migrate this string to module level file
     */
    permissions: string
    /**
     * @deprecated migrate this string to module level file
     */
    personalAccessToken: string
    /**
     * @deprecated migrate this string to module level file
     */
    pickProject: string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipeline-list.aboutPipeline': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipeline-list.confirmDelete': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipeline-list.confirmDeleteTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipeline-list.createPipeline': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipeline-list.listStages': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipeline-list.pipelineDeleted': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipeline-list.readyToRun': string
    /**
     * @deprecated migrate this string to module level file
     */
    pipelineBreadcrumb: string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.InheritFromApply': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.InheritFromPlan': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.K8sCanaryDelete': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.addTerraformVarFile': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.artifactsTargetPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.autoTagLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.autoTagSuffixLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.awsConnectorLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.backendConfig': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.barrier': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.bucketLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.aboutYourStage': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.configureCodebase': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.configureCodebaseHelperText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.connectorRequiredError': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.repositoryNameLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.repositoryUrlRequiredError': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.repositoryUrlWrongUrlError': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.setupStage': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.stageDescriptionRegExpError': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.stageNameRegExpError': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.create.stageNameRequiredError': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.delete.confirmDeleteTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.delete.deleteStageText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.infraSpecifications.kubernetesClusterPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.infraSpecifications.namespace': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.infraSpecifications.newConfiguration': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.infraSpecifications.propagate': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.infraSpecifications.whereToRun': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.stageSpecifications.addDescription': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.stageSpecifications.addSharedPath': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.stageSpecifications.addTags': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.stageSpecifications.sharedPaths': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.stageSpecifications.valueCell': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.stageSpecifications.variableNamePlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.build.stageSpecifications.variablesCell': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.buildArgsLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.cacheFromLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.commandRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.commitIdValue': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.configFiles': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.configTypes.fromApply': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.configTypes.fromPlan': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.configurationType': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.configurationTypeRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.connectorLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.content': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.contextLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deleteNamespace': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deleteNamespaceWarning': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deleteResourcesBy': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deleteResourcesPlaceHolder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.create.deployStageName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.create.multipleServices': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.errors.notags': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.infrastructure.directConnection': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.infrastructure.infraDefinition': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.infrastructure.selectMethod': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.infrastructure.viaCloudProvider': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.inputSet.artifactServer': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.inputSet.branch': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.provisioner.enableProvisionerLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.serviceSpecifications.deploymentTypes.artifacts': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.serviceSpecifications.deploymentTypes.manifests': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.serviceSpecifications.serviceDefinition': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploy.serviceSpecifications.useFromStageLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploymentTypes.gk8engine': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.deploymentTypes.kubernetes': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.destroy': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.dockerHubConnectorLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.dockerfileLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.duplicateStep': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.endpointLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.endpointPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.environmentTab.environmentIsRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.environmentTab.newEnvironment': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.environmentTab.selectEnvironment': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.environmentTab.specifyYourEnvironment': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.feature.create.featureStageName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.feature.create.specifyEnvironment': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.feature.create.whatIsFor': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.gcpConnectorLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.hostLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.hostPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.instancesRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.k8sApply': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.k8sBGDeploy': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.k8sBGSwapServices': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.k8sCanaryDeploy': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.k8sDelete': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.k8sRolloutDeploy': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.k8sRolloutRollback': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.k8sScale': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.kubernetesInfraStep.kubernetesConnector': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.kubernetesInfraStep.stepName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.labelsLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.lessThanZero': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.limitCPUExample': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.limitCPULabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.limitCPUPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.limitMemoryExample': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.limitMemoryLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.limitMemoryPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.limitMemoryUnitGiLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.limitMemoryUnitMiLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.manifestPathLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.manifestPathValue': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.manifestPathsPlaceHolder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.methodIsRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.morethanHundred': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.optionalConfiguration': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.outputVariablesLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.paths': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.pomFileInfo': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.pomFileLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.projectIDLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.provisionerIdentifier': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.provisionerIdentifierRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.pullAlwaysLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.pullIfNotExistsLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.pullInfo': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.pullLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.pullNeverLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.regionPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.releaseNameLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.releaseNameValue': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.remoteFile': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.repoName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.reportPathsLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.reportPathsPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.resourceNameLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.resourceNameValue': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.aboutYourService': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.artifactList.addPrimary': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.artifactList.addSidecar': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.manifestList.addManifest': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.manifestList.manifestFormat': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.manifestList.manifestStore': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.manifestList.manifestType': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.newService': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.selectService': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.serviceIsRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.serviceTab.specifyYourService': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.setContainerResources': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.skipDryRun': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.skipSteadyStateCheck': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.sourcePathLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.sourcePathsInfo': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.sourcePathsLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.stepNameLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.stepNameRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.storeType': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.storeTypeRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.targetLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.timeoutLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.timeoutPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.typeName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.workload': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelineSteps.workspace': string
    /**
     * @deprecated migrate this string to module level file
     */
    pipelineStudio: string
    /**
     * @deprecated migrate this string to module level file
     */
    pipelines: string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelines-studio.addDependency': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelines-studio.addStep': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelines-studio.dependenciesGroupTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelines-studio.errorWhileSaving': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelines-studio.pipelineUpdated': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelines-studio.pipelineUpdatedError': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pipelines-studio.publishPipeline': string
    /**
     * @deprecated migrate this string to module level file
     */
    plaintext: string
    /**
     * @deprecated migrate this string to module level file
     */
    please: string
    /**
     * @deprecated migrate this string to module level file
     */
    pluginImagePlaceholder: string
    /**
     * @deprecated migrate this string to module level file
     */
    pluginPath: string
    /**
     * @deprecated migrate this string to module level file
     */
    plus: string
    /**
     * @deprecated migrate this string to module level file
     */
    plusAdd: string
    /**
     * @deprecated migrate this string to module level file
     */
    plusNumber: string
    /**
     * @deprecated migrate this string to module level file
     */
    postCommandLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.connectorLocationInPipeline': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.continueToRunPipeline': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.couldNotVerifyConnectors': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.couldNotVerifyInputSets': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.errorFoundCounter': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.gettingConnectorResult': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.gettingResults': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.possibleCauses': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.preFlightCheckTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.resolution': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.skipCheckBtn': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.skipCheckInfo': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.stageColon': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.stepColon': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.verifyingConnectors': string
    /**
     * @deprecated migrate this string to module level file
     */
    'pre-flight-check.verifyingPipelineInputs': string
    /**
     * @deprecated migrate this string to module level file
     */
    preCommandLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    preRequisitesTitle: string
    /**
     * @deprecated migrate this string to module level file
     */
    preferences: string
    /**
     * @deprecated migrate this string to module level file
     */
    previous: string
    /**
     * @deprecated migrate this string to module level file
     */
    primary: string
    /**
     * @deprecated migrate this string to module level file
     */
    primaryArtifactText: string
    /**
     * @deprecated migrate this string to module level file
     */
    production: string
    /**
     * @deprecated migrate this string to module level file
     */
    profile: string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectCard.cdRendererText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectCard.ceRendererText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectCard.cfRendererText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectCard.ciRendererText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectCard.clone': string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectCard.confirmDelete': string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectCard.confirmDeleteTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectCard.cvRendererText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectCard.projectName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectCard.successMessage': string
    /**
     * @deprecated migrate this string to module level file
     */
    projectDescription: string
    /**
     * @deprecated migrate this string to module level file
     */
    projectLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    projectResources: string
    /**
     * @deprecated migrate this string to module level file
     */
    'projectSelector.placeholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    projectsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    quality: string
    /**
     * @deprecated migrate this string to module level file
     */
    reason: string
    /**
     * @deprecated migrate this string to module level file
     */
    recentActivity: string
    /**
     * @deprecated migrate this string to module level file
     */
    recentlyUsed: string
    /**
     * @deprecated migrate this string to module level file
     */
    refrencedBy: string
    /**
     * @deprecated migrate this string to module level file
     */
    regionLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    reinstall: string
    /**
     * @deprecated migrate this string to module level file
     */
    remote: string
    /**
     * @deprecated migrate this string to module level file
     */
    removeLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    repositories: string
    /**
     * @deprecated migrate this string to module level file
     */
    repository: string
    /**
     * @deprecated migrate this string to module level file
     */
    repositoryType: string
    /**
     * @deprecated migrate this string to module level file
     */
    repositoryUrlLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    requestBodyLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    reset: string
    /**
     * @deprecated migrate this string to module level file
     */
    resourceGroups: string
    /**
     * @deprecated migrate this string to module level file
     */
    'resourcePage.connectors': string
    /**
     * @deprecated migrate this string to module level file
     */
    'resourcePage.delegates': string
    /**
     * @deprecated migrate this string to module level file
     */
    'resourcePage.fileStore': string
    /**
     * @deprecated migrate this string to module level file
     */
    'resourcePage.secrets': string
    /**
     * @deprecated migrate this string to module level file
     */
    'resourcePage.templates': string
    /**
     * @deprecated migrate this string to module level file
     */
    'resourcePage.title': string
    /**
     * @deprecated migrate this string to module level file
     */
    resources: string
    /**
     * @deprecated migrate this string to module level file
     */
    responseMapping: string
    /**
     * @deprecated migrate this string to module level file
     */
    restart: string
    /**
     * @deprecated migrate this string to module level file
     */
    retry: string
    /**
     * @deprecated migrate this string to module level file
     */
    review: string
    /**
     * @deprecated migrate this string to module level file
     */
    risk: string
    /**
     * @deprecated migrate this string to module level file
     */
    roles: string
    /**
     * @deprecated migrate this string to module level file
     */
    rollbackLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    rollbackSteps: string
    /**
     * @deprecated migrate this string to module level file
     */
    runOnlySelectedTestsLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    runPipeline: string
    /**
     * @deprecated migrate this string to module level file
     */
    'runPipelineForm.noRuntimeInput': string
    /**
     * @deprecated migrate this string to module level file
     */
    'runPipelineForm.notifyOnlyMe': string
    /**
     * @deprecated migrate this string to module level file
     */
    'runPipelineForm.pipelineRunSuccessFully': string
    /**
     * @deprecated migrate this string to module level file
     */
    'runPipelineForm.runPipelineFailed': string
    /**
     * @deprecated migrate this string to module level file
     */
    runPipelineText: string
    /**
     * @deprecated migrate this string to module level file
     */
    save: string
    /**
     * @deprecated migrate this string to module level file
     */
    saveAndContinue: string
    /**
     * @deprecated migrate this string to module level file
     */
    saveAndPublish: string
    /**
     * @deprecated migrate this string to module level file
     */
    saveChanges: string
    /**
     * @deprecated migrate this string to module level file
     */
    saveConnectorSuccess: string
    /**
     * @deprecated migrate this string to module level file
     */
    script: string
    /**
     * @deprecated migrate this string to module level file
     */
    scriptType: string
    /**
     * @deprecated migrate this string to module level file
     */
    search: string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.configureSecret': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.inlineSecret': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.labelFile': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.labelSecretFile': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.labelSecretReference': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.labelSecretType': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.labelText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.messageSelectSM': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.noSecretsFound': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.placeholderSecretReference': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.placeholderSecretValue': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.referenceSecret': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.saving': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.secretActivity': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.secretCreated': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.titleCreateFile': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.titleCreateText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.titleEditFile': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.titleEditText': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.updateSuccess': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.validationIdentifier': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.validationKms': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.validationName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.validationNameChars': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secret.validationValue': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secretManager.createmessageSuccess': string
    /**
     * @deprecated migrate this string to module level file
     */
    'secretManager.editmessageSuccess': string
    /**
     * @deprecated migrate this string to module level file
     */
    secretManagers: string
    /**
     * @deprecated migrate this string to module level file
     */
    secretType: string
    /**
     * @deprecated migrate this string to module level file
     */
    secureToken: string
    /**
     * @deprecated migrate this string to module level file
     */
    seeAll: string
    /**
     * @deprecated migrate this string to module level file
     */
    select: string
    /**
     * @deprecated migrate this string to module level file
     */
    selectAnExistingConnector: string
    /**
     * @deprecated migrate this string to module level file
     */
    selectApplication: string
    /**
     * @deprecated migrate this string to module level file
     */
    selectGitConnectorTypeLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    selectGitProvider: string
    /**
     * @deprecated migrate this string to module level file
     */
    selectProduct: string
    /**
     * @deprecated migrate this string to module level file
     */
    selectProject: string
    /**
     * @deprecated migrate this string to module level file
     */
    selectResource: string
    /**
     * @deprecated migrate this string to module level file
     */
    selectServer: string
    /**
     * @deprecated migrate this string to module level file
     */
    selectStage: string
    /**
     * @deprecated migrate this string to module level file
     */
    sensitivity: string
    /**
     * @deprecated migrate this string to module level file
     */
    service: string
    /**
     * @deprecated migrate this string to module level file
     */
    serviceAccount: string
    /**
     * @deprecated migrate this string to module level file
     */
    'serviceDeploymentTypes.amazonAmi': string
    /**
     * @deprecated migrate this string to module level file
     */
    'serviceDeploymentTypes.amazonEcs': string
    /**
     * @deprecated migrate this string to module level file
     */
    'serviceDeploymentTypes.awsCodeDeploy': string
    /**
     * @deprecated migrate this string to module level file
     */
    'serviceDeploymentTypes.awsLambda': string
    /**
     * @deprecated migrate this string to module level file
     */
    'serviceDeploymentTypes.deployDifferentLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'serviceDeploymentTypes.kubernetes': string
    /**
     * @deprecated migrate this string to module level file
     */
    'serviceDeploymentTypes.pcf': string
    /**
     * @deprecated migrate this string to module level file
     */
    'serviceDeploymentTypes.ssh': string
    /**
     * @deprecated migrate this string to module level file
     */
    'serviceDeploymentTypes.winrm': string
    /**
     * @deprecated migrate this string to module level file
     */
    serviceOrServices: string
    /**
     * @deprecated migrate this string to module level file
     */
    services: string
    /**
     * @deprecated migrate this string to module level file
     */
    servicesWithCount: string
    /**
     * @deprecated migrate this string to module level file
     */
    settingsLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    shellScriptStep: string
    /**
     * @deprecated migrate this string to module level file
     */
    showAll: string
    /**
     * @deprecated migrate this string to module level file
     */
    sidecar: string
    /**
     * @deprecated migrate this string to module level file
     */
    sidecarArtifactText: string
    /**
     * @deprecated migrate this string to module level file
     */
    sidecarsText: string
    /**
     * @deprecated migrate this string to module level file
     */
    signOut: string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.disclaimer.initial': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.disclaimer.middle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.disclaimer.privacyPolicy': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.disclaimer.terms': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.form.emailLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.form.emailPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.form.passwordPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.message.primary': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.message.secondary': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.noAccount': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.oAuth.signin': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.oAuth.signup': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.signIn': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.signUp': string
    /**
     * @deprecated migrate this string to module level file
     */
    'signUp.ssoButton': string
    /**
     * @deprecated migrate this string to module level file
     */
    skipCondition: string
    /**
     * @deprecated migrate this string to module level file
     */
    skipConditionHelpText: string
    /**
     * @deprecated migrate this string to module level file
     */
    skipConditionLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    skipConditionStageLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    skipConditionText: string
    /**
     * @deprecated migrate this string to module level file
     */
    skipConditionTitle: string
    /**
     * @deprecated migrate this string to module level file
     */
    skipConditionValidation: string
    /**
     * @deprecated migrate this string to module level file
     */
    skipConditionsTitle: string
    /**
     * @deprecated migrate this string to module level file
     */
    skipResourceVersion: string
    /**
     * @deprecated migrate this string to module level file
     */
    skipped: string
    /**
     * @deprecated migrate this string to module level file
     */
    'snippets.copied': string
    /**
     * @deprecated migrate this string to module level file
     */
    'snippets.copyToClipboard': string
    /**
     * @deprecated migrate this string to module level file
     */
    somethingWentWrong: string
    /**
     * @deprecated migrate this string to module level file
     */
    source: string
    /**
     * @deprecated migrate this string to module level file
     */
    specialChar: string
    /**
     * @deprecated migrate this string to module level file
     */
    'ssh.createmessageSuccess': string
    /**
     * @deprecated migrate this string to module level file
     */
    'ssh.editmessageSuccess': string
    /**
     * @deprecated migrate this string to module level file
     */
    'ssh.sshCredential': string
    /**
     * @deprecated migrate this string to module level file
     */
    sshConnector: string
    /**
     * @deprecated migrate this string to module level file
     */
    stageConfirmationText: string
    /**
     * @deprecated migrate this string to module level file
     */
    stageDetails: string
    /**
     * @deprecated migrate this string to module level file
     */
    stageName: string
    /**
     * @deprecated migrate this string to module level file
     */
    stageNameLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    stageOverview: string
    /**
     * @deprecated migrate this string to module level file
     */
    stages: string
    /**
     * @deprecated migrate this string to module level file
     */
    start: string
    /**
     * @deprecated migrate this string to module level file
     */
    startedAt: string
    /**
     * @deprecated migrate this string to module level file
     */
    status: string
    /**
     * @deprecated migrate this string to module level file
     */
    step: string
    /**
     * @deprecated migrate this string to module level file
     */
    stepConfiguration: string
    /**
     * @deprecated migrate this string to module level file
     */
    stepGroup: string
    /**
     * @deprecated migrate this string to module level file
     */
    stepGroupConfiguration: string
    /**
     * @deprecated migrate this string to module level file
     */
    stepGroupInAnotherStepGroup: string
    /**
     * @deprecated migrate this string to module level file
     */
    'stepPalette.infrastructureProvisioners': string
    /**
     * @deprecated migrate this string to module level file
     */
    'stepPalette.library': string
    /**
     * @deprecated migrate this string to module level file
     */
    'stepPalette.loadingSteps': string
    /**
     * @deprecated migrate this string to module level file
     */
    'stepPalette.noSearchResultsFound': string
    /**
     * @deprecated migrate this string to module level file
     */
    'stepPalette.others': string
    /**
     * @deprecated migrate this string to module level file
     */
    'stepPalette.searchPlaceholder': string
    /**
     * @deprecated migrate this string to module level file
     */
    'stepPalette.selectStep': string
    /**
     * @deprecated migrate this string to module level file
     */
    'stepPalette.showAllSteps': string
    /**
     * @deprecated migrate this string to module level file
     */
    'stepPalette.subTitle': string
    /**
     * @deprecated migrate this string to module level file
     */
    'stepPalette.title': string
    /**
     * @deprecated migrate this string to module level file
     */
    stepType: string
    /**
     * @deprecated migrate this string to module level file
     */
    store: string
    /**
     * @deprecated migrate this string to module level file
     */
    string: string
    /**
     * @deprecated migrate this string to module level file
     */
    submit: string
    /**
     * @deprecated migrate this string to module level file
     */
    success: string
    /**
     * @deprecated migrate this string to module level file
     */
    summary: string
    /**
     * @deprecated migrate this string to module level file
     */
    tagLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    tagRegex: string
    /**
     * @deprecated migrate this string to module level file
     */
    tagsLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    targetHost: string
    /**
     * @deprecated migrate this string to module level file
     */
    taskId: string
    /**
     * @deprecated migrate this string to module level file
     */
    tbd: string
    /**
     * @deprecated migrate this string to module level file
     */
    templateLibrary: string
    /**
     * @deprecated migrate this string to module level file
     */
    test: string
    /**
     * @deprecated migrate this string to module level file
     */
    testAnnotationsLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    tests: string
    /**
     * @deprecated migrate this string to module level file
     */
    thisConnectorIsSavedAs: string
    /**
     * @deprecated migrate this string to module level file
     */
    ticketingSystems: string
    /**
     * @deprecated migrate this string to module level file
     */
    timeLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    timeMinutes: string
    /**
     * @deprecated migrate this string to module level file
     */
    titleOptional: string
    /**
     * @deprecated migrate this string to module level file
     */
    todo: string
    /**
     * @deprecated migrate this string to module level file
     */
    token: string
    /**
     * @deprecated migrate this string to module level file
     */
    total: string
    /**
     * @deprecated migrate this string to module level file
     */
    typeLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    unsavedChanges: string
    /**
     * @deprecated migrate this string to module level file
     */
    update: string
    /**
     * @deprecated migrate this string to module level file
     */
    upload: string
    /**
     * @deprecated migrate this string to module level file
     */
    uppercase: string
    /**
     * @deprecated migrate this string to module level file
     */
    username: string
    /**
     * @deprecated migrate this string to module level file
     */
    usernamePassword: string
    /**
     * @deprecated migrate this string to module level file
     */
    usernameToken: string
    /**
     * @deprecated migrate this string to module level file
     */
    users: string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.AWSConnectorRefRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.GCPConnectorRefRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.OIDCClientId': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.OIDCIssuerUrl': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.OIDCPassword': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.OIDCSecret': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.OIDCUsername': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.accessToken': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.accountName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.accountRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.appRole': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.applicationId': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.artifactServerRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.artifactoryServerURL': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.authToken': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.authType': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.branchName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.bucketRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.buildArgsRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.clientCertificate': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.clientKey': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.clientKeyPassphrase': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.commandRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.commitId': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.connectorName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.connectorRefRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.dockerHubConnectorRefRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.dockerRegistryRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.dockerRegistryUrl': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.duplicateIdError': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.encryptedKey': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.engineVersion': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.engineVersionNumber': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.environmentVariablesRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.gitServerRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.helmRepoUrl': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.hostRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.identifierDuplicate': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.identifierRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.illegalIdentifier': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.imageNameRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.imageRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.installationId': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.jiraUrl': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.kerberosKey': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.keyRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.labelsRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.limitCPUMinNumberZero': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.masterUrl': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.matchPattern': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.minLengthRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.nameRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.nexusServerURL': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.nexusVersion': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.notificationNameDuplicate': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.orgValidation': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.password': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.privateKey': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.projectIDRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.regionRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.registryHostname': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.renewalInterval': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.renewalNumber': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.scriptTypeRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.secretEngine': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.secretEngineName': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.secretId': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.serviceAccountToken': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.settingsRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.sourcePathRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.sourcePathsRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.sshConnectorRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.sshKey': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.stepNameRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.tagsRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.targetRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.targethostRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.thisIsARequiredField': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.timeout10SecMinimum': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.uniqueKeys': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.uniqueStepAndServiceDependenciesId': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.uniqueValues': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.urlIsNotValid': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.username': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.validIdRegex': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.validKeyRegex': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.validOutputVariableRegex': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.validReportPathRegex': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.validStepIdRegex': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.validStepNameRegex': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.valueRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.vaultUrl': string
    /**
     * @deprecated migrate this string to module level file
     */
    'validation.workingDirRequired': string
    /**
     * @deprecated migrate this string to module level file
     */
    valueLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    variableLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    variableNameLabel: string
    /**
     * @deprecated migrate this string to module level file
     */
    'variables.copyFqn': string
    /**
     * @deprecated migrate this string to module level file
     */
    'variables.copyVariableName': string
    /**
     * @deprecated migrate this string to module level file
     */
    variablesText: string
    /**
     * @deprecated migrate this string to module level file
     */
    verificationJobs: string
    /**
     * @deprecated migrate this string to module level file
     */
    verify: string
    /**
     * @deprecated migrate this string to module level file
     */
    version: string
    /**
     * @deprecated migrate this string to module level file
     */
    viewDetails: string
    /**
     * @deprecated migrate this string to module level file
     */
    viewExecutions: string
    /**
     * @deprecated migrate this string to module level file
     */
    viewJSON: string
    /**
     * @deprecated migrate this string to module level file
     */
    visual: string
    /**
     * @deprecated migrate this string to module level file
     */
    whatToDeploy: string
    /**
     * @deprecated migrate this string to module level file
     */
    whenCondition: string
    /**
     * @deprecated migrate this string to module level file
     */
    wip: string
    /**
     * @deprecated migrate this string to module level file
     */
    workflowVariableInfo: string
    /**
     * @deprecated migrate this string to module level file
     */
    workingDirectory: string
    /**
     * @deprecated migrate this string to module level file
     */
    yaml: string
    /**
     * @deprecated migrate this string to module level file
     */
    'yamlBuilder.enableEditContext': string
    /**
     * @deprecated migrate this string to module level file
     */
    'yamlBuilder.lineNumberLabel': string
    /**
     * @deprecated migrate this string to module level file
     */
    'yamlBuilder.snippets.noSnippetsFound': string
    /**
     * @deprecated migrate this string to module level file
     */
    'yamlBuilder.yamlError': string
    /**
     * @deprecated migrate this string to module level file
     */
    yes: string
  }
}
declare module 'framework/strings/StringsContext' {
  import React from 'react'
  import type { StringsMap } from 'stringTypes'
  export type StringKeys = keyof StringsMap
  export type { StringsMap }
  export interface StringsContextValue {
    data: StringsMap
    getString?(key: StringKeys, vars?: Record<string, any>): string
  }
  export const StringsContext: React.Context<StringsContextValue>
  export function useStringsContext(): StringsContextValue
}
declare module 'framework/strings/String' {
  import React from 'react'
  import { StringKeys } from 'framework/strings/StringsContext'
  export interface UseStringsReturn {
    getString(key: StringKeys, vars?: Record<string, any>): string
  }
  export function useStrings(): UseStringsReturn
  export interface StringProps extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> {
    stringID: StringKeys
    vars?: Record<string, any>
    useRichText?: boolean
    tagName: keyof JSX.IntrinsicElements
  }
  export function String(props: StringProps): React.ReactElement | null
  export namespace String {
    var defaultProps: {
      tagName: string
    }
  }
}
declare module 'framework/strings/index' {
  export { useStrings, String } from 'framework/strings/String'
  export type { UseStringsReturn } from 'framework/strings/String'
  export { useStringsContext, StringsContext } from 'framework/strings/StringsContext'
  export type { StringKeys } from 'framework/strings/StringsContext'
}
declare module 'modules/10-common/components/Page/PageSpinner' {
  import React from 'react'
  export interface PageSpinnerProps {
    message?: string
    width?: number
    className?: string
    fixed?: boolean
  }
  export const PageSpinner: React.FC<PageSpinnerProps>
}
declare module 'services/pipeline-ng/index' {
  import { GetProps, UseGetProps, MutateProps, UseMutateProps } from 'restful-react'
  import { GetUsingFetchProps, MutateUsingFetchProps } from 'services/config'
  export const SPEC_VERSION = '2.0'
  export interface AdviserIssuer {
    adviserType?:
      | 'UNKNOWN'
      | 'NEXT_STEP'
      | 'RETRY'
      | 'INTERVENTION_WAIT'
      | 'END_PLAN'
      | 'MARK_SUCCESS'
      | 'IGNORE_FAILURE'
      | 'UNRECOGNIZED'
    adviserTypeValue?: number
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: AdviserIssuer
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserAdviserIssuer
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface AdviserIssuerOrBuilder {
    adviserType?:
      | 'UNKNOWN'
      | 'NEXT_STEP'
      | 'RETRY'
      | 'INTERVENTION_WAIT'
      | 'END_PLAN'
      | 'MARK_SUCCESS'
      | 'IGNORE_FAILURE'
      | 'UNRECOGNIZED'
    adviserTypeValue?: number
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    unknownFields?: UnknownFieldSet
  }
  export interface ApprovalInstanceDetailsDTO {
    [key: string]: any
  }
  export interface ApprovalInstanceResponse {
    createdAt?: number
    deadline?: number
    details: ApprovalInstanceDetailsDTO
    id?: string
    lastModifiedAt?: number
    status: 'WAITING' | 'APPROVED' | 'REJECTED' | 'FAILED' | 'EXPIRED'
    type: 'HarnessApproval' | 'JiraApproval'
  }
  export interface ApproverInput {
    name?: string
    value: string
  }
  export interface ApproverInputInfoDTO {
    defaultValue?: string
    name?: string
  }
  export interface ApproversDTO {
    disallowPipelineExecutor?: boolean
    minimumCount?: number
    userGroups?: string[]
  }
  export type ArtifactTriggerConfig = NGTriggerSpecV2 & {
    artifactRef?: string
    spec?: ArtifactTypeSpec
    stageIdentifier?: string
    type?: 'GCR'
  }
  export interface ArtifactTypeSpec {
    [key: string]: any
  }
  export interface AsyncExecutableResponse {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    callbackIdsCount?: number
    callbackIdsList?: string[]
    defaultInstanceForType?: AsyncExecutableResponse
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    logKeysCount?: number
    logKeysList?: string[]
    parserForType?: ParserAsyncExecutableResponse
    serializedSize?: number
    unitsCount?: number
    unitsList?: string[]
    unknownFields?: UnknownFieldSet
  }
  export interface AsyncExecutableResponseOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    callbackIdsCount?: number
    callbackIdsList?: string[]
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    logKeysCount?: number
    logKeysList?: string[]
    unitsCount?: number
    unitsList?: string[]
    unknownFields?: UnknownFieldSet
  }
  export type AuditFilterProperties = FilterProperties & {
    actions?: (
      | 'CREATE'
      | 'UPDATE'
      | 'RESTORE'
      | 'DELETE'
      | 'UPSERT'
      | 'INVITE'
      | 'RESEND_INVITE'
      | 'REVOKE_INVITE'
      | 'ADD_COLLABORATOR'
      | 'REMOVE_COLLABORATOR'
      | 'ADD_MEMBERSHIP'
      | 'REMOVE_MEMBERSHIP'
    )[]
    endTime?: number
    environments?: Environment[]
    modules?: ('CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'CORE' | 'PMS' | 'TEMPLATESERVICE')[]
    principals?: Principal[]
    resources?: ResourceDTO[]
    scopes?: ResourceScopeDTO[]
    startTime?: number
  }
  export interface AwsCodeCommitEventSpec {
    [key: string]: any
  }
  export type AwsCodeCommitPushSpec = AwsCodeCommitEventSpec & {
    connectorRef?: string
    jexlCondition?: string
    payloadConditions?: TriggerEventDataCondition[]
    repoName?: string
  }
  export type AwsCodeCommitSpec = WebhookTriggerSpecV2 & {
    spec?: AwsCodeCommitEventSpec
    type?: 'Push'
  }
  export interface BarrierExecutionInfo {
    identifier?: string
    name?: string
    stages?: StageDetail[]
    started?: boolean
    startedAt?: number
    timeoutIn?: number
  }
  export interface BarrierInfo {
    name?: string
    stages?: StageDetail[]
    timeoutIn?: number
  }
  export interface BarrierSetupInfo {
    identifier?: string
    name?: string
    stages?: StageDetail[]
  }
  export interface BitbucketEventSpec {
    [key: string]: any
  }
  export type BitbucketPRSpec = BitbucketEventSpec & {
    actions?: ('Create' | 'Update' | 'Merge' | 'Decline')[]
    autoAbortPreviousExecutions?: boolean
    connectorRef?: string
    headerConditions?: TriggerEventDataCondition[]
    jexlCondition?: string
    payloadConditions?: TriggerEventDataCondition[]
    repoName?: string
  }
  export type BitbucketPushSpec = BitbucketEventSpec & {
    autoAbortPreviousExecutions?: boolean
    connectorRef?: string
    headerConditions?: TriggerEventDataCondition[]
    jexlCondition?: string
    payloadConditions?: TriggerEventDataCondition[]
    repoName?: string
  }
  export type BitbucketSpec = WebhookTriggerSpecV2 & {
    spec?: BitbucketEventSpec
    type?: 'PullRequest' | 'Push'
  }
  export interface BuildDetails {
    buildType?: string
  }
  export interface BuildStoreTypeSpec {
    [key: string]: any
  }
  export interface ByteString {
    empty?: boolean
    validUtf8?: boolean
  }
  export interface CcmConnectorFilter {
    awsAccountId?: string
    azureSubscriptionId?: string
    azureTenantId?: string
    featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
    gcpProjectId?: string
    k8sConnectorRef?: string
  }
  export interface Child {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    childNodeId?: string
    childNodeIdBytes?: ByteString
    defaultInstanceForType?: Child
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserChild
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface ChildChainExecutableResponse {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: ChildChainExecutableResponse
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    lastLink?: boolean
    nextChildId?: string
    nextChildIdBytes?: ByteString
    parserForType?: ParserChildChainExecutableResponse
    passThroughData?: ByteString
    previousChildId?: string
    previousChildIdBytes?: ByteString
    serializedSize?: number
    suspend?: boolean
    unknownFields?: UnknownFieldSet
  }
  export interface ChildChainExecutableResponseOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    lastLink?: boolean
    nextChildId?: string
    nextChildIdBytes?: ByteString
    passThroughData?: ByteString
    previousChildId?: string
    previousChildIdBytes?: ByteString
    suspend?: boolean
    unknownFields?: UnknownFieldSet
  }
  export interface ChildExecutableResponse {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    childNodeId?: string
    childNodeIdBytes?: ByteString
    defaultInstanceForType?: ChildExecutableResponse
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    logKeysCount?: number
    logKeysList?: string[]
    parserForType?: ParserChildExecutableResponse
    serializedSize?: number
    unitsCount?: number
    unitsList?: string[]
    unknownFields?: UnknownFieldSet
  }
  export interface ChildExecutableResponseOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    childNodeId?: string
    childNodeIdBytes?: ByteString
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    logKeysCount?: number
    logKeysList?: string[]
    unitsCount?: number
    unitsList?: string[]
    unknownFields?: UnknownFieldSet
  }
  export interface ChildOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    childNodeId?: string
    childNodeIdBytes?: ByteString
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    unknownFields?: UnknownFieldSet
  }
  export interface ChildrenExecutableResponse {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    childrenCount?: number
    childrenList?: Child[]
    childrenOrBuilderList?: ChildOrBuilder[]
    defaultInstanceForType?: ChildrenExecutableResponse
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserChildrenExecutableResponse
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface ChildrenExecutableResponseOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    childrenCount?: number
    childrenList?: Child[]
    childrenOrBuilderList?: ChildOrBuilder[]
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    unknownFields?: UnknownFieldSet
  }
  export interface ConditionDTO {
    key: string
    operator: 'equals' | 'not equals' | 'in' | 'not in'
    value: string
  }
  export interface ConnectorCheckResponse {
    connectorIdentifier?: string
    errorInfo?: PreFlightEntityErrorInfo
    fqn?: string
    stageIdentifier?: string
    stageName?: string
    status?: 'SUCCESS' | 'FAILURE' | 'IN_PROGRESS' | 'UNKNOWN'
    stepIdentifier?: string
    stepName?: string
  }
  export type ConnectorFilterProperties = FilterProperties & {
    categories?: (
      | 'CLOUD_PROVIDER'
      | 'SECRET_MANAGER'
      | 'CLOUD_COST'
      | 'ARTIFACTORY'
      | 'CODE_REPO'
      | 'MONITORING'
      | 'TICKETING'
    )[]
    ccmConnectorFilter?: CcmConnectorFilter
    connectivityStatuses?: ('SUCCESS' | 'FAILURE' | 'PARTIAL' | 'UNKNOWN')[]
    connectorIdentifiers?: string[]
    connectorNames?: string[]
    description?: string
    inheritingCredentialsFromDelegate?: boolean
    types?: (
      | 'K8sCluster'
      | 'Git'
      | 'Splunk'
      | 'AppDynamics'
      | 'Prometheus'
      | 'Dynatrace'
      | 'Vault'
      | 'AzureKeyVault'
      | 'DockerRegistry'
      | 'Local'
      | 'AwsKms'
      | 'GcpKms'
      | 'AwsSecretManager'
      | 'Gcp'
      | 'Aws'
      | 'Artifactory'
      | 'Jira'
      | 'Nexus'
      | 'Github'
      | 'Gitlab'
      | 'Bitbucket'
      | 'Codecommit'
      | 'CEAws'
      | 'CEAzure'
      | 'GcpCloudCost'
      | 'CEK8sCluster'
      | 'HttpHelmRepo'
      | 'NewRelic'
      | 'Datadog'
      | 'SumoLogic'
      | 'PagerDuty'
    )[]
  }
  export interface ConnectorWrapperResponse {
    checkResponses?: ConnectorCheckResponse[]
    label?: string
    status?: 'SUCCESS' | 'FAILURE' | 'IN_PROGRESS' | 'UNKNOWN'
  }
  export interface CriteriaSpecDTO {
    [key: string]: any
  }
  export interface CriteriaSpecWrapperDTO {
    spec: CriteriaSpecDTO
    type: 'Jexl' | 'KeyValues'
  }
  export type CronTriggerSpec = ScheduledTriggerSpec & {
    expression?: string
  }
  export type CustomTriggerSpec = WebhookTriggerSpecV2 & {
    headerConditions?: TriggerEventDataCondition[]
    jexlCondition?: string
    payloadConditions?: TriggerEventDataCondition[]
  }
  export interface DashboardPipelineExecutionInfo {
    pipelineExecutionInfoList?: PipelineExecutionInfo[]
  }
  export interface DashboardPipelineHealthInfo {
    executions?: PipelineHealthInfo
  }
  export interface DelegateInfo {
    id?: string
    name?: string
    taskId?: string
    taskName?: string
  }
  export interface Descriptor {
    containingType?: Descriptor
    enumTypes?: EnumDescriptor[]
    extendable?: boolean
    extensions?: FieldDescriptor[]
    fields?: FieldDescriptor[]
    file?: FileDescriptor
    fullName?: string
    index?: number
    name?: string
    nestedTypes?: Descriptor[]
    oneofs?: OneofDescriptor[]
    options?: MessageOptions
  }
  export interface EdgeLayoutList {
    currentNodeChildren?: string[]
    nextIds?: string[]
  }
  export interface EmbeddedUser {
    email?: string
    name?: string
    uuid?: string
  }
  export interface EntityGitDetails {
    branch?: string
    filePath?: string
    objectId?: string
    repoIdentifier?: string
    rootFolder?: string
  }
  export interface EnumDescriptor {
    containingType?: Descriptor
    file?: FileDescriptor
    fullName?: string
    index?: number
    name?: string
    options?: EnumOptions
    values?: EnumValueDescriptor[]
  }
  export interface EnumOptions {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    allFieldsRaw?: {
      [key: string]: {
        [key: string]: any
      }
    }
    allowAlias?: boolean
    defaultInstanceForType?: EnumOptions
    deprecated?: boolean
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserEnumOptions
    serializedSize?: number
    uninterpretedOptionCount?: number
    uninterpretedOptionList?: UninterpretedOption[]
    uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
    unknownFields?: UnknownFieldSet
  }
  export interface EnumValueDescriptor {
    file?: FileDescriptor
    fullName?: string
    index?: number
    name?: string
    number?: number
    options?: EnumValueOptions
    type?: EnumDescriptor
  }
  export interface EnumValueOptions {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    allFieldsRaw?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: EnumValueOptions
    deprecated?: boolean
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserEnumValueOptions
    serializedSize?: number
    uninterpretedOptionCount?: number
    uninterpretedOptionList?: UninterpretedOption[]
    uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
    unknownFields?: UnknownFieldSet
  }
  export interface Environment {
    identifier: string
    type: 'PreProduction' | 'Production'
  }
  export interface Error {
    code?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'REVOKED_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_CREDENTIALS_THIRD_PARTY'
      | 'INVALID_KEY'
      | 'INVALID_CONNECTOR_TYPE'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'SCHEMA_VALIDATION_FAILED'
      | 'FILTER_CREATION_ERROR'
      | 'INVALID_YAML_ERROR'
      | 'PLAN_CREATION_ERROR'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'EXPIRE_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'IMAGE_NOT_FOUND'
      | 'ILLEGAL_ARGUMENT'
      | 'IMAGE_TAG_NOT_FOUND'
      | 'DELEGATE_NOT_AVAILABLE'
      | 'INVALID_YAML_PAYLOAD'
      | 'AUTHENTICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'SECRET_NOT_FOUND'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'FILE_NOT_FOUND_ERROR'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'DATA_COLLECTION_ERROR'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'TIMESCALE_NOT_AVAILABLE'
      | 'MIGRATION_EXCEPTION'
      | 'REQUEST_PROCESSING_INTERRUPTED'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
      | 'HTTP_RESPONSE_EXCEPTION'
      | 'SCM_NOT_FOUND_ERROR'
      | 'SCM_CONFLICT_ERROR'
      | 'SCM_UNPROCESSABLE_ENTITY'
      | 'PROCESS_EXECUTION_EXCEPTION'
      | 'SCM_UNAUTHORIZED'
      | 'DATA'
      | 'CONTEXT'
      | 'PR_CREATION_ERROR'
      | 'URL_NOT_REACHABLE'
      | 'URL_NOT_PROVIDED'
      | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
      | 'ENGINE_FUNCTOR_ERROR'
      | 'JIRA_CLIENT_ERROR'
      | 'SCM_NOT_MODIFIED'
      | 'JIRA_STEP_ERROR'
      | 'BUCKET_SERVER_ERROR'
    correlationId?: string
    detailedMessage?: string
    message?: string
    responseMessages?: ResponseMessage[]
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ExecutableResponse {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    async?: AsyncExecutableResponse
    asyncOrBuilder?: AsyncExecutableResponseOrBuilder
    child?: ChildExecutableResponse
    childChain?: ChildChainExecutableResponse
    childChainOrBuilder?: ChildChainExecutableResponseOrBuilder
    childOrBuilder?: ChildExecutableResponseOrBuilder
    children?: ChildrenExecutableResponse
    childrenOrBuilder?: ChildrenExecutableResponseOrBuilder
    defaultInstanceForType?: ExecutableResponse
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserExecutableResponse
    responseCase?:
      | 'ASYNC'
      | 'CHILD'
      | 'CHILDREN'
      | 'CHILDCHAIN'
      | 'TASK'
      | 'TASKCHAIN'
      | 'SYNC'
      | 'SKIPTASK'
      | 'RESPONSE_NOT_SET'
    serializedSize?: number
    skipTask?: SkipTaskExecutableResponse
    skipTaskOrBuilder?: SkipTaskExecutableResponseOrBuilder
    sync?: SyncExecutableResponse
    syncOrBuilder?: SyncExecutableResponseOrBuilder
    task?: TaskExecutableResponse
    taskChain?: TaskChainExecutableResponse
    taskChainOrBuilder?: TaskChainExecutableResponseOrBuilder
    taskOrBuilder?: TaskExecutableResponseOrBuilder
    unknownFields?: UnknownFieldSet
  }
  export interface ExecutionErrorInfo {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: ExecutionErrorInfo
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    message?: string
    messageBytes?: ByteString
    parserForType?: ParserExecutionErrorInfo
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface ExecutionGraph {
    nodeAdjacencyListMap?: {
      [key: string]: ExecutionNodeAdjacencyList
    }
    nodeMap?: {
      [key: string]: ExecutionNode
    }
    representationStrategy?: 'camelCase'
    rootNodeId?: string
  }
  export interface ExecutionMetadata {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: ExecutionMetadata
    descriptorForType?: Descriptor
    executionUuid?: string
    executionUuidBytes?: ByteString
    gitSyncBranchContext?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    moduleType?: string
    moduleTypeBytes?: ByteString
    parserForType?: ParserExecutionMetadata
    pipelineIdentifier?: string
    pipelineIdentifierBytes?: ByteString
    principalInfo?: ExecutionPrincipalInfo
    principalInfoOrBuilder?: ExecutionPrincipalInfoOrBuilder
    runSequence?: number
    serializedSize?: number
    triggerInfo?: ExecutionTriggerInfo
    triggerInfoOrBuilder?: ExecutionTriggerInfoOrBuilder
    unknownFields?: UnknownFieldSet
  }
  export interface ExecutionNode {
    baseFqn?: string
    delegateInfoList?: DelegateInfo[]
    endTs?: number
    executableResponses?: ExecutableResponse[]
    failureInfo?: FailureInfoDTO
    identifier?: string
    interruptHistories?: InterruptEffect[]
    name?: string
    nodeRunInfo?: NodeRunInfo
    outcomes?: {
      [key: string]: {
        [key: string]: {
          [key: string]: any
        }
      }
    }
    progressData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    setupId?: string
    skipInfo?: SkipInfo
    startTs?: number
    status?:
      | 'Running'
      | 'AsyncWaiting'
      | 'TaskWaiting'
      | 'TimedWaiting'
      | 'Failed'
      | 'Errored'
      | 'IgnoreFailed'
      | 'NotStarted'
      | 'Expired'
      | 'Aborted'
      | 'Discontinuing'
      | 'Queued'
      | 'Paused'
      | 'ResourceWaiting'
      | 'InterventionWaiting'
      | 'ApprovalWaiting'
      | 'Success'
      | 'Suspended'
      | 'Skipped'
      | 'Pausing'
      | 'ApprovalRejected'
      | 'NOT_STARTED'
      | 'INTERVENTION_WAITING'
      | 'APPROVAL_WAITING'
      | 'APPROVAL_REJECTED'
      | 'WAITING'
    stepDetails?: {
      [key: string]: {
        [key: string]: {
          [key: string]: any
        }
      }
    }
    stepParameters?: {
      [key: string]: {
        [key: string]: any
      }
    }
    stepType?: string
    unitProgresses?: UnitProgress[]
    uuid?: string
  }
  export interface ExecutionNodeAdjacencyList {
    children?: string[]
    nextIds?: string[]
  }
  export interface ExecutionPrincipalInfo {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: ExecutionPrincipalInfo
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserExecutionPrincipalInfo
    principal?: string
    principalBytes?: ByteString
    principalType?: 'UNKNOWN' | 'USER' | 'USER_GROUP' | 'API_KEY' | 'SERVICE' | 'UNRECOGNIZED'
    principalTypeValue?: number
    serializedSize?: number
    shouldValidateRbac?: boolean
    unknownFields?: UnknownFieldSet
  }
  export interface ExecutionPrincipalInfoOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    principal?: string
    principalBytes?: ByteString
    principalType?: 'UNKNOWN' | 'USER' | 'USER_GROUP' | 'API_KEY' | 'SERVICE' | 'UNRECOGNIZED'
    principalTypeValue?: number
    shouldValidateRbac?: boolean
    unknownFields?: UnknownFieldSet
  }
  export interface ExecutionTriggerInfo {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: ExecutionTriggerInfo
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    isRerun?: boolean
    parserForType?: ParserExecutionTriggerInfo
    rerunInfo?: RerunInfo
    rerunInfoOrBuilder?: RerunInfoOrBuilder
    serializedSize?: number
    triggerType?: 'NOOP' | 'MANUAL' | 'WEBHOOK' | 'WEBHOOK_CUSTOM' | 'SCHEDULER_CRON' | 'UNRECOGNIZED'
    triggerTypeValue?: number
    triggeredBy?: TriggeredBy
    triggeredByOrBuilder?: TriggeredByOrBuilder
    unknownFields?: UnknownFieldSet
  }
  export interface ExecutionTriggerInfoOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    isRerun?: boolean
    rerunInfo?: RerunInfo
    rerunInfoOrBuilder?: RerunInfoOrBuilder
    triggerType?: 'NOOP' | 'MANUAL' | 'WEBHOOK' | 'WEBHOOK_CUSTOM' | 'SCHEDULER_CRON' | 'UNRECOGNIZED'
    triggerTypeValue?: number
    triggeredBy?: TriggeredBy
    triggeredByOrBuilder?: TriggeredByOrBuilder
    unknownFields?: UnknownFieldSet
  }
  export interface ExpressionBlock {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    count?: number
    defaultInstanceForType?: ExpressionBlock
    descriptorForType?: Descriptor
    expression?: string
    expressionBytes?: ByteString
    expressionValue?: string
    expressionValueBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserExpressionBlock
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface ExpressionBlockOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    count?: number
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    expression?: string
    expressionBytes?: ByteString
    expressionValue?: string
    expressionValueBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    unknownFields?: UnknownFieldSet
  }
  export interface Failure {
    code?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'REVOKED_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_CREDENTIALS_THIRD_PARTY'
      | 'INVALID_KEY'
      | 'INVALID_CONNECTOR_TYPE'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'SCHEMA_VALIDATION_FAILED'
      | 'FILTER_CREATION_ERROR'
      | 'INVALID_YAML_ERROR'
      | 'PLAN_CREATION_ERROR'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'EXPIRE_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'IMAGE_NOT_FOUND'
      | 'ILLEGAL_ARGUMENT'
      | 'IMAGE_TAG_NOT_FOUND'
      | 'DELEGATE_NOT_AVAILABLE'
      | 'INVALID_YAML_PAYLOAD'
      | 'AUTHENTICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'SECRET_NOT_FOUND'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'FILE_NOT_FOUND_ERROR'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'DATA_COLLECTION_ERROR'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'TIMESCALE_NOT_AVAILABLE'
      | 'MIGRATION_EXCEPTION'
      | 'REQUEST_PROCESSING_INTERRUPTED'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
      | 'HTTP_RESPONSE_EXCEPTION'
      | 'SCM_NOT_FOUND_ERROR'
      | 'SCM_CONFLICT_ERROR'
      | 'SCM_UNPROCESSABLE_ENTITY'
      | 'PROCESS_EXECUTION_EXCEPTION'
      | 'SCM_UNAUTHORIZED'
      | 'DATA'
      | 'CONTEXT'
      | 'PR_CREATION_ERROR'
      | 'URL_NOT_REACHABLE'
      | 'URL_NOT_PROVIDED'
      | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
      | 'ENGINE_FUNCTOR_ERROR'
      | 'JIRA_CLIENT_ERROR'
      | 'SCM_NOT_MODIFIED'
      | 'JIRA_STEP_ERROR'
      | 'BUCKET_SERVER_ERROR'
    correlationId?: string
    errors?: ValidationError[]
    message?: string
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface FailureInfoDTO {
    failureTypeList?: (
      | 'EXPIRED'
      | 'DELEGATE_PROVISIONING'
      | 'CONNECTIVITY'
      | 'AUTHENTICATION'
      | 'VERIFICATION_FAILURE'
      | 'APPLICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'TIMEOUT_ERROR'
    )[]
    message?: string
    responseMessages?: ResponseMessage[]
  }
  export interface FieldDescriptor {
    containingOneof?: OneofDescriptor
    containingType?: Descriptor
    defaultValue?: {
      [key: string]: any
    }
    enumType?: EnumDescriptor
    extension?: boolean
    extensionScope?: Descriptor
    file?: FileDescriptor
    fullName?: string
    index?: number
    javaType?: 'INT' | 'LONG' | 'FLOAT' | 'DOUBLE' | 'BOOLEAN' | 'STRING' | 'BYTE_STRING' | 'ENUM' | 'MESSAGE'
    jsonName?: string
    liteJavaType?: 'INT' | 'LONG' | 'FLOAT' | 'DOUBLE' | 'BOOLEAN' | 'STRING' | 'BYTE_STRING' | 'ENUM' | 'MESSAGE'
    liteType?:
      | 'DOUBLE'
      | 'FLOAT'
      | 'INT64'
      | 'UINT64'
      | 'INT32'
      | 'FIXED64'
      | 'FIXED32'
      | 'BOOL'
      | 'STRING'
      | 'GROUP'
      | 'MESSAGE'
      | 'BYTES'
      | 'UINT32'
      | 'ENUM'
      | 'SFIXED32'
      | 'SFIXED64'
      | 'SINT32'
      | 'SINT64'
    mapField?: boolean
    messageType?: Descriptor
    name?: string
    number?: number
    optional?: boolean
    options?: FieldOptions
    packable?: boolean
    packed?: boolean
    repeated?: boolean
    required?: boolean
    type?:
      | 'DOUBLE'
      | 'FLOAT'
      | 'INT64'
      | 'UINT64'
      | 'INT32'
      | 'FIXED64'
      | 'FIXED32'
      | 'BOOL'
      | 'STRING'
      | 'GROUP'
      | 'MESSAGE'
      | 'BYTES'
      | 'UINT32'
      | 'ENUM'
      | 'SFIXED32'
      | 'SFIXED64'
      | 'SINT32'
      | 'SINT64'
  }
  export interface FieldOptions {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    allFieldsRaw?: {
      [key: string]: {
        [key: string]: any
      }
    }
    ctype?: 'STRING' | 'CORD' | 'STRING_PIECE'
    defaultInstanceForType?: FieldOptions
    deprecated?: boolean
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    jstype?: 'JS_NORMAL' | 'JS_STRING' | 'JS_NUMBER'
    lazy?: boolean
    packed?: boolean
    parserForType?: ParserFieldOptions
    serializedSize?: number
    uninterpretedOptionCount?: number
    uninterpretedOptionList?: UninterpretedOption[]
    uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
    unknownFields?: UnknownFieldSet
    weak?: boolean
  }
  export interface FileDescriptor {
    dependencies?: FileDescriptor[]
    enumTypes?: EnumDescriptor[]
    extensions?: FieldDescriptor[]
    file?: FileDescriptor
    fullName?: string
    messageTypes?: Descriptor[]
    name?: string
    options?: FileOptions
    package?: string
    publicDependencies?: FileDescriptor[]
    services?: ServiceDescriptor[]
    syntax?: 'UNKNOWN' | 'PROTO2' | 'PROTO3'
  }
  export interface FileOptions {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    allFieldsRaw?: {
      [key: string]: {
        [key: string]: any
      }
    }
    ccEnableArenas?: boolean
    ccGenericServices?: boolean
    csharpNamespace?: string
    csharpNamespaceBytes?: ByteString
    defaultInstanceForType?: FileOptions
    deprecated?: boolean
    descriptorForType?: Descriptor
    goPackage?: string
    goPackageBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    javaGenerateEqualsAndHash?: boolean
    javaGenericServices?: boolean
    javaMultipleFiles?: boolean
    javaOuterClassname?: string
    javaOuterClassnameBytes?: ByteString
    javaPackage?: string
    javaPackageBytes?: ByteString
    javaStringCheckUtf8?: boolean
    objcClassPrefix?: string
    objcClassPrefixBytes?: ByteString
    optimizeFor?: 'SPEED' | 'CODE_SIZE' | 'LITE_RUNTIME'
    parserForType?: ParserFileOptions
    phpClassPrefix?: string
    phpClassPrefixBytes?: ByteString
    phpGenericServices?: boolean
    phpMetadataNamespace?: string
    phpMetadataNamespaceBytes?: ByteString
    phpNamespace?: string
    phpNamespaceBytes?: ByteString
    pyGenericServices?: boolean
    rubyPackage?: string
    rubyPackageBytes?: ByteString
    serializedSize?: number
    swiftPrefix?: string
    swiftPrefixBytes?: ByteString
    uninterpretedOptionCount?: number
    uninterpretedOptionList?: UninterpretedOption[]
    uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
    unknownFields?: UnknownFieldSet
  }
  export interface FilterDTO {
    filterProperties: FilterProperties
    filterVisibility?: 'EveryOne' | 'OnlyCreator'
    identifier: string
    name: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface FilterProperties {
    filterType?:
      | 'Connector'
      | 'DelegateProfile'
      | 'Delegate'
      | 'PipelineSetup'
      | 'PipelineExecution'
      | 'Deployment'
      | 'Audit'
    tags?: {
      [key: string]: string
    }
  }
  export type GcrArtifactSpec = ArtifactTypeSpec & {
    connectorRef?: string
    eventConditions?: TriggerEventDataCondition[]
    registryHostname?: string
    tag?: string
  }
  export interface GithubEventSpec {
    [key: string]: any
  }
  export type GithubIssueCommentSpec = GithubEventSpec & {
    actions?: ('Create' | 'Edit' | 'Delete')[]
    autoAbortPreviousExecutions?: boolean
    connectorRef?: string
    headerConditions?: TriggerEventDataCondition[]
    jexlCondition?: string
    payloadConditions?: TriggerEventDataCondition[]
    repoName?: string
  }
  export type GithubPRSpec = GithubEventSpec & {
    actions?: ('Close' | 'Edit' | 'Open' | 'Reopen' | 'Label' | 'Unlabel' | 'Synchronize')[]
    autoAbortPreviousExecutions?: boolean
    connectorRef?: string
    headerConditions?: TriggerEventDataCondition[]
    jexlCondition?: string
    payloadConditions?: TriggerEventDataCondition[]
    repoName?: string
  }
  export type GithubPushSpec = GithubEventSpec & {
    autoAbortPreviousExecutions?: boolean
    connectorRef?: string
    headerConditions?: TriggerEventDataCondition[]
    jexlCondition?: string
    payloadConditions?: TriggerEventDataCondition[]
    repoName?: string
  }
  export type GithubSpec = WebhookTriggerSpecV2 & {
    spec?: GithubEventSpec
    type?: 'PullRequest' | 'Push' | 'IssueComment'
  }
  export interface GitlabEventSpec {
    [key: string]: any
  }
  export type GitlabPRSpec = GitlabEventSpec & {
    actions?: ('Open' | 'Close' | 'Reopen' | 'Merge' | 'Update' | 'Sync')[]
    autoAbortPreviousExecutions?: boolean
    connectorRef?: string
    headerConditions?: TriggerEventDataCondition[]
    jexlCondition?: string
    payloadConditions?: TriggerEventDataCondition[]
    repoName?: string
  }
  export type GitlabPushSpec = GitlabEventSpec & {
    autoAbortPreviousExecutions?: boolean
    connectorRef?: string
    headerConditions?: TriggerEventDataCondition[]
    jexlCondition?: string
    payloadConditions?: TriggerEventDataCondition[]
    repoName?: string
  }
  export type GitlabSpec = WebhookTriggerSpecV2 & {
    spec?: GitlabEventSpec
    type?: 'MergeRequest' | 'Push'
  }
  export interface GraphLayoutNode {
    barrierFound?: boolean
    edgeLayoutList?: EdgeLayoutList
    endTs?: number
    failureInfo?: ExecutionErrorInfo
    module?: string
    moduleInfo?: {
      [key: string]: {
        [key: string]: {
          [key: string]: any
        }
      }
    }
    name?: string
    nodeGroup?: string
    nodeIdentifier?: string
    nodeRunInfo?: NodeRunInfo
    nodeType?: string
    nodeUuid?: string
    skipInfo?: SkipInfo
    startTs?: number
    status?:
      | 'Running'
      | 'AsyncWaiting'
      | 'TaskWaiting'
      | 'TimedWaiting'
      | 'Failed'
      | 'Errored'
      | 'IgnoreFailed'
      | 'NotStarted'
      | 'Expired'
      | 'Aborted'
      | 'Discontinuing'
      | 'Queued'
      | 'Paused'
      | 'ResourceWaiting'
      | 'InterventionWaiting'
      | 'ApprovalWaiting'
      | 'Success'
      | 'Suspended'
      | 'Skipped'
      | 'Pausing'
      | 'ApprovalRejected'
      | 'NOT_STARTED'
      | 'INTERVENTION_WAITING'
      | 'APPROVAL_WAITING'
      | 'APPROVAL_REJECTED'
      | 'WAITING'
  }
  export interface HarnessApprovalActivity {
    action: 'APPROVE' | 'REJECT'
    approvedAt?: number
    approverInputs?: ApproverInput[]
    comments?: string
    user: EmbeddedUser
  }
  export interface HarnessApprovalActivityRequest {
    action: 'APPROVE' | 'REJECT'
    approverInputs?: ApproverInput[]
    comments?: string
  }
  export interface HarnessApprovalInstanceAuthorization {
    authorized?: boolean
    reason?: string
  }
  export type HarnessApprovalInstanceDetails = ApprovalInstanceDetailsDTO & {
    approvalActivities?: HarnessApprovalActivity[]
    approvalMessage: string
    approverInputs?: ApproverInputInfoDTO[]
    approvers: ApproversDTO
    includePipelineExecutionHistory?: boolean
  }
  export type HelmManifestSpec = ManifestTypeSpec & {
    chartName?: string
    chartVersion?: string
    eventConditions?: TriggerEventDataCondition[]
    spec?: BuildStoreTypeSpec
    type?: 'HTTP' | 'S3' | 'GCS'
  }
  export type HttpBuildStoreTypeSpec = BuildStoreTypeSpec & {
    [key: string]: any
  }
  export interface InputSetError {
    fieldName?: string
    identifierOfErrorSource?: string
    message?: string
  }
  export interface InputSetErrorResponse {
    errors?: InputSetError[]
  }
  export interface InputSetErrorWrapper {
    errorPipelineYaml?: string
    uuidToErrorResponseMap?: {
      [key: string]: InputSetErrorResponse
    }
  }
  export interface InputSetResponse {
    accountId?: string
    description?: string
    errorResponse?: boolean
    gitDetails?: EntityGitDetails
    identifier?: string
    inputSetErrorWrapper?: InputSetErrorWrapper
    inputSetYaml?: string
    invalid?: boolean
    name?: string
    orgIdentifier?: string
    pipelineIdentifier?: string
    projectIdentifier?: string
    tags?: {
      [key: string]: string
    }
    version?: number
  }
  export interface InputSetSummaryResponse {
    description?: string
    gitDetails?: EntityGitDetails
    identifier?: string
    inputSetType?: 'INPUT_SET' | 'OVERLAY_INPUT_SET'
    name?: string
    pipelineIdentifier?: string
    tags?: {
      [key: string]: string
    }
    version?: number
  }
  export interface InputSetTemplateResponse {
    inputSetTemplateYaml?: string
    inputSetYaml?: string
  }
  export interface InterruptConfig {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    configCase?: 'RETRYINTERRUPTCONFIG' | 'CONFIG_NOT_SET'
    defaultInstanceForType?: InterruptConfig
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    issuedBy?: IssuedBy
    issuedByOrBuilder?: IssuedByOrBuilder
    parserForType?: ParserInterruptConfig
    retryInterruptConfig?: RetryInterruptConfig
    retryInterruptConfigOrBuilder?: RetryInterruptConfigOrBuilder
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface InterruptEffect {
    interruptConfig: InterruptConfig
    interruptId: string
    interruptType:
      | 'UNKNOWN'
      | 'ABORT'
      | 'ABORT_ALL'
      | 'PAUSE'
      | 'PAUSE_ALL'
      | 'RESUME'
      | 'RESUME_ALL'
      | 'RETRY'
      | 'IGNORE'
      | 'WAITING_FOR_MANUAL_INTERVENTION'
      | 'MARK_FAILED'
      | 'MARK_SUCCESS'
      | 'NEXT_STEP'
      | 'END_EXECUTION'
      | 'MARK_EXPIRED'
      | 'CUSTOM_FAILURE'
      | 'EXPIRE_ALL'
      | 'UNRECOGNIZED'
    tookEffectAt: number
  }
  export interface IssuedBy {
    adviserIssuer?: AdviserIssuer
    adviserIssuerOrBuilder?: AdviserIssuerOrBuilder
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: IssuedBy
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    issueTime?: Timestamp
    issueTimeOrBuilder?: TimestampOrBuilder
    issuerCase?: 'MANUALISSUER' | 'ADVISERISSUER' | 'TIMEOUTISSUER' | 'TRIGGERISSUER' | 'ISSUER_NOT_SET'
    manualIssuer?: ManualIssuer
    manualIssuerOrBuilder?: ManualIssuerOrBuilder
    parserForType?: ParserIssuedBy
    serializedSize?: number
    timeoutIssuer?: TimeoutIssuer
    timeoutIssuerOrBuilder?: TimeoutIssuerOrBuilder
    triggerIssuer?: TriggerIssuer
    triggerIssuerOrBuilder?: TriggerIssuerOrBuilder
    unknownFields?: UnknownFieldSet
  }
  export interface IssuedByOrBuilder {
    adviserIssuer?: AdviserIssuer
    adviserIssuerOrBuilder?: AdviserIssuerOrBuilder
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    issueTime?: Timestamp
    issueTimeOrBuilder?: TimestampOrBuilder
    issuerCase?: 'MANUALISSUER' | 'ADVISERISSUER' | 'TIMEOUTISSUER' | 'TRIGGERISSUER' | 'ISSUER_NOT_SET'
    manualIssuer?: ManualIssuer
    manualIssuerOrBuilder?: ManualIssuerOrBuilder
    timeoutIssuer?: TimeoutIssuer
    timeoutIssuerOrBuilder?: TimeoutIssuerOrBuilder
    triggerIssuer?: TriggerIssuer
    triggerIssuerOrBuilder?: TriggerIssuerOrBuilder
    unknownFields?: UnknownFieldSet
  }
  export type JexlCriteriaSpec = CriteriaSpecDTO & {
    expression?: string
  }
  export type JiraApprovalInstanceDetails = ApprovalInstanceDetailsDTO & {
    approvalCriteria: CriteriaSpecWrapperDTO
    connectorRef?: string
    issue: JiraIssueKeyNG
    rejectionCriteria: CriteriaSpecWrapperDTO
  }
  export interface JiraIssueKeyNG {
    key: string
    url: string
  }
  export interface JsonNode {
    array?: boolean
    bigDecimal?: boolean
    bigInteger?: boolean
    binary?: boolean
    boolean?: boolean
    containerNode?: boolean
    double?: boolean
    float?: boolean
    floatingPointNumber?: boolean
    int?: boolean
    integralNumber?: boolean
    long?: boolean
    missingNode?: boolean
    nodeType?: 'ARRAY' | 'BINARY' | 'BOOLEAN' | 'MISSING' | 'NULL' | 'NUMBER' | 'OBJECT' | 'POJO' | 'STRING'
    null?: boolean
    number?: boolean
    object?: boolean
    pojo?: boolean
    short?: boolean
    textual?: boolean
    valueNode?: boolean
  }
  export interface LastTriggerExecutionDetails {
    lastExecutionStatus?: string
    lastExecutionSuccessful?: boolean
    lastExecutionTime?: number
    message?: string
    planExecutionId?: string
  }
  export type ManifestTriggerConfig = NGTriggerSpecV2 & {
    manifestRef?: string
    spec?: ManifestTypeSpec
    stageIdentifier?: string
    type?: 'HelmChart'
  }
  export interface ManifestTypeSpec {
    [key: string]: any
  }
  export interface ManualIssuer {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: ManualIssuer
    descriptorForType?: Descriptor
    emailId?: string
    emailIdBytes?: ByteString
    identifier?: string
    identifierBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserManualIssuer
    serializedSize?: number
    type?: string
    typeBytes?: ByteString
    unknownFields?: UnknownFieldSet
    userId?: string
    userIdBytes?: ByteString
  }
  export interface ManualIssuerOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    emailId?: string
    emailIdBytes?: ByteString
    identifier?: string
    identifierBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    type?: string
    typeBytes?: ByteString
    unknownFields?: UnknownFieldSet
    userId?: string
    userIdBytes?: ByteString
  }
  export interface MeanMedianInfo {
    duration?: number
    rate?: number
  }
  export interface MergeInputSetRequest {
    inputSetReferences?: string[]
    withMergedPipelineYaml?: boolean
  }
  export interface MergeInputSetResponse {
    completePipelineYaml?: string
    errorResponse?: boolean
    inputSetErrorWrapper?: InputSetErrorWrapper
    pipelineYaml?: string
  }
  export interface MergeInputSetTemplateRequest {
    runtimeInputYaml?: string
  }
  export interface Message {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: MessageLite
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserMessage
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface MessageLite {
    defaultInstanceForType?: MessageLite
    initialized?: boolean
    parserForType?: ParserMessageLite
    serializedSize?: number
  }
  export interface MessageOptions {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    allFieldsRaw?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: MessageOptions
    deprecated?: boolean
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    mapEntry?: boolean
    messageSetWireFormat?: boolean
    noStandardDescriptorAccessor?: boolean
    parserForType?: ParserMessageOptions
    serializedSize?: number
    uninterpretedOptionCount?: number
    uninterpretedOptionList?: UninterpretedOption[]
    uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
    unknownFields?: UnknownFieldSet
  }
  export interface MethodDescriptor {
    clientStreaming?: boolean
    file?: FileDescriptor
    fullName?: string
    index?: number
    inputType?: Descriptor
    name?: string
    options?: MethodOptions
    outputType?: Descriptor
    serverStreaming?: boolean
    service?: ServiceDescriptor
  }
  export interface MethodOptions {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    allFieldsRaw?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: MethodOptions
    deprecated?: boolean
    descriptorForType?: Descriptor
    idempotencyLevel?: 'IDEMPOTENCY_UNKNOWN' | 'NO_SIDE_EFFECTS' | 'IDEMPOTENT'
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserMethodOptions
    serializedSize?: number
    uninterpretedOptionCount?: number
    uninterpretedOptionList?: UninterpretedOption[]
    uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
    unknownFields?: UnknownFieldSet
  }
  export interface NGTag {
    key: string
    value: string
  }
  export interface NGTriggerConfigV2 {
    description?: string
    enabled?: boolean
    identifier: string
    inputYaml?: string
    name?: string
    orgIdentifier?: string
    pipelineIdentifier?: string
    projectIdentifier?: string
    source?: NGTriggerSourceV2
    tags?: {
      [key: string]: string
    }
  }
  export interface NGTriggerDetailsResponse {
    buildDetails?: BuildDetails
    description?: string
    enabled?: boolean
    executions?: number[]
    identifier?: string
    lastTriggerExecutionDetails?: LastTriggerExecutionDetails
    name?: string
    registrationStatus?: 'SUCCESS' | 'FAILED' | 'ERROR' | 'TIMEOUT' | 'UNAVAILABLE'
    tags?: {
      [key: string]: string
    }
    triggerStatus?: TriggerStatus
    type?: 'Webhook' | 'Artifact' | 'Manifest' | 'Scheduled'
    webhookDetails?: WebhookDetails
    webhookUrl?: string
    yaml?: string
  }
  export interface NGTriggerResponse {
    accountIdentifier?: string
    description?: string
    enabled?: boolean
    identifier?: string
    name?: string
    orgIdentifier?: string
    projectIdentifier?: string
    targetIdentifier?: string
    type?: 'Webhook' | 'Artifact' | 'Manifest' | 'Scheduled'
    version?: number
    yaml?: string
  }
  export interface NGTriggerSourceV2 {
    spec?: NGTriggerSpecV2
    type?: 'Webhook' | 'Artifact' | 'Manifest' | 'Scheduled'
  }
  export interface NGTriggerSpecV2 {
    [key: string]: any
  }
  export interface NamePart {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: NamePart
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    isExtension?: boolean
    namePart?: string
    namePartBytes?: ByteString
    parserForType?: ParserNamePart
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface NamePartOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    isExtension?: boolean
    namePart?: string
    namePartBytes?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export interface NodeRunInfo {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: NodeRunInfo
    descriptorForType?: Descriptor
    evaluatedCondition?: boolean
    expressionsCount?: number
    expressionsList?: ExpressionBlock[]
    expressionsOrBuilderList?: ExpressionBlockOrBuilder[]
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserNodeRunInfo
    serializedSize?: number
    unknownFields?: UnknownFieldSet
    whenCondition?: string
    whenConditionBytes?: ByteString
  }
  export interface NotificationChannelWrapper {
    spec?: PmsNotificationChannel
    type?: string
  }
  export interface NotificationRules {
    enabled?: boolean
    name?: string
    notificationMethod?: NotificationChannelWrapper
    pipelineEvents?: PipelineEvent[]
  }
  export interface OneofDescriptor {
    containingType?: Descriptor
    fieldCount?: number
    fields?: FieldDescriptor[]
    file?: FileDescriptor
    fullName?: string
    index?: number
    name?: string
    options?: OneofOptions
  }
  export interface OneofOptions {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    allFieldsRaw?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: OneofOptions
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserOneofOptions
    serializedSize?: number
    uninterpretedOptionCount?: number
    uninterpretedOptionList?: UninterpretedOption[]
    uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
    unknownFields?: UnknownFieldSet
  }
  export interface OverlayInputSetResponse {
    accountId?: string
    description?: string
    errorResponse?: boolean
    gitDetails?: EntityGitDetails
    identifier?: string
    inputSetReferences?: string[]
    invalid?: boolean
    invalidInputSetReferences?: {
      [key: string]: string
    }
    name?: string
    orgIdentifier?: string
    overlayInputSetYaml?: string
    pipelineIdentifier?: string
    projectIdentifier?: string
    tags?: {
      [key: string]: string
    }
    version?: number
  }
  export interface PMSPipelineResponseDTO {
    gitDetails?: EntityGitDetails
    version?: number
    yamlPipeline?: string
  }
  export interface PMSPipelineSummaryResponse {
    createdAt?: number
    description?: string
    executionSummaryInfo?: ExecutionSummaryInfo
    filters?: {
      [key: string]: {
        [key: string]: {
          [key: string]: any
        }
      }
    }
    gitDetails?: EntityGitDetails
    identifier?: string
    lastUpdatedAt?: number
    modules?: string[]
    name?: string
    numOfStages?: number
    stageNames?: string[]
    tags?: {
      [key: string]: string
    }
    version?: number
  }
  export interface Page {
    content?: {
      [key: string]: any
    }[]
    empty?: boolean
    first?: boolean
    last?: boolean
    number?: number
    numberOfElements?: number
    pageable?: Pageable
    size?: number
    sort?: Sort
    totalElements?: number
    totalPages?: number
  }
  export interface PageFilterDTO {
    content?: FilterDTO[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageInputSetSummaryResponse {
    content?: InputSetSummaryResponse[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PageNGTriggerDetailsResponse {
    content?: NGTriggerDetailsResponse[]
    empty?: boolean
    pageIndex?: number
    pageItemCount?: number
    pageSize?: number
    totalItems?: number
    totalPages?: number
  }
  export interface PagePMSPipelineSummaryResponse {
    content?: PMSPipelineSummaryResponse[]
    empty?: boolean
    first?: boolean
    last?: boolean
    number?: number
    numberOfElements?: number
    pageable?: Pageable
    size?: number
    sort?: Sort
    totalElements?: number
    totalPages?: number
  }
  export interface PagePipelineExecutionSummary {
    content?: PipelineExecutionSummary[]
    empty?: boolean
    first?: boolean
    last?: boolean
    number?: number
    numberOfElements?: number
    pageable?: Pageable
    size?: number
    sort?: Sort
    totalElements?: number
    totalPages?: number
  }
  export interface Pageable {
    offset?: number
    pageNumber?: number
    pageSize?: number
    paged?: boolean
    sort?: Sort
    unpaged?: boolean
  }
  export interface Parser {
    [key: string]: any
  }
  export interface ParserAdviserIssuer {
    [key: string]: any
  }
  export interface ParserAsyncExecutableResponse {
    [key: string]: any
  }
  export interface ParserChild {
    [key: string]: any
  }
  export interface ParserChildChainExecutableResponse {
    [key: string]: any
  }
  export interface ParserChildExecutableResponse {
    [key: string]: any
  }
  export interface ParserChildrenExecutableResponse {
    [key: string]: any
  }
  export interface ParserEnumOptions {
    [key: string]: any
  }
  export interface ParserEnumValueOptions {
    [key: string]: any
  }
  export interface ParserExecutableResponse {
    [key: string]: any
  }
  export interface ParserExecutionErrorInfo {
    [key: string]: any
  }
  export interface ParserExecutionMetadata {
    [key: string]: any
  }
  export interface ParserExecutionPrincipalInfo {
    [key: string]: any
  }
  export interface ParserExecutionTriggerInfo {
    [key: string]: any
  }
  export interface ParserExpressionBlock {
    [key: string]: any
  }
  export interface ParserFieldOptions {
    [key: string]: any
  }
  export interface ParserFileOptions {
    [key: string]: any
  }
  export interface ParserInterruptConfig {
    [key: string]: any
  }
  export interface ParserIssuedBy {
    [key: string]: any
  }
  export interface ParserManualIssuer {
    [key: string]: any
  }
  export interface ParserMessage {
    [key: string]: any
  }
  export interface ParserMessageLite {
    [key: string]: any
  }
  export interface ParserMessageOptions {
    [key: string]: any
  }
  export interface ParserMethodOptions {
    [key: string]: any
  }
  export interface ParserNamePart {
    [key: string]: any
  }
  export interface ParserNodeRunInfo {
    [key: string]: any
  }
  export interface ParserOneofOptions {
    [key: string]: any
  }
  export interface ParserRerunInfo {
    [key: string]: any
  }
  export interface ParserRetryInterruptConfig {
    [key: string]: any
  }
  export interface ParserServiceOptions {
    [key: string]: any
  }
  export interface ParserSkipInfo {
    [key: string]: any
  }
  export interface ParserSkipTaskExecutableResponse {
    [key: string]: any
  }
  export interface ParserSyncExecutableResponse {
    [key: string]: any
  }
  export interface ParserTaskChainExecutableResponse {
    [key: string]: any
  }
  export interface ParserTaskExecutableResponse {
    [key: string]: any
  }
  export interface ParserTimeoutIssuer {
    [key: string]: any
  }
  export interface ParserTimestamp {
    [key: string]: any
  }
  export interface ParserTriggerIssuer {
    [key: string]: any
  }
  export interface ParserTriggeredBy {
    [key: string]: any
  }
  export interface ParserUninterpretedOption {
    [key: string]: any
  }
  export interface ParserUnitProgress {
    [key: string]: any
  }
  export interface ParserYamlOutputProperties {
    [key: string]: any
  }
  export interface ParserYamlProperties {
    [key: string]: any
  }
  export interface PipelineCountInfo {
    failure?: number
    success?: number
    total?: number
  }
  export interface PipelineEvent {
    forStages?: string[]
    type?:
      | 'AllEvents'
      | 'PipelineStart'
      | 'PipelineSuccess'
      | 'PipelineFailed'
      | 'PipelineEnd'
      | 'PipelinePaused'
      | 'StageSuccess'
      | 'StageFailed'
      | 'StageStart'
      | 'StepFailed'
  }
  export interface PipelineExecutionDetail {
    executionGraph?: ExecutionGraph
    pipelineExecutionSummary?: PipelineExecutionSummary
  }
  export type PipelineExecutionFilterProperties = FilterProperties & {
    moduleProperties?: {
      [key: string]: {
        [key: string]: any
      }
    }
    pipelineName?: string
    status?: (
      | 'Running'
      | 'AsyncWaiting'
      | 'TaskWaiting'
      | 'TimedWaiting'
      | 'Failed'
      | 'Errored'
      | 'IgnoreFailed'
      | 'NotStarted'
      | 'Expired'
      | 'Aborted'
      | 'Discontinuing'
      | 'Queued'
      | 'Paused'
      | 'ResourceWaiting'
      | 'InterventionWaiting'
      | 'ApprovalWaiting'
      | 'Success'
      | 'Suspended'
      | 'Skipped'
      | 'Pausing'
      | 'ApprovalRejected'
      | 'NOT_STARTED'
      | 'INTERVENTION_WAITING'
      | 'APPROVAL_WAITING'
      | 'APPROVAL_REJECTED'
      | 'WAITING'
    )[]
  }
  export interface PipelineExecutionInfo {
    count?: PipelineCountInfo
    date?: number
  }
  export interface PipelineExecutionSummary {
    createdAt?: number
    endTs?: number
    executionErrorInfo?: ExecutionErrorInfo
    executionTriggerInfo?: ExecutionTriggerInfo
    failedStagesCount?: number
    gitDetails?: EntityGitDetails
    layoutNodeMap?: {
      [key: string]: GraphLayoutNode
    }
    moduleInfo?: {
      [key: string]: {
        [key: string]: {
          [key: string]: any
        }
      }
    }
    modules?: string[]
    name?: string
    pipelineIdentifier?: string
    planExecutionId?: string
    runSequence?: number
    runningStagesCount?: number
    startTs?: number
    startingNodeId?: string
    status?:
      | 'Running'
      | 'AsyncWaiting'
      | 'TaskWaiting'
      | 'TimedWaiting'
      | 'Failed'
      | 'Errored'
      | 'IgnoreFailed'
      | 'NotStarted'
      | 'Expired'
      | 'Aborted'
      | 'Discontinuing'
      | 'Queued'
      | 'Paused'
      | 'ResourceWaiting'
      | 'InterventionWaiting'
      | 'ApprovalWaiting'
      | 'Success'
      | 'Suspended'
      | 'Skipped'
      | 'Pausing'
      | 'ApprovalRejected'
      | 'NOT_STARTED'
      | 'INTERVENTION_WAITING'
      | 'APPROVAL_WAITING'
      | 'APPROVAL_REJECTED'
      | 'WAITING'
    successfulStagesCount?: number
    tags?: NGTag[]
    totalStagesCount?: number
  }
  export type PipelineFilterProperties = FilterProperties & {
    description?: string
    moduleProperties?: {
      [key: string]: {
        [key: string]: any
      }
    }
    name?: string
    pipelineIdentifiers?: string[]
    pipelineTags?: NGTag[]
  }
  export interface PipelineHealthInfo {
    meanInfo?: MeanMedianInfo
    medianInfo?: MeanMedianInfo
    success?: SuccessHealthInfo
    total?: TotalHealthInfo
  }
  export interface PipelineInputResponse {
    errorInfo?: PreFlightEntityErrorInfo
    fqn?: string
    stageName?: string
    stepName?: string
    success?: boolean
  }
  export interface PipelineWrapperResponse {
    label?: string
    pipelineInputResponse?: PipelineInputResponse[]
    status?: 'SUCCESS' | 'FAILURE' | 'IN_PROGRESS' | 'UNKNOWN'
  }
  export interface PlanExecution {
    createdAt?: number
    endTs?: number
    lastUpdatedAt?: number
    metadata?: ExecutionMetadata
    nextIteration?: number
    planId?: string
    setupAbstractions?: {
      [key: string]: string
    }
    startTs?: number
    status?:
      | 'NO_OP'
      | 'RUNNING'
      | 'INTERVENTION_WAITING'
      | 'TIMED_WAITING'
      | 'ASYNC_WAITING'
      | 'TASK_WAITING'
      | 'DISCONTINUING'
      | 'PAUSING'
      | 'QUEUED'
      | 'SKIPPED'
      | 'PAUSED'
      | 'ABORTED'
      | 'ERRORED'
      | 'FAILED'
      | 'EXPIRED'
      | 'SUSPENDED'
      | 'SUCCEEDED'
      | 'IGNORE_FAILED'
      | 'APPROVAL_WAITING'
      | 'RESOURCE_WAITING'
      | 'APPROVAL_REJECTED'
      | 'UNRECOGNIZED'
    uuid?: string
    validUntil?: string
    version?: number
  }
  export interface PlanExecutionResponseDto {
    gitDetails?: EntityGitDetails
    planExecution?: PlanExecution
  }
  export type PmsEmailChannel = PmsNotificationChannel & {
    recipients?: string[]
    userGroups?: string[]
  }
  export type PmsMSTeamChannel = PmsNotificationChannel & {
    msTeamKeys?: string[]
    userGroups?: string[]
  }
  export interface PmsNotificationChannel {
    [key: string]: any
  }
  export type PmsPagerDutyChannel = PmsNotificationChannel & {
    integrationKey?: string
    userGroups?: string[]
  }
  export type PmsSlackChannel = PmsNotificationChannel & {
    userGroups?: string[]
    webhookUrl?: string
  }
  export interface PollingSubscriptionStatus {
    detailedMessage?: string
    statusResult?: 'SUCCESS' | 'FAILED' | 'UNKNOWN'
  }
  export interface PreFlightCause {
    cause?: string
  }
  export interface PreFlightDTO {
    connectorWrapperResponse?: ConnectorWrapperResponse
    errorInfo?: PreFlightErrorInfo
    pipelineInputWrapperResponse?: PipelineWrapperResponse
    status?: 'SUCCESS' | 'FAILURE' | 'IN_PROGRESS' | 'UNKNOWN'
  }
  export interface PreFlightEntityErrorInfo {
    causes?: PreFlightCause[]
    description?: string
    resolution?: PreFlightResolution[]
    summary?: string
  }
  export interface PreFlightErrorInfo {
    count?: number
    message?: string
  }
  export interface PreFlightResolution {
    resolution?: string
  }
  export interface Principal {
    identifier: string
    type: 'USER' | 'SYSTEM' | 'API_KEY' | 'SERVICE_ACCOUNT'
  }
  export interface RerunInfo {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: RerunInfo
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserRerunInfo
    prevExecutionId?: string
    prevExecutionIdBytes?: ByteString
    prevTriggerType?: 'NOOP' | 'MANUAL' | 'WEBHOOK' | 'WEBHOOK_CUSTOM' | 'SCHEDULER_CRON' | 'UNRECOGNIZED'
    prevTriggerTypeValue?: number
    rootExecutionId?: string
    rootExecutionIdBytes?: ByteString
    rootTriggerType?: 'NOOP' | 'MANUAL' | 'WEBHOOK' | 'WEBHOOK_CUSTOM' | 'SCHEDULER_CRON' | 'UNRECOGNIZED'
    rootTriggerTypeValue?: number
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface RerunInfoOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    prevExecutionId?: string
    prevExecutionIdBytes?: ByteString
    prevTriggerType?: 'NOOP' | 'MANUAL' | 'WEBHOOK' | 'WEBHOOK_CUSTOM' | 'SCHEDULER_CRON' | 'UNRECOGNIZED'
    prevTriggerTypeValue?: number
    rootExecutionId?: string
    rootExecutionIdBytes?: ByteString
    rootTriggerType?: 'NOOP' | 'MANUAL' | 'WEBHOOK' | 'WEBHOOK_CUSTOM' | 'SCHEDULER_CRON' | 'UNRECOGNIZED'
    rootTriggerTypeValue?: number
    unknownFields?: UnknownFieldSet
  }
  export interface ResourceConstraintDetail {
    pipelineIdentifier?: string
    planExecutionId?: string
    state?: 'BLOCKED' | 'ACTIVE' | 'FINISHED' | 'REJECTED'
  }
  export interface ResourceConstraintExecutionInfo {
    capacity?: number
    name?: string
    resourceConstraints?: ResourceConstraintDetail[]
  }
  export interface ResourceDTO {
    identifier: string
    labels?: {
      [key: string]: string
    }
    type: string
  }
  export interface ResourceScopeDTO {
    accountIdentifier: string
    labels?: {
      [key: string]: string
    }
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export interface Response {
    correlationId?: string
    data?: {
      [key: string]: any
    }
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseApprovalInstanceResponse {
    correlationId?: string
    data?: ApprovalInstanceResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseBarrierInfo {
    correlationId?: string
    data?: BarrierInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseBoolean {
    correlationId?: string
    data?: boolean
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseDashboardPipelineExecutionInfo {
    correlationId?: string
    data?: DashboardPipelineExecutionInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseDashboardPipelineHealthInfo {
    correlationId?: string
    data?: DashboardPipelineHealthInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseExecutionNode {
    correlationId?: string
    data?: ExecutionNode
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseFilterDTO {
    correlationId?: string
    data?: FilterDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseHarnessApprovalInstanceAuthorization {
    correlationId?: string
    data?: HarnessApprovalInstanceAuthorization
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseInputSetResponse {
    correlationId?: string
    data?: InputSetResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseInputSetTemplateResponse {
    correlationId?: string
    data?: InputSetTemplateResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseJsonNode {
    correlationId?: string
    data?: JsonNode
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListBarrierExecutionInfo {
    correlationId?: string
    data?: BarrierExecutionInfo[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListBarrierSetupInfo {
    correlationId?: string
    data?: BarrierSetupInfo[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListBitbucketPRAction {
    correlationId?: string
    data?: ('Create' | 'Update' | 'Merge' | 'Decline')[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListBitbucketTriggerEvent {
    correlationId?: string
    data?: ('PullRequest' | 'Push')[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListGithubIssueCommentAction {
    correlationId?: string
    data?: ('Create' | 'Edit' | 'Delete')[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListGithubPRAction {
    correlationId?: string
    data?: ('Close' | 'Edit' | 'Open' | 'Reopen' | 'Label' | 'Unlabel' | 'Synchronize')[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListGithubTriggerEvent {
    correlationId?: string
    data?: ('PullRequest' | 'Push' | 'IssueComment')[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListGitlabPRAction {
    correlationId?: string
    data?: ('Open' | 'Close' | 'Reopen' | 'Merge' | 'Update' | 'Sync')[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListGitlabTriggerEvent {
    correlationId?: string
    data?: ('MergeRequest' | 'Push')[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListWebhookAction {
    correlationId?: string
    data?: (
      | 'created'
      | 'closed'
      | 'edited'
      | 'updated'
      | 'opened'
      | 'reopened'
      | 'labeled'
      | 'unlabeled'
      | 'deleted'
      | 'synchronized'
      | 'synced'
      | 'merged'
      | 'sync'
      | 'open'
      | 'close'
      | 'reopen'
      | 'merge'
      | 'update'
      | 'pull request created'
      | 'pull request updated'
      | 'pull request merged'
      | 'pull request declined'
    )[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseListWebhookTriggerType {
    correlationId?: string
    data?: ('Github' | 'Gitlab' | 'Bitbucket' | 'Custom' | 'AwsCodeCommit')[]
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseMapStringMapStringListString {
    correlationId?: string
    data?: {
      [key: string]: {
        [key: string]: string[]
      }
    }
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseMapWebhookSourceRepoListWebhookEvent {
    correlationId?: string
    data?: {
      [key: string]: (
        | 'Pull Request'
        | 'Push'
        | 'Issue Comment'
        | 'Delete'
        | 'Merge Request'
        | 'Repository'
        | 'Branch'
        | 'Tag'
      )[]
    }
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseMergeInputSetResponse {
    correlationId?: string
    data?: MergeInputSetResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseMessage {
    code?:
      | 'DEFAULT_ERROR_CODE'
      | 'INVALID_ARGUMENT'
      | 'INVALID_EMAIL'
      | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
      | 'USER_ALREADY_REGISTERED'
      | 'USER_INVITATION_DOES_NOT_EXIST'
      | 'USER_DOES_NOT_EXIST'
      | 'USER_INVITE_OPERATION_FAILED'
      | 'USER_DISABLED'
      | 'ACCOUNT_DOES_NOT_EXIST'
      | 'INACTIVE_ACCOUNT'
      | 'ACCOUNT_MIGRATED'
      | 'USER_DOMAIN_NOT_ALLOWED'
      | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
      | 'RESOURCE_NOT_FOUND'
      | 'ROLE_DOES_NOT_EXIST'
      | 'EMAIL_NOT_VERIFIED'
      | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
      | 'INVALID_TOKEN'
      | 'REVOKED_TOKEN'
      | 'INVALID_CAPTCHA_TOKEN'
      | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
      | 'EXPIRED_TOKEN'
      | 'TOKEN_ALREADY_REFRESHED_ONCE'
      | 'ACCESS_DENIED'
      | 'NG_ACCESS_DENIED'
      | 'INVALID_CREDENTIAL'
      | 'INVALID_CREDENTIALS_THIRD_PARTY'
      | 'INVALID_KEY'
      | 'INVALID_CONNECTOR_TYPE'
      | 'INVALID_KEYPATH'
      | 'INVALID_VARIABLE'
      | 'UNKNOWN_HOST'
      | 'UNREACHABLE_HOST'
      | 'INVALID_PORT'
      | 'SSH_SESSION_TIMEOUT'
      | 'SOCKET_CONNECTION_ERROR'
      | 'CONNECTION_ERROR'
      | 'SOCKET_CONNECTION_TIMEOUT'
      | 'CONNECTION_TIMEOUT'
      | 'SSH_CONNECTION_ERROR'
      | 'USER_GROUP_ERROR'
      | 'INVALID_EXECUTION_ID'
      | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
      | 'UNEXPECTED'
      | 'UNKNOWN_ERROR'
      | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
      | 'DUPLICATE_STATE_NAMES'
      | 'TRANSITION_NOT_LINKED'
      | 'TRANSITION_TO_INCORRECT_STATE'
      | 'TRANSITION_TYPE_NULL'
      | 'STATES_WITH_DUP_TRANSITIONS'
      | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
      | 'NON_FORK_STATES'
      | 'NON_REPEAT_STATES'
      | 'INITIAL_STATE_NOT_DEFINED'
      | 'FILE_INTEGRITY_CHECK_FAILED'
      | 'INVALID_URL'
      | 'FILE_DOWNLOAD_FAILED'
      | 'PLATFORM_SOFTWARE_DELETE_ERROR'
      | 'INVALID_CSV_FILE'
      | 'INVALID_REQUEST'
      | 'SCHEMA_VALIDATION_FAILED'
      | 'FILTER_CREATION_ERROR'
      | 'INVALID_YAML_ERROR'
      | 'PLAN_CREATION_ERROR'
      | 'INVALID_INFRA_STATE'
      | 'PIPELINE_ALREADY_TRIGGERED'
      | 'NON_EXISTING_PIPELINE'
      | 'DUPLICATE_COMMAND_NAMES'
      | 'INVALID_PIPELINE'
      | 'COMMAND_DOES_NOT_EXIST'
      | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
      | 'DUPLICATE_HOST_NAMES'
      | 'STATE_NOT_FOR_TYPE'
      | 'STATE_MACHINE_ISSUE'
      | 'STATE_DISCONTINUE_FAILED'
      | 'STATE_PAUSE_FAILED'
      | 'PAUSE_ALL_ALREADY'
      | 'RESUME_ALL_ALREADY'
      | 'ROLLBACK_ALREADY'
      | 'ABORT_ALL_ALREADY'
      | 'EXPIRE_ALL_ALREADY'
      | 'RETRY_FAILED'
      | 'UNKNOWN_ARTIFACT_TYPE'
      | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
      | 'INIT_TIMEOUT'
      | 'LICENSE_EXPIRED'
      | 'NOT_LICENSED'
      | 'REQUEST_TIMEOUT'
      | 'WORKFLOW_ALREADY_TRIGGERED'
      | 'JENKINS_ERROR'
      | 'INVALID_ARTIFACT_SOURCE'
      | 'INVALID_ARTIFACT_SERVER'
      | 'INVALID_CLOUD_PROVIDER'
      | 'UPDATE_NOT_ALLOWED'
      | 'DELETE_NOT_ALLOWED'
      | 'APPDYNAMICS_CONFIGURATION_ERROR'
      | 'APM_CONFIGURATION_ERROR'
      | 'SPLUNK_CONFIGURATION_ERROR'
      | 'ELK_CONFIGURATION_ERROR'
      | 'LOGZ_CONFIGURATION_ERROR'
      | 'SUMO_CONFIGURATION_ERROR'
      | 'INSTANA_CONFIGURATION_ERROR'
      | 'APPDYNAMICS_ERROR'
      | 'STACKDRIVER_ERROR'
      | 'STACKDRIVER_CONFIGURATION_ERROR'
      | 'NEWRELIC_CONFIGURATION_ERROR'
      | 'NEWRELIC_ERROR'
      | 'DYNA_TRACE_CONFIGURATION_ERROR'
      | 'DYNA_TRACE_ERROR'
      | 'CLOUDWATCH_ERROR'
      | 'CLOUDWATCH_CONFIGURATION_ERROR'
      | 'PROMETHEUS_CONFIGURATION_ERROR'
      | 'DATA_DOG_CONFIGURATION_ERROR'
      | 'SERVICE_GUARD_CONFIGURATION_ERROR'
      | 'ENCRYPTION_NOT_CONFIGURED'
      | 'UNAVAILABLE_DELEGATES'
      | 'WORKFLOW_EXECUTION_IN_PROGRESS'
      | 'PIPELINE_EXECUTION_IN_PROGRESS'
      | 'AWS_ACCESS_DENIED'
      | 'AWS_CLUSTER_NOT_FOUND'
      | 'AWS_SERVICE_NOT_FOUND'
      | 'IMAGE_NOT_FOUND'
      | 'ILLEGAL_ARGUMENT'
      | 'IMAGE_TAG_NOT_FOUND'
      | 'DELEGATE_NOT_AVAILABLE'
      | 'INVALID_YAML_PAYLOAD'
      | 'AUTHENTICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'UNRECOGNIZED_YAML_FIELDS'
      | 'COULD_NOT_MAP_BEFORE_YAML'
      | 'MISSING_BEFORE_YAML'
      | 'MISSING_YAML'
      | 'NON_EMPTY_DELETIONS'
      | 'GENERAL_YAML_ERROR'
      | 'GENERAL_YAML_INFO'
      | 'YAML_GIT_SYNC_ERROR'
      | 'GIT_CONNECTION_ERROR'
      | 'GIT_ERROR'
      | 'ARTIFACT_SERVER_ERROR'
      | 'ENCRYPT_DECRYPT_ERROR'
      | 'SECRET_MANAGEMENT_ERROR'
      | 'SECRET_NOT_FOUND'
      | 'KMS_OPERATION_ERROR'
      | 'GCP_KMS_OPERATION_ERROR'
      | 'VAULT_OPERATION_ERROR'
      | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
      | 'AZURE_KEY_VAULT_OPERATION_ERROR'
      | 'CYBERARK_OPERATION_ERROR'
      | 'UNSUPPORTED_OPERATION_EXCEPTION'
      | 'FEATURE_UNAVAILABLE'
      | 'GENERAL_ERROR'
      | 'BASELINE_CONFIGURATION_ERROR'
      | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
      | 'INVALID_AUTHENTICATION_MECHANISM'
      | 'INVALID_SAML_CONFIGURATION'
      | 'INVALID_OAUTH_CONFIGURATION'
      | 'INVALID_LDAP_CONFIGURATION'
      | 'USER_GROUP_SYNC_FAILURE'
      | 'USER_GROUP_ALREADY_EXIST'
      | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
      | 'EXPLANATION'
      | 'HINT'
      | 'NOT_WHITELISTED_IP'
      | 'INVALID_TOTP_TOKEN'
      | 'EMAIL_FAILED'
      | 'SSL_HANDSHAKE_FAILED'
      | 'NO_APPS_ASSIGNED'
      | 'INVALID_INFRA_CONFIGURATION'
      | 'TEMPLATES_LINKED'
      | 'USER_HAS_NO_PERMISSIONS'
      | 'USER_NOT_AUTHORIZED'
      | 'USER_ALREADY_PRESENT'
      | 'INVALID_USAGE_RESTRICTION'
      | 'USAGE_RESTRICTION_ERROR'
      | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
      | 'DELEGATE_TASK_RETRY'
      | 'KUBERNETES_YAML_ERROR'
      | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
      | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
      | 'FILE_NOT_FOUND_ERROR'
      | 'USAGE_LIMITS_EXCEEDED'
      | 'EVENT_PUBLISH_FAILED'
      | 'JIRA_ERROR'
      | 'EXPRESSION_EVALUATION_FAILED'
      | 'KUBERNETES_VALUES_ERROR'
      | 'KUBERNETES_CLUSTER_ERROR'
      | 'INCORRECT_SIGN_IN_MECHANISM'
      | 'OAUTH_LOGIN_FAILED'
      | 'INVALID_TERRAFORM_TARGETS_REQUEST'
      | 'TERRAFORM_EXECUTION_ERROR'
      | 'FILE_READ_FAILED'
      | 'FILE_SIZE_EXCEEDS_LIMIT'
      | 'CLUSTER_NOT_FOUND'
      | 'MARKETPLACE_TOKEN_NOT_FOUND'
      | 'INVALID_MARKETPLACE_TOKEN'
      | 'INVALID_TICKETING_SERVER'
      | 'SERVICENOW_ERROR'
      | 'PASSWORD_EXPIRED'
      | 'USER_LOCKED'
      | 'PASSWORD_STRENGTH_CHECK_FAILED'
      | 'ACCOUNT_DISABLED'
      | 'INVALID_ACCOUNT_PERMISSION'
      | 'PAGERDUTY_ERROR'
      | 'HEALTH_ERROR'
      | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
      | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
      | 'INVALID_DASHBOARD_UPDATE_REQUEST'
      | 'DUPLICATE_FIELD'
      | 'INVALID_AZURE_VAULT_CONFIGURATION'
      | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
      | 'INVALID_ROLLBACK'
      | 'DATA_COLLECTION_ERROR'
      | 'SUMO_DATA_COLLECTION_ERROR'
      | 'DEPLOYMENT_GOVERNANCE_ERROR'
      | 'BATCH_PROCESSING_ERROR'
      | 'GRAPHQL_ERROR'
      | 'FILE_CREATE_ERROR'
      | 'ILLEGAL_STATE'
      | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
      | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
      | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
      | 'POD_NOT_FOUND_ERROR'
      | 'COMMAND_EXECUTION_ERROR'
      | 'REGISTRY_EXCEPTION'
      | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
      | 'ENGINE_IO_EXCEPTION'
      | 'ENGINE_OUTCOME_EXCEPTION'
      | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
      | 'CACHE_NOT_FOUND_EXCEPTION'
      | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
      | 'SHELL_EXECUTION_EXCEPTION'
      | 'TEMPLATE_NOT_FOUND'
      | 'AZURE_SERVICE_EXCEPTION'
      | 'AZURE_CLIENT_EXCEPTION'
      | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
      | 'TIMEOUT_ENGINE_EXCEPTION'
      | 'NO_AVAILABLE_DELEGATES'
      | 'NO_INSTALLED_DELEGATES'
      | 'DUPLICATE_DELEGATE_EXCEPTION'
      | 'GCP_MARKETPLACE_EXCEPTION'
      | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
      | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
      | 'OPTIMISTIC_LOCKING_EXCEPTION'
      | 'NG_PIPELINE_EXECUTION_EXCEPTION'
      | 'NG_PIPELINE_CREATE_EXCEPTION'
      | 'RESOURCE_NOT_FOUND_EXCEPTION'
      | 'PMS_INITIALIZE_SDK_EXCEPTION'
      | 'UNEXPECTED_SNIPPET_EXCEPTION'
      | 'UNEXPECTED_SCHEMA_EXCEPTION'
      | 'CONNECTOR_VALIDATION_EXCEPTION'
      | 'TIMESCALE_NOT_AVAILABLE'
      | 'MIGRATION_EXCEPTION'
      | 'REQUEST_PROCESSING_INTERRUPTED'
      | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
      | 'GCP_SECRET_OPERATION_ERROR'
      | 'GIT_OPERATION_ERROR'
      | 'TASK_FAILURE_ERROR'
      | 'INSTANCE_STATS_PROCESS_ERROR'
      | 'INSTANCE_STATS_MIGRATION_ERROR'
      | 'DEPLOYMENT_MIGRATION_ERROR'
      | 'INSTANCE_STATS_AGGREGATION_ERROR'
      | 'UNRESOLVED_EXPRESSIONS_ERROR'
      | 'KRYO_HANDLER_NOT_FOUND_ERROR'
      | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
      | 'UNEXPECTED_TYPE_ERROR'
      | 'EXCEPTION_HANDLER_NOT_FOUND'
      | 'CONNECTOR_NOT_FOUND_EXCEPTION'
      | 'GCP_SERVER_ERROR'
      | 'HTTP_RESPONSE_EXCEPTION'
      | 'SCM_NOT_FOUND_ERROR'
      | 'SCM_CONFLICT_ERROR'
      | 'SCM_UNPROCESSABLE_ENTITY'
      | 'PROCESS_EXECUTION_EXCEPTION'
      | 'SCM_UNAUTHORIZED'
      | 'DATA'
      | 'CONTEXT'
      | 'PR_CREATION_ERROR'
      | 'URL_NOT_REACHABLE'
      | 'URL_NOT_PROVIDED'
      | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
      | 'ENGINE_FUNCTOR_ERROR'
      | 'JIRA_CLIENT_ERROR'
      | 'SCM_NOT_MODIFIED'
      | 'JIRA_STEP_ERROR'
      | 'BUCKET_SERVER_ERROR'
    exception?: Throwable
    failureTypes?: (
      | 'EXPIRED'
      | 'DELEGATE_PROVISIONING'
      | 'CONNECTIVITY'
      | 'AUTHENTICATION'
      | 'VERIFICATION_FAILURE'
      | 'APPLICATION_ERROR'
      | 'AUTHORIZATION_ERROR'
      | 'TIMEOUT_ERROR'
    )[]
    level?: 'INFO' | 'ERROR'
    message?: string
  }
  export interface ResponseNGTriggerDetailsResponse {
    correlationId?: string
    data?: NGTriggerDetailsResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseNGTriggerResponse {
    correlationId?: string
    data?: NGTriggerResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseNotificationRules {
    correlationId?: string
    data?: NotificationRules
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseOverlayInputSetResponse {
    correlationId?: string
    data?: OverlayInputSetResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePMSPipelineResponseDTO {
    correlationId?: string
    data?: PMSPipelineResponseDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePMSPipelineSummaryResponse {
    correlationId?: string
    data?: PMSPipelineSummaryResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageFilterDTO {
    correlationId?: string
    data?: PageFilterDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageInputSetSummaryResponse {
    correlationId?: string
    data?: PageInputSetSummaryResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePageNGTriggerDetailsResponse {
    correlationId?: string
    data?: PageNGTriggerDetailsResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePagePMSPipelineSummaryResponse {
    correlationId?: string
    data?: PagePMSPipelineSummaryResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePagePipelineExecutionSummary {
    correlationId?: string
    data?: PagePipelineExecutionSummary
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePipelineExecutionDetail {
    correlationId?: string
    data?: PipelineExecutionDetail
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePipelineExecutionInterrupt {
    correlationId?: string
    data?: PipelineExecutionInterrupt
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePlanExecutionResponseDto {
    correlationId?: string
    data?: PlanExecutionResponseDto
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponsePreFlightDTO {
    correlationId?: string
    data?: PreFlightDTO
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseResourceConstraintExecutionInfo {
    correlationId?: string
    data?: ResourceConstraintExecutionInfo
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseStepCategory {
    correlationId?: string
    data?: StepCategory
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseString {
    correlationId?: string
    data?: string
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseVariableMergeServiceResponse {
    correlationId?: string
    data?: VariableMergeServiceResponse
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface ResponseWebhookEventProcessingDetails {
    correlationId?: string
    data?: WebhookEventProcessingDetails
    metaData?: {
      [key: string]: any
    }
    status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
  }
  export interface RestResponse {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: {
      [key: string]: any
    }
    responseMessages?: ResponseMessage[]
  }
  export interface RestResponseString {
    metaData?: {
      [key: string]: {
        [key: string]: any
      }
    }
    resource?: string
    responseMessages?: ResponseMessage[]
  }
  export interface RetryInterruptConfig {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: RetryInterruptConfig
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserRetryInterruptConfig
    retryId?: string
    retryIdBytes?: ByteString
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface RetryInterruptConfigOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    retryId?: string
    retryIdBytes?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export type ScheduledTriggerConfig = NGTriggerSpecV2 & {
    spec?: ScheduledTriggerSpec
    type?: string
  }
  export interface ScheduledTriggerSpec {
    [key: string]: any
  }
  export interface ServiceDescriptor {
    file?: FileDescriptor
    fullName?: string
    index?: number
    methods?: MethodDescriptor[]
    name?: string
    options?: ServiceOptions
  }
  export interface ServiceOptions {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    allFieldsRaw?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: ServiceOptions
    deprecated?: boolean
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserServiceOptions
    serializedSize?: number
    uninterpretedOptionCount?: number
    uninterpretedOptionList?: UninterpretedOption[]
    uninterpretedOptionOrBuilderList?: UninterpretedOptionOrBuilder[]
    unknownFields?: UnknownFieldSet
  }
  export interface SkipInfo {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: SkipInfo
    descriptorForType?: Descriptor
    evaluatedCondition?: boolean
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserSkipInfo
    serializedSize?: number
    skipCondition?: string
    skipConditionBytes?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export interface SkipTaskExecutableResponse {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: SkipTaskExecutableResponse
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    message?: string
    messageBytes?: ByteString
    parserForType?: ParserSkipTaskExecutableResponse
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface SkipTaskExecutableResponseOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    message?: string
    messageBytes?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export interface Sort {
    empty?: boolean
    sorted?: boolean
    unsorted?: boolean
  }
  export interface StackTraceElement {
    className?: string
    fileName?: string
    lineNumber?: number
    methodName?: string
    nativeMethod?: boolean
  }
  export interface StageDetail {
    name?: string
  }
  export interface StepCategory {
    name?: string
    stepCategories?: StepCategory[]
    stepsData?: StepData[]
  }
  export interface StepData {
    name?: string
    type?: string
  }
  export interface SuccessHealthInfo {
    percent?: number
    rate?: number
  }
  export interface SyncExecutableResponse {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: SyncExecutableResponse
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    logKeysCount?: number
    logKeysList?: string[]
    parserForType?: ParserSyncExecutableResponse
    serializedSize?: number
    unitsCount?: number
    unitsList?: string[]
    unknownFields?: UnknownFieldSet
  }
  export interface SyncExecutableResponseOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    logKeysCount?: number
    logKeysList?: string[]
    unitsCount?: number
    unitsList?: string[]
    unknownFields?: UnknownFieldSet
  }
  export interface TaskChainExecutableResponse {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    chainEnd?: boolean
    defaultInstanceForType?: TaskChainExecutableResponse
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    logKeysCount?: number
    logKeysList?: string[]
    parserForType?: ParserTaskChainExecutableResponse
    passThroughData?: ByteString
    serializedSize?: number
    taskCategory?: 'UNKNOWN_CATEGORY' | 'DELEGATE_TASK_V1' | 'DELEGATE_TASK_V2' | 'UNRECOGNIZED'
    taskCategoryValue?: number
    taskId?: string
    taskIdBytes?: ByteString
    taskName?: string
    taskNameBytes?: ByteString
    unitsCount?: number
    unitsList?: string[]
    unknownFields?: UnknownFieldSet
  }
  export interface TaskChainExecutableResponseOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    chainEnd?: boolean
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    logKeysCount?: number
    logKeysList?: string[]
    passThroughData?: ByteString
    taskCategory?: 'UNKNOWN_CATEGORY' | 'DELEGATE_TASK_V1' | 'DELEGATE_TASK_V2' | 'UNRECOGNIZED'
    taskCategoryValue?: number
    taskId?: string
    taskIdBytes?: ByteString
    taskName?: string
    taskNameBytes?: ByteString
    unitsCount?: number
    unitsList?: string[]
    unknownFields?: UnknownFieldSet
  }
  export interface TaskExecutableResponse {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: TaskExecutableResponse
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    logKeysCount?: number
    logKeysList?: string[]
    parserForType?: ParserTaskExecutableResponse
    serializedSize?: number
    taskCategory?: 'UNKNOWN_CATEGORY' | 'DELEGATE_TASK_V1' | 'DELEGATE_TASK_V2' | 'UNRECOGNIZED'
    taskCategoryValue?: number
    taskId?: string
    taskIdBytes?: ByteString
    taskName?: string
    taskNameBytes?: ByteString
    unitsCount?: number
    unitsList?: string[]
    unknownFields?: UnknownFieldSet
  }
  export interface TaskExecutableResponseOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    logKeysCount?: number
    logKeysList?: string[]
    taskCategory?: 'UNKNOWN_CATEGORY' | 'DELEGATE_TASK_V1' | 'DELEGATE_TASK_V2' | 'UNRECOGNIZED'
    taskCategoryValue?: number
    taskId?: string
    taskIdBytes?: ByteString
    taskName?: string
    taskNameBytes?: ByteString
    unitsCount?: number
    unitsList?: string[]
    unknownFields?: UnknownFieldSet
  }
  export interface Throwable {
    cause?: Throwable
    localizedMessage?: string
    message?: string
    stackTrace?: StackTraceElement[]
    suppressed?: Throwable[]
  }
  export interface TimeoutIssuer {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: TimeoutIssuer
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserTimeoutIssuer
    serializedSize?: number
    timeoutInstanceId?: string
    timeoutInstanceIdBytes?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export interface TimeoutIssuerOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    timeoutInstanceId?: string
    timeoutInstanceIdBytes?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export interface Timestamp {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Timestamp
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    nanos?: number
    parserForType?: ParserTimestamp
    seconds?: number
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface TimestampOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    nanos?: number
    seconds?: number
    unknownFields?: UnknownFieldSet
  }
  export interface TotalHealthInfo {
    count?: number
    rate?: number
  }
  export interface TriggerEventDataCondition {
    key?: string
    operator?: 'In' | 'Equals' | 'NotEquals' | 'NotIn' | 'Regex' | 'EndsWith' | 'StartsWith' | 'Contains'
    value?: string
  }
  export interface TriggerIssuer {
    abortPrevConcurrentExecution?: boolean
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: TriggerIssuer
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserTriggerIssuer
    serializedSize?: number
    triggerRef?: string
    triggerRefBytes?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export interface TriggerIssuerOrBuilder {
    abortPrevConcurrentExecution?: boolean
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    initializationErrorString?: string
    initialized?: boolean
    triggerRef?: string
    triggerRefBytes?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export interface TriggerStatus {
    pollingSubscriptionStatus?: PollingSubscriptionStatus
    validationStatus?: ValidationStatus
    webhookAutoRegistrationStatus?: WebhookAutoRegistrationStatus
  }
  export interface TriggeredBy {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: TriggeredBy
    descriptorForType?: Descriptor
    extraInfo?: {
      [key: string]: string
    }
    extraInfoCount?: number
    extraInfoMap?: {
      [key: string]: string
    }
    identifier?: string
    identifierBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserTriggeredBy
    serializedSize?: number
    unknownFields?: UnknownFieldSet
    uuid?: string
    uuidBytes?: ByteString
  }
  export interface TriggeredByOrBuilder {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    extraInfo?: {
      [key: string]: string
    }
    extraInfoCount?: number
    extraInfoMap?: {
      [key: string]: string
    }
    identifier?: string
    identifierBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    unknownFields?: UnknownFieldSet
    uuid?: string
    uuidBytes?: ByteString
  }
  export interface UninterpretedOption {
    aggregateValue?: string
    aggregateValueBytes?: ByteString
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: UninterpretedOption
    descriptorForType?: Descriptor
    doubleValue?: number
    identifierValue?: string
    identifierValueBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    nameCount?: number
    nameList?: NamePart[]
    nameOrBuilderList?: NamePartOrBuilder[]
    negativeIntValue?: number
    parserForType?: ParserUninterpretedOption
    positiveIntValue?: number
    serializedSize?: number
    stringValue?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export interface UninterpretedOptionOrBuilder {
    aggregateValue?: string
    aggregateValueBytes?: ByteString
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: Message
    descriptorForType?: Descriptor
    doubleValue?: number
    identifierValue?: string
    identifierValueBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    nameCount?: number
    nameList?: NamePart[]
    nameOrBuilderList?: NamePartOrBuilder[]
    negativeIntValue?: number
    positiveIntValue?: number
    stringValue?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export interface UnitProgress {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: UnitProgress
    descriptorForType?: Descriptor
    endTime?: number
    initializationErrorString?: string
    initialized?: boolean
    parserForType?: ParserUnitProgress
    serializedSize?: number
    startTime?: number
    status?: 'UNKNOWN' | 'SUCCESS' | 'FAILURE' | 'RUNNING' | 'QUEUED' | 'SKIPPED' | 'EXPIRED' | 'UNRECOGNIZED'
    statusValue?: number
    unitName?: string
    unitNameBytes?: ByteString
    unknownFields?: UnknownFieldSet
  }
  export interface UnknownFieldSet {
    defaultInstanceForType?: UnknownFieldSet
    initialized?: boolean
    parserForType?: Parser
    serializedSize?: number
    serializedSizeAsMessageSet?: number
  }
  export interface ValidationError {
    error?: string
    fieldId?: string
  }
  export interface ValidationStatus {
    detailedMessage?: string
    statusResult?: 'SUCCESS' | 'FAILED' | 'UNKNOWN'
  }
  export interface VariableMergeServiceResponse {
    errorResponses?: string[]
    metadataMap?: {
      [key: string]: VariableResponseMapValue
    }
    yaml?: string
  }
  export interface VariableResponseMapValue {
    yamlOutputProperties?: YamlOutputProperties
    yamlProperties?: YamlProperties
  }
  export interface WebhookAutoRegistrationStatus {
    detailedMessage?: string
    registrationResult?: 'SUCCESS' | 'FAILED' | 'ERROR' | 'TIMEOUT' | 'UNAVAILABLE'
  }
  export interface WebhookDetails {
    webhookSecret?: string
    webhookSourceRepo?: string
  }
  export interface WebhookEventProcessingDetails {
    accountIdentifier?: string
    eventCreatedAt?: number
    eventFound?: boolean
    eventId?: string
    exceptionOccured?: boolean
    message?: string
    orgIdentifier?: string
    payload?: string
    pipelineExecutionId?: string
    pipelineIdentifier?: string
    projectIdentifier?: string
    runtimeInput?: string
    status?: string
    triggerIdentifier?: string
  }
  export type WebhookTriggerConfigV2 = NGTriggerSpecV2 & {
    spec?: WebhookTriggerSpecV2
    type?: 'Github' | 'Gitlab' | 'Bitbucket' | 'Custom' | 'AwsCodeCommit'
  }
  export interface WebhookTriggerSpecV2 {
    [key: string]: any
  }
  export interface YamlOutputProperties {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: YamlOutputProperties
    descriptorForType?: Descriptor
    fqn?: string
    fqnBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    localName?: string
    localNameBytes?: ByteString
    parserForType?: ParserYamlOutputProperties
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface YamlProperties {
    allFields?: {
      [key: string]: {
        [key: string]: any
      }
    }
    defaultInstanceForType?: YamlProperties
    descriptorForType?: Descriptor
    fqn?: string
    fqnBytes?: ByteString
    initializationErrorString?: string
    initialized?: boolean
    localName?: string
    localNameBytes?: ByteString
    parserForType?: ParserYamlProperties
    serializedSize?: number
    unknownFields?: UnknownFieldSet
  }
  export interface ExecutionSummaryInfo {
    deployments?: number[]
    lastExecutionId?: string
    lastExecutionStatus?:
      | 'Running'
      | 'AsyncWaiting'
      | 'TaskWaiting'
      | 'TimedWaiting'
      | 'Failed'
      | 'Errored'
      | 'IgnoreFailed'
      | 'NotStarted'
      | 'Expired'
      | 'Aborted'
      | 'Discontinuing'
      | 'Queued'
      | 'Paused'
      | 'ResourceWaiting'
      | 'InterventionWaiting'
      | 'ApprovalWaiting'
      | 'Success'
      | 'Suspended'
      | 'Skipped'
      | 'Pausing'
      | 'ApprovalRejected'
      | 'NOT_STARTED'
      | 'INTERVENTION_WAITING'
      | 'APPROVAL_WAITING'
      | 'APPROVAL_REJECTED'
      | 'WAITING'
    lastExecutionTs?: number
    numOfErrors?: number[]
  }
  export type KeyValueCriteriaSpec = CriteriaSpecDTO & {
    conditions: ConditionDTO[]
    matchAnyCondition?: boolean
  }
  export interface PipelineExecutionInterrupt {
    id?: string
    planExecutionId?: string
    type?:
      | 'AbortAll'
      | 'Abort'
      | 'Pause'
      | 'Resume'
      | 'Ignore'
      | 'StageRollback'
      | 'StepGroupRollback'
      | 'MarkAsSuccess'
      | 'ExpireAll'
      | 'Retry'
  }
  export type FilterDTORequestBody = FilterDTO
  export type FilterPropertiesRequestBody = FilterProperties
  export type MergeInputSetRequestRequestBody = MergeInputSetRequest
  export type NGTriggerConfigV2RequestBody = NGTriggerConfigV2
  export type WebhookEndpointBodyRequestBody = string
  export interface GetInitialStageYamlSnippetQueryParams {
    approvalType: 'HarnessApproval' | 'JiraApproval'
  }
  export type GetInitialStageYamlSnippetProps = Omit<
    GetProps<ResponseString, Failure | Error, GetInitialStageYamlSnippetQueryParams, void>,
    'path'
  >
  /**
   * Gets the initial yaml snippet for approval stage
   */
  export const GetInitialStageYamlSnippet: (props: GetInitialStageYamlSnippetProps) => JSX.Element
  export type UseGetInitialStageYamlSnippetProps = Omit<
    UseGetProps<ResponseString, Failure | Error, GetInitialStageYamlSnippetQueryParams, void>,
    'path'
  >
  /**
   * Gets the initial yaml snippet for approval stage
   */
  export const useGetInitialStageYamlSnippet: (
    props: UseGetInitialStageYamlSnippetProps
  ) => import('restful-react').UseGetReturn<
    ResponseString,
    Error | Failure,
    GetInitialStageYamlSnippetQueryParams,
    unknown
  >
  /**
   * Gets the initial yaml snippet for approval stage
   */
  export const getInitialStageYamlSnippetPromise: (
    props: GetUsingFetchProps<ResponseString, Failure | Error, GetInitialStageYamlSnippetQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface GetApprovalInstancePathParams {
    approvalInstanceId: string
  }
  export type GetApprovalInstanceProps = Omit<
    GetProps<ResponseApprovalInstanceResponse, Failure | Error, void, GetApprovalInstancePathParams>,
    'path'
  > &
    GetApprovalInstancePathParams
  /**
   * Gets an approval instance by id
   */
  export const GetApprovalInstance: ({ approvalInstanceId, ...props }: GetApprovalInstanceProps) => JSX.Element
  export type UseGetApprovalInstanceProps = Omit<
    UseGetProps<ResponseApprovalInstanceResponse, Failure | Error, void, GetApprovalInstancePathParams>,
    'path'
  > &
    GetApprovalInstancePathParams
  /**
   * Gets an approval instance by id
   */
  export const useGetApprovalInstance: ({
    approvalInstanceId,
    ...props
  }: UseGetApprovalInstanceProps) => import('restful-react').UseGetReturn<
    ResponseApprovalInstanceResponse,
    Error | Failure,
    void,
    unknown
  >
  /**
   * Gets an approval instance by id
   */
  export const getApprovalInstancePromise: (
    {
      approvalInstanceId,
      ...props
    }: GetUsingFetchProps<ResponseApprovalInstanceResponse, Error | Failure, void, GetApprovalInstancePathParams> & {
      approvalInstanceId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseApprovalInstanceResponse>
  export interface AddHarnessApprovalActivityPathParams {
    approvalInstanceId: string
  }
  export type AddHarnessApprovalActivityProps = Omit<
    MutateProps<
      ResponseApprovalInstanceResponse,
      Failure | Error,
      void,
      HarnessApprovalActivityRequest,
      AddHarnessApprovalActivityPathParams
    >,
    'path' | 'verb'
  > &
    AddHarnessApprovalActivityPathParams
  /**
   * Add a new Harness approval activity
   */
  export const AddHarnessApprovalActivity: ({
    approvalInstanceId,
    ...props
  }: AddHarnessApprovalActivityProps) => JSX.Element
  export type UseAddHarnessApprovalActivityProps = Omit<
    UseMutateProps<
      ResponseApprovalInstanceResponse,
      Failure | Error,
      void,
      HarnessApprovalActivityRequest,
      AddHarnessApprovalActivityPathParams
    >,
    'path' | 'verb'
  > &
    AddHarnessApprovalActivityPathParams
  /**
   * Add a new Harness approval activity
   */
  export const useAddHarnessApprovalActivity: ({
    approvalInstanceId,
    ...props
  }: UseAddHarnessApprovalActivityProps) => import('restful-react').UseMutateReturn<
    ResponseApprovalInstanceResponse,
    Error | Failure,
    HarnessApprovalActivityRequest,
    void,
    AddHarnessApprovalActivityPathParams
  >
  /**
   * Add a new Harness approval activity
   */
  export const addHarnessApprovalActivityPromise: (
    {
      approvalInstanceId,
      ...props
    }: MutateUsingFetchProps<
      ResponseApprovalInstanceResponse,
      Error | Failure,
      void,
      HarnessApprovalActivityRequest,
      AddHarnessApprovalActivityPathParams
    > & {
      approvalInstanceId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseApprovalInstanceResponse>
  export interface GetHarnessApprovalInstanceAuthorizationPathParams {
    approvalInstanceId: string
  }
  export type GetHarnessApprovalInstanceAuthorizationProps = Omit<
    GetProps<
      ResponseHarnessApprovalInstanceAuthorization,
      Failure | Error,
      void,
      GetHarnessApprovalInstanceAuthorizationPathParams
    >,
    'path'
  > &
    GetHarnessApprovalInstanceAuthorizationPathParams
  /**
   * Gets a Harness approval instance authorization for the current user
   */
  export const GetHarnessApprovalInstanceAuthorization: ({
    approvalInstanceId,
    ...props
  }: GetHarnessApprovalInstanceAuthorizationProps) => JSX.Element
  export type UseGetHarnessApprovalInstanceAuthorizationProps = Omit<
    UseGetProps<
      ResponseHarnessApprovalInstanceAuthorization,
      Failure | Error,
      void,
      GetHarnessApprovalInstanceAuthorizationPathParams
    >,
    'path'
  > &
    GetHarnessApprovalInstanceAuthorizationPathParams
  /**
   * Gets a Harness approval instance authorization for the current user
   */
  export const useGetHarnessApprovalInstanceAuthorization: ({
    approvalInstanceId,
    ...props
  }: UseGetHarnessApprovalInstanceAuthorizationProps) => import('restful-react').UseGetReturn<
    ResponseHarnessApprovalInstanceAuthorization,
    Error | Failure,
    void,
    unknown
  >
  /**
   * Gets a Harness approval instance authorization for the current user
   */
  export const getHarnessApprovalInstanceAuthorizationPromise: (
    {
      approvalInstanceId,
      ...props
    }: GetUsingFetchProps<
      ResponseHarnessApprovalInstanceAuthorization,
      Error | Failure,
      void,
      GetHarnessApprovalInstanceAuthorizationPathParams
    > & {
      approvalInstanceId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseHarnessApprovalInstanceAuthorization>
  export interface GetBarriersExecutionInfoQueryParams {
    stageSetupId: string
    planExecutionId: string
  }
  export type GetBarriersExecutionInfoProps = Omit<
    GetProps<ResponseListBarrierExecutionInfo, Failure | Error, GetBarriersExecutionInfoQueryParams, void>,
    'path'
  >
  /**
   * Gets barriers execution info list
   */
  export const GetBarriersExecutionInfo: (props: GetBarriersExecutionInfoProps) => JSX.Element
  export type UseGetBarriersExecutionInfoProps = Omit<
    UseGetProps<ResponseListBarrierExecutionInfo, Failure | Error, GetBarriersExecutionInfoQueryParams, void>,
    'path'
  >
  /**
   * Gets barriers execution info list
   */
  export const useGetBarriersExecutionInfo: (
    props: UseGetBarriersExecutionInfoProps
  ) => import('restful-react').UseGetReturn<
    ResponseListBarrierExecutionInfo,
    Error | Failure,
    GetBarriersExecutionInfoQueryParams,
    unknown
  >
  /**
   * Gets barriers execution info list
   */
  export const getBarriersExecutionInfoPromise: (
    props: GetUsingFetchProps<
      ResponseListBarrierExecutionInfo,
      Failure | Error,
      GetBarriersExecutionInfoQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListBarrierExecutionInfo>
  export interface GetBarrierInfoQueryParams {
    barrierSetupId: string
    planExecutionId: string
  }
  export type GetBarrierInfoProps = Omit<
    GetProps<ResponseBarrierInfo, Failure | Error, GetBarrierInfoQueryParams, void>,
    'path'
  >
  /**
   * Gets barriers info
   */
  export const GetBarrierInfo: (props: GetBarrierInfoProps) => JSX.Element
  export type UseGetBarrierInfoProps = Omit<
    UseGetProps<ResponseBarrierInfo, Failure | Error, GetBarrierInfoQueryParams, void>,
    'path'
  >
  /**
   * Gets barriers info
   */
  export const useGetBarrierInfo: (
    props: UseGetBarrierInfoProps
  ) => import('restful-react').UseGetReturn<ResponseBarrierInfo, Error | Failure, GetBarrierInfoQueryParams, unknown>
  /**
   * Gets barriers info
   */
  export const getBarrierInfoPromise: (
    props: GetUsingFetchProps<ResponseBarrierInfo, Failure | Error, GetBarrierInfoQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBarrierInfo>
  export type GetBarriersSetupInfoListProps = Omit<
    MutateProps<ResponseListBarrierSetupInfo, Failure | Error, void, void, void>,
    'path' | 'verb'
  >
  /**
   * Gets barriers setup info list
   */
  export const GetBarriersSetupInfoList: (props: GetBarriersSetupInfoListProps) => JSX.Element
  export type UseGetBarriersSetupInfoListProps = Omit<
    UseMutateProps<ResponseListBarrierSetupInfo, Failure | Error, void, void, void>,
    'path' | 'verb'
  >
  /**
   * Gets barriers setup info list
   */
  export const useGetBarriersSetupInfoList: (
    props: UseGetBarriersSetupInfoListProps
  ) => import('restful-react').UseMutateReturn<ResponseListBarrierSetupInfo, Error | Failure, void, void, void>
  /**
   * Gets barriers setup info list
   */
  export const getBarriersSetupInfoListPromise: (
    props: MutateUsingFetchProps<ResponseListBarrierSetupInfo, Failure | Error, void, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListBarrierSetupInfo>
  export interface GetFilterListQueryParams {
    pageIndex?: number
    pageSize?: number
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
    type: 'Connector' | 'DelegateProfile' | 'Delegate' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
  }
  export type GetFilterListProps = Omit<
    GetProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
    'path'
  >
  /**
   * Get Filter
   */
  export const GetFilterList: (props: GetFilterListProps) => JSX.Element
  export type UseGetFilterListProps = Omit<
    UseGetProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
    'path'
  >
  /**
   * Get Filter
   */
  export const useGetFilterList: (
    props: UseGetFilterListProps
  ) => import('restful-react').UseGetReturn<ResponsePageFilterDTO, Error | Failure, GetFilterListQueryParams, unknown>
  /**
   * Get Filter
   */
  export const getFilterListPromise: (
    props: GetUsingFetchProps<ResponsePageFilterDTO, Failure | Error, GetFilterListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageFilterDTO>
  export interface PostFilterQueryParams {
    accountIdentifier: string
  }
  export type PostFilterProps = Omit<
    MutateProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a Filter
   */
  export const PostFilter: (props: PostFilterProps) => JSX.Element
  export type UsePostFilterProps = Omit<
    UseMutateProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Create a Filter
   */
  export const usePostFilter: (
    props: UsePostFilterProps
  ) => import('restful-react').UseMutateReturn<
    ResponseFilterDTO,
    Error | Failure,
    FilterDTO,
    PostFilterQueryParams,
    void
  >
  /**
   * Create a Filter
   */
  export const postFilterPromise: (
    props: MutateUsingFetchProps<ResponseFilterDTO, Failure | Error, PostFilterQueryParams, FilterDTORequestBody, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseFilterDTO>
  export interface UpdateFilterQueryParams {
    accountIdentifier?: string
  }
  export type UpdateFilterProps = Omit<
    MutateProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Update a Filter
   */
  export const UpdateFilter: (props: UpdateFilterProps) => JSX.Element
  export type UseUpdateFilterProps = Omit<
    UseMutateProps<ResponseFilterDTO, Failure | Error, UpdateFilterQueryParams, FilterDTORequestBody, void>,
    'path' | 'verb'
  >
  /**
   * Update a Filter
   */
  export const useUpdateFilter: (
    props: UseUpdateFilterProps
  ) => import('restful-react').UseMutateReturn<
    ResponseFilterDTO,
    Error | Failure,
    FilterDTO,
    UpdateFilterQueryParams,
    void
  >
  /**
   * Update a Filter
   */
  export const updateFilterPromise: (
    props: MutateUsingFetchProps<
      ResponseFilterDTO,
      Failure | Error,
      UpdateFilterQueryParams,
      FilterDTORequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseFilterDTO>
  export interface DeleteFilterQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    type: 'Connector' | 'DelegateProfile' | 'Delegate' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
  }
  export type DeleteFilterProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a filter
   */
  export const DeleteFilter: (props: DeleteFilterProps) => JSX.Element
  export type UseDeleteFilterProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a filter
   */
  export const useDeleteFilter: (
    props: UseDeleteFilterProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, Error | Failure, string, DeleteFilterQueryParams, void>
  /**
   * Delete a filter
   */
  export const deleteFilterPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteFilterQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetFilterQueryParams {
    accountIdentifier?: string
    orgIdentifier?: string
    projectIdentifier?: string
    type: 'Connector' | 'DelegateProfile' | 'Delegate' | 'PipelineSetup' | 'PipelineExecution' | 'Deployment' | 'Audit'
  }
  export interface GetFilterPathParams {
    identifier: string
  }
  export type GetFilterProps = Omit<
    GetProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>,
    'path'
  > &
    GetFilterPathParams
  /**
   * Get Filter
   */
  export const GetFilter: ({ identifier, ...props }: GetFilterProps) => JSX.Element
  export type UseGetFilterProps = Omit<
    UseGetProps<ResponseFilterDTO, Failure | Error, GetFilterQueryParams, GetFilterPathParams>,
    'path'
  > &
    GetFilterPathParams
  /**
   * Get Filter
   */
  export const useGetFilter: ({
    identifier,
    ...props
  }: UseGetFilterProps) => import('restful-react').UseGetReturn<
    ResponseFilterDTO,
    Error | Failure,
    GetFilterQueryParams,
    unknown
  >
  /**
   * Get Filter
   */
  export const getFilterPromise: (
    {
      identifier,
      ...props
    }: GetUsingFetchProps<ResponseFilterDTO, Error | Failure, GetFilterQueryParams, GetFilterPathParams> & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseFilterDTO>
  export type GetPMSHealthStatusProps = Omit<GetProps<RestResponseString, unknown, void, void>, 'path'>
  /**
   * get health for PMS service
   */
  export const GetPMSHealthStatus: (props: GetPMSHealthStatusProps) => JSX.Element
  export type UseGetPMSHealthStatusProps = Omit<UseGetProps<RestResponseString, unknown, void, void>, 'path'>
  /**
   * get health for PMS service
   */
  export const useGetPMSHealthStatus: (
    props: UseGetPMSHealthStatusProps
  ) => import('restful-react').UseGetReturn<RestResponseString, unknown, void, unknown>
  /**
   * get health for PMS service
   */
  export const getPMSHealthStatusPromise: (
    props: GetUsingFetchProps<RestResponseString, unknown, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseString>
  export interface GetInputSetsListForPipelineQueryParams {
    pageIndex?: number
    pageSize?: number
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    inputSetType?: 'ALL' | 'INPUT_SET' | 'OVERLAY_INPUT_SET'
    searchTerm?: string
    sortOrders?: string[]
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetInputSetsListForPipelineProps = Omit<
    GetProps<ResponsePageInputSetSummaryResponse, Failure | Error, GetInputSetsListForPipelineQueryParams, void>,
    'path'
  >
  /**
   * Gets InputSets list for a pipeline
   */
  export const GetInputSetsListForPipeline: (props: GetInputSetsListForPipelineProps) => JSX.Element
  export type UseGetInputSetsListForPipelineProps = Omit<
    UseGetProps<ResponsePageInputSetSummaryResponse, Failure | Error, GetInputSetsListForPipelineQueryParams, void>,
    'path'
  >
  /**
   * Gets InputSets list for a pipeline
   */
  export const useGetInputSetsListForPipeline: (
    props: UseGetInputSetsListForPipelineProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageInputSetSummaryResponse,
    Error | Failure,
    GetInputSetsListForPipelineQueryParams,
    unknown
  >
  /**
   * Gets InputSets list for a pipeline
   */
  export const getInputSetsListForPipelinePromise: (
    props: GetUsingFetchProps<
      ResponsePageInputSetSummaryResponse,
      Failure | Error,
      GetInputSetsListForPipelineQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageInputSetSummaryResponse>
  export interface CreateInputSetForPipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    pipelineBranch?: string
    pipelineRepoID?: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    baseBranch?: string
  }
  export type CreateInputSetForPipelineProps = Omit<
    MutateProps<ResponseInputSetResponse, Failure | Error, CreateInputSetForPipelineQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Create an InputSet For Pipeline
   */
  export const CreateInputSetForPipeline: (props: CreateInputSetForPipelineProps) => JSX.Element
  export type UseCreateInputSetForPipelineProps = Omit<
    UseMutateProps<ResponseInputSetResponse, Failure | Error, CreateInputSetForPipelineQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Create an InputSet For Pipeline
   */
  export const useCreateInputSetForPipeline: (
    props: UseCreateInputSetForPipelineProps
  ) => import('restful-react').UseMutateReturn<
    ResponseInputSetResponse,
    Error | Failure,
    void,
    CreateInputSetForPipelineQueryParams,
    void
  >
  /**
   * Create an InputSet For Pipeline
   */
  export const createInputSetForPipelinePromise: (
    props: MutateUsingFetchProps<
      ResponseInputSetResponse,
      Failure | Error,
      CreateInputSetForPipelineQueryParams,
      void,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseInputSetResponse>
  export interface GetMergeInputSetFromPipelineTemplateWithListInputQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    pipelineBranch?: string
    pipelineRepoID?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetMergeInputSetFromPipelineTemplateWithListInputProps = Omit<
    MutateProps<
      ResponseMergeInputSetResponse,
      Failure | Error,
      GetMergeInputSetFromPipelineTemplateWithListInputQueryParams,
      MergeInputSetRequestRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Merges given input sets list on pipeline and return input set template format of applied pipeline
   */
  export const GetMergeInputSetFromPipelineTemplateWithListInput: (
    props: GetMergeInputSetFromPipelineTemplateWithListInputProps
  ) => JSX.Element
  export type UseGetMergeInputSetFromPipelineTemplateWithListInputProps = Omit<
    UseMutateProps<
      ResponseMergeInputSetResponse,
      Failure | Error,
      GetMergeInputSetFromPipelineTemplateWithListInputQueryParams,
      MergeInputSetRequestRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Merges given input sets list on pipeline and return input set template format of applied pipeline
   */
  export const useGetMergeInputSetFromPipelineTemplateWithListInput: (
    props: UseGetMergeInputSetFromPipelineTemplateWithListInputProps
  ) => import('restful-react').UseMutateReturn<
    ResponseMergeInputSetResponse,
    Error | Failure,
    MergeInputSetRequest,
    GetMergeInputSetFromPipelineTemplateWithListInputQueryParams,
    void
  >
  /**
   * Merges given input sets list on pipeline and return input set template format of applied pipeline
   */
  export const getMergeInputSetFromPipelineTemplateWithListInputPromise: (
    props: MutateUsingFetchProps<
      ResponseMergeInputSetResponse,
      Failure | Error,
      GetMergeInputSetFromPipelineTemplateWithListInputQueryParams,
      MergeInputSetRequestRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseMergeInputSetResponse>
  export interface GetMergeInputSetFromPipelineTemplateQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    pipelineBranch?: string
    pipelineRepoID?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetMergeInputSetFromPipelineTemplateProps = Omit<
    MutateProps<
      ResponseMergeInputSetResponse,
      Failure | Error,
      GetMergeInputSetFromPipelineTemplateQueryParams,
      MergeInputSetTemplateRequest,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Merges given runtime input yaml on pipeline and return input set template format of applied pipeline
   */
  export const GetMergeInputSetFromPipelineTemplate: (props: GetMergeInputSetFromPipelineTemplateProps) => JSX.Element
  export type UseGetMergeInputSetFromPipelineTemplateProps = Omit<
    UseMutateProps<
      ResponseMergeInputSetResponse,
      Failure | Error,
      GetMergeInputSetFromPipelineTemplateQueryParams,
      MergeInputSetTemplateRequest,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Merges given runtime input yaml on pipeline and return input set template format of applied pipeline
   */
  export const useGetMergeInputSetFromPipelineTemplate: (
    props: UseGetMergeInputSetFromPipelineTemplateProps
  ) => import('restful-react').UseMutateReturn<
    ResponseMergeInputSetResponse,
    Error | Failure,
    MergeInputSetTemplateRequest,
    GetMergeInputSetFromPipelineTemplateQueryParams,
    void
  >
  /**
   * Merges given runtime input yaml on pipeline and return input set template format of applied pipeline
   */
  export const getMergeInputSetFromPipelineTemplatePromise: (
    props: MutateUsingFetchProps<
      ResponseMergeInputSetResponse,
      Failure | Error,
      GetMergeInputSetFromPipelineTemplateQueryParams,
      MergeInputSetTemplateRequest,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseMergeInputSetResponse>
  export interface CreateOverlayInputSetForPipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    baseBranch?: string
  }
  export type CreateOverlayInputSetForPipelineProps = Omit<
    MutateProps<
      ResponseOverlayInputSetResponse,
      Failure | Error,
      CreateOverlayInputSetForPipelineQueryParams,
      void,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create an Overlay InputSet For Pipeline
   */
  export const CreateOverlayInputSetForPipeline: (props: CreateOverlayInputSetForPipelineProps) => JSX.Element
  export type UseCreateOverlayInputSetForPipelineProps = Omit<
    UseMutateProps<
      ResponseOverlayInputSetResponse,
      Failure | Error,
      CreateOverlayInputSetForPipelineQueryParams,
      void,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create an Overlay InputSet For Pipeline
   */
  export const useCreateOverlayInputSetForPipeline: (
    props: UseCreateOverlayInputSetForPipelineProps
  ) => import('restful-react').UseMutateReturn<
    ResponseOverlayInputSetResponse,
    Error | Failure,
    void,
    CreateOverlayInputSetForPipelineQueryParams,
    void
  >
  /**
   * Create an Overlay InputSet For Pipeline
   */
  export const createOverlayInputSetForPipelinePromise: (
    props: MutateUsingFetchProps<
      ResponseOverlayInputSetResponse,
      Failure | Error,
      CreateOverlayInputSetForPipelineQueryParams,
      void,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseOverlayInputSetResponse>
  export interface GetOverlayInputSetForPipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    deleted?: boolean
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export interface GetOverlayInputSetForPipelinePathParams {
    inputSetIdentifier: string
  }
  export type GetOverlayInputSetForPipelineProps = Omit<
    GetProps<
      ResponseOverlayInputSetResponse,
      Failure | Error,
      GetOverlayInputSetForPipelineQueryParams,
      GetOverlayInputSetForPipelinePathParams
    >,
    'path'
  > &
    GetOverlayInputSetForPipelinePathParams
  /**
   * Gets an Overlay InputSet by identifier
   */
  export const GetOverlayInputSetForPipeline: ({
    inputSetIdentifier,
    ...props
  }: GetOverlayInputSetForPipelineProps) => JSX.Element
  export type UseGetOverlayInputSetForPipelineProps = Omit<
    UseGetProps<
      ResponseOverlayInputSetResponse,
      Failure | Error,
      GetOverlayInputSetForPipelineQueryParams,
      GetOverlayInputSetForPipelinePathParams
    >,
    'path'
  > &
    GetOverlayInputSetForPipelinePathParams
  /**
   * Gets an Overlay InputSet by identifier
   */
  export const useGetOverlayInputSetForPipeline: ({
    inputSetIdentifier,
    ...props
  }: UseGetOverlayInputSetForPipelineProps) => import('restful-react').UseGetReturn<
    ResponseOverlayInputSetResponse,
    Error | Failure,
    GetOverlayInputSetForPipelineQueryParams,
    unknown
  >
  /**
   * Gets an Overlay InputSet by identifier
   */
  export const getOverlayInputSetForPipelinePromise: (
    {
      inputSetIdentifier,
      ...props
    }: GetUsingFetchProps<
      ResponseOverlayInputSetResponse,
      Error | Failure,
      GetOverlayInputSetForPipelineQueryParams,
      GetOverlayInputSetForPipelinePathParams
    > & {
      inputSetIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseOverlayInputSetResponse>
  export interface UpdateOverlayInputSetForPipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    lastObjectId?: string
    baseBranch?: string
  }
  export interface UpdateOverlayInputSetForPipelinePathParams {
    inputSetIdentifier: string
  }
  export type UpdateOverlayInputSetForPipelineProps = Omit<
    MutateProps<
      ResponseOverlayInputSetResponse,
      Failure | Error,
      UpdateOverlayInputSetForPipelineQueryParams,
      void,
      UpdateOverlayInputSetForPipelinePathParams
    >,
    'path' | 'verb'
  > &
    UpdateOverlayInputSetForPipelinePathParams
  /**
   * Update an Overlay InputSet by identifier
   */
  export const UpdateOverlayInputSetForPipeline: ({
    inputSetIdentifier,
    ...props
  }: UpdateOverlayInputSetForPipelineProps) => JSX.Element
  export type UseUpdateOverlayInputSetForPipelineProps = Omit<
    UseMutateProps<
      ResponseOverlayInputSetResponse,
      Failure | Error,
      UpdateOverlayInputSetForPipelineQueryParams,
      void,
      UpdateOverlayInputSetForPipelinePathParams
    >,
    'path' | 'verb'
  > &
    UpdateOverlayInputSetForPipelinePathParams
  /**
   * Update an Overlay InputSet by identifier
   */
  export const useUpdateOverlayInputSetForPipeline: ({
    inputSetIdentifier,
    ...props
  }: UseUpdateOverlayInputSetForPipelineProps) => import('restful-react').UseMutateReturn<
    ResponseOverlayInputSetResponse,
    Error | Failure,
    void,
    UpdateOverlayInputSetForPipelineQueryParams,
    UpdateOverlayInputSetForPipelinePathParams
  >
  /**
   * Update an Overlay InputSet by identifier
   */
  export const updateOverlayInputSetForPipelinePromise: (
    {
      inputSetIdentifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseOverlayInputSetResponse,
      Error | Failure,
      UpdateOverlayInputSetForPipelineQueryParams,
      void,
      UpdateOverlayInputSetForPipelinePathParams
    > & {
      inputSetIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseOverlayInputSetResponse>
  export interface GetTemplateFromPipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetTemplateFromPipelineProps = Omit<
    GetProps<ResponseInputSetTemplateResponse, Failure | Error, GetTemplateFromPipelineQueryParams, void>,
    'path'
  >
  /**
   * Get template from a pipeline yaml
   */
  export const GetTemplateFromPipeline: (props: GetTemplateFromPipelineProps) => JSX.Element
  export type UseGetTemplateFromPipelineProps = Omit<
    UseGetProps<ResponseInputSetTemplateResponse, Failure | Error, GetTemplateFromPipelineQueryParams, void>,
    'path'
  >
  /**
   * Get template from a pipeline yaml
   */
  export const useGetTemplateFromPipeline: (
    props: UseGetTemplateFromPipelineProps
  ) => import('restful-react').UseGetReturn<
    ResponseInputSetTemplateResponse,
    Error | Failure,
    GetTemplateFromPipelineQueryParams,
    unknown
  >
  /**
   * Get template from a pipeline yaml
   */
  export const getTemplateFromPipelinePromise: (
    props: GetUsingFetchProps<
      ResponseInputSetTemplateResponse,
      Failure | Error,
      GetTemplateFromPipelineQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseInputSetTemplateResponse>
  export interface DeleteInputSetForPipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    lastObjectId?: string
  }
  export type DeleteInputSetForPipelineProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteInputSetForPipelineQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete an inputSet by identifier
   */
  export const DeleteInputSetForPipeline: (props: DeleteInputSetForPipelineProps) => JSX.Element
  export type UseDeleteInputSetForPipelineProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteInputSetForPipelineQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete an inputSet by identifier
   */
  export const useDeleteInputSetForPipeline: (
    props: UseDeleteInputSetForPipelineProps
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    string,
    DeleteInputSetForPipelineQueryParams,
    void
  >
  /**
   * Delete an inputSet by identifier
   */
  export const deleteInputSetForPipelinePromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteInputSetForPipelineQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetInputSetForPipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    deleted?: boolean
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export interface GetInputSetForPipelinePathParams {
    inputSetIdentifier: string
  }
  export type GetInputSetForPipelineProps = Omit<
    GetProps<
      ResponseInputSetResponse,
      Failure | Error,
      GetInputSetForPipelineQueryParams,
      GetInputSetForPipelinePathParams
    >,
    'path'
  > &
    GetInputSetForPipelinePathParams
  /**
   * Gets an InputSet by identifier
   */
  export const GetInputSetForPipeline: ({ inputSetIdentifier, ...props }: GetInputSetForPipelineProps) => JSX.Element
  export type UseGetInputSetForPipelineProps = Omit<
    UseGetProps<
      ResponseInputSetResponse,
      Failure | Error,
      GetInputSetForPipelineQueryParams,
      GetInputSetForPipelinePathParams
    >,
    'path'
  > &
    GetInputSetForPipelinePathParams
  /**
   * Gets an InputSet by identifier
   */
  export const useGetInputSetForPipeline: ({
    inputSetIdentifier,
    ...props
  }: UseGetInputSetForPipelineProps) => import('restful-react').UseGetReturn<
    ResponseInputSetResponse,
    Error | Failure,
    GetInputSetForPipelineQueryParams,
    unknown
  >
  /**
   * Gets an InputSet by identifier
   */
  export const getInputSetForPipelinePromise: (
    {
      inputSetIdentifier,
      ...props
    }: GetUsingFetchProps<
      ResponseInputSetResponse,
      Error | Failure,
      GetInputSetForPipelineQueryParams,
      GetInputSetForPipelinePathParams
    > & {
      inputSetIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseInputSetResponse>
  export interface UpdateInputSetForPipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    pipelineBranch?: string
    pipelineRepoID?: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    lastObjectId?: string
    baseBranch?: string
  }
  export interface UpdateInputSetForPipelinePathParams {
    inputSetIdentifier: string
  }
  export type UpdateInputSetForPipelineProps = Omit<
    MutateProps<
      ResponseInputSetResponse,
      Failure | Error,
      UpdateInputSetForPipelineQueryParams,
      void,
      UpdateInputSetForPipelinePathParams
    >,
    'path' | 'verb'
  > &
    UpdateInputSetForPipelinePathParams
  /**
   * Update an InputSet by identifier
   */
  export const UpdateInputSetForPipeline: ({
    inputSetIdentifier,
    ...props
  }: UpdateInputSetForPipelineProps) => JSX.Element
  export type UseUpdateInputSetForPipelineProps = Omit<
    UseMutateProps<
      ResponseInputSetResponse,
      Failure | Error,
      UpdateInputSetForPipelineQueryParams,
      void,
      UpdateInputSetForPipelinePathParams
    >,
    'path' | 'verb'
  > &
    UpdateInputSetForPipelinePathParams
  /**
   * Update an InputSet by identifier
   */
  export const useUpdateInputSetForPipeline: ({
    inputSetIdentifier,
    ...props
  }: UseUpdateInputSetForPipelineProps) => import('restful-react').UseMutateReturn<
    ResponseInputSetResponse,
    Error | Failure,
    void,
    UpdateInputSetForPipelineQueryParams,
    UpdateInputSetForPipelinePathParams
  >
  /**
   * Update an InputSet by identifier
   */
  export const updateInputSetForPipelinePromise: (
    {
      inputSetIdentifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseInputSetResponse,
      Error | Failure,
      UpdateInputSetForPipelineQueryParams,
      void,
      UpdateInputSetForPipelinePathParams
    > & {
      inputSetIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseInputSetResponse>
  export interface GetPreflightCheckResponseQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    preflightCheckId: string
  }
  export type GetPreflightCheckResponseProps = Omit<
    GetProps<ResponsePreFlightDTO, unknown, GetPreflightCheckResponseQueryParams, void>,
    'path'
  >
  /**
   * get preflight check response
   */
  export const GetPreflightCheckResponse: (props: GetPreflightCheckResponseProps) => JSX.Element
  export type UseGetPreflightCheckResponseProps = Omit<
    UseGetProps<ResponsePreFlightDTO, unknown, GetPreflightCheckResponseQueryParams, void>,
    'path'
  >
  /**
   * get preflight check response
   */
  export const useGetPreflightCheckResponse: (
    props: UseGetPreflightCheckResponseProps
  ) => import('restful-react').UseGetReturn<
    ResponsePreFlightDTO,
    unknown,
    GetPreflightCheckResponseQueryParams,
    unknown
  >
  /**
   * get preflight check response
   */
  export const getPreflightCheckResponsePromise: (
    props: GetUsingFetchProps<ResponsePreFlightDTO, unknown, GetPreflightCheckResponseQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePreFlightDTO>
  export type RunSchemaOnDbProps = Omit<GetProps<ResponseString, unknown, void, void>, 'path'>
  /**
   * Run a schema on db.
   */
  export const RunSchemaOnDb: (props: RunSchemaOnDbProps) => JSX.Element
  export type UseRunSchemaOnDbProps = Omit<UseGetProps<ResponseString, unknown, void, void>, 'path'>
  /**
   * Run a schema on db.
   */
  export const useRunSchemaOnDb: (
    props: UseRunSchemaOnDbProps
  ) => import('restful-react').UseGetReturn<ResponseString, unknown, void, unknown>
  /**
   * Run a schema on db.
   */
  export const runSchemaOnDbPromise: (
    props: GetUsingFetchProps<ResponseString, unknown, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface HandleInterruptQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    interruptType:
      | 'AbortAll'
      | 'Abort'
      | 'Pause'
      | 'Resume'
      | 'Ignore'
      | 'StageRollback'
      | 'StepGroupRollback'
      | 'MarkAsSuccess'
      | 'ExpireAll'
      | 'Retry'
  }
  export interface HandleInterruptPathParams {
    planExecutionId: string
  }
  export type HandleInterruptProps = Omit<
    MutateProps<
      ResponsePipelineExecutionInterrupt,
      unknown,
      HandleInterruptQueryParams,
      void,
      HandleInterruptPathParams
    >,
    'path' | 'verb'
  > &
    HandleInterruptPathParams
  /**
   * pause, resume or stop the pipeline executions
   */
  export const HandleInterrupt: ({ planExecutionId, ...props }: HandleInterruptProps) => JSX.Element
  export type UseHandleInterruptProps = Omit<
    UseMutateProps<
      ResponsePipelineExecutionInterrupt,
      unknown,
      HandleInterruptQueryParams,
      void,
      HandleInterruptPathParams
    >,
    'path' | 'verb'
  > &
    HandleInterruptPathParams
  /**
   * pause, resume or stop the pipeline executions
   */
  export const useHandleInterrupt: ({
    planExecutionId,
    ...props
  }: UseHandleInterruptProps) => import('restful-react').UseMutateReturn<
    ResponsePipelineExecutionInterrupt,
    unknown,
    void,
    HandleInterruptQueryParams,
    HandleInterruptPathParams
  >
  /**
   * pause, resume or stop the pipeline executions
   */
  export const handleInterruptPromise: (
    {
      planExecutionId,
      ...props
    }: MutateUsingFetchProps<
      ResponsePipelineExecutionInterrupt,
      unknown,
      HandleInterruptQueryParams,
      void,
      HandleInterruptPathParams
    > & {
      planExecutionId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePipelineExecutionInterrupt>
  export interface HandleStageInterruptQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    interruptType:
      | 'AbortAll'
      | 'Abort'
      | 'Pause'
      | 'Resume'
      | 'Ignore'
      | 'StageRollback'
      | 'StepGroupRollback'
      | 'MarkAsSuccess'
      | 'ExpireAll'
      | 'Retry'
  }
  export interface HandleStageInterruptPathParams {
    planExecutionId: string
    nodeExecutionId: string
  }
  export type HandleStageInterruptProps = Omit<
    MutateProps<
      ResponsePipelineExecutionInterrupt,
      unknown,
      HandleStageInterruptQueryParams,
      void,
      HandleStageInterruptPathParams
    >,
    'path' | 'verb'
  > &
    HandleStageInterruptPathParams
  /**
   * pause, resume or stop the stage executions
   */
  export const HandleStageInterrupt: ({
    planExecutionId,
    nodeExecutionId,
    ...props
  }: HandleStageInterruptProps) => JSX.Element
  export type UseHandleStageInterruptProps = Omit<
    UseMutateProps<
      ResponsePipelineExecutionInterrupt,
      unknown,
      HandleStageInterruptQueryParams,
      void,
      HandleStageInterruptPathParams
    >,
    'path' | 'verb'
  > &
    HandleStageInterruptPathParams
  /**
   * pause, resume or stop the stage executions
   */
  export const useHandleStageInterrupt: ({
    planExecutionId,
    nodeExecutionId,
    ...props
  }: UseHandleStageInterruptProps) => import('restful-react').UseMutateReturn<
    ResponsePipelineExecutionInterrupt,
    unknown,
    void,
    HandleStageInterruptQueryParams,
    HandleStageInterruptPathParams
  >
  /**
   * pause, resume or stop the stage executions
   */
  export const handleStageInterruptPromise: (
    {
      planExecutionId,
      nodeExecutionId,
      ...props
    }: MutateUsingFetchProps<
      ResponsePipelineExecutionInterrupt,
      unknown,
      HandleStageInterruptQueryParams,
      void,
      HandleStageInterruptPathParams
    > & {
      planExecutionId: string
      nodeExecutionId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePipelineExecutionInterrupt>
  export interface HandleManualInterventionInterruptQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    interruptType:
      | 'AbortAll'
      | 'Abort'
      | 'Pause'
      | 'Resume'
      | 'Ignore'
      | 'StageRollback'
      | 'StepGroupRollback'
      | 'MarkAsSuccess'
      | 'ExpireAll'
      | 'Retry'
  }
  export interface HandleManualInterventionInterruptPathParams {
    planExecutionId: string
    nodeExecutionId: string
  }
  export type HandleManualInterventionInterruptProps = Omit<
    MutateProps<
      ResponsePipelineExecutionInterrupt,
      unknown,
      HandleManualInterventionInterruptQueryParams,
      void,
      HandleManualInterventionInterruptPathParams
    >,
    'path' | 'verb'
  > &
    HandleManualInterventionInterruptPathParams
  /**
   * Ignore,Abort,MarkAsSuccess,Retry on post manual intervention
   */
  export const HandleManualInterventionInterrupt: ({
    planExecutionId,
    nodeExecutionId,
    ...props
  }: HandleManualInterventionInterruptProps) => JSX.Element
  export type UseHandleManualInterventionInterruptProps = Omit<
    UseMutateProps<
      ResponsePipelineExecutionInterrupt,
      unknown,
      HandleManualInterventionInterruptQueryParams,
      void,
      HandleManualInterventionInterruptPathParams
    >,
    'path' | 'verb'
  > &
    HandleManualInterventionInterruptPathParams
  /**
   * Ignore,Abort,MarkAsSuccess,Retry on post manual intervention
   */
  export const useHandleManualInterventionInterrupt: ({
    planExecutionId,
    nodeExecutionId,
    ...props
  }: UseHandleManualInterventionInterruptProps) => import('restful-react').UseMutateReturn<
    ResponsePipelineExecutionInterrupt,
    unknown,
    void,
    HandleManualInterventionInterruptQueryParams,
    HandleManualInterventionInterruptPathParams
  >
  /**
   * Ignore,Abort,MarkAsSuccess,Retry on post manual intervention
   */
  export const handleManualInterventionInterruptPromise: (
    {
      planExecutionId,
      nodeExecutionId,
      ...props
    }: MutateUsingFetchProps<
      ResponsePipelineExecutionInterrupt,
      unknown,
      HandleManualInterventionInterruptQueryParams,
      void,
      HandleManualInterventionInterruptPathParams
    > & {
      planExecutionId: string
      nodeExecutionId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePipelineExecutionInterrupt>
  export interface StartPreflightCheckQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type StartPreflightCheckProps = Omit<
    MutateProps<ResponseString, unknown, StartPreflightCheckQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * initiate pre flight check
   */
  export const StartPreflightCheck: (props: StartPreflightCheckProps) => JSX.Element
  export type UseStartPreflightCheckProps = Omit<
    UseMutateProps<ResponseString, unknown, StartPreflightCheckQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * initiate pre flight check
   */
  export const useStartPreflightCheck: (
    props: UseStartPreflightCheckProps
  ) => import('restful-react').UseMutateReturn<ResponseString, unknown, void, StartPreflightCheckQueryParams, void>
  /**
   * initiate pre flight check
   */
  export const startPreflightCheckPromise: (
    props: MutateUsingFetchProps<ResponseString, unknown, StartPreflightCheckQueryParams, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface RePostPipelineExecuteWithInputSetYamlV2QueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    moduleType: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
    useFQNIfError?: boolean
  }
  export interface RePostPipelineExecuteWithInputSetYamlV2PathParams {
    originalExecutionId: string
    identifier: string
  }
  export type RePostPipelineExecuteWithInputSetYamlV2Props = Omit<
    MutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      RePostPipelineExecuteWithInputSetYamlV2QueryParams,
      void,
      RePostPipelineExecuteWithInputSetYamlV2PathParams
    >,
    'path' | 'verb'
  > &
    RePostPipelineExecuteWithInputSetYamlV2PathParams
  /**
   * Re Execute a pipeline with inputSet pipeline yaml Version 2
   */
  export const RePostPipelineExecuteWithInputSetYamlV2: ({
    originalExecutionId,
    identifier,
    ...props
  }: RePostPipelineExecuteWithInputSetYamlV2Props) => JSX.Element
  export type UseRePostPipelineExecuteWithInputSetYamlV2Props = Omit<
    UseMutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      RePostPipelineExecuteWithInputSetYamlV2QueryParams,
      void,
      RePostPipelineExecuteWithInputSetYamlV2PathParams
    >,
    'path' | 'verb'
  > &
    RePostPipelineExecuteWithInputSetYamlV2PathParams
  /**
   * Re Execute a pipeline with inputSet pipeline yaml Version 2
   */
  export const useRePostPipelineExecuteWithInputSetYamlV2: ({
    originalExecutionId,
    identifier,
    ...props
  }: UseRePostPipelineExecuteWithInputSetYamlV2Props) => import('restful-react').UseMutateReturn<
    ResponsePlanExecutionResponseDto,
    unknown,
    void,
    RePostPipelineExecuteWithInputSetYamlV2QueryParams,
    RePostPipelineExecuteWithInputSetYamlV2PathParams
  >
  /**
   * Re Execute a pipeline with inputSet pipeline yaml Version 2
   */
  export const rePostPipelineExecuteWithInputSetYamlV2Promise: (
    {
      originalExecutionId,
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      RePostPipelineExecuteWithInputSetYamlV2QueryParams,
      void,
      RePostPipelineExecuteWithInputSetYamlV2PathParams
    > & {
      originalExecutionId: string
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePlanExecutionResponseDto>
  export interface RePostPipelineExecuteWithInputSetYamlQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    moduleType: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
    useFQNIfError?: boolean
  }
  export interface RePostPipelineExecuteWithInputSetYamlPathParams {
    originalExecutionId: string
    identifier: string
  }
  export type RePostPipelineExecuteWithInputSetYamlProps = Omit<
    MutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      RePostPipelineExecuteWithInputSetYamlQueryParams,
      void,
      RePostPipelineExecuteWithInputSetYamlPathParams
    >,
    'path' | 'verb'
  > &
    RePostPipelineExecuteWithInputSetYamlPathParams
  /**
   * Re Execute a pipeline with inputSet pipeline yaml
   */
  export const RePostPipelineExecuteWithInputSetYaml: ({
    originalExecutionId,
    identifier,
    ...props
  }: RePostPipelineExecuteWithInputSetYamlProps) => JSX.Element
  export type UseRePostPipelineExecuteWithInputSetYamlProps = Omit<
    UseMutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      RePostPipelineExecuteWithInputSetYamlQueryParams,
      void,
      RePostPipelineExecuteWithInputSetYamlPathParams
    >,
    'path' | 'verb'
  > &
    RePostPipelineExecuteWithInputSetYamlPathParams
  /**
   * Re Execute a pipeline with inputSet pipeline yaml
   */
  export const useRePostPipelineExecuteWithInputSetYaml: ({
    originalExecutionId,
    identifier,
    ...props
  }: UseRePostPipelineExecuteWithInputSetYamlProps) => import('restful-react').UseMutateReturn<
    ResponsePlanExecutionResponseDto,
    unknown,
    void,
    RePostPipelineExecuteWithInputSetYamlQueryParams,
    RePostPipelineExecuteWithInputSetYamlPathParams
  >
  /**
   * Re Execute a pipeline with inputSet pipeline yaml
   */
  export const rePostPipelineExecuteWithInputSetYamlPromise: (
    {
      originalExecutionId,
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      RePostPipelineExecuteWithInputSetYamlQueryParams,
      void,
      RePostPipelineExecuteWithInputSetYamlPathParams
    > & {
      originalExecutionId: string
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePlanExecutionResponseDto>
  export interface RePostPipelineExecuteWithInputSetListQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    moduleType: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
    useFQNIfError?: boolean
  }
  export interface RePostPipelineExecuteWithInputSetListPathParams {
    originalExecutionId: string
    identifier: string
  }
  export type RePostPipelineExecuteWithInputSetListProps = Omit<
    MutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      RePostPipelineExecuteWithInputSetListQueryParams,
      MergeInputSetRequestRequestBody,
      RePostPipelineExecuteWithInputSetListPathParams
    >,
    'path' | 'verb'
  > &
    RePostPipelineExecuteWithInputSetListPathParams
  /**
   * Execute a pipeline with input set references list
   */
  export const RePostPipelineExecuteWithInputSetList: ({
    originalExecutionId,
    identifier,
    ...props
  }: RePostPipelineExecuteWithInputSetListProps) => JSX.Element
  export type UseRePostPipelineExecuteWithInputSetListProps = Omit<
    UseMutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      RePostPipelineExecuteWithInputSetListQueryParams,
      MergeInputSetRequestRequestBody,
      RePostPipelineExecuteWithInputSetListPathParams
    >,
    'path' | 'verb'
  > &
    RePostPipelineExecuteWithInputSetListPathParams
  /**
   * Execute a pipeline with input set references list
   */
  export const useRePostPipelineExecuteWithInputSetList: ({
    originalExecutionId,
    identifier,
    ...props
  }: UseRePostPipelineExecuteWithInputSetListProps) => import('restful-react').UseMutateReturn<
    ResponsePlanExecutionResponseDto,
    unknown,
    MergeInputSetRequest,
    RePostPipelineExecuteWithInputSetListQueryParams,
    RePostPipelineExecuteWithInputSetListPathParams
  >
  /**
   * Execute a pipeline with input set references list
   */
  export const rePostPipelineExecuteWithInputSetListPromise: (
    {
      originalExecutionId,
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      RePostPipelineExecuteWithInputSetListQueryParams,
      MergeInputSetRequest,
      RePostPipelineExecuteWithInputSetListPathParams
    > & {
      originalExecutionId: string
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePlanExecutionResponseDto>
  export interface PostPipelineExecuteWithInputSetYamlQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    moduleType: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
    useFQNIfError?: boolean
  }
  export interface PostPipelineExecuteWithInputSetYamlPathParams {
    identifier: string
  }
  export type PostPipelineExecuteWithInputSetYamlProps = Omit<
    MutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      PostPipelineExecuteWithInputSetYamlQueryParams,
      void,
      PostPipelineExecuteWithInputSetYamlPathParams
    >,
    'path' | 'verb'
  > &
    PostPipelineExecuteWithInputSetYamlPathParams
  /**
   * Execute a pipeline with inputSet pipeline yaml
   */
  export const PostPipelineExecuteWithInputSetYaml: ({
    identifier,
    ...props
  }: PostPipelineExecuteWithInputSetYamlProps) => JSX.Element
  export type UsePostPipelineExecuteWithInputSetYamlProps = Omit<
    UseMutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      PostPipelineExecuteWithInputSetYamlQueryParams,
      void,
      PostPipelineExecuteWithInputSetYamlPathParams
    >,
    'path' | 'verb'
  > &
    PostPipelineExecuteWithInputSetYamlPathParams
  /**
   * Execute a pipeline with inputSet pipeline yaml
   */
  export const usePostPipelineExecuteWithInputSetYaml: ({
    identifier,
    ...props
  }: UsePostPipelineExecuteWithInputSetYamlProps) => import('restful-react').UseMutateReturn<
    ResponsePlanExecutionResponseDto,
    unknown,
    void,
    PostPipelineExecuteWithInputSetYamlQueryParams,
    PostPipelineExecuteWithInputSetYamlPathParams
  >
  /**
   * Execute a pipeline with inputSet pipeline yaml
   */
  export const postPipelineExecuteWithInputSetYamlPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      PostPipelineExecuteWithInputSetYamlQueryParams,
      void,
      PostPipelineExecuteWithInputSetYamlPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePlanExecutionResponseDto>
  export interface PostPipelineExecuteWithInputSetListQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    moduleType: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
    useFQNIfError?: boolean
  }
  export interface PostPipelineExecuteWithInputSetListPathParams {
    identifier: string
  }
  export type PostPipelineExecuteWithInputSetListProps = Omit<
    MutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      PostPipelineExecuteWithInputSetListQueryParams,
      MergeInputSetRequestRequestBody,
      PostPipelineExecuteWithInputSetListPathParams
    >,
    'path' | 'verb'
  > &
    PostPipelineExecuteWithInputSetListPathParams
  /**
   * Execute a pipeline with input set references list
   */
  export const PostPipelineExecuteWithInputSetList: ({
    identifier,
    ...props
  }: PostPipelineExecuteWithInputSetListProps) => JSX.Element
  export type UsePostPipelineExecuteWithInputSetListProps = Omit<
    UseMutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      PostPipelineExecuteWithInputSetListQueryParams,
      MergeInputSetRequestRequestBody,
      PostPipelineExecuteWithInputSetListPathParams
    >,
    'path' | 'verb'
  > &
    PostPipelineExecuteWithInputSetListPathParams
  /**
   * Execute a pipeline with input set references list
   */
  export const usePostPipelineExecuteWithInputSetList: ({
    identifier,
    ...props
  }: UsePostPipelineExecuteWithInputSetListProps) => import('restful-react').UseMutateReturn<
    ResponsePlanExecutionResponseDto,
    unknown,
    MergeInputSetRequest,
    PostPipelineExecuteWithInputSetListQueryParams,
    PostPipelineExecuteWithInputSetListPathParams
  >
  /**
   * Execute a pipeline with input set references list
   */
  export const postPipelineExecuteWithInputSetListPromise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      PostPipelineExecuteWithInputSetListQueryParams,
      MergeInputSetRequest,
      PostPipelineExecuteWithInputSetListPathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePlanExecutionResponseDto>
  export interface PostPipelineExecuteWithInputSetYamlv2QueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    moduleType: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
    useFQNIfError?: boolean
  }
  export interface PostPipelineExecuteWithInputSetYamlv2PathParams {
    identifier: string
  }
  export type PostPipelineExecuteWithInputSetYamlv2Props = Omit<
    MutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      PostPipelineExecuteWithInputSetYamlv2QueryParams,
      void,
      PostPipelineExecuteWithInputSetYamlv2PathParams
    >,
    'path' | 'verb'
  > &
    PostPipelineExecuteWithInputSetYamlv2PathParams
  /**
   * Execute a pipeline with inputSet pipeline yaml V2
   */
  export const PostPipelineExecuteWithInputSetYamlv2: ({
    identifier,
    ...props
  }: PostPipelineExecuteWithInputSetYamlv2Props) => JSX.Element
  export type UsePostPipelineExecuteWithInputSetYamlv2Props = Omit<
    UseMutateProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      PostPipelineExecuteWithInputSetYamlv2QueryParams,
      void,
      PostPipelineExecuteWithInputSetYamlv2PathParams
    >,
    'path' | 'verb'
  > &
    PostPipelineExecuteWithInputSetYamlv2PathParams
  /**
   * Execute a pipeline with inputSet pipeline yaml V2
   */
  export const usePostPipelineExecuteWithInputSetYamlv2: ({
    identifier,
    ...props
  }: UsePostPipelineExecuteWithInputSetYamlv2Props) => import('restful-react').UseMutateReturn<
    ResponsePlanExecutionResponseDto,
    unknown,
    void,
    PostPipelineExecuteWithInputSetYamlv2QueryParams,
    PostPipelineExecuteWithInputSetYamlv2PathParams
  >
  /**
   * Execute a pipeline with inputSet pipeline yaml V2
   */
  export const postPipelineExecuteWithInputSetYamlv2Promise: (
    {
      identifier,
      ...props
    }: MutateUsingFetchProps<
      ResponsePlanExecutionResponseDto,
      unknown,
      PostPipelineExecuteWithInputSetYamlv2QueryParams,
      void,
      PostPipelineExecuteWithInputSetYamlv2PathParams
    > & {
      identifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePlanExecutionResponseDto>
  export interface CreatePipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    baseBranch?: string
  }
  export type CreatePipelineProps = Omit<
    MutateProps<ResponseString, Failure | Error, CreatePipelineQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Create a Pipeline
   */
  export const CreatePipeline: (props: CreatePipelineProps) => JSX.Element
  export type UseCreatePipelineProps = Omit<
    UseMutateProps<ResponseString, Failure | Error, CreatePipelineQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Create a Pipeline
   */
  export const useCreatePipeline: (
    props: UseCreatePipelineProps
  ) => import('restful-react').UseMutateReturn<ResponseString, Error | Failure, void, CreatePipelineQueryParams, void>
  /**
   * Create a Pipeline
   */
  export const createPipelinePromise: (
    props: MutateUsingFetchProps<ResponseString, Failure | Error, CreatePipelineQueryParams, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface GetListOfExecutionsQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    searchTerm?: string
    pipelineIdentifier?: string
    page?: number
    size?: number
    sort?: string[]
    filterIdentifier?: string
    module?: string
    status?:
      | 'Running'
      | 'AsyncWaiting'
      | 'TaskWaiting'
      | 'TimedWaiting'
      | 'Failed'
      | 'Errored'
      | 'IgnoreFailed'
      | 'NotStarted'
      | 'Expired'
      | 'Aborted'
      | 'Discontinuing'
      | 'Queued'
      | 'Paused'
      | 'ResourceWaiting'
      | 'InterventionWaiting'
      | 'ApprovalWaiting'
      | 'Success'
      | 'Suspended'
      | 'Skipped'
      | 'Pausing'
      | 'ApprovalRejected'
      | 'NOT_STARTED'
      | 'INTERVENTION_WAITING'
      | 'APPROVAL_WAITING'
      | 'APPROVAL_REJECTED'
      | 'WAITING'
    myDeployments?: boolean
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export type GetListOfExecutionsProps = Omit<
    MutateProps<
      ResponsePagePipelineExecutionSummary,
      Failure | Error,
      GetListOfExecutionsQueryParams,
      FilterPropertiesRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets Executions list
   */
  export const GetListOfExecutions: (props: GetListOfExecutionsProps) => JSX.Element
  export type UseGetListOfExecutionsProps = Omit<
    UseMutateProps<
      ResponsePagePipelineExecutionSummary,
      Failure | Error,
      GetListOfExecutionsQueryParams,
      FilterPropertiesRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets Executions list
   */
  export const useGetListOfExecutions: (
    props: UseGetListOfExecutionsProps
  ) => import('restful-react').UseMutateReturn<
    ResponsePagePipelineExecutionSummary,
    Error | Failure,
    FilterProperties,
    GetListOfExecutionsQueryParams,
    void
  >
  /**
   * Gets Executions list
   */
  export const getListOfExecutionsPromise: (
    props: MutateUsingFetchProps<
      ResponsePagePipelineExecutionSummary,
      Failure | Error,
      GetListOfExecutionsQueryParams,
      FilterPropertiesRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePagePipelineExecutionSummary>
  export interface GetExecutionDetailQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    filter?: string
    stageNodeId?: string
  }
  export interface GetExecutionDetailPathParams {
    planExecutionId: string
  }
  export type GetExecutionDetailProps = Omit<
    GetProps<
      ResponsePipelineExecutionDetail,
      Failure | Error,
      GetExecutionDetailQueryParams,
      GetExecutionDetailPathParams
    >,
    'path'
  > &
    GetExecutionDetailPathParams
  /**
   * Gets Execution Detail
   */
  export const GetExecutionDetail: ({ planExecutionId, ...props }: GetExecutionDetailProps) => JSX.Element
  export type UseGetExecutionDetailProps = Omit<
    UseGetProps<
      ResponsePipelineExecutionDetail,
      Failure | Error,
      GetExecutionDetailQueryParams,
      GetExecutionDetailPathParams
    >,
    'path'
  > &
    GetExecutionDetailPathParams
  /**
   * Gets Execution Detail
   */
  export const useGetExecutionDetail: ({
    planExecutionId,
    ...props
  }: UseGetExecutionDetailProps) => import('restful-react').UseGetReturn<
    ResponsePipelineExecutionDetail,
    Error | Failure,
    GetExecutionDetailQueryParams,
    unknown
  >
  /**
   * Gets Execution Detail
   */
  export const getExecutionDetailPromise: (
    {
      planExecutionId,
      ...props
    }: GetUsingFetchProps<
      ResponsePipelineExecutionDetail,
      Error | Failure,
      GetExecutionDetailQueryParams,
      GetExecutionDetailPathParams
    > & {
      planExecutionId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePipelineExecutionDetail>
  export interface GetInputsetYamlQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    resolveExpressions?: boolean
  }
  export interface GetInputsetYamlPathParams {
    planExecutionId: string
  }
  export type GetInputsetYamlProps = Omit<
    GetProps<void, void, GetInputsetYamlQueryParams, GetInputsetYamlPathParams>,
    'path'
  > &
    GetInputsetYamlPathParams
  /**
   * Gets  inputsetYaml
   */
  export const GetInputsetYaml: ({ planExecutionId, ...props }: GetInputsetYamlProps) => JSX.Element
  export type UseGetInputsetYamlProps = Omit<
    UseGetProps<void, void, GetInputsetYamlQueryParams, GetInputsetYamlPathParams>,
    'path'
  > &
    GetInputsetYamlPathParams
  /**
   * Gets  inputsetYaml
   */
  export const useGetInputsetYaml: ({
    planExecutionId,
    ...props
  }: UseGetInputsetYamlProps) => import('restful-react').UseGetReturn<void, void, GetInputsetYamlQueryParams, unknown>
  /**
   * Gets  inputsetYaml
   */
  export const getInputsetYamlPromise: (
    {
      planExecutionId,
      ...props
    }: GetUsingFetchProps<void, void, GetInputsetYamlQueryParams, GetInputsetYamlPathParams> & {
      planExecutionId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<void>
  export interface GetInputsetYamlV2QueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    resolveExpressions?: boolean
  }
  export interface GetInputsetYamlV2PathParams {
    planExecutionId: string
  }
  export type GetInputsetYamlV2Props = Omit<
    GetProps<
      ResponseInputSetTemplateResponse,
      Failure | Error,
      GetInputsetYamlV2QueryParams,
      GetInputsetYamlV2PathParams
    >,
    'path'
  > &
    GetInputsetYamlV2PathParams
  /**
   * Gets  inputsetYaml
   */
  export const GetInputsetYamlV2: ({ planExecutionId, ...props }: GetInputsetYamlV2Props) => JSX.Element
  export type UseGetInputsetYamlV2Props = Omit<
    UseGetProps<
      ResponseInputSetTemplateResponse,
      Failure | Error,
      GetInputsetYamlV2QueryParams,
      GetInputsetYamlV2PathParams
    >,
    'path'
  > &
    GetInputsetYamlV2PathParams
  /**
   * Gets  inputsetYaml
   */
  export const useGetInputsetYamlV2: ({
    planExecutionId,
    ...props
  }: UseGetInputsetYamlV2Props) => import('restful-react').UseGetReturn<
    ResponseInputSetTemplateResponse,
    Error | Failure,
    GetInputsetYamlV2QueryParams,
    unknown
  >
  /**
   * Gets  inputsetYaml
   */
  export const getInputsetYamlV2Promise: (
    {
      planExecutionId,
      ...props
    }: GetUsingFetchProps<
      ResponseInputSetTemplateResponse,
      Error | Failure,
      GetInputsetYamlV2QueryParams,
      GetInputsetYamlV2PathParams
    > & {
      planExecutionId: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseInputSetTemplateResponse>
  export interface GetExecutionNodeQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    nodeExecutionId: string
  }
  export type GetExecutionNodeProps = Omit<
    GetProps<ResponseExecutionNode, Failure | Error, GetExecutionNodeQueryParams, void>,
    'path'
  >
  /**
   * get execution node
   */
  export const GetExecutionNode: (props: GetExecutionNodeProps) => JSX.Element
  export type UseGetExecutionNodeProps = Omit<
    UseGetProps<ResponseExecutionNode, Failure | Error, GetExecutionNodeQueryParams, void>,
    'path'
  >
  /**
   * get execution node
   */
  export const useGetExecutionNode: (
    props: UseGetExecutionNodeProps
  ) => import('restful-react').UseGetReturn<
    ResponseExecutionNode,
    Error | Failure,
    GetExecutionNodeQueryParams,
    unknown
  >
  /**
   * get execution node
   */
  export const getExecutionNodePromise: (
    props: GetUsingFetchProps<ResponseExecutionNode, Failure | Error, GetExecutionNodeQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseExecutionNode>
  export interface GetPipelineListQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    page?: number
    size?: number
    sort?: string[]
    searchTerm?: string
    module?: string
    filterIdentifier?: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
    getDistinctFromBranches?: boolean
  }
  export type GetPipelineListProps = Omit<
    MutateProps<
      ResponsePagePMSPipelineSummaryResponse,
      Failure | Error,
      GetPipelineListQueryParams,
      FilterPropertiesRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets Pipeline list
   */
  export const GetPipelineList: (props: GetPipelineListProps) => JSX.Element
  export type UseGetPipelineListProps = Omit<
    UseMutateProps<
      ResponsePagePMSPipelineSummaryResponse,
      Failure | Error,
      GetPipelineListQueryParams,
      FilterPropertiesRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Gets Pipeline list
   */
  export const useGetPipelineList: (
    props: UseGetPipelineListProps
  ) => import('restful-react').UseMutateReturn<
    ResponsePagePMSPipelineSummaryResponse,
    Error | Failure,
    FilterProperties,
    GetPipelineListQueryParams,
    void
  >
  /**
   * Gets Pipeline list
   */
  export const getPipelineListPromise: (
    props: MutateUsingFetchProps<
      ResponsePagePMSPipelineSummaryResponse,
      Failure | Error,
      GetPipelineListQueryParams,
      FilterPropertiesRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePagePMSPipelineSummaryResponse>
  export type GetNotificationSchemaProps = Omit<
    GetProps<ResponseNotificationRules, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Notification Schema
   */
  export const GetNotificationSchema: (props: GetNotificationSchemaProps) => JSX.Element
  export type UseGetNotificationSchemaProps = Omit<
    UseGetProps<ResponseNotificationRules, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Notification Schema
   */
  export const useGetNotificationSchema: (
    props: UseGetNotificationSchemaProps
  ) => import('restful-react').UseGetReturn<ResponseNotificationRules, Error | Failure, void, unknown>
  /**
   * Get Notification Schema
   */
  export const getNotificationSchemaPromise: (
    props: GetUsingFetchProps<ResponseNotificationRules, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseNotificationRules>
  export interface GetPipelineExecutionQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    moduleInfo: string
    startTime: number
    endTime: number
  }
  export type GetPipelineExecutionProps = Omit<
    GetProps<ResponseDashboardPipelineExecutionInfo, Failure | Error, GetPipelineExecutionQueryParams, void>,
    'path'
  >
  /**
   * Get pipeline execution
   */
  export const GetPipelineExecution: (props: GetPipelineExecutionProps) => JSX.Element
  export type UseGetPipelineExecutionProps = Omit<
    UseGetProps<ResponseDashboardPipelineExecutionInfo, Failure | Error, GetPipelineExecutionQueryParams, void>,
    'path'
  >
  /**
   * Get pipeline execution
   */
  export const useGetPipelineExecution: (
    props: UseGetPipelineExecutionProps
  ) => import('restful-react').UseGetReturn<
    ResponseDashboardPipelineExecutionInfo,
    Error | Failure,
    GetPipelineExecutionQueryParams,
    unknown
  >
  /**
   * Get pipeline execution
   */
  export const getPipelineExecutionPromise: (
    props: GetUsingFetchProps<
      ResponseDashboardPipelineExecutionInfo,
      Failure | Error,
      GetPipelineExecutionQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseDashboardPipelineExecutionInfo>
  export interface GetPipelinedHealthQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier: string
    moduleInfo: string
    startTime: number
    endTime: number
  }
  export type GetPipelinedHealthProps = Omit<
    GetProps<ResponseDashboardPipelineHealthInfo, Failure | Error, GetPipelinedHealthQueryParams, void>,
    'path'
  >
  /**
   * Get pipeline health
   */
  export const GetPipelinedHealth: (props: GetPipelinedHealthProps) => JSX.Element
  export type UseGetPipelinedHealthProps = Omit<
    UseGetProps<ResponseDashboardPipelineHealthInfo, Failure | Error, GetPipelinedHealthQueryParams, void>,
    'path'
  >
  /**
   * Get pipeline health
   */
  export const useGetPipelinedHealth: (
    props: UseGetPipelinedHealthProps
  ) => import('restful-react').UseGetReturn<
    ResponseDashboardPipelineHealthInfo,
    Error | Failure,
    GetPipelinedHealthQueryParams,
    unknown
  >
  /**
   * Get pipeline health
   */
  export const getPipelinedHealthPromise: (
    props: GetUsingFetchProps<
      ResponseDashboardPipelineHealthInfo,
      Failure | Error,
      GetPipelinedHealthQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseDashboardPipelineHealthInfo>
  export interface GetStepsQueryParams {
    category: string
    module: string
    accountId?: string
  }
  export type GetStepsProps = Omit<GetProps<ResponseStepCategory, Failure | Error, GetStepsQueryParams, void>, 'path'>
  /**
   * Get Steps for given module
   */
  export const GetSteps: (props: GetStepsProps) => JSX.Element
  export type UseGetStepsProps = Omit<
    UseGetProps<ResponseStepCategory, Failure | Error, GetStepsQueryParams, void>,
    'path'
  >
  /**
   * Get Steps for given module
   */
  export const useGetSteps: (
    props: UseGetStepsProps
  ) => import('restful-react').UseGetReturn<ResponseStepCategory, Error | Failure, GetStepsQueryParams, unknown>
  /**
   * Get Steps for given module
   */
  export const getStepsPromise: (
    props: GetUsingFetchProps<ResponseStepCategory, Failure | Error, GetStepsQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseStepCategory>
  export interface GetPipelineSummaryQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export interface GetPipelineSummaryPathParams {
    pipelineIdentifier: string
  }
  export type GetPipelineSummaryProps = Omit<
    GetProps<
      ResponsePMSPipelineSummaryResponse,
      Failure | Error,
      GetPipelineSummaryQueryParams,
      GetPipelineSummaryPathParams
    >,
    'path'
  > &
    GetPipelineSummaryPathParams
  /**
   * Gets Pipeline Summary of a pipeline
   */
  export const GetPipelineSummary: ({ pipelineIdentifier, ...props }: GetPipelineSummaryProps) => JSX.Element
  export type UseGetPipelineSummaryProps = Omit<
    UseGetProps<
      ResponsePMSPipelineSummaryResponse,
      Failure | Error,
      GetPipelineSummaryQueryParams,
      GetPipelineSummaryPathParams
    >,
    'path'
  > &
    GetPipelineSummaryPathParams
  /**
   * Gets Pipeline Summary of a pipeline
   */
  export const useGetPipelineSummary: ({
    pipelineIdentifier,
    ...props
  }: UseGetPipelineSummaryProps) => import('restful-react').UseGetReturn<
    ResponsePMSPipelineSummaryResponse,
    Error | Failure,
    GetPipelineSummaryQueryParams,
    unknown
  >
  /**
   * Gets Pipeline Summary of a pipeline
   */
  export const getPipelineSummaryPromise: (
    {
      pipelineIdentifier,
      ...props
    }: GetUsingFetchProps<
      ResponsePMSPipelineSummaryResponse,
      Error | Failure,
      GetPipelineSummaryQueryParams,
      GetPipelineSummaryPathParams
    > & {
      pipelineIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePMSPipelineSummaryResponse>
  export interface CreateVariablesQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
  }
  export type CreateVariablesProps = Omit<
    MutateProps<ResponseVariableMergeServiceResponse, Failure | Error, CreateVariablesQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Create variables for Pipeline
   */
  export const CreateVariables: (props: CreateVariablesProps) => JSX.Element
  export type UseCreateVariablesProps = Omit<
    UseMutateProps<ResponseVariableMergeServiceResponse, Failure | Error, CreateVariablesQueryParams, void, void>,
    'path' | 'verb'
  >
  /**
   * Create variables for Pipeline
   */
  export const useCreateVariables: (
    props: UseCreateVariablesProps
  ) => import('restful-react').UseMutateReturn<
    ResponseVariableMergeServiceResponse,
    Error | Failure,
    void,
    CreateVariablesQueryParams,
    void
  >
  /**
   * Create variables for Pipeline
   */
  export const createVariablesPromise: (
    props: MutateUsingFetchProps<
      ResponseVariableMergeServiceResponse,
      Failure | Error,
      CreateVariablesQueryParams,
      void,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseVariableMergeServiceResponse>
  export interface SoftDeletePipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    lastObjectId?: string
  }
  export type SoftDeletePipelineProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, SoftDeletePipelineQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a pipeline
   */
  export const SoftDeletePipeline: (props: SoftDeletePipelineProps) => JSX.Element
  export type UseSoftDeletePipelineProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, SoftDeletePipelineQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a pipeline
   */
  export const useSoftDeletePipeline: (
    props: UseSoftDeletePipelineProps
  ) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    string,
    SoftDeletePipelineQueryParams,
    void
  >
  /**
   * Delete a pipeline
   */
  export const softDeletePipelinePromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, SoftDeletePipelineQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetPipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    branch?: string
    repoIdentifier?: string
    getDefaultFromOtherRepo?: boolean
  }
  export interface GetPipelinePathParams {
    pipelineIdentifier: string
  }
  export type GetPipelineProps = Omit<
    GetProps<ResponsePMSPipelineResponseDTO, Failure | Error, GetPipelineQueryParams, GetPipelinePathParams>,
    'path'
  > &
    GetPipelinePathParams
  /**
   * Gets a pipeline by identifier
   */
  export const GetPipeline: ({ pipelineIdentifier, ...props }: GetPipelineProps) => JSX.Element
  export type UseGetPipelineProps = Omit<
    UseGetProps<ResponsePMSPipelineResponseDTO, Failure | Error, GetPipelineQueryParams, GetPipelinePathParams>,
    'path'
  > &
    GetPipelinePathParams
  /**
   * Gets a pipeline by identifier
   */
  export const useGetPipeline: ({
    pipelineIdentifier,
    ...props
  }: UseGetPipelineProps) => import('restful-react').UseGetReturn<
    ResponsePMSPipelineResponseDTO,
    Error | Failure,
    GetPipelineQueryParams,
    unknown
  >
  /**
   * Gets a pipeline by identifier
   */
  export const getPipelinePromise: (
    {
      pipelineIdentifier,
      ...props
    }: GetUsingFetchProps<
      ResponsePMSPipelineResponseDTO,
      Error | Failure,
      GetPipelineQueryParams,
      GetPipelinePathParams
    > & {
      pipelineIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponsePMSPipelineResponseDTO>
  export interface PutPipelineQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    branch?: string
    repoIdentifier?: string
    rootFolder?: string
    filePath?: string
    commitMsg?: string
    lastObjectId?: string
    baseBranch?: string
  }
  export interface PutPipelinePathParams {
    pipelineIdentifier: string
  }
  export type PutPipelineProps = Omit<
    MutateProps<ResponseString, Failure | Error, PutPipelineQueryParams, void, PutPipelinePathParams>,
    'path' | 'verb'
  > &
    PutPipelinePathParams
  /**
   * Update a Pipeline
   */
  export const PutPipeline: ({ pipelineIdentifier, ...props }: PutPipelineProps) => JSX.Element
  export type UsePutPipelineProps = Omit<
    UseMutateProps<ResponseString, Failure | Error, PutPipelineQueryParams, void, PutPipelinePathParams>,
    'path' | 'verb'
  > &
    PutPipelinePathParams
  /**
   * Update a Pipeline
   */
  export const usePutPipeline: ({
    pipelineIdentifier,
    ...props
  }: UsePutPipelineProps) => import('restful-react').UseMutateReturn<
    ResponseString,
    Error | Failure,
    void,
    PutPipelineQueryParams,
    PutPipelinePathParams
  >
  /**
   * Update a Pipeline
   */
  export const putPipelinePromise: (
    {
      pipelineIdentifier,
      ...props
    }: MutateUsingFetchProps<ResponseString, Error | Failure, PutPipelineQueryParams, void, PutPipelinePathParams> & {
      pipelineIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface GetResourceConstraintsExecutionInfoQueryParams {
    accountId: string
    resourceUnit: string
  }
  export type GetResourceConstraintsExecutionInfoProps = Omit<
    GetProps<
      ResponseResourceConstraintExecutionInfo,
      Failure | Error,
      GetResourceConstraintsExecutionInfoQueryParams,
      void
    >,
    'path'
  >
  /**
   * Gets resource constraints execution info
   */
  export const GetResourceConstraintsExecutionInfo: (props: GetResourceConstraintsExecutionInfoProps) => JSX.Element
  export type UseGetResourceConstraintsExecutionInfoProps = Omit<
    UseGetProps<
      ResponseResourceConstraintExecutionInfo,
      Failure | Error,
      GetResourceConstraintsExecutionInfoQueryParams,
      void
    >,
    'path'
  >
  /**
   * Gets resource constraints execution info
   */
  export const useGetResourceConstraintsExecutionInfo: (
    props: UseGetResourceConstraintsExecutionInfoProps
  ) => import('restful-react').UseGetReturn<
    ResponseResourceConstraintExecutionInfo,
    Error | Failure,
    GetResourceConstraintsExecutionInfoQueryParams,
    unknown
  >
  /**
   * Gets resource constraints execution info
   */
  export const getResourceConstraintsExecutionInfoPromise: (
    props: GetUsingFetchProps<
      ResponseResourceConstraintExecutionInfo,
      Failure | Error,
      GetResourceConstraintsExecutionInfoQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseResourceConstraintExecutionInfo>
  export interface GetTriggerListForTargetQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    targetIdentifier: string
    filter?: string
    page?: number
    size?: number
    sort?: string[]
    searchTerm?: string
  }
  export type GetTriggerListForTargetProps = Omit<
    GetProps<ResponsePageNGTriggerDetailsResponse, Failure | Error, GetTriggerListForTargetQueryParams, void>,
    'path'
  >
  /**
   * Gets Triggers list for target
   */
  export const GetTriggerListForTarget: (props: GetTriggerListForTargetProps) => JSX.Element
  export type UseGetTriggerListForTargetProps = Omit<
    UseGetProps<ResponsePageNGTriggerDetailsResponse, Failure | Error, GetTriggerListForTargetQueryParams, void>,
    'path'
  >
  /**
   * Gets Triggers list for target
   */
  export const useGetTriggerListForTarget: (
    props: UseGetTriggerListForTargetProps
  ) => import('restful-react').UseGetReturn<
    ResponsePageNGTriggerDetailsResponse,
    Error | Failure,
    GetTriggerListForTargetQueryParams,
    unknown
  >
  /**
   * Gets Triggers list for target
   */
  export const getTriggerListForTargetPromise: (
    props: GetUsingFetchProps<
      ResponsePageNGTriggerDetailsResponse,
      Failure | Error,
      GetTriggerListForTargetQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponsePageNGTriggerDetailsResponse>
  export interface CreateTriggerQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    targetIdentifier: string
  }
  export type CreateTriggerProps = Omit<
    MutateProps<
      ResponseNGTriggerResponse,
      Failure | Error,
      CreateTriggerQueryParams,
      NGTriggerConfigV2RequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Trigger
   */
  export const CreateTrigger: (props: CreateTriggerProps) => JSX.Element
  export type UseCreateTriggerProps = Omit<
    UseMutateProps<
      ResponseNGTriggerResponse,
      Failure | Error,
      CreateTriggerQueryParams,
      NGTriggerConfigV2RequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * Create Trigger
   */
  export const useCreateTrigger: (
    props: UseCreateTriggerProps
  ) => import('restful-react').UseMutateReturn<
    ResponseNGTriggerResponse,
    Error | Failure,
    NGTriggerConfigV2,
    CreateTriggerQueryParams,
    void
  >
  /**
   * Create Trigger
   */
  export const createTriggerPromise: (
    props: MutateUsingFetchProps<
      ResponseNGTriggerResponse,
      Failure | Error,
      CreateTriggerQueryParams,
      NGTriggerConfigV2RequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseNGTriggerResponse>
  export type GenerateWebhookTokenProps = Omit<GetProps<RestResponseString, Failure | Error, void, void>, 'path'>
  /**
   * Regenerate webhook token
   */
  export const GenerateWebhookToken: (props: GenerateWebhookTokenProps) => JSX.Element
  export type UseGenerateWebhookTokenProps = Omit<UseGetProps<RestResponseString, Failure | Error, void, void>, 'path'>
  /**
   * Regenerate webhook token
   */
  export const useGenerateWebhookToken: (
    props: UseGenerateWebhookTokenProps
  ) => import('restful-react').UseGetReturn<RestResponseString, Error | Failure, void, unknown>
  /**
   * Regenerate webhook token
   */
  export const generateWebhookTokenPromise: (
    props: GetUsingFetchProps<RestResponseString, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<RestResponseString>
  export interface DeleteTriggerQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    targetIdentifier: string
  }
  export type DeleteTriggerProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, DeleteTriggerQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a trigger by identifier
   */
  export const DeleteTrigger: (props: DeleteTriggerProps) => JSX.Element
  export type UseDeleteTriggerProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, DeleteTriggerQueryParams, string, void>,
    'path' | 'verb'
  >
  /**
   * Delete a trigger by identifier
   */
  export const useDeleteTrigger: (
    props: UseDeleteTriggerProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, Error | Failure, string, DeleteTriggerQueryParams, void>
  /**
   * Delete a trigger by identifier
   */
  export const deleteTriggerPromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, DeleteTriggerQueryParams, string, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetTriggerQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    targetIdentifier: string
  }
  export interface GetTriggerPathParams {
    triggerIdentifier: string
  }
  export type GetTriggerProps = Omit<
    GetProps<ResponseNGTriggerResponse, Failure | Error, GetTriggerQueryParams, GetTriggerPathParams>,
    'path'
  > &
    GetTriggerPathParams
  /**
   * Gets a trigger by identifier
   */
  export const GetTrigger: ({ triggerIdentifier, ...props }: GetTriggerProps) => JSX.Element
  export type UseGetTriggerProps = Omit<
    UseGetProps<ResponseNGTriggerResponse, Failure | Error, GetTriggerQueryParams, GetTriggerPathParams>,
    'path'
  > &
    GetTriggerPathParams
  /**
   * Gets a trigger by identifier
   */
  export const useGetTrigger: ({
    triggerIdentifier,
    ...props
  }: UseGetTriggerProps) => import('restful-react').UseGetReturn<
    ResponseNGTriggerResponse,
    Error | Failure,
    GetTriggerQueryParams,
    unknown
  >
  /**
   * Gets a trigger by identifier
   */
  export const getTriggerPromise: (
    {
      triggerIdentifier,
      ...props
    }: GetUsingFetchProps<ResponseNGTriggerResponse, Error | Failure, GetTriggerQueryParams, GetTriggerPathParams> & {
      triggerIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseNGTriggerResponse>
  export interface UpdateTriggerQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    targetIdentifier: string
  }
  export interface UpdateTriggerPathParams {
    triggerIdentifier: string
  }
  export type UpdateTriggerProps = Omit<
    MutateProps<
      ResponseNGTriggerResponse,
      Failure | Error,
      UpdateTriggerQueryParams,
      NGTriggerConfigV2RequestBody,
      UpdateTriggerPathParams
    >,
    'path' | 'verb'
  > &
    UpdateTriggerPathParams
  /**
   * Update a trigger by identifier
   */
  export const UpdateTrigger: ({ triggerIdentifier, ...props }: UpdateTriggerProps) => JSX.Element
  export type UseUpdateTriggerProps = Omit<
    UseMutateProps<
      ResponseNGTriggerResponse,
      Failure | Error,
      UpdateTriggerQueryParams,
      NGTriggerConfigV2RequestBody,
      UpdateTriggerPathParams
    >,
    'path' | 'verb'
  > &
    UpdateTriggerPathParams
  /**
   * Update a trigger by identifier
   */
  export const useUpdateTrigger: ({
    triggerIdentifier,
    ...props
  }: UseUpdateTriggerProps) => import('restful-react').UseMutateReturn<
    ResponseNGTriggerResponse,
    Error | Failure,
    NGTriggerConfigV2,
    UpdateTriggerQueryParams,
    UpdateTriggerPathParams
  >
  /**
   * Update a trigger by identifier
   */
  export const updateTriggerPromise: (
    {
      triggerIdentifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseNGTriggerResponse,
      Error | Failure,
      UpdateTriggerQueryParams,
      NGTriggerConfigV2,
      UpdateTriggerPathParams
    > & {
      triggerIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseNGTriggerResponse>
  export interface GetTriggerDetailsQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    targetIdentifier: string
  }
  export interface GetTriggerDetailsPathParams {
    triggerIdentifier: string
  }
  export type GetTriggerDetailsProps = Omit<
    GetProps<
      ResponseNGTriggerDetailsResponse,
      Failure | Error,
      GetTriggerDetailsQueryParams,
      GetTriggerDetailsPathParams
    >,
    'path'
  > &
    GetTriggerDetailsPathParams
  /**
   * Gets Triggers list for target
   */
  export const GetTriggerDetails: ({ triggerIdentifier, ...props }: GetTriggerDetailsProps) => JSX.Element
  export type UseGetTriggerDetailsProps = Omit<
    UseGetProps<
      ResponseNGTriggerDetailsResponse,
      Failure | Error,
      GetTriggerDetailsQueryParams,
      GetTriggerDetailsPathParams
    >,
    'path'
  > &
    GetTriggerDetailsPathParams
  /**
   * Gets Triggers list for target
   */
  export const useGetTriggerDetails: ({
    triggerIdentifier,
    ...props
  }: UseGetTriggerDetailsProps) => import('restful-react').UseGetReturn<
    ResponseNGTriggerDetailsResponse,
    Error | Failure,
    GetTriggerDetailsQueryParams,
    unknown
  >
  /**
   * Gets Triggers list for target
   */
  export const getTriggerDetailsPromise: (
    {
      triggerIdentifier,
      ...props
    }: GetUsingFetchProps<
      ResponseNGTriggerDetailsResponse,
      Error | Failure,
      GetTriggerDetailsQueryParams,
      GetTriggerDetailsPathParams
    > & {
      triggerIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseNGTriggerDetailsResponse>
  export interface UpdateTriggerStatusQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    targetIdentifier: string
    status: boolean
  }
  export interface UpdateTriggerStatusPathParams {
    triggerIdentifier: string
  }
  export type UpdateTriggerStatusProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, UpdateTriggerStatusQueryParams, void, UpdateTriggerStatusPathParams>,
    'path' | 'verb'
  > &
    UpdateTriggerStatusPathParams
  /**
   * Update a trigger's status by identifier
   */
  export const UpdateTriggerStatus: ({ triggerIdentifier, ...props }: UpdateTriggerStatusProps) => JSX.Element
  export type UseUpdateTriggerStatusProps = Omit<
    UseMutateProps<
      ResponseBoolean,
      Failure | Error,
      UpdateTriggerStatusQueryParams,
      void,
      UpdateTriggerStatusPathParams
    >,
    'path' | 'verb'
  > &
    UpdateTriggerStatusPathParams
  /**
   * Update a trigger's status by identifier
   */
  export const useUpdateTriggerStatus: ({
    triggerIdentifier,
    ...props
  }: UseUpdateTriggerStatusProps) => import('restful-react').UseMutateReturn<
    ResponseBoolean,
    Error | Failure,
    void,
    UpdateTriggerStatusQueryParams,
    UpdateTriggerStatusPathParams
  >
  /**
   * Update a trigger's status by identifier
   */
  export const updateTriggerStatusPromise: (
    {
      triggerIdentifier,
      ...props
    }: MutateUsingFetchProps<
      ResponseBoolean,
      Error | Failure,
      UpdateTriggerStatusQueryParams,
      void,
      UpdateTriggerStatusPathParams
    > & {
      triggerIdentifier: string
    },
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
  export interface GetActionsListQueryParams {
    sourceRepo: 'GITHUB' | 'GITLAB' | 'BITBUCKET' | 'AWS_CODECOMMIT' | 'CUSTOM'
    event: string
  }
  export type GetActionsListProps = Omit<
    GetProps<ResponseListWebhookAction, Failure | Error, GetActionsListQueryParams, void>,
    'path'
  >
  /**
   * Get Actions for event type and source
   */
  export const GetActionsList: (props: GetActionsListProps) => JSX.Element
  export type UseGetActionsListProps = Omit<
    UseGetProps<ResponseListWebhookAction, Failure | Error, GetActionsListQueryParams, void>,
    'path'
  >
  /**
   * Get Actions for event type and source
   */
  export const useGetActionsList: (
    props: UseGetActionsListProps
  ) => import('restful-react').UseGetReturn<
    ResponseListWebhookAction,
    Error | Failure,
    GetActionsListQueryParams,
    unknown
  >
  /**
   * Get Actions for event type and source
   */
  export const getActionsListPromise: (
    props: GetUsingFetchProps<ResponseListWebhookAction, Failure | Error, GetActionsListQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListWebhookAction>
  export type GetBitbucketPRActionsProps = Omit<
    GetProps<ResponseListBitbucketPRAction, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const GetBitbucketPRActions: (props: GetBitbucketPRActionsProps) => JSX.Element
  export type UseGetBitbucketPRActionsProps = Omit<
    UseGetProps<ResponseListBitbucketPRAction, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const useGetBitbucketPRActions: (
    props: UseGetBitbucketPRActionsProps
  ) => import('restful-react').UseGetReturn<ResponseListBitbucketPRAction, Error | Failure, void, unknown>
  /**
   * Get Source Repo types with Events
   */
  export const getBitbucketPRActionsPromise: (
    props: GetUsingFetchProps<ResponseListBitbucketPRAction, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListBitbucketPRAction>
  export type GetBitbucketTriggerEventsProps = Omit<
    GetProps<ResponseListBitbucketTriggerEvent, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const GetBitbucketTriggerEvents: (props: GetBitbucketTriggerEventsProps) => JSX.Element
  export type UseGetBitbucketTriggerEventsProps = Omit<
    UseGetProps<ResponseListBitbucketTriggerEvent, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const useGetBitbucketTriggerEvents: (
    props: UseGetBitbucketTriggerEventsProps
  ) => import('restful-react').UseGetReturn<ResponseListBitbucketTriggerEvent, Error | Failure, void, unknown>
  /**
   * Get Source Repo types with Events
   */
  export const getBitbucketTriggerEventsPromise: (
    props: GetUsingFetchProps<ResponseListBitbucketTriggerEvent, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListBitbucketTriggerEvent>
  export interface CustomWebhookEndpointQueryParams {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    pipelineIdentifier?: string
    triggerIdentifier?: string
  }
  export type CustomWebhookEndpointProps = Omit<
    MutateProps<
      ResponseString,
      Failure | Error,
      CustomWebhookEndpointQueryParams,
      WebhookEndpointBodyRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * accept custom webhook event
   */
  export const CustomWebhookEndpoint: (props: CustomWebhookEndpointProps) => JSX.Element
  export type UseCustomWebhookEndpointProps = Omit<
    UseMutateProps<
      ResponseString,
      Failure | Error,
      CustomWebhookEndpointQueryParams,
      WebhookEndpointBodyRequestBody,
      void
    >,
    'path' | 'verb'
  >
  /**
   * accept custom webhook event
   */
  export const useCustomWebhookEndpoint: (
    props: UseCustomWebhookEndpointProps
  ) => import('restful-react').UseMutateReturn<
    ResponseString,
    Error | Failure,
    string,
    CustomWebhookEndpointQueryParams,
    void
  >
  /**
   * accept custom webhook event
   */
  export const customWebhookEndpointPromise: (
    props: MutateUsingFetchProps<
      ResponseString,
      Failure | Error,
      CustomWebhookEndpointQueryParams,
      WebhookEndpointBodyRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export type GetGitTriggerEventDetailsProps = Omit<
    GetProps<ResponseMapStringMapStringListString, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get trigger git actions with Events
   */
  export const GetGitTriggerEventDetails: (props: GetGitTriggerEventDetailsProps) => JSX.Element
  export type UseGetGitTriggerEventDetailsProps = Omit<
    UseGetProps<ResponseMapStringMapStringListString, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get trigger git actions with Events
   */
  export const useGetGitTriggerEventDetails: (
    props: UseGetGitTriggerEventDetailsProps
  ) => import('restful-react').UseGetReturn<ResponseMapStringMapStringListString, Error | Failure, void, unknown>
  /**
   * Get trigger git actions with Events
   */
  export const getGitTriggerEventDetailsPromise: (
    props: GetUsingFetchProps<ResponseMapStringMapStringListString, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseMapStringMapStringListString>
  export type GetGithubIssueCommentActionsProps = Omit<
    GetProps<ResponseListGithubIssueCommentAction, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const GetGithubIssueCommentActions: (props: GetGithubIssueCommentActionsProps) => JSX.Element
  export type UseGetGithubIssueCommentActionsProps = Omit<
    UseGetProps<ResponseListGithubIssueCommentAction, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const useGetGithubIssueCommentActions: (
    props: UseGetGithubIssueCommentActionsProps
  ) => import('restful-react').UseGetReturn<ResponseListGithubIssueCommentAction, Error | Failure, void, unknown>
  /**
   * Get Source Repo types with Events
   */
  export const getGithubIssueCommentActionsPromise: (
    props: GetUsingFetchProps<ResponseListGithubIssueCommentAction, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListGithubIssueCommentAction>
  export type GetGithubPRActionsProps = Omit<GetProps<ResponseListGithubPRAction, Failure | Error, void, void>, 'path'>
  /**
   * Get Source Repo types with Events
   */
  export const GetGithubPRActions: (props: GetGithubPRActionsProps) => JSX.Element
  export type UseGetGithubPRActionsProps = Omit<
    UseGetProps<ResponseListGithubPRAction, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const useGetGithubPRActions: (
    props: UseGetGithubPRActionsProps
  ) => import('restful-react').UseGetReturn<ResponseListGithubPRAction, Error | Failure, void, unknown>
  /**
   * Get Source Repo types with Events
   */
  export const getGithubPRActionsPromise: (
    props: GetUsingFetchProps<ResponseListGithubPRAction, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListGithubPRAction>
  export type GetGithubTriggerEventsProps = Omit<
    GetProps<ResponseListGithubTriggerEvent, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const GetGithubTriggerEvents: (props: GetGithubTriggerEventsProps) => JSX.Element
  export type UseGetGithubTriggerEventsProps = Omit<
    UseGetProps<ResponseListGithubTriggerEvent, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const useGetGithubTriggerEvents: (
    props: UseGetGithubTriggerEventsProps
  ) => import('restful-react').UseGetReturn<ResponseListGithubTriggerEvent, Error | Failure, void, unknown>
  /**
   * Get Source Repo types with Events
   */
  export const getGithubTriggerEventsPromise: (
    props: GetUsingFetchProps<ResponseListGithubTriggerEvent, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListGithubTriggerEvent>
  export type GetGitlabPRActionsProps = Omit<GetProps<ResponseListGitlabPRAction, Failure | Error, void, void>, 'path'>
  /**
   * Get Source Repo types with Events
   */
  export const GetGitlabPRActions: (props: GetGitlabPRActionsProps) => JSX.Element
  export type UseGetGitlabPRActionsProps = Omit<
    UseGetProps<ResponseListGitlabPRAction, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const useGetGitlabPRActions: (
    props: UseGetGitlabPRActionsProps
  ) => import('restful-react').UseGetReturn<ResponseListGitlabPRAction, Error | Failure, void, unknown>
  /**
   * Get Source Repo types with Events
   */
  export const getGitlabPRActionsPromise: (
    props: GetUsingFetchProps<ResponseListGitlabPRAction, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListGitlabPRAction>
  export type GetGitlabTriggerEventsProps = Omit<
    GetProps<ResponseListGitlabTriggerEvent, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const GetGitlabTriggerEvents: (props: GetGitlabTriggerEventsProps) => JSX.Element
  export type UseGetGitlabTriggerEventsProps = Omit<
    UseGetProps<ResponseListGitlabTriggerEvent, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const useGetGitlabTriggerEvents: (
    props: UseGetGitlabTriggerEventsProps
  ) => import('restful-react').UseGetReturn<ResponseListGitlabTriggerEvent, Error | Failure, void, unknown>
  /**
   * Get Source Repo types with Events
   */
  export const getGitlabTriggerEventsPromise: (
    props: GetUsingFetchProps<ResponseListGitlabTriggerEvent, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListGitlabTriggerEvent>
  export type GetSourceRepoToEventProps = Omit<
    GetProps<ResponseMapWebhookSourceRepoListWebhookEvent, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const GetSourceRepoToEvent: (props: GetSourceRepoToEventProps) => JSX.Element
  export type UseGetSourceRepoToEventProps = Omit<
    UseGetProps<ResponseMapWebhookSourceRepoListWebhookEvent, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const useGetSourceRepoToEvent: (
    props: UseGetSourceRepoToEventProps
  ) => import('restful-react').UseGetReturn<
    ResponseMapWebhookSourceRepoListWebhookEvent,
    Error | Failure,
    void,
    unknown
  >
  /**
   * Get Source Repo types with Events
   */
  export const getSourceRepoToEventPromise: (
    props: GetUsingFetchProps<ResponseMapWebhookSourceRepoListWebhookEvent, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseMapWebhookSourceRepoListWebhookEvent>
  export interface WebhookEndpointQueryParams {
    accountIdentifier: string
    orgIdentifier?: string
    projectIdentifier?: string
  }
  export type WebhookEndpointProps = Omit<
    MutateProps<ResponseString, Failure | Error, WebhookEndpointQueryParams, WebhookEndpointBodyRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * accept webhook event
   */
  export const WebhookEndpoint: (props: WebhookEndpointProps) => JSX.Element
  export type UseWebhookEndpointProps = Omit<
    UseMutateProps<ResponseString, Failure | Error, WebhookEndpointQueryParams, WebhookEndpointBodyRequestBody, void>,
    'path' | 'verb'
  >
  /**
   * accept webhook event
   */
  export const useWebhookEndpoint: (
    props: UseWebhookEndpointProps
  ) => import('restful-react').UseMutateReturn<
    ResponseString,
    Error | Failure,
    string,
    WebhookEndpointQueryParams,
    void
  >
  /**
   * accept webhook event
   */
  export const webhookEndpointPromise: (
    props: MutateUsingFetchProps<
      ResponseString,
      Failure | Error,
      WebhookEndpointQueryParams,
      WebhookEndpointBodyRequestBody,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseString>
  export interface TriggerProcessingDetailsQueryParams {
    accountIdentifier: string
    eventId: string
  }
  export type TriggerProcessingDetailsProps = Omit<
    GetProps<ResponseWebhookEventProcessingDetails, Failure | Error, TriggerProcessingDetailsQueryParams, void>,
    'path'
  >
  /**
   * fetch webhook event details
   */
  export const TriggerProcessingDetails: (props: TriggerProcessingDetailsProps) => JSX.Element
  export type UseTriggerProcessingDetailsProps = Omit<
    UseGetProps<ResponseWebhookEventProcessingDetails, Failure | Error, TriggerProcessingDetailsQueryParams, void>,
    'path'
  >
  /**
   * fetch webhook event details
   */
  export const useTriggerProcessingDetails: (
    props: UseTriggerProcessingDetailsProps
  ) => import('restful-react').UseGetReturn<
    ResponseWebhookEventProcessingDetails,
    Error | Failure,
    TriggerProcessingDetailsQueryParams,
    unknown
  >
  /**
   * fetch webhook event details
   */
  export const triggerProcessingDetailsPromise: (
    props: GetUsingFetchProps<
      ResponseWebhookEventProcessingDetails,
      Failure | Error,
      TriggerProcessingDetailsQueryParams,
      void
    >,
    signal?: RequestInit['signal']
  ) => Promise<ResponseWebhookEventProcessingDetails>
  export type GetWebhookTriggerTypesProps = Omit<
    GetProps<ResponseListWebhookTriggerType, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const GetWebhookTriggerTypes: (props: GetWebhookTriggerTypesProps) => JSX.Element
  export type UseGetWebhookTriggerTypesProps = Omit<
    UseGetProps<ResponseListWebhookTriggerType, Failure | Error, void, void>,
    'path'
  >
  /**
   * Get Source Repo types with Events
   */
  export const useGetWebhookTriggerTypes: (
    props: UseGetWebhookTriggerTypesProps
  ) => import('restful-react').UseGetReturn<ResponseListWebhookTriggerType, Error | Failure, void, unknown>
  /**
   * Get Source Repo types with Events
   */
  export const getWebhookTriggerTypesPromise: (
    props: GetUsingFetchProps<ResponseListWebhookTriggerType, Failure | Error, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseListWebhookTriggerType>
  export interface GetSchemaYamlQueryParams {
    entityType:
      | 'Projects'
      | 'Pipelines'
      | 'PipelineSteps'
      | 'Connectors'
      | 'Secrets'
      | 'Service'
      | 'Environment'
      | 'InputSets'
      | 'CvConfig'
      | 'Delegates'
      | 'DelegateConfigurations'
      | 'CvVerificationJob'
      | 'IntegrationStage'
      | 'IntegrationSteps'
      | 'CvKubernetesActivitySource'
      | 'DeploymentSteps'
      | 'DeploymentStage'
      | 'ApprovalStage'
      | 'FeatureFlagStage'
      | 'Template'
      | 'Triggers'
      | 'MonitoredService'
    projectIdentifier?: string
    orgIdentifier?: string
    scope?: 'account' | 'org' | 'project' | 'unknown'
    identifier?: string
    accountIdentifier?: string
  }
  export type GetSchemaYamlProps = Omit<
    GetProps<ResponseJsonNode, Failure | Error, GetSchemaYamlQueryParams, void>,
    'path'
  >
  /**
   * Get Yaml Schema
   */
  export const GetSchemaYaml: (props: GetSchemaYamlProps) => JSX.Element
  export type UseGetSchemaYamlProps = Omit<
    UseGetProps<ResponseJsonNode, Failure | Error, GetSchemaYamlQueryParams, void>,
    'path'
  >
  /**
   * Get Yaml Schema
   */
  export const useGetSchemaYaml: (
    props: UseGetSchemaYamlProps
  ) => import('restful-react').UseGetReturn<ResponseJsonNode, Error | Failure, GetSchemaYamlQueryParams, unknown>
  /**
   * Get Yaml Schema
   */
  export const getSchemaYamlPromise: (
    props: GetUsingFetchProps<ResponseJsonNode, Failure | Error, GetSchemaYamlQueryParams, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseJsonNode>
  export type InvalidateYamlSchemaCacheProps = Omit<
    MutateProps<ResponseBoolean, Failure | Error, void, void, void>,
    'path' | 'verb'
  >
  /**
   * Invalidate yaml schema cache
   */
  export const InvalidateYamlSchemaCache: (props: InvalidateYamlSchemaCacheProps) => JSX.Element
  export type UseInvalidateYamlSchemaCacheProps = Omit<
    UseMutateProps<ResponseBoolean, Failure | Error, void, void, void>,
    'path' | 'verb'
  >
  /**
   * Invalidate yaml schema cache
   */
  export const useInvalidateYamlSchemaCache: (
    props: UseInvalidateYamlSchemaCacheProps
  ) => import('restful-react').UseMutateReturn<ResponseBoolean, Error | Failure, void, void, void>
  /**
   * Invalidate yaml schema cache
   */
  export const invalidateYamlSchemaCachePromise: (
    props: MutateUsingFetchProps<ResponseBoolean, Failure | Error, void, void, void>,
    signal?: RequestInit['signal']
  ) => Promise<ResponseBoolean>
}
declare module 'modules/10-common/interfaces/RouteInterfaces' {
  import type { EntityGitDetails } from 'services/pipeline-ng/index'
  export interface AccountPathProps {
    accountId: string
  }
  export interface OrgPathProps extends AccountPathProps {
    orgIdentifier: string
  }
  export interface GitQueryParams {
    branch?: EntityGitDetails['branch']
    repoIdentifier?: EntityGitDetails['repoIdentifier']
  }
  export interface InputSetGitQueryParams extends GitQueryParams {
    inputSetBranch?: EntityGitDetails['branch']
    inputSetRepoIdentifier?: EntityGitDetails['repoIdentifier']
  }
  export interface PipelineStudioQueryParams extends GitQueryParams, RunPipelineQueryParams {
    stageId?: string
    stepId?: string
  }
  export interface RunPipelineQueryParams extends GitQueryParams, InputSetGitQueryParams {
    runPipeline?: boolean
    executionId?: string
    inputSetType?: string
    inputSetLabel?: string
    inputSetValue?: string
  }
  export interface ProjectPathProps extends OrgPathProps {
    projectIdentifier: string
    stageId?: string
    stepId?: string
  }
  export interface PipelinePathProps extends ProjectPathProps {
    pipelineIdentifier: string
  }
  export interface InputSetPathProps extends PipelinePathProps {
    inputSetIdentifier: string
  }
  export interface TriggerPathProps extends PipelinePathProps {
    triggerIdentifier: string
    triggerType?: string
    sourceRepo?: string
    artifactType?: string
    manifestType?: string
  }
  export interface ExecutionPathProps extends PipelinePathProps {
    executionIdentifier: string
  }
  export interface BuildPathProps extends ProjectPathProps {
    buildIdentifier: string
  }
  export interface ConnectorPathProps {
    connectorId: string
  }
  export interface VerificationPathProps {
    verificationId: string
  }
  export interface SecretsPathProps {
    secretId: string
  }
  export interface RolePathProps {
    roleIdentifier: string
  }
  export interface ResourceGroupPathProps {
    resourceGroupIdentifier: string
  }
  export interface DelegatePathProps {
    delegateIdentifier: string
  }
  export interface DelegateConfigProps {
    delegateConfigIdentifier: string
  }
  export interface FeatureFlagPathProps {
    featureFlagIdentifier: string
  }
  export interface SegmentPathProps {
    segmentIdentifier: string
  }
  export interface TargetPathProps {
    targetIdentifier: string
  }
  export interface EnvironmentPathProps {
    environmentIdentifier: string
  }
  export interface CVDataSourceTypePathProps {
    dataSourceType: string
  }
  export interface ServicePathProps {
    serviceId: string
  }
  export type Module =
    | 'ci'
    | 'cd'
    | 'cf'
    | 'cv'
    | 'ce'
    | ':module(ci)'
    | ':module(cd)'
    | ':module(cf)'
    | ':module'
    | ':module(cv)'
  export interface ModulePathParams {
    module: Module
  }
  export type ModuleHomeParams = {
    module: Module
    source?: string
  }
  export type PipelineType<T> = T & ModulePathParams
  export type PathFn<T> = (props: AccountPathProps & T) => string
  export interface ResourceGroupDetailsPathProps extends ProjectPathProps {
    resourceGroupIdentifier: string
  }
  export interface UserGroupPathProps {
    userGroupIdentifier: string
  }
  export interface UserPathProps {
    userIdentifier: string
  }
  export interface ServiceAccountPathProps {
    serviceAccountIdentifier: string
  }
  export interface ModuleCardPathParams {
    moduleCard?: Module
  }
}
declare module 'modules/10-common/featureFlags' {
  export enum FeatureFlag {
    CDNG_ENABLED = 'CDNG_ENABLED',
    CVNG_ENABLED = 'CVNG_ENABLED',
    CING_ENABLED = 'CING_ENABLED',
    CENG_ENABLED = 'CENG_ENABLED',
    CFNG_ENABLED = 'CFNG_ENABLED',
    NG_CG_TASK_ASSIGNMENT_ISOLATION = 'NG_CG_TASK_ASSIGNMENT_ISOLATION',
    NG_DASHBOARDS = 'NG_DASHBOARDS',
    CD_OVERVIEW_PAGE = 'CD_OVERVIEW_PAGE',
    CI_OVERVIEW_PAGE = 'CI_OVERVIEW_PAGE',
    TI_CALLGRAPH = 'TI_CALLGRAPH',
    NG_TEMPLATES = 'NG_TEMPLATES',
    CE_AS_KUBERNETES_ENABLED = 'CE_AS_KUBERNETES_ENABLED',
    GTM_CD_ENABLED = 'GTM_CD_ENABLED',
    NG_LICENSES_ENABLED = 'NG_LICENSES_ENABLED',
    PLANS_ENABLED = 'PLANS_ENABLED',
    ARGO_PHASE1 = 'ARGO_PHASE1'
  }
}
declare module 'framework/AppStore/AppStoreContext' {
  import React from 'react'
  import { Project, UserInfo, GitEnabledDTO } from 'services/cd-ng/index'
  import type { FeatureFlag } from 'modules/10-common/featureFlags'
  export type FeatureFlagMap = Partial<Record<FeatureFlag, boolean>>
  /**
   * Application Store - essential application-level states which are shareable
   * across Framework and Modules. These states are writeable within Frameworks.
   * Modules are allowed to read only.
   */
  export interface AppStoreContextProps {
    readonly selectedProject?: Project
    readonly isGitSyncEnabled?: boolean
    readonly connectivityMode?: GitEnabledDTO['connectivityMode']
    readonly currentUserInfo: UserInfo
    /** feature flags */
    readonly featureFlags: FeatureFlagMap
    updateAppStore(
      data: Partial<
        Pick<AppStoreContextProps, 'selectedProject' | 'isGitSyncEnabled' | 'connectivityMode' | 'currentUserInfo'>
      >
    ): void
  }
  export const AppStoreContext: React.Context<AppStoreContextProps>
  export function useAppStore(): AppStoreContextProps
  export function AppStoreProvider(props: React.PropsWithChildren<unknown>): React.ReactElement
}
declare module 'framework/types/ModuleName' {
  /** Harness Module Names */
  export enum ModuleName {
    CD = 'CD',
    CE = 'CE',
    CI = 'CI',
    CF = 'CF',
    CV = 'CV',
    DX = 'DX',
    COMMON = 'COMMON',
    FRAMEWORK = 'FRAMEWORK'
  }
}
declare module 'modules/10-common/hooks/useFeatureFlag' {
  import { FeatureFlagMap } from 'framework/AppStore/AppStoreContext'
  import type { FeatureFlag } from 'modules/10-common/featureFlags'
  /**
   * Usage if you need a single flag:
   *
   * const enabled = useFeatureFlag("FLAG_NAME")
   *
   * OR, if you need multiple flags:
   *
   * const { FLAG_NAME_1, FLAG_NAME_2 } = useFeatureFlags()
   *
   */
  export function useFeatureFlag(flag: FeatureFlag): boolean
  export function useFeatureFlags(): FeatureFlagMap
}
declare module 'modules/10-common/hooks/useQueryParams' {
  import type { IParseOptions } from 'qs'
  export interface UseQueryParamsOptions<T> extends IParseOptions {
    processQueryParams?(data: any): T
  }
  export function useQueryParams<T = unknown>(options?: UseQueryParamsOptions<T>): T
}
declare module 'modules/10-common/hooks/useUpdateQueryParams' {
  import type { IStringifyOptions } from 'qs'
  export interface UseUpdateQueryParamsReturn<T> {
    updateQueryParams(values: T, options?: IStringifyOptions, replaceHistory?: boolean): void
    replaceQueryParams(values: T, options?: IStringifyOptions, replaceHistory?: boolean): void
  }
  export function useUpdateQueryParams<T = Record<string, string>>(): UseUpdateQueryParamsReturn<T>
}
declare module 'modules/10-common/hooks/useLocalStorage' {
  import type { Dispatch, SetStateAction } from 'react'
  export function isFunction(arg: unknown): arg is Function
  export function useLocalStorage<T>(key: string, initalValue: T): [T, Dispatch<SetStateAction<T>>]
}
declare module 'modules/10-common/hooks/useDeepCompareEffect' {
  /**
   * Based on https://github.com/contiamo/restful-react/blob/7aa3d75694f919d0317981a128b139abe163e08e/src/util/useDeepCompareEffect.ts
   */
  import React from 'react'
  /**
   * Accepts a function that contains imperative, possibly effectful code.
   *
   * This is the deepCompare version of the `React.useEffect` hooks (that is shallowed compare)
   *
   * @param effect Imperative function that can return a cleanup function
   * @param deps If present, effect will only activate if the values in the list change.
   *
   * @see https://gist.github.com/kentcdodds/fb8540a05c43faf636dd68647747b074#gistcomment-2830503
   */
  export function useDeepCompareEffect(effect: React.EffectCallback, deps: React.DependencyList): void
}
declare module 'modules/10-common/utils/errorUtils' {
  export function shouldShowError(e: any): boolean
  export function getErrorInfoFromErrorObject(error: Record<string, any>): string
}
declare module 'modules/10-common/hooks/useMutateAsGet' {
  import type { UseMutateProps, UseMutateReturn, GetDataError } from 'restful-react'
  import type { DebounceSettings } from 'lodash'
  export type WrappedUseMutateProps<TData, TError, TQueryParams, TRequestBody, TPathParams> = Omit<
    UseMutateProps<TData, TError, TQueryParams, TRequestBody, TPathParams>,
    'path' | 'verb'
  > & {
    lazy?: boolean
    body: TRequestBody
    debounce?:
      | {
          wait?: number
          options: DebounceSettings
        }
      | boolean
      | number
  } & any
  type UseMutateWrapper<TData, TError, TQueryParams, TRequestBody, TPathParams> = (
    props: WrappedUseMutateProps<TData, TError, TQueryParams, TRequestBody, TPathParams>
  ) => UseMutateReturn<TData, TError, TRequestBody, TQueryParams, TPathParams>
  export interface UseMutateAsGetReturn<
    TData = any,
    TError = any,
    TQueryParams = {
      [key: string]: any
    },
    TRequestBody = any,
    TPathParams = unknown
  > {
    data: TData | null
    initLoading: boolean
    loading: boolean
    error: GetDataError<TError> | null
    cancel(): void
    refetch(
      props?: WrappedUseMutateProps<TData, TError, TRequestBody, TQueryParams, TPathParams>
    ): Promise<void> | undefined
  }
  export function useMutateAsGet<
    TData = any,
    TError = any,
    TQueryParams = {
      [key: string]: any
    },
    TRequestBody = any,
    TPathParams = unknown
  >(
    useMutateWrapper: UseMutateWrapper<TData, TError, TRequestBody, TQueryParams, TPathParams>,
    props: WrappedUseMutateProps<TData, TError, TRequestBody, TQueryParams, TPathParams>
  ): UseMutateAsGetReturn<TData, TError, TQueryParams, TRequestBody, TPathParams>
}
declare module 'modules/10-common/modals/ConfirmDialog/useConfirmationDialog' {
  import React from 'react'
  import { Intent } from '@blueprintjs/core'
  import { ButtonProps } from '@wings-software/uicore'
  export interface UseConfirmationDialogProps {
    titleText: string | React.ReactElement
    contentText: string | JSX.Element
    cancelButtonText: string | React.ReactElement
    intent?: Intent
    buttonIntent?: ButtonProps['intent']
    confirmButtonText?: string | React.ReactElement
    onCloseDialog?: (isConfirmed: boolean) => void
    customButtons?: React.ReactNode
  }
  export interface UseConfirmationDialogReturn {
    openDialog: () => void
  }
  export const useConfirmationDialog: (props: UseConfirmationDialogProps) => UseConfirmationDialogReturn
}
declare module 'modules/10-common/hooks/useConfirmAction' {
  import { Intent } from '@blueprintjs/core'
  export interface UseConfirmActionDialogProps {
    message: React.ReactElement
    intent?: Intent
    title?: string
    confirmText?: string
    cancelText?: string
    action: () => void
  }
  export const useConfirmAction: (props: UseConfirmActionDialogProps) => () => void
}
declare module 'modules/10-common/hooks/useGlobalEventListener' {
  export type EventHandler<K extends keyof WindowEventMap> = (ev: WindowEventMap[K]) => void
  export function useGlobalEventListener<K extends keyof WindowEventMap>(
    type: K,
    handler: EventHandler<K>,
    options?: AddEventListenerOptions
  ): void
}
declare module 'modules/10-common/hooks/useBooleanStatus' {
  export interface UseBooleanStatusReturn {
    state: boolean
    toggle(): void
    open(): void
    close(): void
  }
  export function useBooleanStatus(init?: boolean): UseBooleanStatusReturn
}
declare module 'modules/10-common/hooks/useGraphQLQuery' {
  import { UseMutateProps } from 'restful-react'
  import type { DebounceSettings } from 'lodash'
  import { UseMutateAsGetReturn } from 'modules/10-common/hooks/useMutateAsGet'
  type UseGraphQLQueryProps<TData, TError, TQueryParams, TRequestBody, TPathParams> = Omit<
    UseMutateProps<TData, TError, TQueryParams, TRequestBody, TPathParams>,
    'verb'
  > & {
    lazy?: boolean
    body: TRequestBody
    debounce?:
      | {
          wait?: number
          options: DebounceSettings
        }
      | boolean
      | number
  }
  export function useGraphQLQuery<
    TData = any,
    TError = any,
    TQueryParams = {
      [key: string]: any
    },
    TRequestBody = any,
    TPathParams = unknown
  >(
    props: UseGraphQLQueryProps<TData, TError, TQueryParams, TRequestBody, TPathParams>
  ): UseMutateAsGetReturn<TData, TError, TRequestBody, TQueryParams, TPathParams>
}
declare module 'modules/10-common/hooks/index' {
  export { useQueryParams } from 'modules/10-common/hooks/useQueryParams'
  export { useUpdateQueryParams } from 'modules/10-common/hooks/useUpdateQueryParams'
  export type { UseUpdateQueryParamsReturn } from 'modules/10-common/hooks/useUpdateQueryParams'
  export { useLocalStorage } from 'modules/10-common/hooks/useLocalStorage'
  export { useDeepCompareEffect } from 'modules/10-common/hooks/useDeepCompareEffect'
  export { useMutateAsGet } from 'modules/10-common/hooks/useMutateAsGet'
  export { useConfirmAction } from 'modules/10-common/hooks/useConfirmAction'
  export { useGlobalEventListener } from 'modules/10-common/hooks/useGlobalEventListener'
  export { useBooleanStatus } from 'modules/10-common/hooks/useBooleanStatus'
  export type { UseBooleanStatusReturn } from 'modules/10-common/hooks/useBooleanStatus'
  export { useGraphQLQuery } from 'modules/10-common/hooks/useGraphQLQuery'
}
declare module 'modules/10-common/utils/routeUtils' {
  import type {
    AccountPathProps,
    OrgPathProps,
    ProjectPathProps,
    PipelinePathProps,
    TriggerPathProps,
    ExecutionPathProps,
    ConnectorPathProps,
    SecretsPathProps,
    PipelineType,
    FeatureFlagPathProps,
    SegmentPathProps,
    CVDataSourceTypePathProps,
    BuildPathProps,
    EnvironmentPathProps,
    DelegatePathProps,
    DelegateConfigProps,
    InputSetPathProps,
    VerificationPathProps,
    TargetPathProps,
    ModulePathParams,
    RolePathProps,
    ResourceGroupPathProps,
    UserGroupPathProps,
    UserPathProps,
    ServiceAccountPathProps,
    ServicePathProps
  } from 'modules/10-common/interfaces/RouteInterfaces'
  export const accountPathProps: AccountPathProps
  export const orgPathProps: OrgPathProps
  export const projectPathProps: ProjectPathProps
  export const pipelinePathProps: PipelinePathProps
  export const inputSetFormPathProps: InputSetPathProps
  export const triggerPathProps: TriggerPathProps
  export const executionPathProps: ExecutionPathProps
  export const connectorPathProps: ConnectorPathProps
  export const verificationPathProps: VerificationPathProps
  export const secretPathProps: SecretsPathProps
  export const rolePathProps: RolePathProps
  export const userGroupPathProps: UserGroupPathProps
  export const userPathProps: UserPathProps
  export const serviceAccountProps: ServiceAccountPathProps
  export const resourceGroupPathProps: ResourceGroupPathProps
  export const delegatePathProps: DelegatePathProps
  export const delegateConfigProps: DelegateConfigProps
  export const modulePathProps: ModulePathParams
  export const pipelineModuleParams: Record<keyof PipelineType<unknown>, 'ci' | 'cd' | 'cf' | ':module'>
  export const featureFlagPathProps: FeatureFlagPathProps
  export const cvDataSourceTypePathProps: CVDataSourceTypePathProps
  export const buildPathProps: BuildPathProps
  export const environmentPathProps: EnvironmentPathProps
  export const segmentPathProps: SegmentPathProps
  export const targetPathProps: TargetPathProps
  export const servicePathProps: ServicePathProps
  export function withAccountId<T>(fn: (args: T) => string): (
    params: T & {
      accountId: string
    }
  ) => string
  export function withOrgIdentifier<T>(fn: (args: T) => string): (
    params: T & {
      orgIdentifier: string
    }
  ) => string
  export function withProjectIdentifier<T>(fn: (args: T) => string): (
    params: T & {
      projectIdentifier: string
    }
  ) => string
  export const getScopeBasedRoute: ({
    scope: { orgIdentifier, projectIdentifier, module },
    path
  }: {
    scope: Partial<ProjectPathProps & ModulePathParams>
    path: string
  }) => string
  export const returnUrlParams: (url: string) => string
  export const validateReturnUrl: (url: string) => boolean
  export const returnLaunchUrl: (url: string) => string
}
declare module 'modules/10-common/RouteDefinitions' {
  import type {
    OrgPathProps,
    ConnectorPathProps,
    SecretsPathProps,
    DelegatePathProps,
    DelegateConfigProps,
    ProjectPathProps,
    PipelinePathProps,
    TriggerPathProps,
    ExecutionPathProps,
    FeatureFlagPathProps,
    BuildPathProps,
    CVDataSourceTypePathProps,
    EnvironmentPathProps,
    AccountPathProps,
    SegmentPathProps,
    InputSetPathProps,
    TargetPathProps,
    ModulePathParams,
    RolePathProps,
    ResourceGroupPathProps,
    UserGroupPathProps,
    UserPathProps,
    PipelineStudioQueryParams,
    RunPipelineQueryParams,
    GitQueryParams,
    ModuleHomeParams,
    InputSetGitQueryParams,
    ModuleCardPathParams,
    ServiceAccountPathProps,
    ServicePathProps
  } from 'modules/10-common/interfaces/RouteInterfaces'
  const routes: {
    toHome: (params: { accountId: string }) => string
    toGenericError: (params: { accountId: string }) => string
    toSetup: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toUser: (params: { accountId: string }) => string
    toSubscriptions: (
      params: ModuleCardPathParams & {
        accountId: string
      }
    ) => string
    toAccountSettings: (params: { accountId: string }) => string
    toAccountSettingsOverview: (params: { accountId: string }) => string
    toAuthenticationSettings: (params: { accountId: string }) => string
    toAccountConfiguration: (params: { accountId: string }) => string
    toAccountActivityLog: (params: { accountId: string }) => string
    toLogin: () => string
    toRedirect: () => string
    toSignup: () => string
    toPurpose: (params: { accountId: string }) => string
    toUserProfile: (params: { accountId: string }) => string
    toUserPreferences: (params: { accountId: string }) => string
    toCreateConnectorFromYaml: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toAccountResources: (params: { accountId: string }) => string
    toConnectors: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toConnectorDetails: (
      params: Partial<ProjectPathProps & ModulePathParams & ConnectorPathProps> & {
        accountId: string
      }
    ) => string
    toSecrets: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toSecretDetails: (
      params: Partial<ProjectPathProps & ModulePathParams & SecretsPathProps> & {
        accountId: string
      }
    ) => string
    toDelegates: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toDelegatesDetails: (
      params: Partial<ProjectPathProps & ModulePathParams & DelegatePathProps> & {
        accountId: string
      }
    ) => string
    toDelegateConfigsDetails: (
      params: Partial<ProjectPathProps & ModulePathParams & DelegateConfigProps> & {
        accountId: string
      }
    ) => string
    toEditDelegateConfigsDetails: (
      params: Partial<ProjectPathProps & ModulePathParams & DelegateConfigProps> & {
        accountId: string
      }
    ) => string
    toAccessControl: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toServiceAccounts: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toServiceAccountDetails: (
      params: Partial<ProjectPathProps & ModulePathParams & ServiceAccountPathProps> & {
        accountId: string
      }
    ) => string
    toUsers: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toUserDetails: (
      params: Partial<ProjectPathProps & ModulePathParams & UserPathProps> & {
        accountId: string
      }
    ) => string
    toUserGroups: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toUserGroupDetails: (
      params: Partial<ProjectPathProps & ModulePathParams & UserGroupPathProps> & {
        accountId: string
      }
    ) => string
    toResourceGroups: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toRoles: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toRoleDetails: (
      params: Partial<ProjectPathProps & ModulePathParams & RolePathProps> & {
        accountId: string
      }
    ) => string
    toResourceGroupDetails: (
      params: Partial<ProjectPathProps & ModulePathParams & ResourceGroupPathProps> & {
        accountId: string
      }
    ) => string
    toOrganizations: (params: { accountId: string }) => string
    toOrganizationDetails: (
      params: OrgPathProps & {
        accountId: string
      }
    ) => string
    toGovernance: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toCreateSecretFromYaml: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toSecretDetailsOverview: (
      params: Partial<ProjectPathProps & ModulePathParams & SecretsPathProps> & {
        accountId: string
      }
    ) => string
    toSecretDetailsReferences: (
      params: Partial<ProjectPathProps & ModulePathParams & SecretsPathProps> & {
        accountId: string
      }
    ) => string
    /********************************************************************************************************************/
    toCD: (params: { accountId: string }) => string
    toCDDashboard: (params: { accountId: string }) => string
    toModuleHome: (
      params: ModuleHomeParams & {
        accountId: string
      }
    ) => string
    toModuleTrialHome: (
      params: ModulePathParams & {
        accountId: string
      }
    ) => string
    toCDHome: (params: { accountId: string }) => string
    toCDProject: (
      params: ProjectPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toProjectOverview: (
      params: ProjectPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toDeployments: (
      params: ProjectPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toPipelineStudio: (
      params: PipelinePathProps &
        ModulePathParams &
        PipelineStudioQueryParams &
        RunPipelineQueryParams & {
          accountId: string
        }
    ) => string
    toPipelines: (
      params: ProjectPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toGitOps: (
      params: ProjectPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toServices: (
      params: ProjectPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toServiceDetails: (
      params: ProjectPathProps &
        ServicePathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toPipelineDetail: (
      params: PipelinePathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toInputSetList: (
      params: PipelinePathProps &
        ModulePathParams &
        GitQueryParams & {
          accountId: string
        }
    ) => string
    toInputSetForm: (
      params: InputSetPathProps &
        ModulePathParams &
        InputSetGitQueryParams & {
          accountId: string
        }
    ) => string
    toTriggersPage: (
      params: PipelinePathProps &
        ModulePathParams &
        GitQueryParams & {
          accountId: string
        }
    ) => string
    toTriggersWizardPage: (
      params: TriggerPathProps &
        ModulePathParams &
        GitQueryParams & {
          accountId: string
        }
    ) => string
    toPipelineDeploymentList: (
      params: PipelinePathProps &
        ModulePathParams &
        GitQueryParams & {
          accountId: string
        }
    ) => string
    toTriggersDetailPage: (
      params: TriggerPathProps &
        ModulePathParams &
        GitQueryParams & {
          accountId: string
        }
    ) => string
    toExecution: (
      params: ExecutionPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toExecutionPipelineView: (
      params: ExecutionPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toExecutionInputsView: (
      params: ExecutionPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toExecutionArtifactsView: (
      params: ExecutionPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toExecutionTestsView: (
      params: ExecutionPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toExecutionCommitsView: (
      params: ExecutionPathProps &
        ModulePathParams & {
          accountId: string
        }
    ) => string
    toCDTemplateLibrary: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCDGeneralSettings: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    /********************************************************************************************************************/
    toTemplatesListing: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    /********************************************************************************************************************/
    toCI: (params: { accountId: string }) => string
    toCIHome: (params: { accountId: string }) => string
    toCIProject: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCIPipelineDeploymentList: (
      params: PipelinePathProps & {
        accountId: string
      }
    ) => string
    toCIBuilds: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCIBuildPipelineGraph: (
      params: BuildPathProps & {
        accountId: string
      }
    ) => string
    toCIBuildPipelineLog: (
      params: BuildPathProps & {
        accountId: string
      }
    ) => string
    toCIBuildInputs: (
      params: BuildPathProps & {
        accountId: string
      }
    ) => string
    toCIBuildCommits: (
      params: BuildPathProps & {
        accountId: string
      }
    ) => string
    toCIBuildTests: (
      params: BuildPathProps & {
        accountId: string
      }
    ) => string
    toCIBuildArtifacts: (
      params: BuildPathProps & {
        accountId: string
      }
    ) => string
    toCIBuild: (
      params: BuildPathProps & {
        accountId: string
      }
    ) => string
    toCIAdmin: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCIAdminBuildSettings: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCIAdminGovernance: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toGitSyncAdmin: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toGitSyncReposAdmin: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    toGitSyncEntitiesAdmin: (
      params: Partial<ProjectPathProps & ModulePathParams> & {
        accountId: string
      }
    ) => string
    /********************************************************************************************************************/
    toCF: (params: Partial<ProjectPathProps>) => string
    toCFDashboard: (params: { accountId: string }) => string
    toCFHome: (params: { accountId: string }) => string
    toCFProject: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFProjectOverview: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFFeatureFlags: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFFeatureFlagsDetail: (
      params: ProjectPathProps &
        FeatureFlagPathProps & {
          accountId: string
        }
    ) => string
    toCFTargetManagement: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFSegments: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFTargets: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFSegmentDetails: (
      params: ProjectPathProps &
        SegmentPathProps & {
          accountId: string
        }
    ) => string
    toCFTargetDetails: (
      params: ProjectPathProps &
        TargetPathProps & {
          accountId: string
        }
    ) => string
    toCFEnvironments: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFEnvironmentDetails: (
      params: ProjectPathProps &
        EnvironmentPathProps & {
          accountId: string
        }
    ) => string
    toCFWorkflows: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFAdmin: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFAdminGovernance: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFOnboarding: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCFOnboardingDetail: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    /********************************************************************************************************************/
    toCV: (params: Partial<ProjectPathProps>) => string
    toCVDashboard: (params: { accountId: string }) => string
    toCVHome: (params: { accountId: string }) => string
    toCVProject: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVProjectOverview: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVDeploymentPage: (
      params: Partial<
        ProjectPathProps & {
          activityId: string
        }
      > &
        Record<'serviceIdentifier' | 'deploymentTag', string> & {
          accountId: string
        }
    ) => string
    toCVActivityChangesPage: (
      params: Partial<
        ProjectPathProps & {
          activityId: string
        }
      > & {
        accountId: string
      }
    ) => string
    toCVDataSources: (
      params: Partial<ProjectPathProps> & {
        accountId: string
      }
    ) => string
    toCVServices: (
      params: Partial<ProjectPathProps> & {
        accountId: string
      }
    ) => string
    toCVMonitoringServices: (
      params: Partial<
        ProjectPathProps & {
          module?: string | undefined
        }
      > & {
        accountId: string
      }
    ) => string
    toCVAddMonitoringServicesSetup: (
      params: Partial<
        ProjectPathProps & {
          identifier: string
        }
      > & {
        accountId: string
      }
    ) => string
    toCVAddMonitoringServicesEdit: (
      params: Partial<
        ProjectPathProps & {
          identifier: string
          module: string
        }
      > & {
        accountId: string
      }
    ) => string
    toCVOnBoardingSetup: (
      params: Partial<ProjectPathProps & CVDataSourceTypePathProps> & {
        accountId: string
      }
    ) => string
    toCVActivitySourceSetup: (
      params: Partial<
        ProjectPathProps & {
          activitySource?: string | undefined
        }
      > & {
        accountId: string
      }
    ) => string
    toCVActivitySourceEditSetup: (
      params: Partial<
        ProjectPathProps & {
          activitySource?: string | undefined
          activitySourceId: string
        }
      > & {
        accountId: string
      }
    ) => string
    toCVActivityDashboard: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVAdminActivitySources: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVAdminMonitoringSources: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVAdminVerificationJobs: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVActivityDetails: (
      params: ProjectPathProps & {
        activityType: string
      } & {
        accountId: string
      }
    ) => string
    toCVAdminGeneralSettings: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVAdminGovernance: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVAdminSetup: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVAdminSetupMonitoringSource: (
      params: ProjectPathProps & {
        monitoringSource: string
      } & {
        accountId: string
      }
    ) => string
    toCVAdmin: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVAdminSetupMonitoringSourceEdit: (
      params: ProjectPathProps & {
        monitoringSource: string
        identifier: string
      } & {
        accountId: string
      }
    ) => string
    toCVAdminSetupVerificationJob: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVAdminSetupVerificationJobEdit: (
      params: ProjectPathProps & {
        verificationId: string
      } & {
        accountId: string
      }
    ) => string
    toCVAdminAccessControl: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toCVAdminNotifications: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    /********************************************************************************************************************/
    toProjectDetails: (
      params: ProjectPathProps & {
        accountId: string
      }
    ) => string
    toProjects: (params: { accountId: string }) => string
    toGetStarted: (params: { accountId: string }) => string
    /********************************************************************************************************************/
    toCE: (params: Partial<ProjectPathProps>) => string
    toCEDashboard: (params: { accountId: string }) => string
    toCEHome: (params: { accountId: string }) => string
    toCEProjectOverview: (params: { accountId: string }) => string
    toCECODashboard: (params: { accountId: string }) => string
    toCECOCreateGateway: (params: { accountId: string }) => string
    toCECOEditGateway: (
      params: {
        gatewayIdentifier: string
      } & {
        accountId: string
      }
    ) => string
    toCECOAccessPoints: (params: { accountId: string }) => string
    toCECORules: (params: { accountId: string }) => string
    toCERecommendations: (params: { accountId: string }) => string
    toCERecommendationDetails: (
      params: {
        recommendation: string
        recommendationName: string
      } & {
        accountId: string
      }
    ) => string
    toCENodeRecommendationDetails: (
      params: {
        recommendation: string
        recommendationName: string
      } & {
        accountId: string
      }
    ) => string
    toCERecommendationWorkloadDetails: (
      params: {
        recommendation: string
        workloadName: string
        clusterName: string
        namespace: string
        recommendationName: string
      } & {
        accountId: string
      }
    ) => string
    toPerspectiveDetails: (
      params: AccountPathProps & {
        perspectiveId: string
        perspectiveName: string
      } & {
        accountId: string
      }
    ) => string
    toCECreatePerspective: (
      params: AccountPathProps & {
        perspectiveId: string
      } & {
        accountId: string
      }
    ) => string
    toCEPerspectives: (params: { accountId: string }) => string
    toCEBudgets: (params: { accountId: string }) => string
    toCEPerspectiveWorkloadDetails: (
      params: AccountPathProps & {
        perspectiveId: string
        perspectiveName: string
        clusterName: string
        namespace: string
        workloadName: string
      } & {
        accountId: string
      }
    ) => string
    toCEOverview: (params: { accountId: string }) => string
    toCEPerspectiveDashboard: (params: { accountId: string }) => string
    /********************************************************************************************************************/
    toCustomDashboard: (params: { accountId: string }) => string
    toCustomDashboardHome: (
      params: {
        folderId?: string | undefined
      } & {
        accountId: string
      }
    ) => string
    toViewCustomDashboard: (
      params: {
        viewId: string
        folderId: string
      } & {
        accountId: string
      }
    ) => string
    toCustomFolderHome: (params: { accountId: string }) => string
    toViewCustomFolder: (
      params: {
        viewId: string
      } & {
        accountId: string
      }
    ) => string
  }
  export default routes
}
declare module 'modules/10-common/pages/GenericError/GenericErrorPage' {
  import React from 'react'
  export enum GENERIC_ERROR_CODES {
    INVITE_EXPIRED = 'INVITE_EXPIRED',
    UNAUTHORIZED = 'UNAUTHORIZED'
  }
  interface GenericErrorPageProps {
    code?: GENERIC_ERROR_CODES
    message?: string
  }
  const GenericErrorPage: React.FC<GenericErrorPageProps>
  export default GenericErrorPage
}
declare module 'framework/LicenseStore/LicenseStoreContext' {
  import React from 'react'
  import type { Module } from 'modules/10-common/interfaces/RouteInterfaces'
  import { AccountLicenseDTO, ModuleLicenseDTO } from 'services/cd-ng/index'
  export enum LICENSE_STATE_VALUES {
    ACTIVE = 'ACTIVE',
    DELETED = 'DELETED',
    EXPIRED = 'EXPIRED',
    NOT_STARTED = 'NOT_STARTED'
  }
  export interface LicenseStoreContextProps {
    readonly licenseInformation: AccountLicenseDTO['moduleLicenses'] | Record<string, undefined>
    readonly CI_LICENSE_STATE: LICENSE_STATE_VALUES
    readonly FF_LICENSE_STATE: LICENSE_STATE_VALUES
    readonly CCM_LICENSE_STATE: LICENSE_STATE_VALUES
    readonly CD_LICENSE_STATE: LICENSE_STATE_VALUES
    updateLicenseStore(data: Partial<Pick<LicenseStoreContextProps, 'licenseInformation'>>): void
  }
  export interface LicenseRedirectProps {
    licenseStateName: keyof Omit<LicenseStoreContextProps, 'licenseInformation' | 'updateLicenseStore'>
    startTrialRedirect: () => React.ReactElement
    expiredTrialRedirect: () => React.ReactElement
  }
  type licenseStateNames = keyof Omit<LicenseStoreContextProps, 'licenseInformation' | 'updateLicenseStore'>
  export const LICENSE_STATE_NAMES: {
    [T in licenseStateNames]: T
  }
  export const LicenseStoreContext: React.Context<LicenseStoreContextProps>
  export function useLicenseStore(): LicenseStoreContextProps
  export function LicenseStoreProvider(props: React.PropsWithChildren<unknown>): React.ReactElement
  export function handleUpdateLicenseStore(
    newLicenseInformation: Record<string, ModuleLicenseDTO> | Record<string, undefined>,
    updateLicenseStore: (data: Partial<Pick<LicenseStoreContextProps, 'licenseInformation'>>) => void,
    module: Module,
    data?: ModuleLicenseDTO
  ): void
}
declare module 'microfrontends/MicrofrontendTypes' {
  import type { PermissionsContextProps } from 'framework/rbac/PermissionsContext'
  import type { LicenseStoreContextProps } from 'framework/LicenseStore/LicenseStoreContext'
  import type { AppStoreContextProps } from 'framework/AppStore/AppStoreContext'
  /**Context names used in parent
   *
   */
  export enum CONTEXT_NAMES {
    APPSTORE = 'APPSTORE',
    PERMISSIONS = 'PERMISSIONS',
    LICENSE = 'LICENSE'
  }
  export type SomeMap<T extends CONTEXT_NAMES> = T extends CONTEXT_NAMES.APPSTORE
    ? AppStoreContextProps
    : T extends CONTEXT_NAMES.LICENSE
    ? LicenseStoreContextProps
    : unknown
  /**
   * Parent contexts which consists of all the context used in the parent app
   */
  export interface ParentContext {
    appStoreContext: React.Context<AppStoreContextProps>
    permissionsContext: React.Context<PermissionsContextProps>
    licenseStoreProvider: React.Context<LicenseStoreContextProps>
  }
  export interface ParentContextProps {
    appStoreContext: AppStoreContextProps
    permissionsContext: PermissionsContextProps
    licenseStoreProvider: LicenseStoreContextProps
  }
  /**ParentContext Object which has parentcontext's and function which can be used by
   *  child to update the parent contexts
   *
   */
  export interface ParentContextObj {
    parentContext: ParentContext
  }
  /** CommonComponents which is exposed by parent app and can be used in child app */
  export interface RenderChildAppProps {
    parentContextObj: ParentContextObj
    renderUrl: string
  }
  /**
   *
   */
  export type RenderChildApp = (params: RenderChildAppProps) => React.Component
}
